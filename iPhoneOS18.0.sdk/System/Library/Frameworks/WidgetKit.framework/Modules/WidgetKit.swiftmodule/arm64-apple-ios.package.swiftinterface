// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.3.38 clang-1600.0.20.6)
// swift-module-flags: -target arm64-apple-ios18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature FreestandingMacros -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -user-module-version 499.101 -module-name WidgetKit -package-name com.apple.chrono.internal
@_spi(LiveActivities_tvOS) @_spi(LiveActivities_Watch) @_spi(Private) @_spi(Internal) @_spi(ProposedAPI) import ActivityKit
@_spi(_) @_spi(AppleInternal) @_spi(ProposedAPI) import AppIntents
@_spiOnly import BaseBoard
package import BoardServices
@_spiOnly @_spi(Internal) import ChronoServices
@_spiOnly import Combine
@_spiOnly import CoreServices_Private
@_exported @_spi(Private) @_spi(Widget) @_spi(Ultraviolet) @_spi(SSC) @_spi(Previews) @_spi(Jindo) @_spi(DoNotImportVariadicView) import DeveloperToolsSupport
import Foundation
import Intents
package import LinkServices
@_spi(Internal) package import ReplicatorEngine
import Swift
@_spi(Private) @_spi(Widget) @_spi(Ultraviolet) @_spi(SSC) @_spi(Jindo) @_spi(DoNotImportVariadicView) import SwiftUI
@_exported import WidgetKit
import _AppIntents_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_spiOnly import os
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
final public class WidgetViewCollection : Foundation.ObservableObject, WidgetKit.ArchivableTimelineViewCollection {
  @_spi(Server) final public let environment: WidgetKit.WidgetEnvironment
  @_spi(Server) final public let originatingBundle: WidgetKit.BundleStub
  @_spi(Server) final public let widget: ChronoServices.CHSWidget
  @_spi(Server) final public let reloadPolicy: WidgetKit.TimelineReloadPolicy
  @_spi(Server) final public let requiresReload: Swift.Bool
  @_spi(Server) final public var dateRange: Foundation.DateInterval {
    @_spi(Server) get
    @_spi(Server) set
  }
  @_spi(Server) final public var metrics: ChronoServices.CHSWidgetMetrics {
    @_spi(Server) get
  }
  @_spi(Server) final public var creationDate: Foundation.Date {
    get
  }
  @_spi(Server) final public let protectionLevel: WidgetKit.DataProtectionLevel
  @_spi(Server) final public var entries: [any WidgetKit.TimelineEntry] {
    @_spi(Server) get
  }
  @_spi(Server) public init(widget: ChronoServices.CHSWidget, environment: WidgetKit.WidgetEnvironment, entries: [WidgetKit.ViewableTimelineEntry], reloadPolicy: WidgetKit.TimelineReloadPolicy, shouldSortAndDedupeEntries: Swift.Bool = true)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) final public func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ViewableTimelineEntry?
  #else
  @_spi(Server) final public func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ViewableTimelineEntry?
  #endif
  @_spi(Server) final public func drop(before date: Foundation.Date)
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @_spi(Server) @objc deinit
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetViewCollection : Swift.CustomStringConvertible {
  @_spi(Server) final public var description: Swift.String {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetViewCollection : Swift.CustomDebugStringConvertible {
  @_spi(Server) final public var debugDescription: Swift.String {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetViewCollection {
  @_spi(Server) final public func enumeratedViewableEntriesAndEnvironments() -> WidgetKit.Cartesian2ProductCollection<[WidgetKit.ViewableTimelineEntry], [SwiftUICore.EnvironmentValues]>
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetViewCollection : Swift.Sequence {
  @_spi(Server) final public func makeIterator() -> Swift.Array<WidgetKit.ViewableTimelineEntry>.Iterator
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Element = Swift.IndexingIterator<Swift.Array<WidgetKit.ViewableTimelineEntry>>.Element
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Iterator = Swift.Array<WidgetKit.ViewableTimelineEntry>.Iterator
}
@_spi(Server) public struct JindoArchivedViewCollection {
  @_spi(Server) public struct ViewIndex : Swift.Equatable, Swift.CustomStringConvertible {
    @_spi(Server) public var description: Swift.String {
      @_spi(Server) get
    }
    @_spi(Server) public static func == (a: WidgetKit.JindoArchivedViewCollection.ViewIndex, b: WidgetKit.JindoArchivedViewCollection.ViewIndex) -> Swift.Bool
  }
  @_spi(Server) public var environment: WidgetKit.WidgetEnvironment {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func metadata(viewIndex: WidgetKit.JindoArchivedViewCollection.ViewIndex) -> WidgetKit.ActivityViewEntryMetadata?
  #else
  @_spi(Server) public func metadata(viewIndex: WidgetKit.JindoArchivedViewCollection.ViewIndex) -> WidgetKit.ActivityViewEntryMetadata?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func index(for tag: WidgetKit.JindoViewTag, in environment: SwiftUICore.EnvironmentValues) -> WidgetKit.JindoArchivedViewCollection.ViewIndex?
  #else
  @_spi(Server) public func index(for tag: WidgetKit.JindoViewTag, in environment: SwiftUICore.EnvironmentValues) -> WidgetKit.JindoArchivedViewCollection.ViewIndex?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func index(for tag: WidgetKit.JindoViewTag, environmentAtIndex envIndex: Swift.Int) -> WidgetKit.JindoArchivedViewCollection.ViewIndex?
  #else
  @_spi(Server) public func index(for tag: WidgetKit.JindoViewTag, environmentAtIndex envIndex: Swift.Int) -> WidgetKit.JindoArchivedViewCollection.ViewIndex?
  #endif
  @_spi(Server) public func view(at viewIndex: WidgetKit.JindoArchivedViewCollection.ViewIndex) throws -> SwiftUI._ArchivedView
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func view(for tag: WidgetKit.JindoViewTag, in environment: SwiftUICore.EnvironmentValues) throws -> SwiftUI._ArchivedView?
  #else
  @_spi(Server) public func view(for tag: WidgetKit.JindoViewTag, in environment: SwiftUICore.EnvironmentValues) throws -> SwiftUI._ArchivedView?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Testing) public func viewState(for tag: WidgetKit.JindoViewTag, environmentAtIndex envIndex: Swift.Int) throws -> (SwiftUI._ArchivedView, SwiftUICore.EnvironmentValues)?
  #else
  @_spi(Testing) public func viewState(for tag: WidgetKit.JindoViewTag, environmentAtIndex envIndex: Swift.Int) throws -> (SwiftUI._ArchivedView, SwiftUICore.EnvironmentValues)?
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct SystemVersion : Swift.Codable, Swift.Hashable, Swift.CustomStringConvertible {
  @_spi(Server) public static var currentProcessSDKVersion: WidgetKit.SystemVersion
  @_spi(Server) public static var currentProcessSDKVersionForAnyPlatforms: WidgetKit.SystemVersion
  @_spi(Server) public static let AzulE: WidgetKit.SystemVersion
  @_spi(Server) public static let Sky: WidgetKit.SystemVersion
  @_spi(Server) public static let Sydney: WidgetKit.SystemVersion
  @_spi(Server) public static let SydneyC: WidgetKit.SystemVersion
  @_spi(Server) public static let Dawn: WidgetKit.SystemVersion
  @_spi(Server) public static let DawnC: WidgetKit.SystemVersion
  @_spi(Server) public static let Crystal: WidgetKit.SystemVersion
  @_spi(Server) public static func currentProcessIsLinkedOnOrAfter(_ other: WidgetKit.SystemVersion) -> Swift.Bool
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public func forAnyPlatform() -> WidgetKit.SystemVersion
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public static func == (a: WidgetKit.SystemVersion, b: WidgetKit.SystemVersion) -> Swift.Bool
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Server) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
public struct WidgetViewMetadata : Swift.Codable {
  @_spi(Server) public var supportsForeground: Swift.Bool
  @_spi(Server) public var containsPrivacyRedactions: Swift.Bool
  @_spi(Server) public var containsInteractiveControls: Swift.Bool?
  @_spi(Server) public var url: Foundation.URL?
  @_spi(Server) public var auxiliaryMetadata: SwiftUI.WidgetAuxiliaryViewMetadata?
  @_spi(Server) public init()
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@dynamicMemberLookup public struct WidgetEnvironment : Swift.Codable, Swift.Hashable {
  @_spi(Server) public var _storage: WidgetKit.WidgetEnvironment.Storage
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
    @_spi(Server) get
    @_spi(Server) set
  }
  #else
  @_spi(Server) public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
    @_spi(Server) get
    @_spi(Server) set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func values<T>(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]?
  #else
  @_spi(Server) public func values<T>(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]?
  #endif
  @_spi(Server) public mutating func filterForExtensions()
  @_spi(Server) public func filteredForExtensions() -> WidgetKit.WidgetEnvironment
  @_spi(Server) public mutating func filterForArchiving()
  @_spi(Server) public func filteredForArchiving() -> WidgetKit.WidgetEnvironment
  @_spi(Server) public mutating func apply(environmentValues: SwiftUICore.EnvironmentValues)
  @_spi(Server) public mutating func union(_ other: WidgetKit.WidgetEnvironment)
  @_spi(Server) public func differences(from environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath] = []) -> [Swift.String]
  @_spi(Server) public typealias SecureCodable = WidgetKit.WidgetEnvironment.Storage
  @_spi(Server) @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(CHKWidgetEnvironment) final public class Storage : ObjectiveC.NSObject, Swift.Codable, Foundation.NSSecureCoding {
    @_spi(Server) @objc override final public var debugDescription: Swift.String {
      @_spi(Server) @objc get
    }
    @_spi(Server) public init(from decoder: any Swift.Decoder) throws
    @_spi(Server) final public func encode(to encoder: any Swift.Encoder) throws
    @_spi(Server) @objc final public class var supportsSecureCoding: Swift.Bool {
      @_spi(Server) @objc get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
    #else
    @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
    #endif
    @_spi(Server) @objc final public func encode(with coder: Foundation.NSCoder)
    @_spi(Server) @objc override final public var hash: Swift.Int {
      @_spi(Server) @objc get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Server) @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
    #else
    @_spi(Server) @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
    #endif
    @_spi(Server) @objc deinit
  }
  @_spi(Server) public init()
  @_spi(Server) public init(from environmentValues: SwiftUICore.EnvironmentValues)
  @_spi(Server) public init(from secureCodable: WidgetKit.WidgetEnvironment.SecureCodable)
  @_spi(Server) public func secureCodable() -> WidgetKit.WidgetEnvironment.SecureCodable
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public static func == (lhs: WidgetKit.WidgetEnvironment, rhs: WidgetKit.WidgetEnvironment) -> Swift.Bool
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetEnvironment : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var debugDescription: Swift.String {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetEnvironment {
  @_spi(Server) public func enumeratedCount() -> Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func findEnumeratedIndex(matching environment: SwiftUICore.EnvironmentValues, ignoring: [Swift.AnyKeyPath] = []) -> Swift.Int?
  #else
  @_spi(Server) public func findEnumeratedIndex(matching environment: SwiftUICore.EnvironmentValues, ignoring: [Swift.AnyKeyPath] = []) -> Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Testing) public func environmentValues(at index: Swift.Int) -> SwiftUICore.EnvironmentValues?
  #else
  @_spi(Testing) public func environmentValues(at index: Swift.Int) -> SwiftUICore.EnvironmentValues?
  #endif
  @_spi(Server) public func matches(_ environment: SwiftUICore.EnvironmentValues, ignoring: [Swift.AnyKeyPath] = []) -> Swift.Bool
  @_spi(Server) public func makeEnumerator(with base: SwiftUICore.EnvironmentValues = EnvironmentValues()) -> WidgetKit.WidgetEnvironment.EnvironmentValuesEnumerator
  @_spi(Server) public struct EnvironmentValuesEnumerator : Swift.Sequence {
    @_spi(Server) public func makeIterator() -> WidgetKit.WidgetEnvironment.EnvironmentValuesEnumerator.Iterator
    @_spi(Server) public struct Iterator : Swift.IteratorProtocol {
      #if compiler(>=5.3) && $NoncopyableGenerics
      @_spi(Server) public mutating func next() -> SwiftUICore.EnvironmentValues?
      #else
      @_spi(Server) public mutating func next() -> SwiftUICore.EnvironmentValues?
      #endif
      @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
      public typealias Element = SwiftUICore.EnvironmentValues
    }
    @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
    public typealias Element = SwiftUICore.EnvironmentValues
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct TimelineEntryRelevance : Swift.Codable, Swift.Hashable {
  public var score: Swift.Float
  public var duration: Foundation.TimeInterval
  public init(score: Swift.Float, duration: Foundation.TimeInterval = 0.0)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WidgetKit.TimelineEntryRelevance, b: WidgetKit.TimelineEntryRelevance) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol TimelineEntry {
  var date: Foundation.Date { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var relevance: WidgetKit.TimelineEntryRelevance? { get }
  #else
  var relevance: WidgetKit.TimelineEntryRelevance? { get }
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.TimelineEntry {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var relevance: WidgetKit.TimelineEntryRelevance? {
    get
  }
  #else
  public var relevance: WidgetKit.TimelineEntryRelevance? {
    get
  }
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _preferredSystemWidgetBackgroundStyle: WidgetKit.WidgetBackgroundStyle {
    get
    set
  }
}
package struct ControlTemplatePicker : WidgetKit.ControlTemplate, Swift.Sendable {
  public static var empty: WidgetKit.ControlTemplatePicker
  public struct Option : Swift.Equatable, Swift.Codable {
    public var value: Swift.String?
    public var icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?
    public var tint: SwiftUICore.Color.Resolved?
    public var status: Swift.String?
    public var actionHint: Swift.String?
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(value: Swift.String? = nil, icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?, tint: SwiftUICore.Color.Resolved? = nil, status: Swift.String? = nil, actionHint: Swift.String? = nil)
    #else
    public init(value: Swift.String? = nil, icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?, tint: SwiftUICore.Color.Resolved? = nil, status: Swift.String? = nil, actionHint: Swift.String? = nil)
    #endif
    public static func == (a: WidgetKit.ControlTemplatePicker.Option, b: WidgetKit.ControlTemplatePicker.Option) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var options: [WidgetKit.ControlTemplatePicker.Option]
  public var title: Swift.String?
  public var subtitle: Swift.String?
  public var associatedURL: Foundation.URL?
  public var renderAsSlider: Swift.Bool
  public var privacySensitive: Swift.Bool
  public var disabled: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(options: [WidgetKit.ControlTemplatePicker.Option], title: Swift.String?, subtitle: Swift.String?, renderAsSlider: Swift.Bool = false, associatedURL: Foundation.URL? = nil, privacySensitive: Swift.Bool = false, disabled: Swift.Bool = false)
  #else
  public init(options: [WidgetKit.ControlTemplatePicker.Option], title: Swift.String?, subtitle: Swift.String?, renderAsSlider: Swift.Bool = false, associatedURL: Foundation.URL? = nil, privacySensitive: Swift.Bool = false, disabled: Swift.Bool = false)
  #endif
  package static func == (a: WidgetKit.ControlTemplatePicker, b: WidgetKit.ControlTemplatePicker) -> Swift.Bool
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension WidgetKit.ControlTemplatePicker : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
  public func validateIcon(_ validate: (SwiftUI.WidgetAuxiliaryViewMetadata.Graphic) throws -> ()) throws
}
@_spi(ControlEntities) @available(*, deprecated, message: "Deprecated due to underlining type _UpdatableAppEntity will no longer be used here.")
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol ControllableEntity : AppIntents._UniqueEntity, AppIntents._UpdatableAppEntity {
}
@available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct AppIntentConfiguration<Intent, Content> : SwiftUI.WidgetConfiguration where Intent : AppIntents.WidgetConfigurationIntent, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit22AppIntentConfigurationV4bodyQrvp", 0) __<Intent, Content>
}
@available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
public struct AppIntentRecommendation<Intent> where Intent : AppIntents.WidgetConfigurationIntent {
  public init(intent: Intent, description: SwiftUICore.Text)
  public init(intent: Intent, description: SwiftUICore.LocalizedStringKey)
  @_disfavoredOverload public init(intent: Intent, description: some StringProtocol)
}
@available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
extension WidgetKit.AppIntentConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, intent: Intent.Type = Intent.self, provider: Provider, @SwiftUICore.ViewBuilder content: @escaping (Provider.Entry) -> Content) where Intent == Provider.Intent, Provider : WidgetKit.AppIntentTimelineProvider
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@preconcurrency public struct WidgetInfo : Swift.Sendable {
  public let configuration: Intents.INIntent?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
  public func widgetConfigurationIntent<Intent>(of intentType: Intent.Type = Intent.self) -> Intent? where Intent : AppIntents.WidgetConfigurationIntent
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
  public func widgetConfigurationIntent<Intent>(of intentType: Intent.Type = Intent.self) -> Intent? where Intent : AppIntents.WidgetConfigurationIntent
  #endif
  public let family: WidgetKit.WidgetFamily
  public let kind: Swift.String
  @_spi(Private) public let internalFamily: WidgetKit.InternalWidgetFamily
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetInfo : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public var id: WidgetKit.WidgetInfo {
    get
  }
  public static func == (a: WidgetKit.WidgetInfo, b: WidgetKit.WidgetInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias ID = WidgetKit.WidgetInfo
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetInfo : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct StaticConfiguration<Content> : SwiftUI.WidgetConfiguration where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit19StaticConfigurationV4bodyQrvp", 0) __<Content>
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.StaticConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, provider: Provider, @SwiftUICore.ViewBuilder content: @escaping (Provider.Entry) -> Content) where Provider : WidgetKit.TimelineProvider
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public var _localizations: WidgetKit.WidgetLocalizations? {
    @_spi(Server) get
    @_spi(Server) set
  }
  #else
  @_spi(Server) public var _localizations: WidgetKit.WidgetLocalizations? {
    @_spi(Server) get
    @_spi(Server) set
  }
  #endif
}
@_spi(Server) public struct MetricsRequest : Swift.Codable, Swift.Hashable, Swift.CustomStringConvertible {
  @_spi(Server) public var width: WidgetKit.DimensionRequest
  @_spi(Server) public var height: WidgetKit.DimensionRequest
  @_spi(Server) public var cornerRadius: CoreFoundation.CGFloat
  @_spi(Server) public var edgeInsets: SwiftUICore.EdgeInsets?
  @_spi(Server) public var clipMargin: CoreFoundation.CGFloat
  @_spi(Server) public var scaleFactor: CoreFoundation.CGFloat
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(width: WidgetKit.DimensionRequest, height: WidgetKit.DimensionRequest, cornerRadius: CoreFoundation.CGFloat = 0, edgeInsets: SwiftUICore.EdgeInsets? = nil, clipMargin: CoreFoundation.CGFloat, scaleFactor: CoreFoundation.CGFloat)
  #else
  @_spi(Server) public init(width: WidgetKit.DimensionRequest, height: WidgetKit.DimensionRequest, cornerRadius: CoreFoundation.CGFloat = 0, edgeInsets: SwiftUICore.EdgeInsets? = nil, clipMargin: CoreFoundation.CGFloat, scaleFactor: CoreFoundation.CGFloat)
  #endif
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var isUnitScale: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public var isActivityFullScreen: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public static func == (a: WidgetKit.MetricsRequest, b: WidgetKit.MetricsRequest) -> Swift.Bool
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) public struct JindoMetricsDefinition : Swift.Codable, Swift.Hashable, Swift.CustomStringConvertible {
  @_spi(Server) public var obstructionSize: CoreFoundation.CGSize
  @_spi(Server) public var compactLeadingMetrics: WidgetKit.MetricsRequest
  @_spi(Server) public var compactTrailingMetrics: WidgetKit.MetricsRequest
  @_spi(Server) public var compactMinimalMetrics: WidgetKit.MetricsRequest
  @_spi(Server) public var expandedMetrics: WidgetKit.MetricsRequest
  @_spi(Server) public init(obstructionSize: CoreFoundation.CGSize, compactLeadingMetrics: WidgetKit.MetricsRequest, compactTrailingMetrics: WidgetKit.MetricsRequest, compactMinimalMetrics: WidgetKit.MetricsRequest, expandedMetrics: WidgetKit.MetricsRequest)
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public func metricsRequestForTag(_ tag: WidgetKit.JindoViewTag) -> WidgetKit.MetricsRequest
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public static func == (a: WidgetKit.JindoMetricsDefinition, b: WidgetKit.JindoMetricsDefinition) -> Swift.Bool
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) public enum DimensionRequest : Swift.Codable, Swift.Hashable, Swift.CustomStringConvertible {
  @_spi(Server) case fixed(CoreFoundation.CGFloat)
  @_spi(Server) case dynamic(CoreFoundation.CGFloat, CoreFoundation.CGFloat)
  @_spi(Server) public func resolveIfNecessary(intrinsicLength: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @_spi(Server) public var minValue: CoreFoundation.CGFloat {
    @_spi(Server) get
  }
  @_spi(Server) public var maxValue: CoreFoundation.CGFloat {
    @_spi(Server) get
  }
  @_spi(Server) public var filePath: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public static func == (a: WidgetKit.DimensionRequest, b: WidgetKit.DimensionRequest) -> Swift.Bool
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) public struct ActivityMetricsDefinition : Swift.Hashable, Swift.Codable, Swift.CustomStringConvertible {
  @_spi(Server) public static let `default`: WidgetKit.ActivityMetricsDefinition
  @_spi(Server) public var _rawJindoMetrics: WidgetKit.JindoMetricsDefinition?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(listItemMetrics: WidgetKit.MetricsRequest, jindoMetrics: WidgetKit.JindoMetricsDefinition?)
  #else
  @_spi(Server) public init(listItemMetrics: WidgetKit.MetricsRequest, jindoMetrics: WidgetKit.JindoMetricsDefinition?)
  #endif
  @_spi(Server) public func listItemMetrics(for contentSizeCategory: SwiftUICore.ContentSizeCategory) -> WidgetKit.MetricsRequest
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func jindoMetrics(for contentSizeCategory: SwiftUICore.ContentSizeCategory) -> WidgetKit.JindoMetricsDefinition?
  #else
  @_spi(Server) public func jindoMetrics(for contentSizeCategory: SwiftUICore.ContentSizeCategory) -> WidgetKit.JindoMetricsDefinition?
  #endif
  @_spi(Server) public var filePath: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public static func == (a: WidgetKit.ActivityMetricsDefinition, b: WidgetKit.ActivityMetricsDefinition) -> Swift.Bool
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
#if compiler(>=5.3) && $RetroactiveAttribute
@_spi(Internal) extension SwiftUICore.ContentSizeCategory : @retroactive Swift.Comparable {
}
#else
@_spi(Internal) extension SwiftUICore.ContentSizeCategory : Swift.Comparable {
}
#endif
package struct ControlTemplateButton : WidgetKit.ControlTemplate, Swift.Sendable {
  public static var empty: WidgetKit.ControlTemplateButton
  package struct Option : Swift.Equatable, Swift.Codable {
    package var title: Swift.String?
    package var subtitle: Swift.String?
    package var icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?
    package var tint: SwiftUICore.Color.Resolved?
    package var status: Swift.String?
    package var actionHint: Swift.String?
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(title: Swift.String?, subtitle: Swift.String?, icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?, tint: SwiftUICore.Color.Resolved?, status: Swift.String?, actionHint: Swift.String?)
    #else
    package init(title: Swift.String?, subtitle: Swift.String?, icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?, tint: SwiftUICore.Color.Resolved?, status: Swift.String?, actionHint: Swift.String?)
    #endif
    package static func == (a: WidgetKit.ControlTemplateButton.Option, b: WidgetKit.ControlTemplateButton.Option) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package init(from decoder: any Swift.Decoder) throws
  }
  package var inactive: WidgetKit.ControlTemplateButton.Option
  package var active: WidgetKit.ControlTemplateButton.Option
  package var action: WidgetKit.ControlAction
  package var associatedURL: Foundation.URL?
  package var privacySensitive: Swift.Bool
  package var disabled: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(inactive: WidgetKit.ControlTemplateButton.Option, active: WidgetKit.ControlTemplateButton.Option, action: WidgetKit.ControlAction, associatedURL: Foundation.URL? = nil, privacySensitive: Swift.Bool = false, disabled: Swift.Bool = false)
  #else
  package init(inactive: WidgetKit.ControlTemplateButton.Option, active: WidgetKit.ControlTemplateButton.Option, action: WidgetKit.ControlAction, associatedURL: Foundation.URL? = nil, privacySensitive: Swift.Bool = false, disabled: Swift.Bool = false)
  #endif
  package static func == (a: WidgetKit.ControlTemplateButton, b: WidgetKit.ControlTemplateButton) -> Swift.Bool
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension WidgetKit.ControlTemplateButton : Swift.CustomDebugStringConvertible {
  package var debugDescription: Swift.String {
    get
  }
  public func validateIcon(_ validate: (SwiftUI.WidgetAuxiliaryViewMetadata.Graphic) throws -> ()) throws
}
@_spi(Server) @objc public class WidgetRelevanceRequest : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @_spi(Server) final public let kind: Swift.String
  @_spi(Server) final public let archiveFileHandle: Foundation.FileHandle
  @_spi(Server) public init(kind: Swift.String, archiveFileHandle: Foundation.FileHandle)
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  @_spi(Server) @objc public static var supportsSecureCoding: Swift.Bool {
    @_spi(Server) @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc deinit
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct WidgetRelevances<Configuration> {
  public init(_ relevances: [WidgetKit.WidgetRelevanceEntry<Configuration>])
  @_spi(ProposedAPI_ContextualWidgets) @available(*, deprecated)
  @_disfavoredOverload public init(_ relevances: [WidgetKit.WidgetRelevance<Configuration>])
}
@_spi(ProposedAPI_ContextualWidgets) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "WidgetRelevanceEntry")
public struct WidgetRelevance<Configuration> {
  @_spi(ProposedAPI_ContextualWidgets) public var configuration: Configuration {
    get
  }
  @_spi(ProposedAPI_ContextualWidgets) public var context: AppIntents.RelevantContext {
    get
  }
}
@_spi(ProposedAPI_ContextualWidgets) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "WidgetRelevanceEntry")
extension WidgetKit.WidgetRelevance where Configuration == () {
  @_spi(ProposedAPI_ContextualWidgets) public init(context: AppIntents.RelevantContext)
}
@_spi(ProposedAPI_ContextualWidgets) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "WidgetRelevanceEntry")
extension WidgetKit.WidgetRelevance where Configuration : AppIntents.WidgetConfigurationIntent {
  @_spi(ProposedAPI_ContextualWidgets) public init(configuration: Configuration, context: AppIntents.RelevantContext)
}
@_spi(ProposedAPI_ContextualWidgets) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "WidgetRelevanceEntry")
extension WidgetKit.WidgetRelevance where Configuration : Intents.INIntent {
  @_spi(ProposedAPI_ContextualWidgets) public init(configuration: Configuration, context: AppIntents.RelevantContext)
}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Jindo {
  @_spi(ProposedAPI) public init<Expanded, CompactLeading, CompactTrailing, CompactMinimal>(@SwiftUICore.ViewBuilder expanded: @escaping () -> Expanded, @SwiftUICore.ViewBuilder compactLeading: @escaping () -> CompactLeading, @SwiftUICore.ViewBuilder compactTrailing: @escaping () -> CompactTrailing, @SwiftUICore.ViewBuilder compactMinimal: @escaping () -> CompactMinimal) where Expanded : SwiftUICore.View, CompactLeading : SwiftUICore.View, CompactTrailing : SwiftUICore.View, CompactMinimal : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ProposedAPI) public func tint(_ color: SwiftUICore.Color?) -> WidgetKit.Jindo
  #else
  @_spi(ProposedAPI) public func tint(_ color: SwiftUICore.Color?) -> WidgetKit.Jindo
  #endif
}
@_spi(Server) public struct ActivityViewMetrics : Swift.Hashable, Swift.Codable, Swift.CustomStringConvertible {
  @_spi(Server) public var bounds: CoreFoundation.CGRect
  @_spi(Server) public var cornerRadius: CoreFoundation.CGFloat
  @_spi(Server) public init(bounds: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat)
  @_spi(Server) public static func from(request: WidgetKit.MetricsRequest) -> WidgetKit.ActivityViewMetrics
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public static func == (a: WidgetKit.ActivityViewMetrics, b: WidgetKit.ActivityViewMetrics) -> Swift.Bool
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
package enum ControlError : Swift.Error, Foundation.LocalizedError {
  case environmentNotFound(desired: SwiftUICore.EnvironmentValues, candidates: WidgetKit.WidgetEnvironment, ignoringEnvironmentKeys: [Swift.AnyKeyPath])
  case indexOutOfBounds(index: Swift.Int, available: Swift.Int)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var errorDescription: Swift.String? {
    get
  }
  #else
  package var errorDescription: Swift.String? {
    get
  }
  #endif
}
#if compiler(>=5.3) && $NoncopyableGenerics
package func == (lhs: (any WidgetKit.ControlArchive)?, rhs: (any WidgetKit.ControlArchive)?) -> Swift.Bool
#else
package func == (lhs: (any WidgetKit.ControlArchive)?, rhs: (any WidgetKit.ControlArchive)?) -> Swift.Bool
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
package func != (lhs: (any WidgetKit.ControlArchive)?, rhs: (any WidgetKit.ControlArchive)?) -> Swift.Bool
#else
package func != (lhs: (any WidgetKit.ControlArchive)?, rhs: (any WidgetKit.ControlArchive)?) -> Swift.Bool
#endif
package protocol ControlArchive : Swift.CustomStringConvertible, Swift.Decodable, Swift.Encodable, Swift.Hashable {
  var originatingBundle: WidgetKit.BundleStub { get }
  var systemVersion: WidgetKit.SystemVersion { get }
  var creationDate: Foundation.Date { get }
  var environment: WidgetKit.WidgetEnvironment { get }
  var control: ChronoServices.CHSControlIdentity { get }
  var state: ChronoServices.CHSControlState { get }
  var templates: [WidgetKit.ControlTemplateType] { get }
  func anyTemplate() -> WidgetKit.ControlTemplateType
  func copyAsStateOnlyArchive() -> (any WidgetKit.ControlArchive)
  func copyWithState(_ state: ChronoServices.CHSControlState) -> any WidgetKit.ControlArchive
  func template(in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ControlTemplateType
}
extension WidgetKit.ControlArchive {
  package func template(in environment: SwiftUICore.EnvironmentValues) throws -> WidgetKit.ControlTemplateType
}
extension WidgetKit.ControlArchive {
  package var description: Swift.String {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers package class ControlArchiveMock : WidgetKit.StorageBackedControlArchive {
  convenience package init(control: ChronoServices.CHSControlIdentity, state: ChronoServices.CHSControlState, environment: WidgetKit.WidgetEnvironment, template: WidgetKit.ControlTemplateType)
  package func template(in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ControlTemplateType
  @objc deinit
}
package class StorageBackedControlArchive : WidgetKit.ControlArchive {
  final package let originatingBundle: WidgetKit.BundleStub
  final package let systemVersion: WidgetKit.SystemVersion
  final package let creationDate: Foundation.Date
  final package let environment: WidgetKit.WidgetEnvironment
  final package let control: ChronoServices.CHSControlIdentity
  package var state: ChronoServices.CHSControlState {
    get
  }
  package var templates: [WidgetKit.ControlTemplateType] {
    get
  }
  package func copyAsStateOnlyArchive() -> (any WidgetKit.ControlArchive)
  package static func == (lhs: WidgetKit.StorageBackedControlArchive, rhs: WidgetKit.StorageBackedControlArchive) -> Swift.Bool
  package func anyTemplate() -> WidgetKit.ControlTemplateType
  package func template(in environment: SwiftUICore.EnvironmentValues) throws -> WidgetKit.ControlTemplateType
  package func template(in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ControlTemplateType
  package func copyWithState(_ state: ChronoServices.CHSControlState) -> any WidgetKit.ControlArchive
  required convenience package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  package var hashValue: Swift.Int {
    get
  }
}
package class StateOverridenControlArchive : WidgetKit.StorageBackedControlArchive {
  package var state: ChronoServices.CHSControlState {
    get
  }
  required convenience package init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@available(iOS 18.0, watchOS 11.0, macOS 15.0, tvOS 18.0, *)
@available(visionOS, unavailable)
public struct WidgetAccentedRenderingMode : Swift.Hashable {
  public static let accented: WidgetKit.WidgetAccentedRenderingMode
  public static let desaturated: WidgetKit.WidgetAccentedRenderingMode
  public static let accentedDesaturated: WidgetKit.WidgetAccentedRenderingMode
  public static let fullColor: WidgetKit.WidgetAccentedRenderingMode
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WidgetKit.WidgetAccentedRenderingMode, b: WidgetKit.WidgetAccentedRenderingMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, watchOS 11.0, macOS 15.0, tvOS 18.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.Image {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func widgetAccentedRenderingMode(_ renderingMode: WidgetKit.WidgetAccentedRenderingMode?) -> some SwiftUICore.View
  
  #else
  public func widgetAccentedRenderingMode(_ renderingMode: WidgetKit.WidgetAccentedRenderingMode?) -> some SwiftUICore.View
  
  #endif
}
@_hasMissingDesignatedInitializers @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public class ControlCenter {
  public static let shared: WidgetKit.ControlCenter
  public func currentControls() async throws -> [WidgetKit.ControlInfo]
  public func reloadControls(ofKind kind: Swift.String)
  public func reloadAllControls()
  @objc deinit
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlCenter {
  @_spi(SSC) @available(*, deprecated, message: "Please use `currentControls` instead.")
  public func getCurrentConfigurations() async throws -> [WidgetKit.ControlInfo]
  @_spi(SSC) @available(*, deprecated, message: "Please use `currentControls` instead.")
  public func allControls() async throws -> [WidgetKit.ControlInfo]
}
@_spi(Internal) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlCenter {
  @_spi(Internal) public func reloadAllControls(forBundleIdentifier bundleIdentifier: Swift.String)
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct ControlInfo {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func configurationIntent<Intent>(of intentType: Intent.Type = Intent.self) -> Intent? where Intent : AppIntents.ControlConfigurationIntent
  #else
  public func configurationIntent<Intent>(of intentType: Intent.Type = Intent.self) -> Intent? where Intent : AppIntents.ControlConfigurationIntent
  #endif
  public let kind: Swift.String
  public var pushInfo: WidgetKit.ControlPushInfo?
  @_spi(Internal) public let control: ChronoServices.CHSControlIdentity
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Internal) public init(control: ChronoServices.CHSControlIdentity, pushInfo: WidgetKit.ControlPushInfo? = nil) async
  #else
  @_spi(Internal) public init(control: ChronoServices.CHSControlIdentity, pushInfo: WidgetKit.ControlPushInfo? = nil) async
  #endif
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlInfo : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public static func == (lhs: WidgetKit.ControlInfo, rhs: WidgetKit.ControlInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 18.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  public var widgetFamily: WidgetKit.WidgetFamily {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var chsWidgetFamily: ChronoServices.CHSWidgetFamily {
    get
  }
  @_spi(Private) @available(*, deprecated, message: "Please use `chsWidgetFamily` instead")
  public var internalWidgetFamily: WidgetKit.InternalWidgetFamily {
    get
  }
  @_spi(Server) public var _widgetFamily: WidgetKit.InternalWidgetFamily {
    get
    set
  }
}
@_spi(Internal) extension SwiftUICore.View {
  @_spi(Internal) @_Concurrency.MainActor @preconcurrency public func applyCommonEnvironment(viewTag: WidgetKit.ActivityViewTag, metricsRequest: WidgetKit.MetricsRequest) -> some SwiftUICore.View
  
}
@_spi(Server) @frozen public enum JindoViewTag : Swift.Int, Swift.Hashable, Swift.CaseIterable, Swift.Codable, Swift.CustomStringConvertible {
  @_spi(Server) case expanded
  @_spi(Server) case compactLeading
  @_spi(Server) case compactTrailing
  @_spi(Server) case compactMinimal
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init?(rawValue: Swift.Int)
  #else
  @_spi(Server) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Server) public typealias AllCases = [WidgetKit.JindoViewTag]
  @_spi(Server) public typealias RawValue = Swift.Int
  @_spi(Server) public static var allCases: [WidgetKit.JindoViewTag] {
    @_spi(Server) get
  }
  @_spi(Server) public var rawValue: Swift.Int {
    @_spi(Server) get
  }
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct ActivityViewContext<Attributes> where Attributes : ActivityKit.ActivityAttributes {
  @_spi(ProposedAPI) @available(*, deprecated, message: "Use `activityID` instead.")
  public var activityId: Swift.String {
    get
  }
  public let activityID: Swift.String
  public let attributes: Attributes
  public let state: Attributes.ContentState
  @available(iOS 16.2, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public let isStale: Swift.Bool
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct DynamicIslandMode : Swift.Equatable {
  public static let expanded: WidgetKit.DynamicIslandMode
  public static let compactLeading: WidgetKit.DynamicIslandMode
  public static let compactTrailing: WidgetKit.DynamicIslandMode
  public static let minimal: WidgetKit.DynamicIslandMode
  public static func == (a: WidgetKit.DynamicIslandMode, b: WidgetKit.DynamicIslandMode) -> Swift.Bool
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct DynamicIsland {
  public init<Expanded, CompactLeading, CompactTrailing, Minimal>(@WidgetKit.DynamicIslandExpandedContentBuilder expanded: @escaping () -> WidgetKit.DynamicIslandExpandedContent<Expanded>, @SwiftUICore.ViewBuilder compactLeading: @escaping () -> CompactLeading, @SwiftUICore.ViewBuilder compactTrailing: @escaping () -> CompactTrailing, @SwiftUICore.ViewBuilder minimal: @escaping () -> Minimal) where Expanded : SwiftUICore.View, CompactLeading : SwiftUICore.View, CompactTrailing : SwiftUICore.View, Minimal : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func widgetURL(_ url: Foundation.URL?) -> WidgetKit.DynamicIsland
  #else
  public func widgetURL(_ url: Foundation.URL?) -> WidgetKit.DynamicIsland
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func keylineTint(_ color: SwiftUICore.Color?) -> WidgetKit.DynamicIsland
  #else
  public func keylineTint(_ color: SwiftUICore.Color?) -> WidgetKit.DynamicIsland
  #endif
  public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ length: Swift.Double, for mode: WidgetKit.DynamicIslandMode) -> WidgetKit.DynamicIsland
  @_spi(ProposedAPI) @available(*, deprecated, renamed: "contentMargins(_:_:for:)")
  public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ length: Swift.Double, forMode mode: WidgetKit.DynamicIslandMode) -> WidgetKit.DynamicIsland
  @_spi(ProposedAPI) public func contentBackground<Content>(for mode: WidgetKit.DynamicIslandMode, @SwiftUICore.ViewBuilder content: () -> Content) -> WidgetKit.DynamicIsland where Content : SwiftUICore.View
  @_spi(ProposedAPI) @available(*, deprecated, renamed: "contentBackground(for:content:)")
  public func contentBackground<Content>(forMode mode: WidgetKit.DynamicIslandMode, @SwiftUICore.ViewBuilder content: () -> Content) -> WidgetKit.DynamicIsland where Content : SwiftUICore.View
  @_spi(ProposedAPI) public func contentBackground<S>(_ style: S, for mode: WidgetKit.DynamicIslandMode) -> WidgetKit.DynamicIsland where S : SwiftUICore.ShapeStyle
  @_spi(ProposedAPI) public func contentBackground<S>(_ style: S, forMode mode: WidgetKit.DynamicIslandMode) -> WidgetKit.DynamicIsland where S : SwiftUICore.ShapeStyle
  @_spi(ProposedAPI) public func contentBackground<S, T>(_ style: S, in shape: T, for mode: WidgetKit.DynamicIslandMode) -> WidgetKit.DynamicIsland where S : SwiftUICore.ShapeStyle, T : SwiftUICore.Shape
  @_spi(ProposedAPI) public func contentBackground<S, T>(_ style: S, in shape: T, forMode mode: WidgetKit.DynamicIslandMode) -> WidgetKit.DynamicIsland where S : SwiftUICore.ShapeStyle, T : SwiftUICore.Shape
}
@_Concurrency.MainActor @preconcurrency package struct CommonServerEnvironmentModifier : SwiftUICore.ViewModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package init(widget: ChronoServices.CHSWidget, metrics: ChronoServices.CHSWidgetMetrics, environment: SwiftUICore.EnvironmentValues?)
  #else
  @_Concurrency.MainActor @preconcurrency package init(widget: ChronoServices.CHSWidget, metrics: ChronoServices.CHSWidgetMetrics, environment: SwiftUICore.EnvironmentValues?)
  #endif
  @_Concurrency.MainActor @preconcurrency package func body(content: WidgetKit.CommonServerEnvironmentModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit31CommonServerEnvironmentModifierV4body7contentQr7SwiftUI05_ViewF8_ContentVyACG_tF", 0) __
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension ChronoServices.CHSWidgetPersonality {
  @_spi(Server) public var logDescription: Swift.String {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension ChronoServices.CHSWidget {
  @_spi(Server) public var logDescription: Swift.String {
    @_spi(Server) get
  }
}
@_Concurrency.MainActor @preconcurrency package struct WidgetAccentedRenderingModeViewModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency package func body(content: WidgetKit.WidgetAccentedRenderingModeViewModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit0A33AccentedRenderingModeViewModifierV4body7contentQr7SwiftUI01_fG8_ContentVyACG_tF", 0) __
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ActivityConfiguration<Attributes> : SwiftUI.WidgetConfiguration where Attributes : ActivityKit.ActivityAttributes {
  @_spi(ProposedAPI) @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Content>(attributesType: Attributes.Type, @SwiftUICore.ViewBuilder content: @escaping (WidgetKit.ActivityViewContext<Attributes>) -> Content) where Content : SwiftUICore.View
  @_spi(ProposedAPI) @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<ListItem>(attributesType: Attributes.Type = Attributes.self, @SwiftUICore.ViewBuilder listItem: @escaping (WidgetKit.ActivityViewContext<Attributes>) -> ListItem, jindo: @escaping (WidgetKit.ActivityViewContext<Attributes>) -> WidgetKit.Jindo) where ListItem : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public init<Content>(for attributesType: Attributes.Type, @SwiftUICore.ViewBuilder content: @escaping (WidgetKit.ActivityViewContext<Attributes>) -> Content, dynamicIsland: @escaping (WidgetKit.ActivityViewContext<Attributes>) -> WidgetKit.DynamicIsland) where Content : SwiftUICore.View
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable, introduced: 11.0)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit21ActivityConfigurationV4bodyQrvp", 0) __<Attributes>
}
@_spi(Previews) public protocol ActivityPreviewSourceExpanding {
  @_spi(Previews) @_Concurrency.MainActor func archivedViewCollections(for source: WidgetKit.ActivityPreviewSource, metricsDefinition: WidgetKit.ActivityMetricsDefinition, environment: WidgetKit.WidgetEnvironment, staleModifications: WidgetKit.ActivityPreviewSourceStaleModifications, supportedFamilies: [WidgetKit.ActivityFamily]) async throws -> [Foundation.Data]
}
@_spi(Previews) public enum ActivityPreviewSourceStaleModifications {
  @_spi(Previews) case none
  @_spi(Previews) case allEntries
  @_spi(Previews) case duplicateEntries
  @_spi(Previews) public static func == (a: WidgetKit.ActivityPreviewSourceStaleModifications, b: WidgetKit.ActivityPreviewSourceStaleModifications) -> Swift.Bool
  @_spi(Previews) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Previews) public var hashValue: Swift.Int {
    @_spi(Previews) get
  }
}
@_spi(Previews) extension WidgetKit.ActivityConfiguration : WidgetKit.ActivityPreviewSourceExpanding {
  @_spi(Previews) @_Concurrency.MainActor public func archivedViewCollections(for source: WidgetKit.ActivityPreviewSource, metricsDefinition: WidgetKit.ActivityMetricsDefinition, environment: WidgetKit.WidgetEnvironment, staleModifications: WidgetKit.ActivityPreviewSourceStaleModifications, supportedFamilies: [WidgetKit.ActivityFamily]) async throws -> [Foundation.Data]
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  @usableFromInline
  internal struct ActivityFullScreenKey : SwiftUICore.EnvironmentKey {
    @usableFromInline
    internal static var defaultValue: Swift.Bool
    @available(iOS 17.0, tvOS 18.0, watchOS 11.0, *)
    @usableFromInline
    @available(macOS, unavailable, introduced: 10.15)
    internal typealias Value = Swift.Bool
  }
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @backDeployed(before: iOS 17.0)
  @available(macOS, unavailable)
  public var isActivityFullscreen: Swift.Bool {
    get {
            if #available(iOS 17.0, *) {
                return self[ActivityFullScreenKey.self]
            } else {
                return false
            }
        }
  }
}
@_spi(ControlEntities) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct EmptyConfiguration : AppIntents.WidgetConfigurationIntent {
  @_spi(ControlEntities) public static var title: Foundation.LocalizedStringResource
  @_spi(ControlEntities) public init()
  @_spi(ControlEntities) @available(iOS 18.0, *)
  @_spi_available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 10.0)
  @_spi_available(macOS, introduced: 15.0)
  public typealias NeverResult = Swift.Never
  @_spi(ControlEntities) @available(iOS 18.0, *)
  @available(tvOS, unavailable, introduced: 16.0)
  @available(watchOS, unavailable, introduced: 9.0)
  @_spi_available(macOS, introduced: 15.0)
  public typealias PerformResult = Swift.Never
  @_spi(ControlEntities) @available(iOS 18.0, *)
  @available(tvOS, unavailable, introduced: 16.0)
  @available(watchOS, unavailable, introduced: 9.0)
  @_spi_available(macOS, introduced: 15.0)
  public typealias SummaryContent = @_opaqueReturnTypeOf("$s10AppIntents0A6IntentPAAE16parameterSummaryQrvpZ", 0) __<WidgetKit.EmptyConfiguration>
}
@_spi(ControlEntities) @_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(*, deprecated, message: "Please use the initializer that takes a path to a _IntentUpdatableEntityProperty.")
extension WidgetKit.ControlToggle {
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, EntityParameter, Path, Content, Value>(kind: Swift.String, updatableEntity: Path, @SwiftUICore.ViewBuilder content: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value) where Intent == WidgetKit.EmptyConfiguration, Entity : WidgetKit.ControllableEntity, EntityParameter : AppIntents._UpdatableEntityProperty<Entity, Swift.Bool>, Path : Swift.KeyPath<Entity, EntityParameter>, Content : SwiftUICore.View, Value : SwiftUICore.View
}
@_spi(ControlEntities) @_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(*, deprecated, message: "Please use the initializer that takes a path to a _IntentUpdatableEntityProperty.")
extension WidgetKit.ControlToggle {
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, EntityParameter, Path, Content, Value>(kind: Swift.String, updatableEntity: Path, @SwiftUICore.ViewBuilder content: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value) where Intent == WidgetKit.EmptyConfiguration, Entity : WidgetKit.ControllableEntity, EntityParameter : AppIntents._UpdatableEntityProperty<Entity, AppIntents._EntityDeferredPropertyValue<Entity, Swift.Bool>>, Path : Swift.KeyPath<Entity, EntityParameter>, Content : SwiftUICore.View, Value : SwiftUICore.View
}
@_spi(ControlEntities) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.ControlToggle {
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, UpdatingIntent, DeferredValue, EntityParameter, Content, Value>(kind: Swift.String, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder content: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value) where Intent == WidgetKit.EmptyConfiguration, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, Swift.Bool>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Content : SwiftUICore.View, Value : SwiftUICore.View, UpdatingIntent.PropertyReference.Value.ValueType == Swift.Bool
}
@_spi(ControlEntities) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.ControlToggle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, UpdatingIntent, DeferredValue, EntityParameter, Content, Value>(kind: Swift.String, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, Swift.Bool>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Content : SwiftUICore.View, Value : SwiftUICore.View, UpdatingIntent.PropertyReference.Value.ValueType == Swift.Bool
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, UpdatingIntent, DeferredValue, EntityParameter, Content, Value>(kind: Swift.String, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, Swift.Bool>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Content : SwiftUICore.View, Value : SwiftUICore.View, UpdatingIntent.PropertyReference.Value.ValueType == Swift.Bool
  #endif
}
@_spi(ControlEntities) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.ControlToggle {
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, UpdatingIntent, DeferredValue, EntityParameter, Content, SubtitleContent, Value>(kind: Swift.String, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder subtitle: @escaping (Swift.Bool, Intent) -> SubtitleContent, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value) where Intent == WidgetKit.EmptyConfiguration, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, Swift.Bool>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Content : SwiftUICore.View, SubtitleContent : SwiftUICore.View, Value : SwiftUICore.View, UpdatingIntent.PropertyReference.Value.ValueType == Swift.Bool
}
@_spi(ControlEntities) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.ControlToggle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, UpdatingIntent, DeferredValue, EntityParameter, Content, SubtitleContent, Value>(kind: Swift.String, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder subtitle: @escaping (Swift.Bool, Intent) -> SubtitleContent, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, Swift.Bool>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Content : SwiftUICore.View, SubtitleContent : SwiftUICore.View, Value : SwiftUICore.View, UpdatingIntent.PropertyReference.Value.ValueType == Swift.Bool
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<Entity, UpdatingIntent, DeferredValue, EntityParameter, Content, SubtitleContent, Value>(kind: Swift.String, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder subtitle: @escaping (Swift.Bool, Intent) -> SubtitleContent, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, Swift.Bool>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Content : SwiftUICore.View, SubtitleContent : SwiftUICore.View, Value : SwiftUICore.View, UpdatingIntent.PropertyReference.Value.ValueType == Swift.Bool
  #endif
}
@_spi(Server) extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _encodesPreciseTextLayout: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct DynamicIslandExpandedContent<Content> where Content : SwiftUICore.View {
  @usableFromInline
  internal var content: Content
  @usableFromInline
  internal init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@_functionBuilder public struct DynamicIslandExpandedContentBuilder {
  @_alwaysEmitIntoClient public static func buildPartialBlock<C>(first: WidgetKit.DynamicIslandExpandedRegion<C>) -> WidgetKit.DynamicIslandExpandedContent<some SwiftUICore.View> where C : SwiftUICore.View {
        DynamicIslandExpandedContent {
            first._viewRepresentation
        }
    }
  
  @_alwaysEmitIntoClient public static func buildPartialBlock<C>(first: WidgetKit.DynamicIslandExpandedContent<C>) -> WidgetKit.DynamicIslandExpandedContent<some SwiftUICore.View> where C : SwiftUICore.View {
        first
    }
  
  @_alwaysEmitIntoClient public static func buildPartialBlock<C0, C1>(accumulated: WidgetKit.DynamicIslandExpandedContent<C0>, next: WidgetKit.DynamicIslandExpandedRegion<C1>) -> WidgetKit.DynamicIslandExpandedContent<some SwiftUICore.View> where C0 : SwiftUICore.View, C1 : SwiftUICore.View {
        DynamicIslandExpandedContent {
            accumulated.content
            next._viewRepresentation
        }
    }
  
  @_alwaysEmitIntoClient public static func buildPartialBlock<C0, C1>(accumulated: WidgetKit.DynamicIslandExpandedContent<C0>, next: WidgetKit.DynamicIslandExpandedContent<C1>) -> WidgetKit.DynamicIslandExpandedContent<some SwiftUICore.View> where C0 : SwiftUICore.View, C1 : SwiftUICore.View {
        DynamicIslandExpandedContent {
            accumulated.content
            next.content
        }
    }
  
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _localizationToken: Foundation.Data {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplate {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func tint(_ tint: SwiftUICore.Color?) -> some SwiftUI.ControlWidgetTemplate
  
  #else
  @_Concurrency.MainActor @preconcurrency public func tint(_ tint: SwiftUICore.Color?) -> some SwiftUI.ControlWidgetTemplate
  
  #endif
  @_Concurrency.MainActor @preconcurrency public func privacySensitive(_ sensitive: Swift.Bool = true) -> some SwiftUI.ControlWidgetTemplate
  
  @available(iOS 18.0, *)
  @_spi_available(macOS, introduced: 15.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func disabled(_ disabled: Swift.Bool) -> some SwiftUI.ControlWidgetTemplate
  
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol AppIntentControlValueProvider {
  associatedtype Value
  associatedtype Configuration : AppIntents.ControlConfigurationIntent
  func previewValue(configuration: Self.Configuration) -> Self.Value
  func currentValue(configuration: Self.Configuration) async throws -> Self.Value
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AppIntentControlConfiguration<Configuration, Content> : SwiftUI.ControlWidgetConfiguration where Configuration : AppIntents.ControlConfigurationIntent, Content : SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetConfiguration {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit29AppIntentControlConfigurationV4bodyQrvp", 0) __<Configuration, Content>
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.AppIntentControlConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, provider: Provider, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping (Provider.Value) -> Content) where Configuration == Provider.Configuration, Provider : WidgetKit.AppIntentControlValueProvider
  @_Concurrency.MainActor @preconcurrency public init(kind: Swift.String, intent: Configuration.Type = Configuration.self, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping (Configuration) -> Content)
}
@_spi(Previews) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct WidgetPreviewContextKey : SwiftUI.PreviewContextKey {
  @_spi(Previews) public let family: WidgetKit.WidgetFamily
  @_spi(Previews) public let date: Foundation.Date
  @_spi(Previews) public let configuration: Intents.INIntent?
  @_spi(Previews) public static var defaultValue: WidgetKit.WidgetPreviewContextKey?
  @_spi(Previews) @available(iOS 16.0, macOS 13.0, *)
  public var contentCategory: Swift.String {
    @_spi(Previews) get
  }
  @_spi(Previews) @available(iOS 17.0, macOS 14.0, *)
  public var previewContentCategory: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
  @_spi(Previews) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Value = WidgetKit.WidgetPreviewContextKey?
}
@_spi(PreviewsPlugin) public enum WidgetPreviewContentCategory : Swift.String {
  @_spi(PreviewsPlugin) case `default`
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(PreviewsPlugin) public init?(rawValue: Swift.String)
  #else
  @_spi(PreviewsPlugin) public init?(rawValue: Swift.String)
  #endif
  @_spi(PreviewsPlugin) public typealias RawValue = Swift.String
  @_spi(PreviewsPlugin) public var rawValue: Swift.String {
    @_spi(PreviewsPlugin) get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct WidgetPreviewContext : SwiftUI.PreviewContext {
  public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) public init(family: WidgetKit.WidgetFamily, date: Foundation.Date = Date(), configuration: Intents.INIntent? = nil)
  #else
  @_spi(Previews) public init(family: WidgetKit.WidgetFamily, date: Foundation.Date = Date(), configuration: Intents.INIntent? = nil)
  #endif
  public init(family: WidgetKit.WidgetFamily)
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func controlWidgetStatus(_ status: SwiftUICore.Text) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func controlWidgetStatus(_ statusKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func controlWidgetStatus<S>(_ status: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func controlWidgetActionHint(_ status: SwiftUICore.Text) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func controlWidgetActionHint(_ statusKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func controlWidgetActionHint<S>(_ status: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@_spi(Server) @objc public class DescriptorFetchResult : ObjectiveC.NSObject, Foundation.NSSecureCoding, Swift.Codable {
  @_spi(Server) @objc public class var supportsSecureCoding: Swift.Bool {
    @_spi(Server) @objc get
  }
  @_spi(Server) final public let widgetDescriptors: [ChronoServices.CHSWidgetDescriptor]
  @_spi(Server) final public let controlDescriptors: [ChronoServices.CHSControlDescriptor]
  @_spi(Server) final public let activityDescriptors: [ChronoServices.CHSSessionPlatterDescriptor]
  @_spi(Server) public init(widgetDescriptors: [ChronoServices.CHSWidgetDescriptor], activityDescriptors: [ChronoServices.CHSSessionPlatterDescriptor], controlDescriptors: [ChronoServices.CHSControlDescriptor])
  @_spi(Server) public init(widgetDescriptors: [ChronoServices.CHSWidgetDescriptor], controlDescriptors: [ChronoServices.CHSControlDescriptor])
  @_spi(Server) required convenience public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  @_spi(Server) @objc deinit
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ControlPushHandler {
  init()
  func pushTokensDidChange(controls: [WidgetKit.ControlInfo])
}
@_spi(ProposedAPI_ContextualWidgets) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public protocol WidgetRelevanceProvider {
  associatedtype Configuration
  @_spi(ProposedAPI_ContextualWidgets) func relevances() async -> WidgetKit.WidgetRelevances<Self.Configuration>
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol TimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  typealias Context = WidgetKit.TimelineProviderContext
  func placeholder(in context: Self.Context) -> Self.Entry
  @preconcurrency func getSnapshot(in context: Self.Context, completion: @escaping @Sendable (Self.Entry) -> Swift.Void)
  @preconcurrency func getTimeline(in context: Self.Context, completion: @escaping @Sendable (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  func relevances() async -> WidgetKit.WidgetRelevances<Swift.Void>
}
extension WidgetKit.TimelineProvider {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public func relevances() async -> WidgetKit.WidgetRelevances<Swift.Void>
}
package struct ControlCenterXPCDefinition {
  public static let clientInterface: ObjectiveC.`Protocol`
  public static let serverInterface: ObjectiveC.`Protocol`
  public static let qos: BoardServices.BSServiceQuality
  public static let domain: Swift.String
  public static let serviceName: Swift.String
  public static let machServiceName: Swift.String
}
@_spi(Previews) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
@_Concurrency.MainActor public struct TimelineEntryPreviewSource : WidgetKit.TimelinePreviewSource {
  @_spi(Previews) @_Concurrency.MainActor public let makeWidget: () -> any SwiftUI.Widget
  @_spi(Previews) @_Concurrency.MainActor public var family: WidgetKit.WidgetFamily
  @_spi(Previews) @_Concurrency.MainActor public func unwrapTimeline<Entry>(for: Entry.Type = Entry.self) async throws -> [Entry] where Entry : WidgetKit.TimelineEntry
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) @_Concurrency.MainActor public var intent: Intents.INIntent? {
    @_spi(Previews) get
  }
  #else
  @_spi(Previews) @_Concurrency.MainActor public var intent: Intents.INIntent? {
    @_spi(Previews) get
  }
  #endif
  @_spi(Previews) @_Concurrency.MainActor public var contentCategory: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
  @_spi(Previews) @_Concurrency.MainActor public var contentDomain: DeveloperToolsSupport.PreviewSourceContentDomain {
    @_spi(Previews) get
  }
}
@_spi(Previews) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
@_Concurrency.MainActor public struct TimelineProviderPreviewSource : WidgetKit.TimelinePreviewSource {
  @_spi(Previews) @_Concurrency.MainActor public let makeWidget: () -> any SwiftUI.Widget
  @_spi(Previews) @_Concurrency.MainActor public var family: WidgetKit.WidgetFamily
  @_spi(Previews) @_Concurrency.MainActor public let intent: Intents.INIntent?
  @_spi(Previews) @_Concurrency.MainActor public let appIntent: (any AppIntents.WidgetConfigurationIntent)?
  @_spi(Previews) @_Concurrency.MainActor public func unwrapContent<Provider>(for: Provider.Type = Provider.self) throws -> Provider where Provider : WidgetKit.TimelineProvider
  @_spi(Previews) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
  @_Concurrency.MainActor public func unwrapContent<Provider>(for: Provider.Type = Provider.self) throws -> (Provider.Intent, Provider) where Provider : WidgetKit.IntentTimelineProvider
  @_spi(Previews) @_Concurrency.MainActor public func unwrapContent<Provider>(for: Provider.Type = Provider.self) throws -> (Provider.Intent, Provider) where Provider : WidgetKit.AppIntentTimelineProvider
  @_spi(Previews) @_Concurrency.MainActor public var contentCategory: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
  @_spi(Previews) @_Concurrency.MainActor public var contentDomain: DeveloperToolsSupport.PreviewSourceContentDomain {
    @_spi(Previews) get
  }
}
@_spi(Previews) extension DeveloperToolsSupport.PreviewSourceContentCategory {
  @_spi(Previews) public static var timelineWidget: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
}
@_spi(Previews) public protocol TimelinePreviewSource : DeveloperToolsSupport.PreviewSource {
  @_spi(Previews) var makeWidget: () -> any SwiftUI.Widget { get }
  @_spi(Previews) var family: WidgetKit.WidgetFamily { get set }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) var intent: Intents.INIntent? { get }
  #else
  @_spi(Previews) var intent: Intents.INIntent? { get }
  #endif
}
@_spi(Previews) public protocol TimelineWidgetConfiguration : SwiftUI.WidgetConfiguration {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #else
  @_spi(Previews) func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #endif
}
@_spi(Previews) extension WidgetKit.StaticConfiguration : WidgetKit.TimelineWidgetConfiguration {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #else
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #endif
}
@_spi(Previews) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension WidgetKit.IntentConfiguration : WidgetKit.TimelineWidgetConfiguration {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #else
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #endif
}
@_spi(Previews) extension WidgetKit.AppIntentConfiguration : WidgetKit.TimelineWidgetConfiguration {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #else
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func previewTimeline(source: some TimelinePreviewSource, with context: WidgetKit.TimelineProviderContext, completion: @escaping (Swift.Result<WidgetKit.WidgetViewCollection, any Swift.Error>) -> Swift.Void)
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@objc public protocol WidgetCenterConnection_Host {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func _loadCurrentConfigurations(_ completion: @escaping ([ChronoServices.CHSWidget], (any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func _loadCurrentConfigurations(_ completion: @escaping ([ChronoServices.CHSWidget], (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func _reloadTimelines(ofKind: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func _reloadTimelines(ofKind: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func _reloadTimelines(ofKind: Swift.String, inBundle: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func _reloadTimelines(ofKind: Swift.String, inBundle: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func _reloadAllTimelines(_ completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func _reloadAllTimelines(_ completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func invalidateConfigurationRecommendations(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func invalidateConfigurationRecommendations(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func invalidateConfigurationRecommendations(inBundle bundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func invalidateConfigurationRecommendations(inBundle bundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  @_spi(Server) @objc func invalidateRelevances(ofKind: Swift.String) async throws
  @_spi(Server) @objc func invalidateRelevances(ofKind: Swift.String, inBundle: Swift.String) async throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func widgetRelevanceArchive(forKind kind: Swift.String, inBundle: Swift.String?, handler: @escaping ((any Swift.Error)?, Foundation.FileHandle?) -> ())
  #else
  @_spi(Server) @objc func widgetRelevanceArchive(forKind kind: Swift.String, inBundle: Swift.String?, handler: @escaping ((any Swift.Error)?, Foundation.FileHandle?) -> ())
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@objc public protocol WidgetCenterConnection_Remote {
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public class WidgetCenter {
  @_spi(Server) public static let serviceName: Swift.String
  @_spi(Server) public static var configuredHostXPCInterface: Foundation.NSXPCInterface {
    get
  }
  public static let shared: WidgetKit.WidgetCenter
  public struct UserInfoKey {
    public static let kind: Swift.String
    public static let family: Swift.String
    public static let activityID: Swift.String
  }
  @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
  public func invalidateConfigurationRecommendations()
  @_spi(DaemonClient) public func invalidateConfigurationRecommendations(inBundle bundleIdentifier: Swift.String)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @preconcurrency public func getCurrentConfigurations(_ completion: @escaping @Sendable (Swift.Result<[WidgetKit.WidgetInfo], any Swift.Error>) -> Swift.Void)
  #else
  @preconcurrency public func getCurrentConfigurations(_ completion: @escaping @Sendable (Swift.Result<[WidgetKit.WidgetInfo], any Swift.Error>) -> Swift.Void)
  #endif
  public func currentConfigurations() async throws -> [WidgetKit.WidgetInfo]
  public func reloadTimelines(ofKind kind: Swift.String)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DaemonClient) public func reloadTimelines(ofKind kind: Swift.String, inBundle bundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(DaemonClient) public func reloadTimelines(ofKind kind: Swift.String, inBundle bundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  public func reloadAllTimelines()
  @_spi(Private) public struct Private_Timeouts {
    @_spi(Private) public static let placeholder: Foundation.TimeInterval
    @_spi(Private) public static let timeline: Foundation.TimeInterval
    @_spi(Private) public static let URLSessionEvents: Foundation.TimeInterval
  }
  @objc deinit
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension WidgetKit.WidgetCenter {
  public func invalidateRelevances(ofKind kind: Swift.String)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DaemonClient) public func invalidateRelevances(ofKind kind: Swift.String, inBundle bundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(DaemonClient) public func invalidateRelevances(ofKind kind: Swift.String, inBundle bundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DaemonClient) public func setRelevances<Configuration>(_ relevances: WidgetKit.WidgetRelevances<Configuration>, kind: Swift.String, inBundle containerBundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(DaemonClient) public func setRelevances<Configuration>(_ relevances: WidgetKit.WidgetRelevances<Configuration>, kind: Swift.String, inBundle containerBundleIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func setRelevanceResult(_ result: WidgetKit.WidgetRelevanceFetchResult, kind: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  package func setRelevanceResult(_ result: WidgetKit.WidgetRelevanceFetchResult, kind: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
}
@_spi(Server) public enum ActivityViewTag : Swift.Hashable, Swift.CaseIterable, Swift.Codable, Swift.CustomStringConvertible {
  @_spi(Server) case listItem
  @_spi(Server) case jindo(WidgetKit.JindoViewTag)
  @_spi(Server) public var isJindo: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public static var allCases: [WidgetKit.ActivityViewTag] {
    @_spi(Server) get
  }
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var defaultViewAlignment: SwiftUICore.Alignment {
    @_spi(Server) get
  }
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public static func == (a: WidgetKit.ActivityViewTag, b: WidgetKit.ActivityViewTag) -> Swift.Bool
  @_spi(Server) public typealias AllCases = [WidgetKit.ActivityViewTag]
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
  public var widget: ChronoServices.CHSWidget? {
    get
    set
  }
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
  public var widget: ChronoServices.CHSWidget? {
    get
    set
  }
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct WidgetURLModifier : SwiftUICore.ViewModifier, SwiftUI._ArchivableViewModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL?)
  #else
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL?)
  #endif
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public func body(content: WidgetKit.WidgetURLModifier.Content) -> some SwiftUICore.View
  
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit0A11URLModifierV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_spi(Server) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct WidgetURLPreferenceKey : SwiftUICore.HostPreferenceKey {
  @_spi(Server) public static var defaultValue: Foundation.URL?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func reduce(value: inout Foundation.URL?, nextValue: () -> Foundation.URL?)
  #else
  @_spi(Server) public static func reduce(value: inout Foundation.URL?, nextValue: () -> Foundation.URL?)
  #endif
  @_spi(Server) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Value = Foundation.URL?
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func widgetURL(_ url: Foundation.URL?) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func widgetURL(_ url: Foundation.URL?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForHiddenApps) @available(*, deprecated, message: "Please use `widgetURL` with the appropriate entitlements")
  @_Concurrency.MainActor @preconcurrency public func hiddenWidgetURL(_ url: Foundation.URL?) -> some SwiftUICore.View
  
  #else
  @_spi(ForHiddenApps) @available(*, deprecated, message: "Please use `widgetURL` with the appropriate entitlements")
  @_Concurrency.MainActor @preconcurrency public func hiddenWidgetURL(_ url: Foundation.URL?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) public let IgnoredWidgetURL: Foundation.URL
@_spi(Previews) public struct ActivityArchiver {
  @_spi(Previews) public var request: WidgetKit.ActivityWidgetRequest
  @_spi(Previews) @usableFromInline
  internal let signposter: os.OSSignposter
  @_spi(Previews) public static let PreviewsActivityID: Swift.String
  @_spi(Previews) public static func makeArchivedViewCollection(attributesType: ActivityKit.ActivityAttributesType, attributesData: Foundation.Data, contentStatePayload: Foundation.Data, isStale: Swift.Bool, viewSource: WidgetKit.ActivityViewSource, metricsDefinition: WidgetKit.ActivityMetricsDefinition, environment: WidgetKit.WidgetEnvironment, payloadID: Swift.String, supportedFamilies: [WidgetKit.ActivityFamily]) throws -> Foundation.Data
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func applyCommonEnvironment(widget: ChronoServices.CHSWidget, metrics: ChronoServices.CHSWidgetMetrics, overrideFamily: ChronoServices.CHSWidgetFamily? = nil) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency package func applyCommonEnvironment(widget: ChronoServices.CHSWidget, metrics: ChronoServices.CHSWidgetMetrics, overrideFamily: ChronoServices.CHSWidgetFamily? = nil) -> some SwiftUICore.View
  
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public enum CKCErrorCode : Swift.Int, Swift.CustomDebugStringConvertible {
  @_spi(Server) case watchdog
  @_spi(Server) case invalidSizeConfiguration
  @_spi(Server) case timelineReloadFailed
  @_spi(Server) case timelineReloadTimeout
  @_spi(Server) case timelineReloadLocationDeferred
  @_spi(Server) case descriptorNotFound
  @_spi(Server) case noEntries
  @_spi(Server) case illegalConfiguration
  @_spi(Server) case intentConfigurationNotFound
  @_spi(Server) case controlTypeMismatch
  @_spi(Server) case controlNotFound
  @_spi(Server) case controlDeveloperAPIValueProviderError
  @_spi(Server) case widgetCenterFailure
  @_spi(Server) case extensionNotFound
  @_spi(Server) case environmentNotFound
  @_spi(Server) case backgroundAbsent
  @_spi(Server) case archiveNotFound
  @_spi(Server) case controlReloadFailed
  @_spi(Server) case invalidControlIcon
  @_spi(Server) public var debugDescription: Swift.String {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init?(rawValue: Swift.Int)
  #else
  @_spi(Server) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias RawValue = Swift.Int
  @_spi(Server) public var rawValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) public typealias ChronoKitErrorCode = WidgetKit.CKCErrorCode
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension Foundation.NSError {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) convenience public init(code: WidgetKit.CKCErrorCode, underlyingError: (any Swift.Error)? = nil, debugDescription: Swift.String? = nil, __file file: Swift.StaticString = #file, __line line: Swift.Int = #line)
  #else
  @_spi(Server) convenience public init(code: WidgetKit.CKCErrorCode, underlyingError: (any Swift.Error)? = nil, debugDescription: Swift.String? = nil, __file file: Swift.StaticString = #file, __line line: Swift.Int = #line)
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension Foundation.NSError {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) convenience public init(domain: Swift.String, code: Swift.Int, underlyingError: (any Swift.Error)? = nil, debugDescription: Swift.String? = nil, __file file: Swift.StaticString = #file, __line line: Swift.Int = #line)
  #else
  @_spi(Server) convenience public init(domain: Swift.String, code: Swift.Int, underlyingError: (any Swift.Error)? = nil, debugDescription: Swift.String? = nil, __file file: Swift.StaticString = #file, __line line: Swift.Int = #line)
  #endif
}
@_spi(Server) extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var userWantsWidgetDataWhenPasscodeLocked: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Server) extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var userWantsLiveActivityDataWhenPasscodeLocked: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Server) @available(iOS 16.1, watchOS 11.0, tvOS 18.0, *)
@available(macOS, unavailable)
@frozen public enum JindoDisplayMode : Swift.Hashable, Swift.CaseIterable, Swift.Codable, Swift.Comparable {
  @_spi(Server) case minimal
  @_spi(Server) case compact
  @_spi(Server) case expanded
  @_spi(Server) public static func < (lhs: WidgetKit.JindoDisplayMode, rhs: WidgetKit.JindoDisplayMode) -> Swift.Bool
  @_spi(Server) public static func == (a: WidgetKit.JindoDisplayMode, b: WidgetKit.JindoDisplayMode) -> Swift.Bool
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public typealias AllCases = [WidgetKit.JindoDisplayMode]
  @_spi(Server) public static var allCases: [WidgetKit.JindoDisplayMode] {
    @_spi(Server) get
  }
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Server) extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var jindoDisplayMode: WidgetKit.JindoDisplayMode {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
@_Concurrency.MainActor @preconcurrency public struct AccessoryWidgetBackground : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit09AccessoryA10BackgroundV4bodyQrvp", 0) __
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
  public var widgetContentMargins: SwiftUICore.EdgeInsets {
    get
  }
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
  @usableFromInline
  internal struct WidgetContentMarginsKey : SwiftUICore.EnvironmentKey {
    @usableFromInline
    internal static var defaultValue: SwiftUICore.EdgeInsets {
      get
    }
    @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias Value = SwiftUICore.EdgeInsets
  }
}
@available(iOS 15.0, macOS 12.0, watchOS 9.0, tvOS 18.0, *)
extension SwiftUI.WidgetConfiguration {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func contentMarginsDisabled() -> some SwiftUI.WidgetConfiguration {
        if #available(iOS 17.0, watchOS 10.0, macOS 14.0, *) {
            return _contentMarginsDisabled()
        } else {
            return self
        }
    }
  
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
  @_Concurrency.MainActor @preconcurrency public func _contentMarginsDisabled() -> some SwiftUI.WidgetConfiguration
  
}
@_spi(Previews) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
@_Concurrency.MainActor public struct ActivityPreviewSource : DeveloperToolsSupport.PreviewSource {
  @_spi(Previews) public struct Content<Attributes> where Attributes : ActivityKit.ActivityAttributes {
    @_spi(Previews) public var attributes: Attributes
    @_spi(Previews) public var states: [Attributes.ContentState]
  }
  @_spi(Previews) @_Concurrency.MainActor public let makeWidget: () -> any SwiftUI.Widget
  @_spi(Previews) @_Concurrency.MainActor public let viewKind: WidgetKit.ActivityPreviewViewKind
  @_spi(Previews) @_Concurrency.MainActor public func makeContent<Attributes>(for: Attributes.Type = Attributes.self) async throws -> WidgetKit.ActivityPreviewSource.Content<Attributes> where Attributes : ActivityKit.ActivityAttributes
  @_spi(Previews) @_Concurrency.MainActor public var contentCategory: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
  @_spi(Previews) @_Concurrency.MainActor public var contentDomain: DeveloperToolsSupport.PreviewSourceContentDomain {
    @_spi(Previews) get
  }
  @_spi(Previews) @_Concurrency.MainActor public var supportsOnDevicePreviews: Swift.Bool {
    @_spi(Previews) get
  }
}
@_spi(Previews) extension SwiftUI.Widget {
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func buildActivityHost() -> any WidgetKit.ActivityWidgetHost
}
@_spi(Previews) public protocol ActivityWidgetHost {
  @_spi(Previews) var supportedActivityFamilies: [WidgetKit.ActivityFamily] { get }
}
@_spi(Previews) extension DeveloperToolsSupport.PreviewSourceContentCategory {
  @_spi(Previews) public static var activityWidget: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlPicker<Intent> : SwiftUI.WidgetConfiguration where Intent : AppIntents.AppIntent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some PickerStateProvider<Intent.ValueType, Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (Intent.ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(Intent.ValueType, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #else
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some PickerStateProvider<Intent.ValueType, Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (Intent.ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(Intent.ValueType, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some PickerStateProvider<Intent.ValueType, Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (Intent.ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(Intent.ValueType, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #else
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some PickerStateProvider<Intent.ValueType, Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (Intent.ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(Intent.ValueType, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #endif
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    @_spi(SSC) get
  }
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 9.0)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit13ControlPickerV4bodyQrvp", 0) __<Intent>
}
@_spi(SSC) extension WidgetKit.ControlPicker {
  @_spi(SSC) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "Use `ControlPicker.init(kind:intent:displayName:preferredSize:stateProvider:title:subtitle:value:affordances:)`.")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Content, ValueLabel>(kind: Swift.String, intent: Intent.Type, stateProvider: some PickerStateProvider<Intent.ValueType, Intent>, @SwiftUICore.ViewBuilder content: @escaping () -> Content, @SwiftUICore.ViewBuilder value: @escaping (Intent.ValueType, Intent) -> ValueLabel) where Content : SwiftUICore.View, ValueLabel : SwiftUICore.View
}
@_spi(SSC) extension WidgetKit.ControlPicker {
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(macOS, introduced: 15.0)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func disabled(_ disabled: Swift.Bool) -> WidgetKit.ControlPicker<Intent>
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol PickerStateProvider<State, Intent> {
  associatedtype Intent : WidgetKit.SetValueAppIntent
  associatedtype State : Swift.Identifiable where Self.State == Self.Intent.ValueType
  @_spi(SSC) func allStates(configuration: Self.Intent) -> [Self.State]
  @_spi(SSC) func state(configuration: Self.Intent) async throws -> Self.State
}
#else
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol PickerStateProvider {
  associatedtype Intent : WidgetKit.SetValueAppIntent
  associatedtype State : Swift.Identifiable where Self.State == Self.Intent.ValueType
  @_spi(SSC) func allStates(configuration: Self.Intent) -> [Self.State]
  @_spi(SSC) func state(configuration: Self.Intent) async throws -> Self.State
}
#endif
@_spi(Server) @_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public class _TimelineArchivedViewCollection : WidgetKit.TimelineViewCollection {
  @_spi(Server) public var environment: WidgetKit.WidgetEnvironment {
    @_spi(Server) get
  }
  @_spi(Server) public var widget: ChronoServices.CHSWidget {
    @_spi(Server) get
  }
  @_spi(Server) public var reloadPolicy: WidgetKit.TimelineReloadPolicy {
    @_spi(Server) get
  }
  @_spi(Server) public var isEmpty: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public var creationDate: Foundation.Date {
    @_spi(Server) get
  }
  @_spi(Server) public var requiresReload: Swift.Bool
  @_spi(Server) public var originatingBundle: WidgetKit.BundleStub {
    @_spi(Server) get
  }
  @_spi(Server) public var entries: [any WidgetKit.TimelineEntry] {
    @_spi(Server) get
  }
  @_spi(Server) public var protectionLevel: WidgetKit.DataProtectionLevel
  @_spi(Server) public var dateRange: Foundation.DateInterval {
    @_spi(Server) get
    @_spi(Server) set
  }
  @_spi(Server) public var metrics: ChronoServices.CHSWidgetMetrics {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ViewableTimelineEntry?
  #else
  @_spi(Server) public func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ViewableTimelineEntry?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func viewableEntry(for metadataIndex: Swift.Int, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath] = []) throws -> WidgetKit.ViewableTimelineEntry?
  #else
  @_spi(Server) public func viewableEntry(for metadataIndex: Swift.Int, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath] = []) throws -> WidgetKit.ViewableTimelineEntry?
  #endif
  @_spi(Server) @objc deinit
}
@_spi(Server) public struct ActivityViewEntryMetadata : Swift.Equatable, Swift.Codable {
  @_spi(Server) public var metrics: WidgetKit.ActivityViewMetrics
  @_spi(Server) public var containsPrivacyRedactions: Swift.Bool
  @_spi(Server) public var backgroundTintColor: WidgetKit.CodableColor?
  @_spi(Server) public var textColor: WidgetKit.CodableColor?
  @_spi(Server) public var archivedFamily: WidgetKit.ActivityFamily
  @_spi(Server) public static func == (a: WidgetKit.ActivityViewEntryMetadata, b: WidgetKit.ActivityViewEntryMetadata) -> Swift.Bool
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ControlAffordances {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) public init(tint: SwiftUICore.Color? = nil, status: SwiftUICore.Text? = nil, actionHint: SwiftUICore.Text? = nil)
  #else
  @_spi(SSC) public init(tint: SwiftUICore.Color? = nil, status: SwiftUICore.Text? = nil, actionHint: SwiftUICore.Text? = nil)
  #endif
}
@_spi(Server) @objc public class ActivityWidgetRequest : ObjectiveC.NSObject, Foundation.NSSecureCoding, Swift.Codable {
  @_spi(Server) @objc public class var supportsSecureCoding: Swift.Bool {
    @_spi(Server) @objc get
  }
  @_spi(Server) final public let descriptor: ActivityKit.ActivityDescriptor
  @_spi(Server) final public let defaultPayload: Foundation.Data
  @_spi(Server) final public let metrics: WidgetKit.ActivityMetricsDefinition
  @_spi(Server) public struct PayloadMetadata {
    @_spi(Server) public let payloadID: Swift.String
    @_spi(Server) public let isStale: Swift.Bool
    @_spi(Server) public let isAlerting: Swift.Bool
  }
  @_spi(Server) final public let payloadMetadata: WidgetKit.ActivityWidgetRequest.PayloadMetadata
  @_spi(Server) final public let fileHandle: Foundation.FileHandle
  @_spi(Server) final public let environment: WidgetKit.WidgetEnvironment
  @_spi(Server) final public let archiveVersion: WidgetKit.ArchiveVersion?
  @_spi(Server) public var jindoEnvironment: WidgetKit.WidgetEnvironment?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(descriptor: ActivityKit.ActivityDescriptor, metrics: WidgetKit.ActivityMetricsDefinition, defaultPayload: Foundation.Data, fileHandle: Foundation.FileHandle, environment: WidgetKit.WidgetEnvironment, isStale: Swift.Bool, payloadID: Swift.String, archiveVersion: WidgetKit.ArchiveVersion?, isAlerting: Swift.Bool = false)
  #else
  @_spi(Server) public init(descriptor: ActivityKit.ActivityDescriptor, metrics: WidgetKit.ActivityMetricsDefinition, defaultPayload: Foundation.Data, fileHandle: Foundation.FileHandle, environment: WidgetKit.WidgetEnvironment, isStale: Swift.Bool, payloadID: Swift.String, archiveVersion: WidgetKit.ArchiveVersion?, isAlerting: Swift.Bool = false)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(descriptor: ActivityKit.ActivityDescriptor, metrics: WidgetKit.ActivityMetricsDefinition, defaultPayload: Foundation.Data, fileHandle: Foundation.FileHandle, environment: WidgetKit.WidgetEnvironment, jindoEnvironment: WidgetKit.WidgetEnvironment?, isStale: Swift.Bool, payloadID: Swift.String, archiveVersion: WidgetKit.ArchiveVersion?, isAlerting: Swift.Bool)
  #else
  @_spi(Server) public init(descriptor: ActivityKit.ActivityDescriptor, metrics: WidgetKit.ActivityMetricsDefinition, defaultPayload: Foundation.Data, fileHandle: Foundation.FileHandle, environment: WidgetKit.WidgetEnvironment, jindoEnvironment: WidgetKit.WidgetEnvironment?, isStale: Swift.Bool, payloadID: Swift.String, archiveVersion: WidgetKit.ArchiveVersion?, isAlerting: Swift.Bool)
  #endif
  @_spi(Server) required convenience public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  @_spi(Server) @objc deinit
}
@_spi(Server) @_spi(Private) @_Concurrency.MainActor @preconcurrency public struct _ClockHandRotationEffect : SwiftUICore.ViewModifier, SwiftUI._ArchivableViewModifier {
  @_spi(Server) @_spi(Private) public enum Period {
    @_spi(Server) @_spi(Private) case hourHand
    @_spi(Server) @_spi(Private) case minuteHand
    @_spi(Server) @_spi(Private) case secondHand
    @_spi(Server) @_spi(Private) case custom(Foundation.TimeInterval)
  }
  @_spi(Server) @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) @_spi(Private) @_Concurrency.MainActor @preconcurrency public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) @_spi(Private) @_Concurrency.MainActor @preconcurrency public func body(content: WidgetKit._ClockHandRotationEffect.Content) -> some SwiftUICore.View
  
  @_spi(Server) @_spi(Private) @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit24_ClockHandRotationEffectV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
@_spi(Server) @_spi(Private) extension SwiftUICore.View {
  @_spi(Server) @_spi(Private) @_Concurrency.MainActor @preconcurrency public func _clockHandRotationEffect(_ period: WidgetKit._ClockHandRotationEffect.Period, in timeZone: Foundation.TimeZone, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View
  
}
@_spi(Server) extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _wantsCustomFontsEmbeddedInArchive: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Server) extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var inJindo: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Previews) public struct ActivityViewSource {
}
@_spi(Server) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _widgetAccessoryBackgroundAccentable: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Server) @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
public struct WidgetRenderScheme : Swift.Comparable, Swift.Codable, Swift.Hashable, Swift.CustomStringConvertible {
  @_spi(Server) public static let `default`: WidgetKit.WidgetRenderScheme
  @_spi(Server) public static var allCases: [WidgetKit.WidgetRenderScheme] {
    @_spi(Server) get
  }
  @_spi(Server) public var renderingMode: WidgetKit.WidgetRenderingMode
  @_spi(Server) public var backgroundViewPolicy: ChronoServices.CHSWidgetBackgroundViewPolicy
  @_spi(Server) public var actuallyIncludeBackground: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public var developerFacingEnvironmentShowsWidgetBackground: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public init(_ renderScheme: ChronoServices.CHSWidgetRenderScheme)
  @_spi(Server) public init(renderingMode: WidgetKit.WidgetRenderingMode, backgroundViewPolicy: ChronoServices.CHSWidgetBackgroundViewPolicy)
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public static func < (lhs: WidgetKit.WidgetRenderScheme, rhs: WidgetKit.WidgetRenderScheme) -> Swift.Bool
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public static func == (a: WidgetKit.WidgetRenderScheme, b: WidgetKit.WidgetRenderScheme) -> Swift.Bool
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) extension Swift.Sequence where Self.Element == ChronoServices.CHSWidgetRenderScheme {
  @_spi(Server) public var widgetRenderSchemes: [WidgetKit.WidgetRenderScheme] {
    @_spi(Server) get
  }
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlButton<Intent> : SwiftUI.WidgetConfiguration where Intent : AppIntents.AppIntent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @available(*, deprecated, message: "Use the title/subtitle builders that take an `isActive` argument")
  @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View
  #else
  @_spi(SSC) @available(*, deprecated, message: "Use the title/subtitle builders that take an `isActive` argument")
  @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Swift.Bool, Intent) -> Subtitle, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View
  #else
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Swift.Bool, Intent) -> Subtitle, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @available(*, deprecated, message: "Use the title builder that takes an `isActive` argument")
  @_Concurrency.MainActor @preconcurrency public init<Title>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View
  #else
  @_spi(SSC) @available(*, deprecated, message: "Use the title builder that takes an `isActive` argument")
  @_Concurrency.MainActor @preconcurrency public init<Title>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Title, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View
  #else
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, @SwiftUICore.ViewBuilder title: @escaping (Swift.Bool, Intent) -> Title, affordances: Swift.Optional<(Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View
  #endif
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    @_spi(SSC) get
  }
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 9.0)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit13ControlButtonV4bodyQrvp", 0) __<Intent>
}
@_spi(SSC) extension WidgetKit.ControlButton {
  @_spi(SSC) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "Use `ControlButton.init(kind:intent:displayName:preferredSize:title:subtitle:affordances:)`.")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Content>(kind: Swift.String, intent: Intent.Type, @SwiftUICore.ViewBuilder content: @escaping (Intent) -> Content) where Content : SwiftUICore.View
}
@_spi(SSC) extension WidgetKit.ControlButton {
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(macOS, introduced: 15.0)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func disabled(_ disabled: Swift.Bool) -> WidgetKit.ControlButton<Intent>
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@objc(CHKWidgetPersonality) public class WidgetPersonality : ObjectiveC.NSObject, ChronoServices.CHSWidgetPersonality, Foundation.NSSecureCoding {
  @_spi(Server) @objc final public let extensionBundleIdentifier: Swift.String
  @_spi(Server) @objc final public let kind: Swift.String
  @_spi(Server) public init(extensionBundleIdentifier: Swift.String, kind: Swift.String)
  @_spi(Server) public init<T>(_ prototype: T) where T : ChronoServices.CHSWidgetPersonality
  @_spi(Server) @objc public func matches(personality: any ChronoServices.CHSWidgetPersonality) -> Swift.Bool
  @_spi(Server) @objc override dynamic public var hash: Swift.Int {
    @_spi(Server) @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  #else
  @_spi(Server) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  #endif
  @_spi(Server) @objc public class var supportsSecureCoding: Swift.Bool {
    @_spi(Server) @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  @_spi(Server) @objc override dynamic public var description: Swift.String {
    @_spi(Server) @objc get
  }
  @_spi(Server) @objc deinit
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
extension DeveloperToolsSupport.Preview {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> some Widget, @WidgetKit.PreviewTimelineBuilder timeline: @escaping @_Concurrency.MainActor () async -> [any WidgetKit.TimelineEntry])
  #else
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> some Widget, @WidgetKit.PreviewTimelineBuilder timeline: @escaping @_Concurrency.MainActor () async -> [any WidgetKit.TimelineEntry])
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> some TimelineProvider)
  #else
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> some TimelineProvider)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
  @_Concurrency.MainActor public init<Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> Provider) where Provider : WidgetKit.IntentTimelineProvider
  #else
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
  @_Concurrency.MainActor public init<Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> Provider) where Provider : WidgetKit.IntentTimelineProvider
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor public init<Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> Provider) where Provider : WidgetKit.AppIntentTimelineProvider
  #else
  @_Concurrency.MainActor public init<Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> some Widget, timelineProvider: @escaping () -> Provider) where Provider : WidgetKit.AppIntentTimelineProvider
  #endif
}
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
@freestanding(declaration) public macro Preview<Widget>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> Widget, @WidgetKit.PreviewTimelineBuilder timeline: @escaping @_Concurrency.MainActor () async -> [any WidgetKit.TimelineEntry]) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget
#endif
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
@freestanding(declaration) public macro Preview<Widget, Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, widget: @escaping () -> Widget, timelineProvider: @escaping () -> Provider) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget, Provider : WidgetKit.TimelineProvider
#endif
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@freestanding(declaration) public macro Preview<Widget, Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> Widget, timelineProvider: @escaping () -> Provider) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget, Provider : WidgetKit.IntentTimelineProvider
#endif
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
@freestanding(declaration) public macro Preview<Widget, Provider>(_ name: Swift.String? = nil, as family: WidgetKit.WidgetFamily, using intent: Provider.Intent, widget: @escaping () -> Widget, timelineProvider: @escaping () -> Provider) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget, Provider : WidgetKit.AppIntentTimelineProvider
#endif
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
@_functionBuilder public struct PreviewTimelineBuilder {
  @available(*, unavailable, message: "Please provide at lease one timeline entry to preview your widget.")
  @_alwaysEmitIntoClient public static func buildBlock() -> [any WidgetKit.TimelineEntry] {
        fatalError("Unreachable")
    }
  public static func buildExpression(_ entry: some TimelineEntry) -> [any WidgetKit.TimelineEntry]
  public static func buildPartialBlock(first: [any WidgetKit.TimelineEntry]) -> [any WidgetKit.TimelineEntry]
  public static func buildPartialBlock(accumulated: [any WidgetKit.TimelineEntry], next: [any WidgetKit.TimelineEntry]) -> [any WidgetKit.TimelineEntry]
  public static func buildArray(_ components: [[any WidgetKit.TimelineEntry]]) -> [any WidgetKit.TimelineEntry]
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public class WidgetLocalizations : Swift.Codable, Foundation.NSSecureCoding, Swift.CustomDebugStringConvertible {
  @_spi(Server) public init(identifier: Swift.String, availableLocalizations: [Swift.String], supportsMixedLocalizations: Swift.Bool)
  @_spi(Server) @objc public static var supportsSecureCoding: Swift.Bool {
    @_spi(Server) @objc get
  }
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) public var debugDescription: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) @objc deinit
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) required public init(from decoder: any Swift.Decoder) throws
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetLocalizations : Swift.Comparable {
  @_spi(Server) public static func == (lhs: WidgetKit.WidgetLocalizations, rhs: WidgetKit.WidgetLocalizations) -> Swift.Bool
  @_spi(Server) public static func < (lhs: WidgetKit.WidgetLocalizations, rhs: WidgetKit.WidgetLocalizations) -> Swift.Bool
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct WidgetIsSnapshottingKey : SwiftUICore.EnvironmentKey {
  @_spi(Server) public static var defaultValue: Swift.Bool
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Value = Swift.Bool
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var widgetIsSnapshotting: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Server) @available(iOS 16.1, macOS 13.0, watchOS 9.0, tvOS 18.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public var widgetReferenceDate: Foundation.Date? {
    @_spi(Server) get
    @_spi(Server) set
  }
  #else
  @_spi(Server) public var widgetReferenceDate: Foundation.Date? {
    @_spi(Server) get
    @_spi(Server) set
  }
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct WidgetAnimationsPausedKey : SwiftUICore.EnvironmentKey {
  @_spi(Server) public static var defaultValue: Swift.Bool
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Value = Swift.Bool
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var widgetAnimationsPaused: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Server) @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
public struct WidgetBackgroundAbsent {
}
extension SwiftUICore.EnvironmentValues {
  package var _widgetAccentedDesaturatedMode: ChronoServices.CHSTintAccentedDesaturatedMode {
    get
    set
  }
}
@_Concurrency.MainActor @preconcurrency package struct WidgetAccentedDesaturatedViewModifier : SwiftUI._ArchivableViewModifier {
  @_Concurrency.MainActor @preconcurrency package init(from decoder: any Swift.Decoder) throws
  @_Concurrency.MainActor @preconcurrency package func encode(to encoder: any Swift.Encoder) throws
  @_Concurrency.MainActor @preconcurrency package func body(content: WidgetKit.WidgetAccentedDesaturatedViewModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit0A31AccentedDesaturatedViewModifierV4body7contentQr7SwiftUI01_eF8_ContentVyACG_tF", 0) __
}
@available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _developmentMode: Swift.Bool {
    get
    set
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol WidgetExtensionSessionAssertionInvalidatable {
  @_spi(Server) func invalidate()
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol WidgetExtensionSessionSuspensionObserving {
  @_spi(Server) func invalidate(_ invalidatable: any WidgetKit.WidgetExtensionSessionAssertionInvalidatable, onSuspendOf bundleIdentifier: Swift.String)
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@objc public protocol WidgetExtensionSession {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getCurrentDescriptors(completion: @escaping ([ChronoServices.CHSWidgetDescriptor], (any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getCurrentDescriptors(completion: @escaping ([ChronoServices.CHSWidgetDescriptor], (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getAllCurrentDescriptors(completion: @escaping (WidgetKit.DescriptorFetchResult?, (any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getAllCurrentDescriptors(completion: @escaping (WidgetKit.DescriptorFetchResult?, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func handleURLSessionEvents(for sessionIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func handleURLSessionEvents(for sessionIdentifier: Swift.String, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func attachPreviewAgent(frameworkPath: Swift.String, endpoint: Swift.AnyObject?, handler: @escaping (BaseBoard.BSAuditToken?, (any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func attachPreviewAgent(frameworkPath: Swift.String, endpoint: Swift.AnyObject?, handler: @escaping (BaseBoard.BSAuditToken?, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func setControlState(_ state: WidgetKit.ModifyControlStateRequest, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func setControlState(_ state: WidgetKit.ModifyControlStateRequest, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func pushTokensDidChange(_ notification: WidgetKit.PushTokensDidChangeNotification, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func pushTokensDidChange(_ notification: WidgetKit.PushTokensDidChangeNotification, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getControlTemplates(requests: [WidgetKit.ControlTemplateRequest], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getControlTemplates(requests: [WidgetKit.ControlTemplateRequest], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getPlaceholders(requests: [WidgetKit.PlaceholderRequest], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getPlaceholders(requests: [WidgetKit.PlaceholderRequest], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getTimelines(requests: [WidgetKit.TimelineRequest], isPreview: Swift.Bool, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getTimelines(requests: [WidgetKit.TimelineRequest], isPreview: Swift.Bool, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getActivities(requests: [WidgetKit.ActivityWidgetRequest], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getActivities(requests: [WidgetKit.ActivityWidgetRequest], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  @_spi(Server) @objc func invalidate()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getAppIntentsXPCListenerEndpoint(completion: @escaping (Foundation.NSXPCListenerEndpoint?, Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getAppIntentsXPCListenerEndpoint(completion: @escaping (Foundation.NSXPCListenerEndpoint?, Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc func getWidgetRelevances(request: WidgetKit.WidgetRelevanceRequest, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc func getWidgetRelevances(request: WidgetKit.WidgetRelevanceRequest, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  @_spi(Server) @objc optional var pid: Darwin.pid_t { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc @available(*, deprecated, message: "Use `getCurrentDescriptors(completion:)` instead.")
  func getDescriptors(completion: @escaping ([ChronoServices.CHSAvocadoDescriptor], (any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc @available(*, deprecated, message: "Use `getCurrentDescriptors(completion:)` instead.")
  func getDescriptors(completion: @escaping ([ChronoServices.CHSAvocadoDescriptor], (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc @available(*, deprecated, message: "Please use `getPlaceholders(requests:completion)`")
  func getPlaceholders(environment environmentCodable: WidgetKit.WidgetEnvironment.SecureCodable, for requestsByDescriptor: [ChronoServices.CHSAvocadoDescriptor : [ChronoServices.CHSPlaceholderRequest]], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc @available(*, deprecated, message: "Please use `getPlaceholders(requests:completion)`")
  func getPlaceholders(environment environmentCodable: WidgetKit.WidgetEnvironment.SecureCodable, for requestsByDescriptor: [ChronoServices.CHSAvocadoDescriptor : [ChronoServices.CHSPlaceholderRequest]], completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc @available(*, deprecated, message: "Please use `getPlaceholders(requests:completion)`")
  func getPlaceholders(forRequests requestsByDescriptor: [ChronoServices.CHSWidgetDescriptor : [ChronoServices.CHSPlaceholderRequest]], inEnvironment environmentCodable: WidgetKit.WidgetEnvironment.SecureCodable, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc @available(*, deprecated, message: "Please use `getPlaceholders(requests:completion)`")
  func getPlaceholders(forRequests requestsByDescriptor: [ChronoServices.CHSWidgetDescriptor : [ChronoServices.CHSPlaceholderRequest]], inEnvironment environmentCodable: WidgetKit.WidgetEnvironment.SecureCodable, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc @available(*, deprecated, message: "Please use `getTimelines(requests:isPreview:completion)`")
  func getTimeline(for widget: ChronoServices.CHSWidget, into fileHandle: Foundation.FileHandle, environment: WidgetKit.WidgetEnvironment.SecureCodable, isPreview: Swift.Bool, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Server) @objc @available(*, deprecated, message: "Please use `getTimelines(requests:isPreview:completion)`")
  func getTimeline(for widget: ChronoServices.CHSWidget, into fileHandle: Foundation.FileHandle, environment: WidgetKit.WidgetEnvironment.SecureCodable, isPreview: Swift.Bool, completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
}
@_spi(Server) extension WidgetKit.WidgetExtensionSession {
  @_spi(Server) package static func makeLoggingIdentifier(sessionIdentifier: Foundation.UUID, extensionBundleIdentifier: ChronoServices.ExtensionBundleIdentifier, deviceIdentifier: ChronoServices.DeviceIdentifier) -> Swift.String
}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
public enum ActivityFamily : Swift.Equatable {
  case small
  case medium
}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension WidgetKit.ActivityFamily : Swift.Codable, Swift.CustomStringConvertible, Swift.RawRepresentable {
  public typealias RawValue = Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int)
  #else
  public init?(rawValue: Swift.Int)
  #endif
  public var rawValue: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_spi(Server) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension WidgetKit.ActivityFamily {
  @_spi(Server) public static var defaultFamily: WidgetKit.ActivityFamily {
    @_spi(Server) get
  }
  @_spi(Server) public var filePath: Swift.String {
    @_spi(Server) get
  }
}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func supplementalActivityFamilies(_ families: [WidgetKit.ActivityFamily]) -> some SwiftUI.WidgetConfiguration
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public var activityFamily: WidgetKit.ActivityFamily {
    get
    set
  }
}
@_spi(LiveActivities_Watch) @_spi(Internal) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
public struct SupportedActivityFamiliesEnvironmentKey : SwiftUICore.EnvironmentKey {
  @_spi(LiveActivities_Watch) @_spi(Internal) public static var defaultValue: Swift.Set<WidgetKit.ActivityFamily> {
    @_spi(LiveActivities_Watch) @_spi(Internal) get
  }
  @_spi(LiveActivities_Watch) @_spi(Internal) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable, introduced: 10.15)
  @available(macCatalyst, unavailable)
  public typealias Value = Swift.Set<WidgetKit.ActivityFamily>
}
extension SwiftUICore.EnvironmentValues {
  @_spi(LiveActivities_Watch) @_spi(Internal) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public var supportedActivityFamilies: Swift.Set<WidgetKit.ActivityFamily> {
    get
    set
  }
}
@_spi(Server) @_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public class WidgetArchiver {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func archive(_ collection: any WidgetKit.ArchivableTimelineViewCollection, to handle: Foundation.FileHandle, delegate: WidgetKit.WidgetArchiver.ArchivingDelegate? = nil) throws
  #else
  @_spi(Server) public static func archive(_ collection: any WidgetKit.ArchivableTimelineViewCollection, to handle: Foundation.FileHandle, delegate: WidgetKit.WidgetArchiver.ArchivingDelegate? = nil) throws
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func archive(_ collection: any WidgetKit.ArchivableTimelineViewCollection, to url: Foundation.URL, delegate: WidgetKit.WidgetArchiver.ArchivingDelegate? = nil) throws
  #else
  @_spi(Server) public static func archive(_ collection: any WidgetKit.ArchivableTimelineViewCollection, to url: Foundation.URL, delegate: WidgetKit.WidgetArchiver.ArchivingDelegate? = nil) throws
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func archive(_ collection: any WidgetKit.ArchivableTimelineViewCollection, delegate: WidgetKit.WidgetArchiver.ArchivingDelegate? = nil) throws -> Foundation.Data
  #else
  @_spi(Server) public static func archive(_ collection: any WidgetKit.ArchivableTimelineViewCollection, delegate: WidgetKit.WidgetArchiver.ArchivingDelegate? = nil) throws -> Foundation.Data
  #endif
  @_spi(Server) public enum ArchivingError : Foundation.LocalizedError {
    @_spi(Server) case failedToEncode(types: [any Any.Type])
    @_spi(Server) case bundleLookupFailed(underlyingError: any Swift.Error)
    @_spi(Server) case missingNecessaryWidgetMetrics
    @_spi(Server) case imageTooLarge(size: CoreFoundation.CGSize, maximumSize: CoreFoundation.CGSize)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Server) public var errorDescription: Swift.String? {
      @_spi(Server) get
    }
    #else
    @_spi(Server) public var errorDescription: Swift.String? {
      @_spi(Server) get
    }
    #endif
  }
  @_spi(Server) @_hasMissingDesignatedInitializers public class ArchivingDelegate : SwiftUICore._ArchivedViewHostDelegate {
    @_spi(Server) public struct SelectableRegionKey : Swift.Hashable {
      @_spi(Server) public let date: Foundation.Date
      @_spi(Server) public let environment: WidgetKit.WidgetEnvironment
      @_spi(Server) public init(date: Foundation.Date, environment: WidgetKit.WidgetEnvironment)
      @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
      @_spi(Server) public static func == (a: WidgetKit.WidgetArchiver.ArchivingDelegate.SelectableRegionKey, b: WidgetKit.WidgetArchiver.ArchivingDelegate.SelectableRegionKey) -> Swift.Bool
      @_spi(Server) public var hashValue: Swift.Int {
        @_spi(Server) get
      }
    }
    @_spi(Server) public struct SelectableRegion {
      @_spi(Server) public let identifier: Swift.String
      @_spi(Server) public let boundingRect: CoreFoundation.CGRect
      @_spi(Server) public let accessibilityNode: Foundation.Data?
    }
    @_spi(Server) final public let bundleStub: WidgetKit.BundleStub
    @_spi(Server) final public let systemVersion: WidgetKit.SystemVersion
    @_spi(Server) public var includeSelectableRegions: Swift.Bool
    @_spi(Server) public var computedSelectableRegions: [WidgetKit.WidgetArchiver.ArchivingDelegate.SelectableRegionKey : [WidgetKit.WidgetArchiver.ArchivingDelegate.SelectableRegion]]
    @_spi(Server) package var archiveVersion: WidgetKit.ArchiveVersion?
    @_spi(Server) public var failIfBackgroundIsMissing: Swift.Bool
    @_spi(Server) public var failIfAnyTypeFailedToEncode: Swift.Bool
    @_spi(Server) convenience public init(with viewCollection: any WidgetKit.TimelineViewCollection)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Server) public var maximumAllowedImagePixelSize: CoreFoundation.CGSize? {
      @_spi(Server) get
    }
    #else
    @_spi(Server) public var maximumAllowedImagePixelSize: CoreFoundation.CGSize? {
      @_spi(Server) get
    }
    #endif
    @_spi(Server) public func viewDataNeedsUpdate()
    @_spi(Server) public func failedToEncodeView(type: any Any.Type)
    @_spi(Server) public func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
    @_spi(Server) @objc deinit
  }
  @_spi(Server) @objc deinit
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct BundleStub : Swift.Codable, Swift.Hashable {
  @_spi(Server) public var url: Foundation.URL?
  @_spi(Server) public var identifier: ChronoServices.ExtensionIdentity
  @_spi(Server) public var version: Swift.String
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(identifier: ChronoServices.ExtensionIdentity, version: Swift.String, url: Foundation.URL?)
  #else
  @_spi(Server) public init(identifier: ChronoServices.ExtensionIdentity, version: Swift.String, url: Foundation.URL?)
  #endif
  @_spi(Server) public init(_ extensionIdentity: ChronoServices.ExtensionIdentity)
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public static func == (a: WidgetKit.BundleStub, b: WidgetKit.BundleStub) -> Swift.Bool
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension CoreServices_Private.LSBundleProxy {
  @_spi(Server) public var safeBundleVersion: Swift.String {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 16.0, macOS 12, tvOS 18.0, watchOS 9.0, *)
extension CoreServices_Private.LSBundleRecord {
  @_spi(Server) public var safeBundleVersion: Swift.String {
    @_spi(Server) get
  }
}
@objc @_inheritsConvenienceInitializers final package class WidgetRelevanceFetchResult : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  final package let isDefaultImplementation: Swift.Bool
  final package let widgetRelevances: [ChronoServices.CHSWidgetRelevance]
  package init(widgetRelevances: [ChronoServices.CHSWidgetRelevance])
  package static var defaultImplementationResult: WidgetKit.WidgetRelevanceFetchResult {
    get
  }
  @objc package static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc required package init(coder: Foundation.NSCoder)
  @objc final package func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct DynamicIslandExpandedRegionVerticalPlacement : Swift.Equatable {
  public static let `default`: WidgetKit.DynamicIslandExpandedRegionVerticalPlacement
  public static let belowIfTooWide: WidgetKit.DynamicIslandExpandedRegionVerticalPlacement
  public static func == (a: WidgetKit.DynamicIslandExpandedRegionVerticalPlacement, b: WidgetKit.DynamicIslandExpandedRegionVerticalPlacement) -> Swift.Bool
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct DynamicIslandExpandedRegionPosition {
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let leading: WidgetKit.DynamicIslandExpandedRegionPosition
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let trailing: WidgetKit.DynamicIslandExpandedRegionPosition
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let center: WidgetKit.DynamicIslandExpandedRegionPosition
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let bottom: WidgetKit.DynamicIslandExpandedRegionPosition
}
@available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct DynamicIslandExpandedRegion<Content> where Content : SwiftUICore.View {
  public init(_ position: WidgetKit.DynamicIslandExpandedRegionPosition, priority: Swift.Double = 0, @SwiftUICore.ViewBuilder content: () -> Content)
  public var _viewRepresentation: some SwiftUICore.View {
    get
  }
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ length: Swift.Double) -> WidgetKit.DynamicIslandExpandedRegion<Content>
}
extension SwiftUICore.View {
  @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func dynamicIsland(verticalPlacement: WidgetKit.DynamicIslandExpandedRegionVerticalPlacement) -> some SwiftUICore.View
  
}
@_spi(Server) @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct WidgetContainerShapeModifier : SwiftUICore.ViewModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public init(cornerRadius: CoreFoundation.CGFloat? = nil)
  #else
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public init(cornerRadius: CoreFoundation.CGFloat? = nil)
  #endif
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public func body(content: WidgetKit.WidgetContainerShapeModifier.Content) -> some SwiftUICore.View
  
  @_spi(Server) @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit0A22ContainerShapeModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func widgetCurvesContent(_ curvesContent: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(Server) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
@_Concurrency.MainActor @preconcurrency public struct _AccessoryWidgetBackground : SwiftUI._ArchivableView {
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Server) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Server) get
  }
  @_spi(Server) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit010_AccessoryA10BackgroundV4bodyQrvp", 0) __
}
@_spi(Internal) @available(iOS 16.0, watchOS 9.0, macOS 15.0, *)
@_Concurrency.MainActor @preconcurrency public struct MetadataGraphicView : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Internal) @_Concurrency.MainActor @preconcurrency public init(_ graphic: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic, alwaysTemplate: Swift.Bool = false, allowsCustomColors: Swift.Bool = false, colors: [SwiftUICore.Color]? = nil, resizable: Swift.Bool = false, tint: SwiftUICore.Color? = nil, symbolRenderingMode: SwiftUICore.SymbolRenderingMode? = nil, allowSymbolEffects: Swift.Bool = true)
  #else
  @_spi(Internal) @_Concurrency.MainActor @preconcurrency public init(_ graphic: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic, alwaysTemplate: Swift.Bool = false, allowsCustomColors: Swift.Bool = false, colors: [SwiftUICore.Color]? = nil, resizable: Swift.Bool = false, tint: SwiftUICore.Color? = nil, symbolRenderingMode: SwiftUICore.SymbolRenderingMode? = nil, allowSymbolEffects: Swift.Bool = true)
  #endif
  @_spi(Internal) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Internal) get
  }
  @_spi(Internal) @available(iOS 16.0, tvOS 13.0, watchOS 9.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit19MetadataGraphicViewV4bodyQrvp", 0) __
}
@_spi(Internal) extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Internal) public func image(symbolRenderingMode: SwiftUICore.SymbolRenderingMode? = nil) -> SwiftUICore.Image?
  #else
  @_spi(Internal) public func image(symbolRenderingMode: SwiftUICore.SymbolRenderingMode? = nil) -> SwiftUICore.Image?
  #endif
  @_spi(Internal) public var symbolEffects: [SwiftUI.SymbolEffect] {
    @_spi(Internal) get
  }
  @_spi(Internal) public var contentTransition: SwiftUICore.ContentTransition {
    @_spi(Internal) get
  }
  @_spi(Internal) public var isSystemSymbol: Swift.Bool {
    @_spi(Internal) get
  }
}
#if compiler(>=5.3) && $RetroactiveAttribute
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.ContentSizeCategory : @retroactive Swift.CustomStringConvertible {
  @_spi(Private) public var description: Swift.String {
    @_spi(Private) get
  }
}
#else
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.ContentSizeCategory : Swift.CustomStringConvertible {
  @_spi(Private) public var description: Swift.String {
    @_spi(Private) get
  }
}
#endif
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlToggle<Intent> : SwiftUI.WidgetConfiguration where Intent : AppIntents.AppIntent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some ToggleStateProvider<Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> ValueLabel, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #else
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, Subtitle, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some ToggleStateProvider<Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> ValueLabel, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some ToggleStateProvider<Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> ValueLabel, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #else
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public init<Title, ValueLabel>(kind: Swift.String, intent: Intent.Type, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, stateProvider: some ToggleStateProvider<Intent>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> ValueLabel, affordances: Swift.Optional<(Swift.Bool, Intent) -> WidgetKit.ControlAffordances>) where Title : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #endif
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    @_spi(SSC) get
  }
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 9.0)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit13ControlToggleV4bodyQrvp", 0) __<Intent>
}
@_spi(SSC) extension WidgetKit.ControlToggle {
  @_spi(SSC) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "Use `ControlToggle.init(kind:intent:displayName:preferredSize:stateProvider:title:subtitle:value:affordances:)`.")
  @_spi_available(macOS, introduced: 15.0)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init<Content, Value>(kind: Swift.String, intent: Intent.Type, stateProvider: some ToggleStateProvider<Intent>, @SwiftUICore.ViewBuilder content: @escaping (Swift.Bool, Intent) -> Content, @SwiftUICore.ViewBuilder value: @escaping (Swift.Bool, Intent) -> Value) where Content : SwiftUICore.View, Value : SwiftUICore.View
}
@_spi(SSC) extension WidgetKit.ControlToggle {
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(macOS, introduced: 15.0)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func disabled(_ disabled: Swift.Bool) -> WidgetKit.ControlToggle<Intent>
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol ToggleStateProvider<T> {
  associatedtype T : WidgetKit.TogglableAppIntent
  @_spi(SSC) func getState(appIntent: Self.T) async throws -> Swift.Bool
}
#else
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol ToggleStateProvider {
  associatedtype T : WidgetKit.TogglableAppIntent
  @_spi(SSC) func getState(appIntent: Self.T) async throws -> Swift.Bool
}
#endif
@_spi(ControlEntities) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.ControlPicker {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEnum, ValueType : Swift.Identifiable, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.ValueType == UpdatingIntent.PropertyReference.Value.ValueType
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEnum, ValueType : Swift.Identifiable, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.ValueType == UpdatingIntent.PropertyReference.Value.ValueType
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, Subtitle, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEnum, ValueType : Swift.Identifiable, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.ValueType == UpdatingIntent.PropertyReference.Value.ValueType
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, Subtitle, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEnum, ValueType : Swift.Identifiable, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.ValueType == UpdatingIntent.PropertyReference.Value.ValueType
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, Subtitle, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, Subtitle, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.DefaultQuery : AppIntents.EnumerableEntityQuery
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.DefaultQuery : AppIntents.EnumerableEntityQuery
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, Subtitle, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.DefaultQuery : AppIntents.EnumerableEntityQuery
  #else
  @_spi(ControlEntities) @_Concurrency.MainActor @preconcurrency public init<ValueType, Entity, UpdatingIntent, DeferredValue, EntityParameter, Title, Subtitle, ValueLabel>(kind: Swift.String, displayName: Swift.String?, preferredSize: WidgetKit.ControlSize = ._1x1, intentUpdatableProperty: Swift.KeyPath<Entity, EntityParameter>, @SwiftUICore.ViewBuilder title: @escaping (Intent) -> Title, @SwiftUICore.ViewBuilder subtitle: @escaping (Intent) -> Subtitle, @SwiftUICore.ViewBuilder value: @escaping (ValueType, Intent) -> ValueLabel, affordances: Swift.Optional<(ValueType, Intent) -> WidgetKit.ControlAffordances>) where Intent == WidgetKit.EmptyConfiguration, ValueType : AppIntents.AppEntity, ValueType == UpdatingIntent.PropertyReference.Value.ValueType, Entity : AppIntents._UniqueEntity, Entity == UpdatingIntent.PropertyReference.Entity, UpdatingIntent : AppIntents._EntityPropertyUpdatingIntent, DeferredValue : AppIntents._EntityDeferredPropertyValue<Entity, ValueType>, EntityParameter : AppIntents._IntentUpdatableEntityProperty<Entity, DeferredValue, UpdatingIntent>, Title : SwiftUICore.View, Subtitle : SwiftUICore.View, ValueLabel : SwiftUICore.View, ValueType.DefaultQuery : AppIntents.EnumerableEntityQuery
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUI.Widget {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidget {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUI.WidgetBundle {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
package protocol ControlTemplate : Swift.Decodable, Swift.Encodable, Swift.Equatable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var associatedURL: Foundation.URL? { get }
  #else
  var associatedURL: Foundation.URL? { get }
  #endif
  var privacySensitive: Swift.Bool { get }
  func validateIcon(_ validate: (SwiftUI.WidgetAuxiliaryViewMetadata.Graphic) throws -> ()) throws
}
package enum ControlTemplateType : Swift.Codable {
  case toggle(WidgetKit.ControlTemplateToggle)
  case button(WidgetKit.ControlTemplateButton)
  case picker(WidgetKit.ControlTemplatePicker)
  package init(_ template: some ControlTemplate)
  package var anyTemplate: (any WidgetKit.ControlTemplate) {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var button: WidgetKit.ControlTemplateButton? {
    get
  }
  #else
  package var button: WidgetKit.ControlTemplateButton? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var toggle: WidgetKit.ControlTemplateToggle? {
    get
  }
  #else
  package var toggle: WidgetKit.ControlTemplateToggle? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var picker: WidgetKit.ControlTemplatePicker? {
    get
  }
  #else
  package var picker: WidgetKit.ControlTemplatePicker? {
    get
  }
  #endif
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension WidgetKit.ControlTemplateType {
  package func action(for index: Swift.Int) -> WidgetKit.ControlAction
  package func validateIcon(_ validator: (SwiftUI.WidgetAuxiliaryViewMetadata.Graphic) throws -> ()) throws
}
extension WidgetKit.ControlTemplateType : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@preconcurrency public enum WidgetFamily : Swift.Int, Swift.RawRepresentable, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible, Swift.Sendable {
  @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemSmall
  @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemMedium
  @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemLarge
  @available(iOS 15.0, macOS 14.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemExtraLarge
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryCorner
  @available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  case accessoryCircular
  @available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  case accessoryRectangular
  @available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  case accessoryInline
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int)
  #else
  public init?(rawValue: Swift.Int)
  #endif
  @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetFamily {
  @_spi(Server) public var isAccessory: Swift.Bool {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public enum InternalWidgetFamily : Swift.Int, Swift.RawRepresentable, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible, Swift.Sendable {
  @_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemSmall
  @_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemMedium
  @_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemLarge
  @_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case systemExtraLarge
  @_spi(Server) @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case transparentMedium
  @_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, *)
  @available(watchOS, unavailable)
  case newsLargeTall
  @_spi(Server) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryCorner
  @_spi(Server) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  case accessoryCircular
  @_spi(Server) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  case accessoryRectangular
  @_spi(Server) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  case accessoryInline
  @_spi(Server) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryCornerSmall
  @_spi(Server) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  case accessoryCircularExtraLarge
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(macOS, introduced: 15.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case control1x1
  @_spi(Server) public var debugDescription: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init?(rawValue: Swift.Int)
  #else
  @_spi(Server) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias RawValue = Swift.Int
  @_spi(Server) public var rawValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.InternalWidgetFamily {
  @_spi(Server) public init(_ family: WidgetKit.WidgetFamily)
  @_spi(Server) public init(_ family: ChronoServices.CHSWidgetFamily)
  @_spi(Server) public var chsWidgetFamily: ChronoServices.CHSWidgetFamily {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension ChronoServices.CHSWidgetFamily {
  @_spi(Server) public var stableStringRepresentation: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var stableIntegerRepresentation: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetFamily : Swift.Comparable {
  @_spi(Server) public static func < (lhs: WidgetKit.WidgetFamily, rhs: WidgetKit.WidgetFamily) -> Swift.Bool
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension ChronoServices.CHSWidgetFamily {
  @_spi(Server) public init(_ family: WidgetKit.InternalWidgetFamily)
  @_spi(Server) public init(_ family: WidgetKit.WidgetFamily)
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension ChronoServices.CHSWidgetFamilyMask {
  @_spi(Server) public init<S>(_ families: S) where S : Swift.Sequence, S.Element == ChronoServices.CHSWidgetFamily
  @_spi(Server) public init(_ family: ChronoServices.CHSWidgetFamily)
  @_spi(Server) public func family(_ index: Swift.Int) -> ChronoServices.CHSWidgetFamily
  @_spi(Server) public var widgetFamilies: [ChronoServices.CHSWidgetFamily] {
    @_spi(Server) get
  }
  @_spi(Server) public func internalFamilies() -> [WidgetKit.InternalWidgetFamily]
  @_spi(Server) public var implicitlySupportedFamilies: ChronoServices.CHSWidgetFamilyMask {
    @_spi(Server) get
  }
  @_spi(Server) @available(*, deprecated, message: "Please use `internalWidgetFamilies` instead.")
  public var avocadoSizeClasses: [WidgetKit.InternalWidgetFamily] {
    @_spi(Server) get
  }
  @_spi(Server) @available(*, deprecated, message: "Please use `widgetFamilies` instead.")
  public var sizeClasses: [ChronoServices.CHSWidgetFamily] {
    @_spi(Server) get
  }
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
  public var _widgetMetrics: ChronoServices.CHSWidgetMetrics {
    get
    set
  }
}
@_spi(Private) @_Concurrency.MainActor @preconcurrency public struct HideViewOnSnapshotModifier : SwiftUICore.ViewModifier, SwiftUI._ArchivableViewModifier {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(from decoder: any Swift.Decoder) throws
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func body(content: WidgetKit.HideViewOnSnapshotModifier.Content) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit26HideViewOnSnapshotModifierV4body7contentQr7SwiftUI01_dG8_ContentVyACG_tF", 0) __
}
@_spi(Private) extension SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func hideViewOnSnapshot() -> some SwiftUICore.View
  
}
@available(iOS 15.0, watchOS 9.0, macOS 12.0, tvOS 18.0, *)
extension SwiftUI.WidgetConfiguration {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func containerBackgroundRemovable(_ isRemovable: Swift.Bool = true) -> some SwiftUI.WidgetConfiguration {
        if #available(iOS 17.0, watchOS 10.0, macOS 14.0, *) {
            return _containerBackgroundRemovable(isRemovable)
        } else {
            return self
        }
    }
  
}
@available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension SwiftUI.WidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func _containerBackgroundRemovable(_ isRemovable: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
}
extension SwiftUI.ContainerBackgroundPlacement {
  @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
  public static let widget: SwiftUI.ContainerBackgroundPlacement
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal struct ShowsWidgetBackgroundKey : SwiftUICore.EnvironmentKey {
    @usableFromInline
    internal static var defaultValue: Swift.Bool
    @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias Value = Swift.Bool
  }
  @_spi(ProposedAPI) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  @available(*, deprecated, message: "Use showsWidgetContainerBackground")
  public var showsWidgetBackground: Swift.Bool {
    get
    set
  }
  @_spi(Server) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 18.0, *)
  public var _showsWidgetBackground: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 15.0, macOS 12.0, watchOS 8.0, tvOS 18.0, *)
  @_alwaysEmitIntoClient public var showsWidgetContainerBackground: Swift.Bool {
    get {
            if #available(iOS 17, watchOS 10.0, macOS 14.0, *) {
                return self[ShowsWidgetBackgroundKey.self]
            } else {
                return true
            }
        }
  }
}
@_spi(ProposedAPI) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension SwiftUICore.View {
  @_spi(ProposedAPI) @available(*, deprecated, message: "Use ``View/containerBackground(_:for:) with ``ContainerBackgroundPlacement/widget``")
  @_Concurrency.MainActor @preconcurrency public func widgetBackgroundStyle<S>(_ style: S) -> some SwiftUICore.View where S == SwiftUICore.LinearGradient
  
  @_spi(ProposedAPI) @available(*, deprecated, message: "Use ``View/containerBackground(_:for:) with ``ContainerBackgroundPlacement/widget``")
  @_Concurrency.MainActor @preconcurrency public func widgetBackgroundStyle<S>(_ style: S) -> some SwiftUICore.View where S == SwiftUICore.Color
  
  @_spi(ProposedAPI) @available(*, deprecated, message: "Use ``View/containerBackground(for:alignment:content:) with ``ContainerBackgroundPlacement/widget``")
  @_Concurrency.MainActor @preconcurrency public func removableWidgetBackground<Content>(@SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_spi(ProposedAPI) @available(*, deprecated, message: "Use ``View/containerBackground(for:alignment:content:) with ``ContainerBackgroundPlacement/widget``")
  @_Concurrency.MainActor @preconcurrency public func widgetBackground<Content>(@SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_spi(ProposedAPI) @available(*, deprecated, message: "Use ``View/containerBackground(for:alignment:content:) with ``ContainerBackgroundPlacement/widget`` and ``WidgetConfiguration/backgroundRemovable(_:)")
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func widgetBackground<Content>(isRemovable: Swift.Bool = true, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetArchiver {
  @_spi(Server) public static func unarchive(from handle: Foundation.FileHandle) throws -> WidgetKit._TimelineArchivedViewCollection
  @_spi(Server) public static func unarchive(from data: Foundation.Data) throws -> WidgetKit._TimelineArchivedViewCollection
  @_spi(Server) public static func unarchive(from url: Foundation.URL) throws -> WidgetKit._TimelineArchivedViewCollection
  @_spi(Server) public static func unarchive(from handle: Foundation.FileHandle, validationOptions: WidgetKit.WidgetArchiver.ValidationOptions) throws -> WidgetKit._TimelineArchivedViewCollection
  @_spi(Server) public static func unarchive(from url: Foundation.URL, validationOptions: WidgetKit.WidgetArchiver.ValidationOptions) throws -> WidgetKit._TimelineArchivedViewCollection
  @_spi(Server) public static func unarchive(from data: Foundation.Data, validationOptions: WidgetKit.WidgetArchiver.ValidationOptions) throws -> WidgetKit._TimelineArchivedViewCollection
  @_spi(Server) public enum ValidationError : Foundation.LocalizedError {
    @_spi(Server) case bundleStubNotSupported(underlyingError: any Swift.Error)
    @_spi(Server) case systemVersionNotSupported(underlyingError: any Swift.Error)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Server) public var errorDescription: Swift.String? {
      @_spi(Server) get
    }
    #else
    @_spi(Server) public var errorDescription: Swift.String? {
      @_spi(Server) get
    }
    #endif
  }
  @_spi(Server) public struct ValidationOptions {
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Server) public init(isSystemVersionSupported: @escaping (WidgetKit.SystemVersion) -> Swift.Result<(), any Swift.Error>, isBundleSupported: @escaping (WidgetKit.BundleStub) -> Swift.Result<(), any Swift.Error>)
    #else
    @_spi(Server) public init(isSystemVersionSupported: @escaping (WidgetKit.SystemVersion) -> Swift.Result<(), any Swift.Error>, isBundleSupported: @escaping (WidgetKit.BundleStub) -> Swift.Result<(), any Swift.Error>)
    #endif
    @_spi(Server) public static var none: WidgetKit.WidgetArchiver.ValidationOptions
    @_spi(Server) public static var `default`: WidgetKit.WidgetArchiver.ValidationOptions
    @_spi(Server) public var isSystemVersionSupported: (WidgetKit.SystemVersion) -> Swift.Result<(), any Swift.Error>
    @_spi(Server) public var isBundleSupported: (WidgetKit.BundleStub) -> Swift.Result<(), any Swift.Error>
  }
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
public struct WidgetRenderingMode : Swift.Equatable, Swift.CustomStringConvertible {
  public static let fullColor: WidgetKit.WidgetRenderingMode
  public static let accented: WidgetKit.WidgetRenderingMode
  public static let vibrant: WidgetKit.WidgetRenderingMode
  @_spi(Server) public enum Mode : Swift.Int, Swift.Codable {
    @_spi(Server) case fullColor
    @_spi(Server) case accented
    @_spi(Server) case vibrant
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Server) public init?(rawValue: Swift.Int)
    #else
    @_spi(Server) public init?(rawValue: Swift.Int)
    #endif
    @_spi(Server) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
    public typealias RawValue = Swift.Int
    @_spi(Server) public var rawValue: Swift.Int {
      @_spi(Server) get
    }
  }
  @_spi(Server) public var mode: WidgetKit.WidgetRenderingMode.Mode
  @_spi(Server) public init(mode: WidgetKit.WidgetRenderingMode.Mode)
  @_spi(Server) public init(_ renderMode: ChronoServices.CHSWidgetRenderingMode)
  public var description: Swift.String {
    get
  }
  public static func == (a: WidgetKit.WidgetRenderingMode, b: WidgetKit.WidgetRenderingMode) -> Swift.Bool
}
@_spi(Server) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension WidgetKit.WidgetRenderingMode : Swift.CaseIterable {
  @_spi(Server) public static var allCases: [WidgetKit.WidgetRenderingMode] {
    @_spi(Server) get
  }
  @_spi(Server) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
  public typealias AllCases = [WidgetKit.WidgetRenderingMode]
}
@_spi(Server) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension WidgetKit.WidgetRenderingMode : Swift.Codable, Swift.Hashable {
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Server) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension WidgetKit.WidgetRenderingMode : Swift.Comparable {
  @_spi(Server) public static func < (lhs: WidgetKit.WidgetRenderingMode, rhs: WidgetKit.WidgetRenderingMode) -> Swift.Bool
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension SwiftUICore.EnvironmentValues {
  public var widgetRenderingMode: WidgetKit.WidgetRenderingMode {
    get
    set
  }
}
@available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func widgetAccentable(_ accentable: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol IntentTimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  associatedtype Intent : Intents.INIntent
  typealias Context = WidgetKit.TimelineProviderContext
  @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
  func recommendations() -> [WidgetKit.IntentRecommendation<Self.Intent>]
  func placeholder(in context: Self.Context) -> Self.Entry
  @preconcurrency func getSnapshot(for configuration: Self.Intent, in context: Self.Context, completion: @escaping @Sendable (Self.Entry) -> Swift.Void)
  @preconcurrency func getTimeline(for configuration: Self.Intent, in context: Self.Context, completion: @escaping @Sendable (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  func relevances() async -> WidgetKit.WidgetRelevances<Self.Intent>
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.IntentTimelineProvider {
  public func recommendations() -> [WidgetKit.IntentRecommendation<Self.Intent>]
}
extension WidgetKit.IntentTimelineProvider {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public func relevances() async -> WidgetKit.WidgetRelevances<Self.Intent>
}
@_spi(Server) public enum ExtensionSessionType {
  @_spi(Server) case widget
  @_spi(Server) case activity
  @_spi(Server) public static func == (a: WidgetKit.ExtensionSessionType, b: WidgetKit.ExtensionSessionType) -> Swift.Bool
  @_spi(Server) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Server) public var hashValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) public struct ExtensionSessionOptions {
  @_spi(Server) public let requiresUserInteractivePriority: Swift.Bool
  @_spi(Server) public let suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)?
  @_spi(Server) public let sessionType: WidgetKit.ExtensionSessionType
  @_spi(Server) public let shouldTakeExtensionAssertion: Swift.Bool
  @_spi(Server) public let environmentVariables: [Swift.String : Swift.String]
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(requiresUserInteractivePriority: Swift.Bool, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)?, sessionType: WidgetKit.ExtensionSessionType, shouldTakeExtensionAssertion: Swift.Bool = true, environmentVariables: [Swift.String : Swift.String] = [:])
  #else
  @_spi(Server) public init(requiresUserInteractivePriority: Swift.Bool, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)?, sessionType: WidgetKit.ExtensionSessionType, shouldTakeExtensionAssertion: Swift.Bool = true, environmentVariables: [Swift.String : Swift.String] = [:])
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public enum WidgetExtensionSessionOperation : Swift.CustomStringConvertible {
  @_spi(Server) case getDescriptors
  @_spi(Server) case getAllDescriptors
  @_spi(Server) case getControlTemplates(Swift.Int)
  @_spi(Server) case getControlState
  @_spi(Server) case setControlState
  @_spi(Server) case controlTemplate
  @_spi(Server) case getPlaceholder
  @_spi(Server) case getPlaceholders(Swift.Int)
  @_spi(Server) case handleURLSessionEvents
  @_spi(Server) case attachPreviewAgent
  @_spi(Server) case getTimeline
  @_spi(Server) case getTimelines(Swift.Int)
  @_spi(Server) case getAppIntentsXPCListenerEndpoint
  @_spi(Server) case sendPushToken
  @_spi(Server) case getActivities(Swift.Int)
  @_spi(Server) case handleMutation
  @_spi(Server) case getWidgetRelevances
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var defaultTimeout: Foundation.TimeInterval {
    @_spi(Server) get
  }
}
@_spi(Server) public typealias WatchdogTimeoutProvider = (WidgetKit.WidgetExtensionSessionOperation) -> Foundation.TimeInterval?
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public let DefaultWatchdogTimeoutProvider: (WidgetKit.WidgetExtensionSessionOperation) -> Foundation.TimeInterval?
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol ExtensionIdentityProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) func extensionIdentityForExtensionBundleIdentifier(_ extensionBundleIdentifier: ChronoServices.ExtensionBundleIdentifier) -> ChronoServices.ExtensionIdentity?
  #else
  @_spi(Server) func extensionIdentityForExtensionBundleIdentifier(_ extensionBundleIdentifier: ChronoServices.ExtensionBundleIdentifier) -> ChronoServices.ExtensionIdentity?
  #endif
}
@_spi(Server) @_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public class WidgetExtensionSessionFactory {
  @_spi(Server) public static var extensionIdentityProvider: any WidgetKit.ExtensionIdentityProvider
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @available(*, deprecated, message: "Please use `makeSession(for:requiresUserInteractivePriority:watchdogTimeoutProvider:suspensionObserver:shouldTakeExtensionAssertion:)`")
  public static func makeSession(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil) -> (any WidgetKit.WidgetExtensionSession)?
  #else
  @_spi(Server) @available(*, deprecated, message: "Please use `makeSession(for:requiresUserInteractivePriority:watchdogTimeoutProvider:suspensionObserver:shouldTakeExtensionAssertion:)`")
  public static func makeSession(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil) -> (any WidgetKit.WidgetExtensionSession)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @available(*, deprecated, message: "Please use `makeSessionAsync(for:requiresUserInteractivePriority:watchdogTimeoutProvider:suspensionObserver:shouldTakeExtensionAssertion:completion:)`")
  public static func makeSessionAsync(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil, completion: @escaping ((any WidgetKit.WidgetExtensionSession)?) -> ())
  #else
  @_spi(Server) @available(*, deprecated, message: "Please use `makeSessionAsync(for:requiresUserInteractivePriority:watchdogTimeoutProvider:suspensionObserver:shouldTakeExtensionAssertion:completion:)`")
  public static func makeSessionAsync(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil, completion: @escaping ((any WidgetKit.WidgetExtensionSession)?) -> ())
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func makeSession(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil, shouldTakeExtensionAssertion: Swift.Bool = true) -> (any WidgetKit.WidgetExtensionSession)?
  #else
  @_spi(Server) public static func makeSession(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil, shouldTakeExtensionAssertion: Swift.Bool = true) -> (any WidgetKit.WidgetExtensionSession)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func makeSessionAsync(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil, shouldTakeExtensionAssertion: Swift.Bool = true, completion: @escaping ((any WidgetKit.WidgetExtensionSession)?) -> ())
  #else
  @_spi(Server) public static func makeSessionAsync(for anExtension: Any?, requiresUserInteractivePriority: Swift.Bool = false, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, suspensionObserver: (any WidgetKit.WidgetExtensionSessionSuspensionObserving)? = nil, shouldTakeExtensionAssertion: Swift.Bool = true, completion: @escaping ((any WidgetKit.WidgetExtensionSession)?) -> ())
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func makeSession(for anExtension: Any?, options: WidgetKit.ExtensionSessionOptions, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil) -> (any WidgetKit.WidgetExtensionSession)?
  #else
  @_spi(Server) public static func makeSession(for anExtension: Any?, options: WidgetKit.ExtensionSessionOptions, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil) -> (any WidgetKit.WidgetExtensionSession)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public static func makeSessionAsync(for anExtension: Any?, options: WidgetKit.ExtensionSessionOptions, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, completion: @escaping ((any WidgetKit.WidgetExtensionSession)?) -> ())
  #else
  @_spi(Server) public static func makeSessionAsync(for anExtension: Any?, options: WidgetKit.ExtensionSessionOptions, watchdogTimeoutProvider: WidgetKit.WatchdogTimeoutProvider? = nil, completion: @escaping ((any WidgetKit.WidgetExtensionSession)?) -> ())
  #endif
  @_spi(Server) @objc deinit
}
@_spi(Internal) extension SwiftUICore.View {
  @_spi(Internal) @_Concurrency.MainActor @preconcurrency public func applyScalingModifier(metrics: WidgetKit.ActivityMetrics, displayScale: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@_spi(Server) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _widgetInvertsAccentFilterStyle: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Previews) @_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
open class WidgetPreviewAgent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Previews) public static func attachPreviewAgent(extensionIdentifier: Swift.String, frameworkPath: Swift.String, environmentVariables: [Swift.String : Swift.String], pidCallback: @escaping (Darwin.pid_t?) -> Swift.Void, completion: @escaping (Swift.Result<Darwin.audit_token_t, any Swift.Error>) -> Swift.Void)
  #else
  @_spi(Previews) public static func attachPreviewAgent(extensionIdentifier: Swift.String, frameworkPath: Swift.String, environmentVariables: [Swift.String : Swift.String], pidCallback: @escaping (Darwin.pid_t?) -> Swift.Void, completion: @escaping (Swift.Result<Darwin.audit_token_t, any Swift.Error>) -> Swift.Void)
  #endif
  @_spi(Previews) @objc deinit
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public enum DataProtectionLevel : Swift.Int, Swift.CaseIterable, Swift.Codable, Swift.Comparable, Swift.CustomStringConvertible {
  @_spi(Server) public static var systemDefault: WidgetKit.DataProtectionLevel
  @_spi(Server) case classA
  @_spi(Server) case classB
  @_spi(Server) case classC
  @_spi(Server) case classD
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init?(_ protectionType: Foundation.FileProtectionType)
  #else
  @_spi(Server) public init?(_ protectionType: Foundation.FileProtectionType)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init?(_ dataProtectionLevel: ChronoServices.CHSDataProtectionLevel)
  #else
  @_spi(Server) public init?(_ dataProtectionLevel: ChronoServices.CHSDataProtectionLevel)
  #endif
  @_spi(Server) public func canShowContent(for dataProtectionLevel: WidgetKit.DataProtectionLevel) -> Swift.Bool
  @_spi(Server) public static func < (lhs: WidgetKit.DataProtectionLevel, rhs: WidgetKit.DataProtectionLevel) -> Swift.Bool
  @_spi(Server) public var fileProtectionType: Foundation.FileProtectionType {
    @_spi(Server) get
  }
  @_spi(Server) public var description: Swift.String {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init?(rawValue: Swift.Int)
  #else
  @_spi(Server) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias AllCases = [WidgetKit.DataProtectionLevel]
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias RawValue = Swift.Int
  @_spi(Server) public static var allCases: [WidgetKit.DataProtectionLevel] {
    @_spi(Server) get
  }
  @_spi(Server) public var rawValue: Swift.Int {
    @_spi(Server) get
  }
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct Cartesian2ProductCollection<XCollection, YCollection> : Swift.RandomAccessCollection where XCollection : Swift.RangeReplaceableCollection, YCollection : Swift.RangeReplaceableCollection {
  @_spi(Server) public typealias X = XCollection.Element
  @_spi(Server) public typealias Y = YCollection.Element
  @_spi(Server) public typealias XIndex = XCollection.Index
  @_spi(Server) public typealias YIndex = YCollection.Index
  @_spi(Server) public typealias LinearIndex = (WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.XIndex, WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.YIndex)
  @_spi(Server) public typealias Element = (WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.X, WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Y)
  @_spi(Server) public typealias Index = Swift.Int
  @_spi(Server) public var count: Swift.Int {
    @_spi(Server) get
  }
  @_spi(Server) public var startIndex: WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Index {
    @_spi(Server) get
  }
  @_spi(Server) public var endIndex: WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Index {
    @_spi(Server) get
  }
  @_spi(Server) public subscript(index: WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Index) -> (WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.X, WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Y) {
    @_spi(Server) get
    @_spi(Server) _modify
  }
  @_spi(Server) public subscript(linearIndex: WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.LinearIndex) -> (WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.X, WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Y) {
    @_spi(Server) get
    @_spi(Server) _modify
  }
  @_spi(Server) public func index(_ i: WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Index, offsetBy distance: (Swift.Int, Swift.Int)) -> WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Index
  @_spi(Server) public init(_ firstAxisObjects: XCollection, _ secondAxisObjects: YCollection)
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Indices = Swift.Range<WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>.Index>
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Iterator = Swift.IndexingIterator<WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>>
  @_spi(Server) @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias SubSequence = Swift.Slice<WidgetKit.Cartesian2ProductCollection<XCollection, YCollection>>
}
@_spi(Server) extension WidgetKit.Cartesian2ProductCollection where YCollection == [SwiftUICore.EnvironmentValues] {
  @_spi(Server) public init(_ firstAxisObjects: XCollection, environment: WidgetKit.WidgetEnvironment)
}
@available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func widgetLabel<Label>(@SwiftUICore.ViewBuilder label: () -> Label) -> some SwiftUICore.View where Label : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func widgetLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func widgetLabel<S>(_ label: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 16.0, tvOS 18.0, watchOS 9.0, *)
@available(macOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var showsWidgetLabel: Swift.Bool {
    get
    set
  }
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ControlValueProvider {
  associatedtype Value
  var previewValue: Self.Value { get }
  func currentValue() async throws -> Self.Value
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct StaticControlConfiguration<Content> : SwiftUI.ControlWidgetConfiguration where Content : SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetConfiguration {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit26StaticControlConfigurationV4bodyQrvp", 0) __<Content>
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.StaticControlConfiguration {
  @_Concurrency.MainActor @preconcurrency public init(kind: Swift.String, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, provider: Provider, @SwiftUI.ControlWidgetTemplateBuilder content: @escaping (Provider.Value) -> Content) where Provider : WidgetKit.ControlValueProvider
}
package struct ControlAction : Swift.Hashable {
  package enum Storage : Swift.Hashable {
    case legacyAction
    case action(ChronoServices.CHSIntentReference)
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package var storage: WidgetKit.ControlAction.Storage
  package var isLauncher: Swift.Bool
  package static var legacyAction: WidgetKit.ControlAction {
    get
  }
  package static func legacyAction<T>(_ intentType: T.Type = T.self) -> WidgetKit.ControlAction where T : AppIntents.AppIntent
  package init<T>(_ action: T) where T : AppIntents.AppIntent
  package init<T>(_ intent: some SetValueIntent<T>, value: T)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var lnAction: LinkMetadata.LNAction? {
    get
  }
  #else
  package var lnAction: LinkMetadata.LNAction? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var inIntent: Intents_Private.INAppIntent? {
    get
  }
  #else
  package var inIntent: Intents_Private.INAppIntent? {
    get
  }
  #endif
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension WidgetKit.ControlAction : Swift.Equatable {
  package static func == (a: WidgetKit.ControlAction, b: WidgetKit.ControlAction) -> Swift.Bool
}
extension WidgetKit.ControlAction.Storage : Swift.Equatable {
  package static func == (a: WidgetKit.ControlAction.Storage, b: WidgetKit.ControlAction.Storage) -> Swift.Bool
}
extension WidgetKit.ControlAction : Swift.CustomDebugStringConvertible {
  package var debugDescription: Swift.String {
    get
  }
}
extension WidgetKit.ControlAction : Swift.Codable {
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ControlSize : Swift.Codable, Swift.Equatable, Swift.Hashable {
  @_spi(Internal) public enum Storage : Swift.Codable, Swift.Equatable, Swift.Hashable {
    @_spi(Internal) case _1x1, _1x2, _2x1, _2x2
    @_spi(Internal) public static func == (a: WidgetKit.ControlSize.Storage, b: WidgetKit.ControlSize.Storage) -> Swift.Bool
    @_spi(Internal) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Internal) public func encode(to encoder: any Swift.Encoder) throws
    @_spi(Internal) public var hashValue: Swift.Int {
      @_spi(Internal) get
    }
    @_spi(Internal) public init(from decoder: any Swift.Decoder) throws
  }
  @_spi(Internal) public let storage: WidgetKit.ControlSize.Storage
  @_spi(SSC) public static let _1x1: WidgetKit.ControlSize
  @_spi(SSC) public static let _1x2: WidgetKit.ControlSize
  @_spi(SSC) public static let _2x1: WidgetKit.ControlSize
  @_spi(SSC) public static let _2x2: WidgetKit.ControlSize
  @_spi(SSC) public static func == (a: WidgetKit.ControlSize, b: WidgetKit.ControlSize) -> Swift.Bool
  @_spi(SSC) public func hash(into hasher: inout Swift.Hasher)
  @_spi(SSC) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(SSC) public var hashValue: Swift.Int {
    @_spi(SSC) get
  }
  @_spi(SSC) public init(from decoder: any Swift.Decoder) throws
}
@_spi(SSC) extension WidgetKit.ControlSize : Swift.CustomDebugStringConvertible {
  @_spi(SSC) public var debugDescription: Swift.String {
    @_spi(SSC) get
  }
}
@_spi(Previews) public struct ActivityPreviewContext<Attributes> : SwiftUI.PreviewContext where Attributes : ActivityKit.ActivityAttributes {
  @_spi(Previews) public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey {
    @_spi(Previews) get
  }
}
@_spi(PreviewsPlugin) public enum ActivityPreviewContentCategory : Swift.String {
  @_spi(PreviewsPlugin) case `default`
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(PreviewsPlugin) public init?(rawValue: Swift.String)
  #else
  @_spi(PreviewsPlugin) public init?(rawValue: Swift.String)
  #endif
  @_spi(PreviewsPlugin) public typealias RawValue = Swift.String
  @_spi(PreviewsPlugin) public var rawValue: Swift.String {
    @_spi(PreviewsPlugin) get
  }
}
@_spi(Previews) public struct ActivityPreviewContextKey : SwiftUI.PreviewContextKey {
  @_spi(Previews) public static var defaultValue: WidgetKit.ActivityPreviewContextKey?
  @_spi(Previews) public let viewSource: WidgetKit.ActivityViewSource
  @_spi(Previews) public let attributesType: ActivityKit.ActivityAttributesType
  @_spi(Previews) public let attributesData: Foundation.Data
  @_spi(Previews) public let contentStatePayload: Foundation.Data
  @_spi(Previews) public let isStale: Swift.Bool
  @_spi(Previews) public let viewKind: WidgetKit.ActivityPreviewViewKind
  @_spi(Previews) public var contentCategory: Swift.String {
    @_spi(Previews) get
  }
  @_spi(Previews) @available(iOS 17.0, *)
  public var previewContentCategory: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
  @_spi(Previews) public let supportedFamilies: [WidgetKit.ActivityFamily]
  @_spi(Previews) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Value = WidgetKit.ActivityPreviewContextKey?
}
@available(iOS 16.2, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@preconcurrency public enum ActivityPreviewViewKind : Swift.Sendable {
  case content
  case dynamicIsland(WidgetKit.ActivityPreviewViewKind.DynamicIslandPreviewViewState)
  @preconcurrency public enum DynamicIslandPreviewViewState : Swift.Sendable {
    case compact
    case minimal
    case expanded
    public static func == (a: WidgetKit.ActivityPreviewViewKind.DynamicIslandPreviewViewState, b: WidgetKit.ActivityPreviewViewKind.DynamicIslandPreviewViewState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.2, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension ActivityKit.ActivityAttributes {
  public func previewContext(_ contentState: Self.ContentState, isStale: Swift.Bool = false, viewKind: WidgetKit.ActivityPreviewViewKind) -> some SwiftUICore.View
  
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct ControlPushInfo {
  public let token: Foundation.Data
}
@_spi(Server) @objc public class TimelineRequest : ObjectiveC.NSObject, Foundation.NSSecureCoding, Swift.Codable {
  @_spi(Server) @objc public class var supportsSecureCoding: Swift.Bool {
    @_spi(Server) @objc get
  }
  @_spi(Server) final public let widget: ChronoServices.CHSWidget
  @_spi(Server) final public let environment: WidgetKit.WidgetEnvironment
  @_spi(Server) final public let fileHandle: Foundation.FileHandle
  @_spi(Server) final package let archiveVersion: WidgetKit.ArchiveVersion?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(widget: ChronoServices.CHSWidget, environment: WidgetKit.WidgetEnvironment, fileHandle: Foundation.FileHandle, archiveVersion: WidgetKit.ArchiveVersion?)
  #else
  @_spi(Server) public init(widget: ChronoServices.CHSWidget, environment: WidgetKit.WidgetEnvironment, fileHandle: Foundation.FileHandle, archiveVersion: WidgetKit.ArchiveVersion?)
  #endif
  @_spi(Server) required convenience public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  @_spi(Server) @objc deinit
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetToggle<Label, ValueLabel> : SwiftUI.ControlWidgetTemplate where Label : SwiftUICore.View, ValueLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public static var _kind: Swift.UInt {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetTemplate {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit07ControlA6ToggleV4bodyQrvp", 0) __<Label, ValueLabel>
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetToggle {
  @_Concurrency.MainActor @preconcurrency public init<Action>(isOn: Swift.Bool, action: Action, @SwiftUICore.ViewBuilder valueLabel: @escaping (Swift.Bool) -> ValueLabel, @SwiftUICore.ViewBuilder label: @escaping () -> Label) where Action : AppIntents.SetValueIntent, Action.ValueType == Swift.Bool
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetToggle where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init<Action>(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: Swift.Bool, action: Action, @SwiftUICore.ViewBuilder valueLabel: @escaping (Swift.Bool) -> ValueLabel) where Action : AppIntents.SetValueIntent, Action.ValueType == Swift.Bool
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Action>(_ title: some StringProtocol, isOn: Swift.Bool, action: Action, @SwiftUICore.ViewBuilder valueLabel: @escaping (Swift.Bool) -> ValueLabel) where Action : AppIntents.SetValueIntent, Action.ValueType == Swift.Bool
}
@available(*, unavailable)
extension WidgetKit.ControlWidgetToggle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct IntentConfiguration<Intent, Content> : SwiftUI.WidgetConfiguration where Intent : Intents.INIntent, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 14.0, tvOS 18.0, watchOS 9.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit19IntentConfigurationV4bodyQrvp", 0) __<Intent, Content>
}
@available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
public struct IntentRecommendation<T> where T : Intents.INIntent {
  public init(intent: T, description: SwiftUICore.Text)
  public init(intent: T, description: SwiftUICore.LocalizedStringKey)
  @_disfavoredOverload public init<S>(intent: T, description: S) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.IntentConfiguration {
  @_Concurrency.MainActor @preconcurrency public init<Provider>(kind: Swift.String, intent: Intent.Type, provider: Provider, @SwiftUICore.ViewBuilder content: @escaping (Provider.Entry) -> Content) where Intent == Provider.Intent, Provider : WidgetKit.IntentTimelineProvider
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func displayName(_ displayName: Foundation.LocalizedStringResource) -> some SwiftUI.ControlWidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func description(_ description: Foundation.LocalizedStringResource) -> some SwiftUI.ControlWidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func promptsForUserConfiguration() -> some SwiftUI.ControlWidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func pushHandler(_ pushHandlerType: any WidgetKit.ControlPushHandler.Type) -> some SwiftUI.ControlWidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func enabled(_ enabled: Swift.Bool) -> some SwiftUI.ControlWidgetConfiguration
  
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public func showsContextualMenu(_ showsContextualMenu: Swift.Bool = true) -> some SwiftUI.ControlWidgetConfiguration
  
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public func showsInControlCenter() -> some SwiftUI.ControlWidgetConfiguration
  
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetButton<Label> : SwiftUI.ControlWidgetTemplate where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public static var _kind: Swift.UInt {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.ControlWidgetTemplate {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit07ControlA6ButtonV4bodyQrvp", 0) __<Label>
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetButton {
  @_Concurrency.MainActor @preconcurrency public init<Action>(action: Action, @SwiftUICore.ViewBuilder label: @escaping () -> Label) where Action : AppIntents.AppIntent
  @_Concurrency.MainActor @preconcurrency public init<Action>(action: Action, @SwiftUICore.ViewBuilder label: @escaping () -> Label) where Action : AppIntents.OpenIntent
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension WidgetKit.ControlWidgetButton where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init<Action>(_ titleKey: SwiftUICore.LocalizedStringKey, action: Action) where Action : AppIntents.AppIntent
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<Action>(_ title: some StringProtocol, action: Action) where Action : AppIntents.AppIntent
}
@available(*, unavailable)
extension WidgetKit.ControlWidgetButton : Swift.Sendable {
}
@_spi(Server) public struct ViewStatesArchiver<States> where States : WidgetKit.ViewStates, States.Content == SwiftUICore.AnyView {
  @_spi(Server) public var encodesPreciseTextLayout: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
  @_spi(Server) public var encodesCustomFontsAsURLs: Swift.Bool {
    @_spi(Server) get
    @_spi(Server) set
  }
  @_spi(Server) public var deploymentVersion: SwiftUI._ArchivedViewStates.DeploymentVersion {
    @_spi(Server) get
    @_spi(Server) set
  }
  @_spi(Server) public mutating func archive(to fileHandle: Foundation.FileHandle) throws
  @_spi(Server) public mutating func archiveToData() throws -> Foundation.Data
}
@_spi(Server) public struct WidgetFontDefinitionFactory {
  @_spi(Server) public static func fontDefinition(from metrics: ChronoServices.CHSWidgetMetrics, for family: WidgetKit.InternalWidgetFamily) -> any SwiftUICore.FontDefinition.Type
}
@available(iOS 16.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func activityBackgroundTint(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func activityBackgroundTint(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #endif
}
package struct ControlTemplateToggle : WidgetKit.ControlTemplate, Swift.Sendable {
  public static var empty: WidgetKit.ControlTemplateToggle
  package struct Option : Swift.Equatable, Swift.Codable {
    package var value: Swift.String?
    package var action: WidgetKit.ControlAction
    package var icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?
    package var tint: SwiftUICore.Color.Resolved?
    package var status: Swift.String?
    package var actionHint: Swift.String?
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(value: Swift.String?, action: WidgetKit.ControlAction, icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?, tint: SwiftUICore.Color.Resolved? = nil, status: Swift.String? = nil, actionHint: Swift.String? = nil)
    #else
    package init(value: Swift.String?, action: WidgetKit.ControlAction, icon: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic?, tint: SwiftUICore.Color.Resolved? = nil, status: Swift.String? = nil, actionHint: Swift.String? = nil)
    #endif
    package static func == (a: WidgetKit.ControlTemplateToggle.Option, b: WidgetKit.ControlTemplateToggle.Option) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package init(from decoder: any Swift.Decoder) throws
  }
  package var title: Swift.String?
  package var subtitle: Swift.String?
  package var on: WidgetKit.ControlTemplateToggle.Option
  package var off: WidgetKit.ControlTemplateToggle.Option
  package var associatedURL: Foundation.URL?
  package var privacySensitive: Swift.Bool
  package var disabled: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(title: Swift.String?, subtitle: Swift.String?, on: WidgetKit.ControlTemplateToggle.Option, off: WidgetKit.ControlTemplateToggle.Option, associatedURL: Foundation.URL? = nil, privacySensitive: Swift.Bool = false, disabled: Swift.Bool = false)
  #else
  package init(title: Swift.String?, subtitle: Swift.String?, on: WidgetKit.ControlTemplateToggle.Option, off: WidgetKit.ControlTemplateToggle.Option, associatedURL: Foundation.URL? = nil, privacySensitive: Swift.Bool = false, disabled: Swift.Bool = false)
  #endif
  package static func == (a: WidgetKit.ControlTemplateToggle, b: WidgetKit.ControlTemplateToggle) -> Swift.Bool
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension WidgetKit.ControlTemplateToggle : Swift.CustomDebugStringConvertible {
  package var debugDescription: Swift.String {
    get
  }
  public func validateIcon(_ validate: (SwiftUI.WidgetAuxiliaryViewMetadata.Graphic) throws -> ()) throws
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct Timeline<EntryType> where EntryType : WidgetKit.TimelineEntry {
  public let entries: [EntryType]
  public let policy: WidgetKit.TimelineReloadPolicy
  public init(entries: [EntryType], policy: WidgetKit.TimelineReloadPolicy)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct WidgetRelevanceEntry<Configuration> {
  public var configuration: Configuration {
    get
  }
  public var context: AppIntents.RelevantContext {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension WidgetKit.WidgetRelevanceEntry where Configuration == () {
  public init(context: AppIntents.RelevantContext)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension WidgetKit.WidgetRelevanceEntry where Configuration : AppIntents.WidgetConfigurationIntent {
  public init(configuration: Configuration, context: AppIntents.RelevantContext)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension WidgetKit.WidgetRelevanceEntry where Configuration : Intents.INIntent {
  public init(configuration: Configuration, context: AppIntents.RelevantContext)
}
@available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ProposedAPI) @available(iOS, deprecated: 16.0, message: "Use `activitySystemActionForegroundColor`")
  @_Concurrency.MainActor @preconcurrency public func activityForegroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #else
  @_spi(ProposedAPI) @available(iOS, deprecated: 16.0, message: "Use `activitySystemActionForegroundColor`")
  @_Concurrency.MainActor @preconcurrency public func activityForegroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func activitySystemActionForegroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func activitySystemActionForegroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
extension SwiftUI.WidgetConfiguration {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func hiddenBySensitiveUI(_ hidden: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public func showsInControlCenter() -> some SwiftUI.WidgetConfiguration
  
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public func disablesControlStateCaching() -> some SwiftUI.WidgetConfiguration
  
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public func showsContextualMenu(_ showsContextualMenu: Swift.Bool = true) -> some SwiftUI.WidgetConfiguration
  
  @_spi(SSC) @_Concurrency.MainActor @preconcurrency public func hiddenControl() -> some SwiftUI.WidgetConfiguration
  
}
@_spi(Server) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) public var _widgetDisplayProperties: ChronoServices.CHSWidgetDisplayProperties {
    @_spi(Server) get
    @_spi(Server) set
  }
}
@_spi(Server) @_hasMissingDesignatedInitializers @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
@objc(_CHSWidgetDisplayProperties) public class CHSWidgetDisplayPropertiesCodable : ChronoServices.CHSWidgetDisplayProperties {
  @_spi(Server) required public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public static func < (lhs: WidgetKit.CHSWidgetDisplayPropertiesCodable, rhs: WidgetKit.CHSWidgetDisplayPropertiesCodable) -> Swift.Bool
  @_spi(Server) public static func wrapping(_ properties: ChronoServices.CHSWidgetDisplayProperties) -> WidgetKit.CHSWidgetDisplayPropertiesCodable
  @_spi(Server) @objc deinit
}
@_spi(Server) public enum ArchiveVersion : Swift.Int, Swift.Codable {
  @_spi(Server) case dawnburst
  @_spi(Server) case crystalglow
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init?(rawValue: Swift.Int)
  #else
  @_spi(Server) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Server) public typealias RawValue = Swift.Int
  @_spi(Server) public var rawValue: Swift.Int {
    @_spi(Server) get
  }
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryWidgetGroup<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(watchOS 11.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit09AccessoryA5GroupV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension WidgetKit.AccessoryWidgetGroup : Swift.Sendable {
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder content: () -> Content)
}
@_spi(ProposedAPI_Fall2024) @available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup {
  @_spi(ProposedAPI_Fall2024) @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder _content: () -> Content)
  @_spi(ProposedAPI_Fall2024) @available(watchOS, deprecated, introduced: 11.0, message: "The initializer has been renamed.")
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder title: () -> Label, @SwiftUICore.ViewBuilder contents: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup where Label == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ titleKey: some StringProtocol, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.AccessoryWidgetGroup where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct AccessoryWidgetGroupStyle {
  public static let circular: WidgetKit.AccessoryWidgetGroupStyle
  public static let roundedSquare: WidgetKit.AccessoryWidgetGroupStyle
  public static let automatic: WidgetKit.AccessoryWidgetGroupStyle
}
@available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func accessoryWidgetGroupStyle(_ style: WidgetKit.AccessoryWidgetGroupStyle = .automatic) -> some SwiftUICore.View
  
}
@_spi(ProposedAPI_Fall2024) @available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(ProposedAPI_Fall2024) @available(watchOS, deprecated, introduced: 11.0, renamed: "accessoryWidgetGroupStyle(_:)")
  @_Concurrency.MainActor @preconcurrency public func AccessoryWidgetGroupStyle(_ style: WidgetKit.AccessoryWidgetGroupStyle = .automatic) -> some SwiftUICore.View
  
}
@_spi(Internal) extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Internal) public var platformImage: UIKitCore.UIImage? {
    @_spi(Internal) get
  }
  #else
  @_spi(Internal) public var platformImage: UIKitCore.UIImage? {
    @_spi(Internal) get
  }
  #endif
}
@available(iOS 17.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(visionOS, unavailable)
extension DeveloperToolsSupport.Preview {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor public init<Attributes>(_ name: Swift.String? = nil, as viewKind: WidgetKit.ActivityPreviewViewKind, using attributes: Attributes, widget: @escaping () -> some Widget, @WidgetKit.PreviewActivityBuilder<Attributes> contentStates: @escaping @_Concurrency.MainActor () async -> [Attributes.ContentState]) where Attributes : ActivityKit.ActivityAttributes
  #else
  @_Concurrency.MainActor public init<Attributes>(_ name: Swift.String? = nil, as viewKind: WidgetKit.ActivityPreviewViewKind, using attributes: Attributes, widget: @escaping () -> some Widget, @WidgetKit.PreviewActivityBuilder<Attributes> contentStates: @escaping @_Concurrency.MainActor () async -> [Attributes.ContentState]) where Attributes : ActivityKit.ActivityAttributes
  #endif
}
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@available(iOS 17.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@freestanding(declaration) public macro Preview<Widget, Attributes>(_ name: Swift.String? = nil, as viewKind: WidgetKit.ActivityPreviewViewKind, using attributes: Attributes, widget: @escaping () -> Widget, @WidgetKit.PreviewActivityBuilder<Attributes> contentStates: @escaping @_Concurrency.MainActor () async -> [Attributes.ContentState]) = #externalMacro(module: "PreviewsMacros", type: "Common") where Widget : SwiftUI.Widget, Attributes : ActivityKit.ActivityAttributes
#endif
@available(iOS 17.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@_functionBuilder public struct PreviewActivityBuilder<A> where A : ActivityKit.ActivityAttributes {
  public static func buildExpression(_ contentState: A.ContentState) -> [A.ContentState]
  public static func buildPartialBlock(first: [A.ContentState]) -> [A.ContentState]
  public static func buildPartialBlock(accumulated: [A.ContentState], next: [A.ContentState]) -> [A.ContentState]
  public static func buildArray(_ components: [[A.ContentState]]) -> [A.ContentState]
}
@_spi(Server) public struct CodableColor : Swift.Equatable, Swift.Codable {
  @_spi(Server) public var color: SwiftUICore.Color?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public var uiColor: UIKitCore.UIColor? {
    @_spi(Server) get
  }
  #else
  @_spi(Server) public var uiColor: UIKitCore.UIColor? {
    @_spi(Server) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(_ color: SwiftUICore.Color?)
  #else
  @_spi(Server) public init(_ color: SwiftUICore.Color?)
  #endif
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public static func == (a: WidgetKit.CodableColor, b: WidgetKit.CodableColor) -> Swift.Bool
}
@_spi(Server) @objc public class ModifyControlStateRequest : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @_spi(Server) final public let control: ChronoServices.CHSControlIdentity
  @_spi(Server) final public let state: ChronoServices.CHSControlState
  @_spi(Server) public init(control: ChronoServices.CHSControlIdentity, state: ChronoServices.CHSControlState)
  @_spi(Server) @objc public static var supportsSecureCoding: Swift.Bool
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc deinit
}
@_spi(Server) @objc public class PushTokensDidChangeNotification : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @_spi(Server) @objc public static var supportsSecureCoding: Swift.Bool
  @_spi(Server) public init(controls: [ChronoServices.CHSControlIdentity], tokens: [Foundation.Data])
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc deinit
}
@_spi(Server) @objc public class ControlTemplateRequest : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @_spi(Server) final public let fileHandle: Foundation.FileHandle
  @_spi(Server) final public let control: ChronoServices.CHSControlIdentity
  @_spi(Server) final public let environment: WidgetKit.WidgetEnvironment
  @_spi(Server) final public let isPreview: Swift.Bool
  @_spi(Server) public init(fileHandle: Foundation.FileHandle, control: ChronoServices.CHSControlIdentity, environment: WidgetKit.WidgetEnvironment, isPreview: Swift.Bool)
  @_spi(Server) @objc public static var supportsSecureCoding: Swift.Bool
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc deinit
}
@_spi(Server) @objc public class PlaceholderRequest : ObjectiveC.NSObject, Foundation.NSSecureCoding, Swift.Codable {
  @_spi(Server) @objc public class var supportsSecureCoding: Swift.Bool {
    @_spi(Server) @objc get
  }
  @_spi(Server) final public let extensionIdentity: ChronoServices.ExtensionIdentity
  @_spi(Server) final public let kind: Swift.String
  @_spi(Server) final public let environment: WidgetKit.WidgetEnvironment
  @_spi(Server) final public let fileHandle: Foundation.FileHandle
  @_spi(Server) final public let archiveVersion: WidgetKit.ArchiveVersion?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(extensionIdentity: ChronoServices.ExtensionIdentity, kind: Swift.String, environment: WidgetKit.WidgetEnvironment, fileHandle: Foundation.FileHandle, archiveVersion: WidgetKit.ArchiveVersion?)
  #else
  @_spi(Server) public init(extensionIdentity: ChronoServices.ExtensionIdentity, kind: Swift.String, environment: WidgetKit.WidgetEnvironment, fileHandle: Foundation.FileHandle, archiveVersion: WidgetKit.ArchiveVersion?)
  #endif
  @_spi(Server) required convenience public init(from decoder: any Swift.Decoder) throws
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #else
  @_spi(Server) @objc required convenience public init?(coder: Foundation.NSCoder)
  #endif
  @_spi(Server) @objc public func encode(with coder: Foundation.NSCoder)
  @_spi(Server) @objc deinit
}
@available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
public protocol AppIntentTimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  associatedtype Intent : AppIntents.WidgetConfigurationIntent
  typealias Context = WidgetKit.TimelineProviderContext
  func recommendations() -> [WidgetKit.AppIntentRecommendation<Self.Intent>]
  func placeholder(in context: Self.Context) -> Self.Entry
  func snapshot(for configuration: Self.Intent, in context: Self.Context) async -> Self.Entry
  func timeline(for configuration: Self.Intent, in context: Self.Context) async -> WidgetKit.Timeline<Self.Entry>
  @_spi(ProposedAPI) @_spi(AppleInternal) func getSnapshot(for configuration: Self.Intent, in context: Self.Context, completion: @escaping (Self.Entry) -> Swift.Void)
  @_spi(ProposedAPI) @_spi(AppleInternal) func getTimeline(for configuration: Self.Intent, in context: Self.Context, completion: @escaping (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  func relevances() async -> WidgetKit.WidgetRelevances<Self.Intent>
}
extension WidgetKit.AppIntentTimelineProvider {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public func relevances() async -> WidgetKit.WidgetRelevances<Self.Intent>
}
@_spi(ProposedAPI) @_spi(AppleInternal) extension WidgetKit.AppIntentTimelineProvider {
  @_spi(ProposedAPI) @_spi(AppleInternal) public func snapshot(for configuration: Self.Intent, in context: Self.Context) async -> Self.Entry
  @_spi(ProposedAPI) @_spi(AppleInternal) public func getSnapshot(for configuration: Self.Intent, in context: Self.Context, completion: @escaping (Self.Entry) -> Swift.Void)
  @_spi(ProposedAPI) @_spi(AppleInternal) public func timeline(for configuration: Self.Intent, in context: Self.Context) async -> WidgetKit.Timeline<Self.Entry>
  @_spi(ProposedAPI) @_spi(AppleInternal) public func getTimeline(for configuration: Self.Intent, in context: Self.Context, completion: @escaping (WidgetKit.Timeline<Self.Entry>) -> Swift.Void)
}
extension WidgetKit.AppIntentTimelineProvider {
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func recommendations() -> [WidgetKit.AppIntentRecommendation<Self.Intent>]
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUI.WidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func configurationDisplayName(_ displayName: SwiftUICore.Text) -> some SwiftUI.WidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func configurationDisplayName(_ displayNameKey: SwiftUICore.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func configurationDisplayName<S>(_ displayName: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  @_Concurrency.MainActor @preconcurrency public func description(_ description: SwiftUICore.Text) -> some SwiftUI.WidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func description(_ descriptionKey: SwiftUICore.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public func description<S>(_ description: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  @_Concurrency.MainActor @preconcurrency public func supportedFamilies(_ families: [WidgetKit.WidgetFamily]) -> some SwiftUI.WidgetConfiguration
  
  @_Concurrency.MainActor @preconcurrency public func onBackgroundURLSessionEvents(matching matchingString: Swift.String, _ urlSessionEvent: @escaping (_ identifier: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void) -> some SwiftUI.WidgetConfiguration
  
  @_spi(SSC) @available(iOS 18.0, *)
  @_spi_available(macOS, introduced: 15.0)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func pushHandler(_ pushHandler: @escaping (_ pushTokens: [WidgetKit.ControlInfo : WidgetKit.ControlPushInfo]) -> Swift.Void) -> some SwiftUI.WidgetConfiguration
  
  @_spi(ControlEntities) @available(iOS 18.0, *)
  @_spi_available(macOS, introduced: 15.0)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func controlPickerAsSlider() -> some SwiftUI.WidgetConfiguration
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func onBackgroundURLSessionEvents(matching matchingBlock: ((_ identifier: Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping (_ identifier: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void) -> some SwiftUI.WidgetConfiguration
  
  #else
  @_Concurrency.MainActor @preconcurrency public func onBackgroundURLSessionEvents(matching matchingBlock: ((_ identifier: Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping (_ identifier: Swift.String, _ completion: @escaping () -> Swift.Void) -> Swift.Void) -> some SwiftUI.WidgetConfiguration
  
  #endif
  @_spi(ProposedAPI) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
  @available(*, deprecated, message: "Use containerBackgroundRemovable()")
  @_Concurrency.MainActor @preconcurrency public func widgetBackgroundRemovable(_ isRemovable: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
  @_spi(ProposedAPI) @available(iOS 18.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(*, deprecated, message: "Use promptsForUserConfiguration()")
  @_Concurrency.MainActor @preconcurrency public func prefersUserConfiguration() -> some SwiftUI.WidgetConfiguration
  
  @available(iOS 18.0, macOS 15.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func promptsForUserConfiguration() -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func enabled(_ enabled: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
}
@_spi(Private) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
public enum WidgetBackgroundStyle : Swift.Int, Swift.Codable, Swift.Comparable {
  @_spi(Private) case opaque
  @_spi(Private) case transparent
  @_spi(Private) case blur
  @_spi(Private) public static func < (lhs: WidgetKit.WidgetBackgroundStyle, rhs: WidgetKit.WidgetBackgroundStyle) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init?(rawValue: Swift.Int)
  #else
  @_spi(Private) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Private) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
  public typealias RawValue = Swift.Int
  @_spi(Private) public var rawValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUI.WidgetConfiguration {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func internalSupportedFamilies(_ families: [WidgetKit.InternalWidgetFamily]) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @available(iOS, deprecated: 17.0, message: "Use preferredBackgroundStyle")
  @available(macOS, deprecated: 14.0, message: "Use preferredBackgroundStyle")
  @available(watchOS, deprecated: 10.0, message: "Use preferredBackgroundStyle")
  @_Concurrency.MainActor @preconcurrency public func backgroundStyle(_ style: WidgetKit.WidgetBackgroundStyle) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func preferredBackgroundStyle(_ style: WidgetKit.WidgetBackgroundStyle) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func supportsVibrantContent(_ isVibrant: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @available(iOS, deprecated: 16.0, message: "Use preferredBackgroundStyle")
  @available(watchOS, deprecated: 9.0, message: "Use preferredBackgroundStyle")
  @available(macOS, deprecated: 13.0, message: "Use preferredBackgroundStyle")
  @_Concurrency.MainActor @preconcurrency public func isTransparent(_ transparent: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func eventMachServiceName(_ name: Swift.String) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @available(*, deprecated, message: "Move your widget to `AppleInternal` on the filesystem.")
  @_Concurrency.MainActor @preconcurrency public func internalWidget() -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func supportsInteraction(_ isInteractive: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func enablesMultipleTapTargets(_ enablesMultipleTapTargets: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func enableContentMarginsForFirstParty(_ enableContentMarginsForFirstParty: Swift.Bool) -> some SwiftUI.WidgetConfiguration
  
  @_spi(Private) @available(*, deprecated, message: "Use `.enabled(<condition>)` instead.")
  @_Concurrency.MainActor @preconcurrency public func visibilityConfigurableByInternalSettings(visibleByDefault: Swift.Bool = false) -> some SwiftUI.WidgetConfiguration
  
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct WidgetLocation : Swift.Sendable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WidgetKit.WidgetLocation, b: WidgetKit.WidgetLocation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension WidgetKit.WidgetLocation {
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let homeScreen: WidgetKit.WidgetLocation
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let lockScreen: WidgetKit.WidgetLocation
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let standBy: WidgetKit.WidgetLocation
  @available(iOS 17.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let iPhoneWidgetsOnMac: WidgetKit.WidgetLocation
  @_spi(ProposedAPI) @available(iOS 17.0, *)
  @available(*, deprecated, message: "Use standBy")
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let ambient: WidgetKit.WidgetLocation
  @_spi(ProposedAPI) @available(iOS 17.0, *)
  @available(*, deprecated, message: "Use iPhoneWidgetsOnMac")
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let continuityMac: WidgetKit.WidgetLocation
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public func disfavoredLocations(_ locations: [WidgetKit.WidgetLocation], for families: [WidgetKit.WidgetFamily]) -> some SwiftUI.WidgetConfiguration
  
}
package protocol AsyncControlArchiveDataSource {
  func getState() async throws -> ChronoServices.CHSControlState
  func makeTemplate(environment: SwiftUICore.EnvironmentValues) async throws -> (any WidgetKit.ControlTemplate)
}
package protocol ControlArchiveDataSource {
  func getState() throws -> ChronoServices.CHSControlState
  func makeTemplate(environment: SwiftUICore.EnvironmentValues) throws -> (any WidgetKit.ControlTemplate)
}
package struct ControlArchiver {
  package static func archive(control: ChronoServices.CHSControlIdentity, environment: WidgetKit.WidgetEnvironment, asyncDataSource: (some AsyncControlArchiveDataSource)) async throws -> Foundation.Data
  package static func archive(control: ChronoServices.CHSControlIdentity, environment: WidgetKit.WidgetEnvironment, asyncDataSource: (some AsyncControlArchiveDataSource), fileHandle: Foundation.FileHandle) async throws
  package static func archive(control: ChronoServices.CHSControlIdentity, environment: WidgetKit.WidgetEnvironment, dataSource: (some ControlArchiveDataSource), fileHandle: Foundation.FileHandle) throws
}
package struct ControlUnarchiver {
  package static func unarchive(url: Foundation.URL) throws -> any WidgetKit.ControlArchive
  package static func unarchive(data: Foundation.Data) throws -> any WidgetKit.ControlArchive
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct ViewableTimelineEntry : WidgetKit.TimelineEntry {
  @_spi(Server) public let date: Foundation.Date
  @_spi(Server) public let view: SwiftUICore.AnyView
  @_spi(Server) public let relevance: WidgetKit.TimelineEntryRelevance?
  @_spi(Server) public let viewMetadata: WidgetKit.WidgetViewMetadata?
  @_spi(Server) public let entryData: Foundation.Data?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public init(date: Foundation.Date, view: SwiftUICore.AnyView, relevance: WidgetKit.TimelineEntryRelevance? = nil, viewMetadata: WidgetKit.WidgetViewMetadata? = nil, entryData: Foundation.Data? = nil)
  #else
  @_spi(Server) public init(date: Foundation.Date, view: SwiftUICore.AnyView, relevance: WidgetKit.TimelineEntryRelevance? = nil, viewMetadata: WidgetKit.WidgetViewMetadata? = nil, entryData: Foundation.Data? = nil)
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol TimelineViewCollection {
  @_spi(Server) var originatingBundle: WidgetKit.BundleStub { get }
  @_spi(Server) var widget: ChronoServices.CHSWidget { get }
  @_spi(Server) var metrics: ChronoServices.CHSWidgetMetrics { get }
  @_spi(Server) var environment: WidgetKit.WidgetEnvironment { get }
  @_spi(Server) var creationDate: Foundation.Date { get }
  @_spi(Server) var dateRange: Foundation.DateInterval { get }
  @_spi(Server) var entries: [any WidgetKit.TimelineEntry] { get }
  @_spi(Server) var reloadPolicy: WidgetKit.TimelineReloadPolicy { get }
  @_spi(Server) var protectionLevel: WidgetKit.DataProtectionLevel { get }
  @_spi(Server) var requiresReload: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues) throws -> WidgetKit.ViewableTimelineEntry?
  #else
  @_spi(Server) func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues) throws -> WidgetKit.ViewableTimelineEntry?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ViewableTimelineEntry?
  #else
  @_spi(Server) func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues, ignoringEnvironmentKeys: [Swift.AnyKeyPath]) throws -> WidgetKit.ViewableTimelineEntry?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) func entriesBookending(_ date: Foundation.Date) -> (lowerBound: (any WidgetKit.TimelineEntry)?, upperBound: (any WidgetKit.TimelineEntry)?)
  #else
  @_spi(Server) func entriesBookending(_ date: Foundation.Date) -> (lowerBound: (any WidgetKit.TimelineEntry)?, upperBound: (any WidgetKit.TimelineEntry)?)
  #endif
}
@_spi(Server) extension WidgetKit.TimelineViewCollection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues) throws -> WidgetKit.ViewableTimelineEntry?
  #else
  @_spi(Server) public func viewableEntry(for date: Foundation.Date, in environment: SwiftUICore.EnvironmentValues) throws -> WidgetKit.ViewableTimelineEntry?
  #endif
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public protocol ArchivableTimelineViewCollection : WidgetKit.TimelineViewCollection {
  @_spi(Server) func enumeratedViewableEntriesAndEnvironments() -> WidgetKit.Cartesian2ProductCollection<[WidgetKit.ViewableTimelineEntry], [SwiftUICore.EnvironmentValues]>
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.TimelineViewCollection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public var effectiveReloadDate: Foundation.Date? {
    @_spi(Server) get
  }
  #else
  @_spi(Server) public var effectiveReloadDate: Foundation.Date? {
    @_spi(Server) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public var staleDate: Foundation.Date? {
    @_spi(Server) get
  }
  #else
  @_spi(Server) public var staleDate: Foundation.Date? {
    @_spi(Server) get
  }
  #endif
  @_spi(Server) public var isStale: Swift.Bool {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func entriesBookending(_ date: Foundation.Date) -> (lowerBound: (any WidgetKit.TimelineEntry)?, upperBound: (any WidgetKit.TimelineEntry)?)
  #else
  @_spi(Server) public func entriesBookending(_ date: Foundation.Date) -> (lowerBound: (any WidgetKit.TimelineEntry)?, upperBound: (any WidgetKit.TimelineEntry)?)
  #endif
}
@_spi(Server) public struct ActivityArchivedViewCollection : Swift.Equatable {
  @_spi(Server) public struct ViewIndex : Swift.Equatable, Swift.CustomStringConvertible {
    @_spi(Server) public var description: Swift.String {
      @_spi(Server) get
    }
    @_spi(Server) public static func == (a: WidgetKit.ActivityArchivedViewCollection.ViewIndex, b: WidgetKit.ActivityArchivedViewCollection.ViewIndex) -> Swift.Bool
  }
  @_spi(Server) public struct ViewEntry : Swift.Equatable {
    @_spi(Server) public let viewIndex: WidgetKit.ActivityArchivedViewCollection.ViewIndex
    @_spi(Server) public let view: SwiftUICore.AnyView
    @_spi(Server) public let metadata: WidgetKit.ActivityViewEntryMetadata?
    @_spi(Server) public let metrics: WidgetKit.ActivityViewMetrics
    @_spi(Server) public static func == (lhs: WidgetKit.ActivityArchivedViewCollection.ViewEntry, rhs: WidgetKit.ActivityArchivedViewCollection.ViewEntry) -> Swift.Bool
  }
  @_spi(Server) public var payloadID: Swift.String {
    @_spi(Server) get
  }
  @_spi(Server) public var isAlerting: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public var environment: WidgetKit.WidgetEnvironment {
    @_spi(Server) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public var jindoKeyColor: UIKitCore.UIColor? {
    @_spi(Server) get
  }
  #else
  @_spi(Server) public var jindoKeyColor: UIKitCore.UIColor? {
    @_spi(Server) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public var jindoWidgetURL: Foundation.URL? {
    @_spi(Server) get
  }
  #else
  @_spi(Server) public var jindoWidgetURL: Foundation.URL? {
    @_spi(Server) get
  }
  #endif
  @_spi(Server) public init(contentsOf fileHandle: Foundation.FileHandle) throws
  @_spi(Server) public init(contentsOf url: Foundation.URL) throws
  @_spi(Server) public init(contentsOf data: Foundation.Data) throws
  @_spi(Server) public static func == (lhs: WidgetKit.ActivityArchivedViewCollection, rhs: WidgetKit.ActivityArchivedViewCollection) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func metrics(viewIndex: WidgetKit.ActivityArchivedViewCollection.ViewIndex) -> WidgetKit.ActivityViewMetrics?
  #else
  @_spi(Server) public func metrics(viewIndex: WidgetKit.ActivityArchivedViewCollection.ViewIndex) -> WidgetKit.ActivityViewMetrics?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func index(for tag: WidgetKit.ActivityViewTag, environmentAtIndex envIndex: Swift.Int) -> WidgetKit.ActivityArchivedViewCollection.ViewIndex?
  #else
  @_spi(Server) public func index(for tag: WidgetKit.ActivityViewTag, environmentAtIndex envIndex: Swift.Int) -> WidgetKit.ActivityArchivedViewCollection.ViewIndex?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func index(for tag: WidgetKit.ActivityViewTag, in environment: SwiftUICore.EnvironmentValues, ignoring: [Swift.AnyKeyPath] = []) -> WidgetKit.ActivityArchivedViewCollection.ViewIndex?
  #else
  @_spi(Server) public func index(for tag: WidgetKit.ActivityViewTag, in environment: SwiftUICore.EnvironmentValues, ignoring: [Swift.AnyKeyPath] = []) -> WidgetKit.ActivityArchivedViewCollection.ViewIndex?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Server) public func viewEntry(for tag: WidgetKit.ActivityViewTag, in environment: SwiftUICore.EnvironmentValues, ignoring: [Swift.AnyKeyPath] = []) throws -> WidgetKit.ActivityArchivedViewCollection.ViewEntry?
  #else
  @_spi(Server) public func viewEntry(for tag: WidgetKit.ActivityViewTag, in environment: SwiftUICore.EnvironmentValues, ignoring: [Swift.AnyKeyPath] = []) throws -> WidgetKit.ActivityArchivedViewCollection.ViewEntry?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Testing) public func viewState(for tag: WidgetKit.ActivityViewTag, environmentAtIndex envIndex: Swift.Int) throws -> (WidgetKit.ActivityArchivedViewCollection.ViewEntry, SwiftUICore.EnvironmentValues)?
  #else
  @_spi(Testing) public func viewState(for tag: WidgetKit.ActivityViewTag, environmentAtIndex envIndex: Swift.Int) throws -> (WidgetKit.ActivityArchivedViewCollection.ViewEntry, SwiftUICore.EnvironmentValues)?
  #endif
  @_spi(Server) public var archivedFamily: WidgetKit.ActivityFamily {
    @_spi(Server) get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct TimelineReloadPolicy : Swift.Equatable {
  @_spi(Server) public var date: Foundation.Date?
  public static let atEnd: WidgetKit.TimelineReloadPolicy
  public static let never: WidgetKit.TimelineReloadPolicy
  public static func after(_ date: Foundation.Date) -> WidgetKit.TimelineReloadPolicy
  public static func == (a: WidgetKit.TimelineReloadPolicy, b: WidgetKit.TimelineReloadPolicy) -> Swift.Bool
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.TimelineReloadPolicy : Swift.Codable {
  @_spi(Server) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Server) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Server) public struct ActivityMetrics {
  @_spi(Server) public let cornerRadius: CoreFoundation.CGFloat
  @_spi(Server) public let scaleFactor: CoreFoundation.CGFloat
  @_spi(Server) public var isUnitScale: Swift.Bool {
    @_spi(Server) get
  }
  @_spi(Server) public var effectiveCornerRadius: CoreFoundation.CGFloat {
    @_spi(Server) get
  }
  @_spi(Server) public func effectiveSizePixelAligned(with displayScale: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  @_spi(Server) public func rawSizePixelAligned(with displayScale: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public let WidgetExtensionPointNames: [Swift.String]
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension Foundation.NSXPCInterface {
  @_spi(Server) public func setClasses(_ classes: [ObjectiveC.NSObject.Type], for sel: ObjectiveC.Selector, argumentIndex arg: Swift.Int, ofReply: Swift.Bool)
}
@_spi(Server) public protocol ViewStates {
  associatedtype Content : SwiftUICore.View
  associatedtype Metadata : Swift.Decodable, Swift.Encodable
  @_spi(Server) var count: Swift.Int { get }
  @_spi(Server) mutating func makeMetadata() throws -> Self.Metadata
  @_spi(Server) mutating func updateState<Delegate>(at index: Swift.Int, host: SwiftUI._ArchivedViewHost<Self.Content, Delegate>) throws where Delegate : SwiftUICore._ArchivedViewHostDelegate
  @_spi(Server) func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
}
@_spi(SSC) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, *)
public protocol TogglableAppIntent : AppIntents.AppIntent {
  @_spi(SSC) var isOn: Swift.Bool { get set }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@_spi(SSC) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, *)
public protocol SetValueAppIntent<ValueType> : AppIntents.AppIntent {
  associatedtype ValueType
  @_spi(SSC) var newValue: Self.ValueType { get set }
}
#else
@_spi(SSC) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, *)
public protocol SetValueAppIntent : AppIntents.AppIntent {
  associatedtype ValueType
  @_spi(SSC) var newValue: Self.ValueType { get set }
}
#endif
extension SwiftUICore.EnvironmentValues {
  @_spi(Server) @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, *)
  public var _widgetRenderScheme: WidgetKit.WidgetRenderScheme {
    get
    set
  }
}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct JindoView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_spi(ProposedAPI) @_Concurrency.MainActor @preconcurrency public init(mode: WidgetKit.JindoHorizontalMode = .leading, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(ProposedAPI) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(ProposedAPI) get
  }
  @_spi(ProposedAPI) @available(iOS 16.1, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit9JindoViewV4bodyQrvp", 0) __<Content>
}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct JindoContent<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_spi(ProposedAPI) @_Concurrency.MainActor @preconcurrency public init(position: WidgetKit.JindoPosition, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(ProposedAPI) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(ProposedAPI) get
  }
  @_spi(ProposedAPI) @available(iOS 16.1, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit12JindoContentV4bodyQrvp", 0) __<Content>
}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct JindoPosition : Swift.Equatable {
  @_spi(ProposedAPI) public static var leading: WidgetKit.JindoPosition {
    @_spi(ProposedAPI) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ProposedAPI) public static func leading(inset: CoreFoundation.CGFloat? = nil) -> WidgetKit.JindoPosition
  #else
  @_spi(ProposedAPI) public static func leading(inset: CoreFoundation.CGFloat? = nil) -> WidgetKit.JindoPosition
  #endif
  @_spi(ProposedAPI) public static var trailing: WidgetKit.JindoPosition {
    @_spi(ProposedAPI) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ProposedAPI) public static func trailing(inset: CoreFoundation.CGFloat? = nil) -> WidgetKit.JindoPosition
  #else
  @_spi(ProposedAPI) public static func trailing(inset: CoreFoundation.CGFloat? = nil) -> WidgetKit.JindoPosition
  #endif
  @_spi(ProposedAPI) public static var center: WidgetKit.JindoPosition {
    @_spi(ProposedAPI) get
  }
  @_spi(ProposedAPI) public static var bottom: WidgetKit.JindoPosition {
    @_spi(ProposedAPI) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ProposedAPI) public static func bottom(leadingInset: CoreFoundation.CGFloat? = nil, trailingInset: CoreFoundation.CGFloat? = nil) -> WidgetKit.JindoPosition
  #else
  @_spi(ProposedAPI) public static func bottom(leadingInset: CoreFoundation.CGFloat? = nil, trailingInset: CoreFoundation.CGFloat? = nil) -> WidgetKit.JindoPosition
  #endif
  @_spi(ProposedAPI) public static func == (a: WidgetKit.JindoPosition, b: WidgetKit.JindoPosition) -> Swift.Bool
}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum JindoHorizontalMode : Swift.Int {
  @_spi(ProposedAPI) case split
  @_spi(ProposedAPI) case leading
  @_spi(ProposedAPI) case trailing
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ProposedAPI) public init?(rawValue: Swift.Int)
  #else
  @_spi(ProposedAPI) public init?(rawValue: Swift.Int)
  #endif
  @_spi(ProposedAPI) @available(iOS 16.1, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.Int
  @_spi(ProposedAPI) public var rawValue: Swift.Int {
    @_spi(ProposedAPI) get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
public struct TimelineProviderContext {
  @dynamicMemberLookup public struct EnvironmentVariants {
    @_spi(Internal) public init(_ environment: WidgetKit.WidgetEnvironment)
    #if compiler(>=5.3) && $NoncopyableGenerics
    public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
      get
    }
    #else
    public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public subscript<T>(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
      get
    }
    #else
    public subscript<T>(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, T>) -> [T]? {
      get
    }
    #endif
  }
  public let environmentVariants: WidgetKit.TimelineProviderContext.EnvironmentVariants
  public let family: WidgetKit.WidgetFamily
  @_spi(Private) public let internalFamily: WidgetKit.InternalWidgetFamily
  public let isPreview: Swift.Bool
  public let displaySize: CoreFoundation.CGSize
  package let archiveVersion: WidgetKit.ArchiveVersion?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Internal) public init(environmentVariants: WidgetKit.TimelineProviderContext.EnvironmentVariants, family: WidgetKit.InternalWidgetFamily, isPreview: Swift.Bool, archiveVersion: WidgetKit.ArchiveVersion?)
  #else
  @_spi(Internal) public init(environmentVariants: WidgetKit.TimelineProviderContext.EnvironmentVariants, family: WidgetKit.InternalWidgetFamily, isPreview: Swift.Bool, archiveVersion: WidgetKit.ArchiveVersion?)
  #endif
}
@_spi(Server) extension WidgetKit.JindoViewTag : Swift.RawRepresentable {}
@_spi(Server) extension WidgetKit.JindoViewTag : Swift.Sendable {}
@_spi(Previews) extension WidgetKit.ActivityPreviewSourceStaleModifications : Swift.Equatable {}
@_spi(Previews) extension WidgetKit.ActivityPreviewSourceStaleModifications : Swift.Hashable {}
@_spi(PreviewsPlugin) extension WidgetKit.WidgetPreviewContentCategory : Swift.Equatable {}
@_spi(PreviewsPlugin) extension WidgetKit.WidgetPreviewContentCategory : Swift.Hashable {}
@_spi(PreviewsPlugin) extension WidgetKit.WidgetPreviewContentCategory : Swift.RawRepresentable {}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.CKCErrorCode : Swift.Equatable {}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.CKCErrorCode : Swift.Hashable {}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.CKCErrorCode : Swift.RawRepresentable {}
@_spi(Server) @available(iOS 16.1, watchOS 11.0, tvOS 18.0, *)
@available(macOS, unavailable)
extension WidgetKit.JindoDisplayMode : Swift.Sendable {}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
extension WidgetKit.ActivityFamily : Swift.Hashable {}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.InternalWidgetFamily : Swift.Equatable {}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.InternalWidgetFamily : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.WidgetFamily : Swift.Hashable {}
@_spi(Server) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension WidgetKit.WidgetRenderingMode.Mode : Swift.Equatable {}
@_spi(Server) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension WidgetKit.WidgetRenderingMode.Mode : Swift.Hashable {}
@_spi(Server) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension WidgetKit.WidgetRenderingMode.Mode : Swift.RawRepresentable {}
@_spi(Server) extension WidgetKit.ExtensionSessionType : Swift.Equatable {}
@_spi(Server) extension WidgetKit.ExtensionSessionType : Swift.Hashable {}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.DataProtectionLevel : Swift.Hashable {}
@_spi(Server) @available(iOS 14.0, macOS 11.0, tvOS 18.0, watchOS 9.0, *)
extension WidgetKit.DataProtectionLevel : Swift.RawRepresentable {}
@_spi(PreviewsPlugin) extension WidgetKit.ActivityPreviewContentCategory : Swift.Equatable {}
@_spi(PreviewsPlugin) extension WidgetKit.ActivityPreviewContentCategory : Swift.Hashable {}
@_spi(PreviewsPlugin) extension WidgetKit.ActivityPreviewContentCategory : Swift.RawRepresentable {}
@available(iOS 16.2, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension WidgetKit.ActivityPreviewViewKind.DynamicIslandPreviewViewState : Swift.Equatable {}
@available(iOS 16.2, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension WidgetKit.ActivityPreviewViewKind.DynamicIslandPreviewViewState : Swift.Hashable {}
@_spi(Server) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension WidgetKit.CHSWidgetDisplayPropertiesCodable : Swift.Comparable {}
@_spi(Server) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension WidgetKit.CHSWidgetDisplayPropertiesCodable : Swift.Decodable {}
@_spi(Server) @available(iOS 17.0, watchOS 10.0, macOS 14.0, tvOS 18.0, *)
extension WidgetKit.CHSWidgetDisplayPropertiesCodable : Swift.Encodable {}
@_spi(Server) extension WidgetKit.ArchiveVersion : Swift.Equatable {}
@_spi(Server) extension WidgetKit.ArchiveVersion : Swift.Hashable {}
@_spi(Server) extension WidgetKit.ArchiveVersion : Swift.RawRepresentable {}
@_spi(Private) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension WidgetKit.WidgetBackgroundStyle : Swift.Hashable {}
@_spi(Private) @available(iOS 16.0, watchOS 9.0, macOS 13.0, tvOS 18.0, *)
extension WidgetKit.WidgetBackgroundStyle : Swift.RawRepresentable {}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.JindoHorizontalMode : Swift.Equatable {}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.JindoHorizontalMode : Swift.Hashable {}
@_spi(ProposedAPI) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.JindoHorizontalMode : Swift.RawRepresentable {}
