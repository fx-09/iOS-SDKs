// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.3.38 clang-1600.0.20.6)
// swift-module-flags: -target arm64-apple-ios18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level spi -enable-bare-slash-regex -user-module-version 304.20.2 -module-name AccessorySetupKit
@_exported import AccessorySetupKit
import CoreBluetooth
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_spi(Private) @_inheritsConvenienceInitializers @available(iOS 18.0, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@objc public class ASUIClientManager : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @_spi(Private) @objc public static let shared: AccessorySetupKit.ASUIClientManager
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @objc public func activateConnection(session: AccessorySetupKit.ASAccessorySession, with displayItems: [AccessorySetupKit.ASPickerDisplayItem], for overrideBundleID: Swift.String? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Private) @objc public func activateConnection(session: AccessorySetupKit.ASAccessorySession, with displayItems: [AccessorySetupKit.ASPickerDisplayItem], for overrideBundleID: Swift.String? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @objc public func update(accessory: AccessorySetupKit.ASAccessory, options: AccessorySetupKit.ASAccessory.RenameOptions, for overrideBundleID: Swift.String? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #else
  @_spi(Private) @objc public func update(accessory: AccessorySetupKit.ASAccessory, options: AccessorySetupKit.ASAccessory.RenameOptions, for overrideBundleID: Swift.String? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  @_spi(Private) @objc deinit
  @_spi(Private) @objc override dynamic public init()
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension os.Logger : @unchecked @retroactive Swift.Sendable {
}
#else
extension os.Logger : @unchecked Swift.Sendable {
}
#endif
