// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.3.38 clang-1600.0.20.6)
// swift-module-flags: -target arm64-apple-ios18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -enable-experimental-feature Macros -enable-experimental-feature ExtensionMacros -module-abi-name SwiftUI -enable-experimental-feature IsolatedAny -enable-bare-slash-regex -user-module-version 6.0.70.5.103 -module-name SwiftUICore -package-name SwiftUI
import Accessibility
@_spiOnly import AttributeGraph
import Combine
@_spi(Private) import CoreFoundation
import CoreGraphics
import CoreTransferable
import Darwin
@_spi(ResourceSymbols) import DeveloperToolsSupport
@_spi(AttributedString) import Foundation
@_spiOnly import UIFoundation_Private.NSCustomTextRendering
@_spiOnly import UIFoundation_Private.NSEmojiImageTextAttachment
@_spiOnly import UIFoundation_Private.NSTextAnimationProvider
@_spi(AttributedString) @_spi(SwiftUI) import Observation
@_spiOnly import RenderBox
import Swift
@_exported import SwiftUICore
@_spi(Private) import Symbols
@_spiOnly import UIFoundation_Private
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import os.signpost
import simd
package typealias ViewPhase = SwiftUICore._GraphInputs.Phase
package protocol ViewInput : SwiftUICore.GraphInput {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewInputs {
  package var base: SwiftUICore._GraphInputs
  package var preferences: SwiftUICore.PreferencesInputs
  package var customInputs: SwiftUICore.PropertyList {
    get
    set
  }
  package subscript<T>(input: T.Type) -> T.Value where T : SwiftUICore.ViewInput {
    get
    set
  }
  package subscript<T>(input: T.Type) -> T.Value where T : SwiftUICore.ViewInput, T.Value : SwiftUICore.GraphReusable {
    get
    set
  }
  package var time: AttributeGraph.Attribute<SwiftUICore.Time> {
    get
    set
  }
  package var environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues> {
    get
    set
  }
  package var viewPhase: AttributeGraph.Attribute<SwiftUICore.ViewPhase> {
    get
    set
  }
  package var transaction: AttributeGraph.Attribute<SwiftUICore.Transaction> {
    get
    set
  }
  package var transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform> {
    get
    set
  }
  package var position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin> {
    get
    set
  }
  package var containerPosition: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>
  package var size: AttributeGraph.Attribute<SwiftUICore.ViewSize> {
    get
    set
  }
  package var safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>
  package var scrollableContainerSize: AttributeGraph.OptionalAttribute<SwiftUICore.ViewSize>
  package var requestsLayoutComputer: Swift.Bool {
    get
    set
  }
  package var needsGeometry: Swift.Bool {
    get
    set
  }
  package var needsDisplayListAccessibility: Swift.Bool {
    get
    set
  }
  package var needsAccessibilityGeometry: Swift.Bool {
    get
    set
  }
  package var needsAccessibilityViewResponders: Swift.Bool {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var stackOrientation: SwiftUICore.Axis? {
    get
    set
  }
  #else
  package var stackOrientation: SwiftUICore.Axis? {
    get
    set
  }
  #endif
  package var supportsVFD: Swift.Bool {
    get
  }
  package var changedDebugProperties: SwiftUICore._ViewDebug.Properties {
    get
    set
  }
  package init(_ base: SwiftUICore._GraphInputs, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, containerPosition: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, hostPreferenceKeys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>)
  package static func invalidInputs(_ base: SwiftUICore._GraphInputs) -> SwiftUICore._ViewInputs
  package func mapEnvironment<T>(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> AttributeGraph.Attribute<T>
  package func animatedPosition() -> AttributeGraph.Attribute<SwiftUICore.ViewOrigin>
  package func animatedSize() -> AttributeGraph.Attribute<SwiftUICore.ViewSize>
  package func animatedCGSize() -> AttributeGraph.Attribute<CoreFoundation.CGSize>
  package func intern<T>(_ value: T, id: SwiftUICore.GraphHost.ConstantID) -> AttributeGraph.Attribute<T>
  package mutating func copyCaches()
  package mutating func resetCaches()
  package mutating func append<T, U>(_ newValue: U, to _: T.Type) where T : SwiftUICore.ViewInput, T.Value == SwiftUICore.Stack<U>
  package mutating func append<T, U>(_ newValue: U, to _: T.Type) where T : SwiftUICore.ViewInput, U : SwiftUICore.GraphReusable, T.Value == SwiftUICore.Stack<U>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func popLast<T, U>(_ key: T.Type) -> U? where T : SwiftUICore.ViewInput, T.Value == SwiftUICore.Stack<U>
  #else
  package mutating func popLast<T, U>(_ key: T.Type) -> U? where T : SwiftUICore.ViewInput, T.Value == SwiftUICore.Stack<U>
  #endif
}
@available(*, unavailable)
extension SwiftUICore._ViewInputs : Swift.Sendable {
}
package struct DynamicStackOrientation : SwiftUICore.ViewInput {
  package typealias Value = AttributeGraph.OptionalAttribute<SwiftUICore.Axis?>
  package static let defaultValue: SwiftUICore.DynamicStackOrientation.Value
}
extension SwiftUICore._ViewInputs {
  package var withoutGeometryDependencies: SwiftUICore._ViewInputs {
    get
  }
  package init(withoutGeometry base: SwiftUICore._GraphInputs)
}
extension SwiftUICore._ViewListInputs {
  package var withoutGeometryDependencies: SwiftUICore._ViewInputs {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func reset(delta: Swift.UInt32) -> some SwiftUICore.View
  
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolvedShapeStyles(role: SwiftUICore.ShapeRole, mode: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_ResolverMode>? = nil) -> AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>
  #else
  package func resolvedShapeStyles(role: SwiftUICore.ShapeRole, mode: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_ResolverMode>? = nil) -> AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum LayoutDirection : Swift.Hashable, Swift.CaseIterable, Swift.Sendable {
  case leftToRight
  case rightToLeft
  package func convert(_ rect: CoreFoundation.CGRect, to layoutDirection: SwiftUICore.LayoutDirection, in size: CoreFoundation.CGSize) -> CoreFoundation.CGRect
  package var opposite: SwiftUICore.LayoutDirection {
    get
  }
  public static func == (a: SwiftUICore.LayoutDirection, b: SwiftUICore.LayoutDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.LayoutDirection]
  public static var allCases: [SwiftUICore.LayoutDirection] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var layoutDirection: SwiftUICore.LayoutDirection {
    get
    set
  }
}
package struct AnyStyleContextType : Swift.Equatable {
  package init<C>(_ context: C.Type = C.self) where C : SwiftUICore.StyleContext
  package static func == (lhs: SwiftUICore.AnyStyleContextType, rhs: SwiftUICore.AnyStyleContextType) -> Swift.Bool
  package func acceptsTop<Q>(_ query: Q.Type) -> Swift.Bool
  package func pushing<N>(_ newContext: N.Type) -> SwiftUICore.AnyStyleContextType where N : SwiftUICore.StyleContext
  #if compiler(>=5.3) && $ParameterPacks
  package func acceptsAny<each Q>(_ queries: repeat (each Q).Type) -> Swift.Bool where repeat each Q : SwiftUICore.StyleContext
  #endif
}
@_spi(ForSwiftUIOnly) public typealias PlatformPoint = CoreFoundation.CGPoint
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static var infinity: CoreFoundation.CGPoint {
    get {
        return .init(x: CGFloat.infinity, y: CGFloat.infinity)
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package init(_ size: CoreFoundation.CGSize) {
        self.init(x: size.width, y: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var isFinite: Swift.Bool {
    get {
        return x.isFinite && y.isFinite
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func offsetBy(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return CGPoint(x: self.x + dx, y: self.y + dy)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func offsetBy(dx: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        offsetBy(dx: dx, dy: 0)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func offsetBy(dy: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        offsetBy(dx: 0, dy: dy)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func offset(by offset: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        return offsetBy(dx: offset.width, dy: offset.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return CGPoint(x: self.x * x, y: self.y * y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        scaledBy(x: x, y: 1)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaledBy(y: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        scaledBy(x: 1, y: y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return self.scaledBy(x: scale, y: scale)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var isNaN: Swift.Bool {
    get { x.isNaN || y.isNaN }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var flushingNaNs: CoreFoundation.CGPoint {
    get {
        return CGPoint(x: !x.isNaN ? x : 0, y: !y.isNaN ? y : 0)
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func approximates(_ other: CoreFoundation.CGPoint, epsilon: CoreFoundation.CGFloat) -> Swift.Bool {
        x.approximates(other.x, epsilon: epsilon)
            && y.approximates(other.y, epsilon: epsilon)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func clamp(size: CoreFoundation.CGSize) {
        x.clamp(to: 0 ... size.width)
        y.clamp(to: 0 ... size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func clamped(size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        var point = self
        point.clamp(size: size)
        return point
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func clamp(rect: CoreFoundation.CGRect) {
        x.clamp(to: rect.x ... rect.size.width)
        y.clamp(to: rect.y ... rect.size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func clamped(rect: CoreFoundation.CGRect) -> CoreFoundation.CGPoint {
        var point = self
        point.clamp(rect: rect)
        return point
    }
}
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get { return d == .horizontal ? x : y }
    set { if d == .horizontal { x = newValue } else { y = newValue } }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package init(_ l1: CoreFoundation.CGFloat, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat) {
        self = first == .horizontal ? CGPoint(x: l1, y: l2) :
            CGPoint(x: l2, y: l1)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGPoint : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>
  public var animatableData: CoreFoundation.CGPoint.AnimatableData {
    @inlinable get { return .init(x, y) }
    @inlinable set { (x, y) = (newValue.first, newValue.second) }
  }
}
extension CoreFoundation.CGPoint : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct _DisplayList_Identity : Swift.Hashable, Swift.Codable, Swift.CustomStringConvertible {
  package var value: Swift.UInt32 {
    get
  }
  package init()
  package init(decodedValue value: Swift.UInt32)
  package static let none: SwiftUICore._DisplayList_Identity
  package var description: Swift.String {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore._DisplayList_Identity, b: SwiftUICore._DisplayList_Identity) -> Swift.Bool
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
package struct DisplayList : Swift.Equatable {
  package var items: [SwiftUICore.DisplayList.Item] {
    get
  }
  package struct Features : Swift.OptionSet {
    package let rawValue: Swift.UInt16
    package init(rawValue: Swift.UInt16)
    package static let required: SwiftUICore.DisplayList.Features
    package static let views: SwiftUICore.DisplayList.Features
    package static let animations: SwiftUICore.DisplayList.Features
    package static let dynamicContent: SwiftUICore.DisplayList.Features
    package static let interpolatorLayers: SwiftUICore.DisplayList.Features
    package static let interpolatorRoots: SwiftUICore.DisplayList.Features
    package static let stateEffects: SwiftUICore.DisplayList.Features
    package static let states: SwiftUICore.DisplayList.Features
    package static let flattened: SwiftUICore.DisplayList.Features
    package typealias ArrayLiteralElement = SwiftUICore.DisplayList.Features
    package typealias Element = SwiftUICore.DisplayList.Features
    package typealias RawValue = Swift.UInt16
  }
  package var features: SwiftUICore.DisplayList.Features {
    get
  }
  package var properties: SwiftUICore.DisplayList.Properties {
    get
  }
  package init()
  package init(_ item: SwiftUICore.DisplayList.Item)
  package init(_ items: [SwiftUICore.DisplayList.Item])
  package mutating func append(_ item: SwiftUICore.DisplayList.Item)
  package mutating func append(contentsOf other: SwiftUICore.DisplayList)
  package mutating func reserveCapacity(_ count: Swift.Int)
  package mutating func transform(_ body: (inout SwiftUICore.DisplayList.Item) -> Swift.Void)
  package mutating func translate(by offset: CoreFoundation.CGSize, version: SwiftUICore.DisplayList.Version)
  package var isEmpty: Swift.Bool {
    get
  }
  package var version: SwiftUICore.DisplayList.Version {
    get
  }
  package func nextUpdate(after time: SwiftUICore.Time) -> SwiftUICore.Time
  package func forEachIdentity(_ body: (SwiftUICore.DisplayList.Identity) -> Swift.Void)
  package func forEachRBDisplayList(_ body: (any RenderBox.RBDisplayListContents) -> Swift.Void)
  package static func == (a: SwiftUICore.DisplayList, b: SwiftUICore.DisplayList) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.DisplayList : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.DisplayList.Version : Swift.Sendable {
}
extension SwiftUICore.DisplayList {
  package typealias Identity = SwiftUICore._DisplayList_Identity
  package typealias StableIdentity = SwiftUICore._DisplayList_StableIdentity
  package typealias StableIdentityMap = SwiftUICore._DisplayList_StableIdentityMap
  package typealias StableIdentityRoot = SwiftUICore._DisplayList_StableIdentityRoot
  package typealias StableIdentityScope = SwiftUICore._DisplayList_StableIdentityScope
  package struct Item : Swift.Equatable {
    package var frame: CoreFoundation.CGRect
    package var version: SwiftUICore.DisplayList.Version
    package var value: SwiftUICore.DisplayList.Item.Value
    package var identity: SwiftUICore.DisplayList.Identity
    package enum Value {
      case empty
      case content(SwiftUICore.DisplayList.Content)
      case effect(SwiftUICore.DisplayList.Effect, SwiftUICore.DisplayList)
      case states([(SwiftUICore.StrongHash, SwiftUICore.DisplayList)])
    }
    package init(_ value: SwiftUICore.DisplayList.Item.Value, frame: CoreFoundation.CGRect, identity: SwiftUICore.DisplayList.Identity, version: SwiftUICore.DisplayList.Version)
    package static func == (lhs: SwiftUICore.DisplayList.Item, rhs: SwiftUICore.DisplayList.Item) -> Swift.Bool
    package var position: CoreFoundation.CGPoint {
      get
    }
    package var size: CoreFoundation.CGSize {
      get
    }
  }
  package struct Content {
    package var value: SwiftUICore.DisplayList.Content.Value
    package var seed: SwiftUICore.DisplayList.Seed
    package enum Value {
      indirect case backdrop(SwiftUICore.BackdropEffect)
      indirect case color(SwiftUICore.Color.Resolved)
      indirect case chameleonColor(fallback: SwiftUICore.Color.Resolved, filters: [SwiftUICore.GraphicsFilter])
      indirect case image(SwiftUICore.GraphicsImage)
      indirect case shape(SwiftUICore.Path, SwiftUICore.AnyResolvedPaint, SwiftUICore.FillStyle)
      indirect case shadow(SwiftUICore.Path, SwiftUICore.ResolvedShadowStyle)
      indirect case platformView(any SwiftUICore.PlatformViewFactory)
      indirect case platformLayer(any SwiftUICore.PlatformLayerFactory)
      indirect case text(SwiftUICore.StyledTextContentView, CoreFoundation.CGSize)
      indirect case flattened(SwiftUICore.DisplayList, CoreFoundation.CGPoint, SwiftUICore.RasterizationOptions)
      indirect case drawing(any RenderBox.RBDisplayListContents, CoreFoundation.CGPoint, SwiftUICore.RasterizationOptions)
      indirect case view(any SwiftUICore._DisplayList_ViewFactory)
      case placeholder(id: SwiftUICore.DisplayList.Identity)
    }
    package init(_ value: SwiftUICore.DisplayList.Content.Value, seed: SwiftUICore.DisplayList.Seed)
  }
  package typealias ViewFactory = SwiftUICore._DisplayList_ViewFactory
  package enum Effect {
    case identity
    case geometryGroup
    case compositingGroup
    case backdropGroup(Swift.Bool)
    indirect case archive(SwiftUICore.DisplayList.ArchiveIDs?)
    case properties(SwiftUICore.DisplayList.Properties)
    indirect case platformGroup(any SwiftUICore.PlatformGroupFactory)
    case opacity(Swift.Float)
    case blendMode(SwiftUICore.GraphicsBlendMode)
    indirect case clip(SwiftUICore.Path, SwiftUICore.FillStyle, _: SwiftUICore.GraphicsContext.ClipOptions = .init())
    indirect case mask(SwiftUICore.DisplayList, _: SwiftUICore.GraphicsContext.ClipOptions = .init())
    indirect case transform(SwiftUICore.DisplayList.Transform)
    indirect case filter(SwiftUICore.GraphicsFilter)
    indirect case animation(any SwiftUICore._DisplayList_AnyEffectAnimation)
    indirect case contentTransition(SwiftUICore.ContentTransition.State)
    indirect case view(any SwiftUICore._DisplayList_ViewFactory)
    indirect case accessibility([SwiftUICore.AccessibilityNodeAttachment])
    indirect case platform(SwiftUICore.DisplayList.PlatformEffect)
    indirect case state(SwiftUICore.StrongHash)
    indirect case interpolatorRoot(SwiftUICore.DisplayList.InterpolatorGroup, contentOrigin: CoreFoundation.CGPoint, contentOffset: CoreFoundation.CGSize)
    case interpolatorLayer(SwiftUICore.DisplayList.InterpolatorGroup, serial: Swift.UInt32)
    indirect case interpolatorAnimation(SwiftUICore.DisplayList.InterpolatorAnimation)
  }
  package enum Transform {
    case affine(CoreFoundation.CGAffineTransform)
    case projection(SwiftUICore.ProjectionTransform)
    case rotation(SwiftUICore._RotationEffect.Data)
    case rotation3D(SwiftUICore._Rotation3DEffect.Data)
  }
  package typealias AnyEffectAnimation = SwiftUICore._DisplayList_AnyEffectAnimation
  package typealias AnyEffectAnimator = SwiftUICore._DisplayList_AnyEffectAnimator
  package struct ArchiveIDs {
    package var uuid: Foundation.UUID
    package var stableIDs: SwiftUICore.DisplayList.StableIdentityMap
    package init(uuid: Foundation.UUID, stableIDs: SwiftUICore.DisplayList.StableIdentityMap)
  }
  package struct InterpolatorAnimation {
    package var value: SwiftUICore.StrongHash?
    package var animation: SwiftUICore.Animation?
  }
  package struct Version : Swift.Comparable, Swift.Hashable {
    package var value: Swift.Int {
      get
    }
    package init()
    package init(decodedValue value: Swift.Int)
    package init(forUpdate: Swift.Void)
    package mutating func combine(with other: SwiftUICore.DisplayList.Version)
    package static func < (lhs: SwiftUICore.DisplayList.Version, rhs: SwiftUICore.DisplayList.Version) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.DisplayList.Version, b: SwiftUICore.DisplayList.Version) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct Seed : Swift.Hashable {
    package var value: Swift.UInt16 {
      get
    }
    package init()
    package init(decodedValue value: Swift.UInt16)
    package init(_ version: SwiftUICore.DisplayList.Version)
    package mutating func invalidate()
    package static let undefined: SwiftUICore.DisplayList.Seed
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.DisplayList.Seed, b: SwiftUICore.DisplayList.Seed) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct Properties : Swift.OptionSet {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let foregroundLayer: SwiftUICore.DisplayList.Properties
    package static let ignoresEvents: SwiftUICore.DisplayList.Properties
    package static let privacySensitive: SwiftUICore.DisplayList.Properties
    package static let archivesInteractiveControls: SwiftUICore.DisplayList.Properties
    package static let secondaryForegroundLayer: SwiftUICore.DisplayList.Properties
    package static let tertiaryForegroundLayer: SwiftUICore.DisplayList.Properties
    package static let quaternaryForegroundLayer: SwiftUICore.DisplayList.Properties
    package static let screencaptureProhibited: SwiftUICore.DisplayList.Properties
    package typealias ArrayLiteralElement = SwiftUICore.DisplayList.Properties
    package typealias Element = SwiftUICore.DisplayList.Properties
    package typealias RawValue = Swift.UInt8
  }
  package struct Key : SwiftUICore.PreferenceKey {
    package typealias Value = SwiftUICore.DisplayList
    package static let _includesRemovedValues: Swift.Bool
    package static let defaultValue: SwiftUICore.DisplayList.Key.Value
    package static func reduce(value: inout SwiftUICore.DisplayList.Key.Value, nextValue: () -> SwiftUICore.DisplayList.Key.Value)
  }
  package struct Options : Swift.OptionSet, SwiftUICore.ViewInput {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let disableCanonicalization: SwiftUICore.DisplayList.Options
    package static let defaultValue: SwiftUICore.DisplayList.Options
    package typealias ArrayLiteralElement = SwiftUICore.DisplayList.Options
    package typealias Element = SwiftUICore.DisplayList.Options
    package typealias RawValue = Swift.UInt8
    package typealias Value = SwiftUICore.DisplayList.Options
  }
  package struct Index {
    package var identity: SwiftUICore._DisplayList_Identity {
      get
    }
    package var serial: Swift.UInt32 {
      get
    }
    package var archiveIdentity: SwiftUICore._DisplayList_Identity {
      get
    }
    package var archiveSerial: Swift.UInt32 {
      get
    }
    package init()
    package mutating func enter(identity: SwiftUICore.DisplayList.Identity) -> SwiftUICore.DisplayList.Index
    package mutating func leave(index saved: SwiftUICore.DisplayList.Index)
    package mutating func updateArchive(entering: Swift.Bool)
    package mutating func skip(list: SwiftUICore.DisplayList)
    package mutating func skip(item: SwiftUICore.DisplayList.Item)
    package mutating func skip(effect: SwiftUICore.DisplayList.Effect)
    package func assertItem(_ item: SwiftUICore.DisplayList.Item)
    package var id: SwiftUICore.DisplayList.Index.ID {
      get
    }
    package struct ID : Swift.Hashable {
      package func hash(into hasher: inout Swift.Hasher)
      package static func == (a: SwiftUICore.DisplayList.Index.ID, b: SwiftUICore.DisplayList.Index.ID) -> Swift.Bool
      package var hashValue: Swift.Int {
        get
      }
    }
  }
}
package protocol _DisplayList_AnyEffectAnimation : SwiftUICore.ProtobufDecodableMessage, SwiftUICore.ProtobufEncodableMessage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  static var leafProtobufTag: SwiftUICore.CodableEffectAnimation.Tag? { get }
  #else
  static var leafProtobufTag: SwiftUICore.CodableEffectAnimation.Tag? { get }
  #endif
  func makeAnimator() -> any SwiftUICore._DisplayList_AnyEffectAnimator
}
package protocol _DisplayList_AnyEffectAnimator {
  mutating func evaluate(_ anim: any SwiftUICore._DisplayList_AnyEffectAnimation, at time: SwiftUICore.Time, size: CoreFoundation.CGSize) -> (SwiftUICore.DisplayList.Effect, finished: Swift.Bool)
}
extension SwiftUICore.DisplayList.Item {
  package mutating func canonicalize(options: SwiftUICore.DisplayList.Options = .init())
  package func matchesTopLevelStructure(of other: SwiftUICore.DisplayList.Item) -> Swift.Bool
  package var features: SwiftUICore.DisplayList.Features {
    get
  }
}
extension SwiftUICore.DisplayList {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func opaqueContentPath() -> (SwiftUICore.Path, SwiftUICore.FillStyle)?
  #else
  package func opaqueContentPath() -> (SwiftUICore.Path, SwiftUICore.FillStyle)?
  #endif
}
extension SwiftUICore.DisplayList.Transform {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var affineTransform: CoreFoundation.CGAffineTransform? {
    get
  }
  #else
  package var affineTransform: CoreFoundation.CGAffineTransform? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var projectionTransform: SwiftUICore.ProjectionTransform? {
    get
  }
  #else
  package var projectionTransform: SwiftUICore.ProjectionTransform? {
    get
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var isEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func disabled(_ disabled: Swift.Bool) -> some SwiftUICore.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: \.isEnabled, transform: { $0 = $0 && !disabled }))
    }
  
  @_Concurrency.MainActor @preconcurrency package func _disabled(_ disabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUICore._EnvironmentKeyTransformModifier<Swift.Bool>>
}
package struct MouseEvent : SwiftUICore.SpatialEventType, SwiftUICore.TappableEventType, SwiftUICore.ModifiersEventType, Swift.Equatable {
  package struct Button : Swift.RawRepresentable, Swift.Equatable {
    package let rawValue: Swift.Int
    package init(rawValue: Swift.Int)
    package static let primary: SwiftUICore.MouseEvent.Button
    package static let secondary: SwiftUICore.MouseEvent.Button
    package static func other(_ index: Swift.Int) -> SwiftUICore.MouseEvent.Button
    package typealias RawValue = Swift.Int
  }
  package var timestamp: SwiftUICore.Time
  package var binding: SwiftUICore.EventBinding?
  package var button: SwiftUICore.MouseEvent.Button
  package var phase: SwiftUICore.EventPhase
  package var location: CoreFoundation.CGPoint
  package var globalLocation: CoreFoundation.CGPoint
  package var modifiers: SwiftUICore.EventModifiers
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(timestamp: SwiftUICore.Time, binding: SwiftUICore.EventBinding? = nil, button: SwiftUICore.MouseEvent.Button, phase: SwiftUICore.EventPhase, location: CoreFoundation.CGPoint, globalLocation: CoreFoundation.CGPoint, modifiers: SwiftUICore.EventModifiers)
  #else
  package init(timestamp: SwiftUICore.Time, binding: SwiftUICore.EventBinding? = nil, button: SwiftUICore.MouseEvent.Button, phase: SwiftUICore.EventPhase, location: CoreFoundation.CGPoint, globalLocation: CoreFoundation.CGPoint, modifiers: SwiftUICore.EventModifiers)
  #endif
  package var radius: CoreFoundation.CGFloat {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var kind: SwiftUICore.SpatialEvent.Kind? {
    get
  }
  #else
  package var kind: SwiftUICore.SpatialEvent.Kind? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.MouseEvent, b: SwiftUICore.MouseEvent) -> Swift.Bool
}
extension SwiftUICore.MouseEvent : SwiftUICore.HitTestableEventType {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EventModifiers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let capsLock: SwiftUICore.EventModifiers
  public static let shift: SwiftUICore.EventModifiers
  public static let control: SwiftUICore.EventModifiers
  public static let option: SwiftUICore.EventModifiers
  public static let command: SwiftUICore.EventModifiers
  public static let numericPad: SwiftUICore.EventModifiers
  @available(iOS, deprecated: 15.0, message: "Function modifier is reserved for system applications")
  @available(macOS, deprecated: 12.0, message: "Function modifier is reserved for system applications")
  @available(tvOS, deprecated: 15.0, message: "Function modifier is reserved for system applications")
  @available(watchOS, deprecated: 8.0, message: "Function modifier is reserved for system applications")
  @available(visionOS, deprecated: 1.0, message: "Function modifier is reserved for system applications")
  public static let function: SwiftUICore.EventModifiers
  package static let _function: SwiftUICore.EventModifiers
  public static let all: SwiftUICore.EventModifiers
  package static let _all: SwiftUICore.EventModifiers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore.EventModifiers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore.EventModifiers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int
}
package protocol ModifiersEventType : SwiftUICore.EventType {
  var modifiers: SwiftUICore.EventModifiers { get set }
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public enum EventPhase : Swift.Hashable {
  @_spi(ForSwiftUIOnly) case began
  @_spi(ForSwiftUIOnly) case active
  @_spi(ForSwiftUIOnly) case ended
  @_spi(ForSwiftUIOnly) case failed
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.EventPhase, b: SwiftUICore.EventPhase) -> Swift.Bool
  @_spi(ForSwiftUIOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForSwiftUIOnly) public var hashValue: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.EventPhase : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.EventPhase {
  @_spi(ForSwiftUIOnly) package var isTerminal: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol EventType {
  @_spi(ForSwiftUIOnly) var phase: SwiftUICore.EventPhase { get }
  @_spi(ForSwiftUIOnly) var timestamp: SwiftUICore.Time { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) var binding: SwiftUICore.EventBinding? { get set }
  #else
  @_spi(ForSwiftUIOnly) var binding: SwiftUICore.EventBinding? { get set }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) init?(_ event: any SwiftUICore.EventType)
  #else
  @_spi(ForSwiftUIOnly) init?(_ event: any SwiftUICore.EventType)
  #endif
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.EventType {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package init?(_ event: any SwiftUICore.EventType)
  #else
  @_spi(ForSwiftUIOnly) package init?(_ event: any SwiftUICore.EventType)
  #endif
  @_spi(ForSwiftUIOnly) package var isFocusEvent: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
}
package struct Event : SwiftUICore.EventType {
  package var phase: SwiftUICore.EventPhase
  package var timestamp: SwiftUICore.Time
  package var binding: SwiftUICore.EventBinding?
  package init<T>(_ event: T) where T : SwiftUICore.EventType
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ event: any SwiftUICore.EventType)
  #else
  package init?(_ event: any SwiftUICore.EventType)
  #endif
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct EventID : Swift.Hashable {
  @_spi(ForSwiftUIOnly) package var type: any Any.Type
  @_spi(ForSwiftUIOnly) package var serial: Swift.Int
  @_spi(ForSwiftUIOnly) package init(type: any Any.Type, serial: Swift.Int)
  @_spi(ForSwiftUIOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForSwiftUIOnly) public static func == (lhs: SwiftUICore.EventID, rhs: SwiftUICore.EventID) -> Swift.Bool
  @_spi(ForSwiftUIOnly) public var hashValue: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.EventID : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.EventID {
  @_spi(ForSwiftUIOnly) package init<T, S>(_ obj: T, subtype: S.Type) where T : ObjectiveC.NSObject
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EventID : Swift.CustomStringConvertible {
  @_spi(ForSwiftUIOnly) public var description: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
}
package protocol Scrollable {
  func scroll<ID>(to id: ID) -> Swift.Bool where ID : Swift.Hashable
  typealias Target = (_ geometry: SwiftUICore.ScrollGeometry) -> SwiftUICore.ScrollTarget?
  func setContentTarget(_ target: @escaping Self.Target) -> Swift.Bool
  var allowsContentOffsetAdjustments: Swift.Bool { get }
  func adjustContentOffset(by translation: CoreFoundation.CGSize) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  func mapFirstChild<Type, Result>(ofType: Type.Type, body: (Type) -> Result) -> Result?
  #else
  func mapFirstChild<Type, Result>(ofType: Type.Type, body: (Type) -> Result) -> Result?
  #endif
}
package protocol ScrollableContainer : SwiftUICore.Scrollable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var children: [any SwiftUICore.Scrollable]? { get }
  #else
  var children: [any SwiftUICore.Scrollable]? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var parent: (any SwiftUICore.Scrollable)? { get }
  #else
  var parent: (any SwiftUICore.Scrollable)? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func makeTarget<ID>(for id: ID) -> Self.Target? where ID : Swift.Hashable
  #else
  func makeTarget<ID>(for id: ID) -> Self.Target? where ID : Swift.Hashable
  #endif
}
extension SwiftUICore.ScrollableContainer {
  package func scroll<ID>(to id: ID) -> Swift.Bool where ID : Swift.Hashable
  package func setContentTarget(_ target: @escaping Self.Target) -> Swift.Bool
  package func adjustContentOffset(by translation: CoreFoundation.CGSize) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func mapFirstChild<Type, Result>(ofType type: Type.Type, body: (Type) -> Result) -> Result?
  #else
  package func mapFirstChild<Type, Result>(ofType type: Type.Type, body: (Type) -> Result) -> Result?
  #endif
}
package protocol ScrollableCollection : SwiftUICore.Scrollable {
  var visibleCollectionViewIDs: [SwiftUICore._ViewList_ID.Canonical] { get }
  func forEachVisibleSubview(_ body: (SwiftUICore.ScrollableCollectionSubview, inout Swift.Bool) -> Swift.Void)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func nextVisibleCollectionViewID(towards v: SwiftUICore.UnitPoint, from id: SwiftUICore._ViewList_ID.Canonical, border: CoreFoundation.CGSize, ignoring ignoredViews: SwiftUICore.PinnedScrollableViews) -> SwiftUICore._ViewList_ID.Canonical?
  #else
  func nextVisibleCollectionViewID(towards v: SwiftUICore.UnitPoint, from id: SwiftUICore._ViewList_ID.Canonical, border: CoreFoundation.CGSize, ignoring ignoredViews: SwiftUICore.PinnedScrollableViews) -> SwiftUICore._ViewList_ID.Canonical?
  #endif
  static func hasMultipleViewsInAxis(_ axis: SwiftUICore.Axis) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  func firstCollectionViewIndex(of id: SwiftUICore._ViewList_ID.Canonical) -> Swift.Int?
  #else
  func firstCollectionViewIndex(of id: SwiftUICore._ViewList_ID.Canonical) -> Swift.Int?
  #endif
  @discardableResult
  func applyCollectionViewIDs(from start: inout Swift.Int, to callback: (_ id: SwiftUICore._ViewList_ID.Canonical, _ stop: inout Swift.Bool) -> Swift.Void) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  func collectionViewID(for subgraph: AttributeGraph.Subgraph) -> SwiftUICore._ViewList_ID.Canonical?
  #else
  func collectionViewID(for subgraph: AttributeGraph.Subgraph) -> SwiftUICore._ViewList_ID.Canonical?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func scroll(toCollectionViewID id: SwiftUICore._ViewList_ID.Canonical, anchor: SwiftUICore.UnitPoint?) -> Swift.Bool
  #else
  func scroll(toCollectionViewID id: SwiftUICore._ViewList_ID.Canonical, anchor: SwiftUICore.UnitPoint?) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  static var accessibilityRole: SwiftUICore.AccessibilityLayoutRole? { get }
  #else
  static var accessibilityRole: SwiftUICore.AccessibilityLayoutRole? { get }
  #endif
}
extension SwiftUICore.ScrollableCollection {
  package var visibleSubviews: [SwiftUICore.ScrollableCollectionSubview] {
    get
  }
}
extension SwiftUICore.ScrollableCollection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var accessibilityRole: SwiftUICore.AccessibilityLayoutRole? {
    get
  }
  #else
  package static var accessibilityRole: SwiftUICore.AccessibilityLayoutRole? {
    get
  }
  #endif
}
package struct ScrollableCollectionSubview {
  package var id: SwiftUICore._ViewList_ID
  package var frame: CoreFoundation.CGRect
  package var transform: SwiftUICore.ViewTransform
  package init(id: SwiftUICore._ViewList_ID, frame: CoreFoundation.CGRect, transform: SwiftUICore.ViewTransform)
}
extension SwiftUICore.Scrollable {
  package func scrollToPosition(_ position: SwiftUICore.ScrollPosition) -> Swift.Bool
}
extension SwiftUICore.ScrollGeometry {
  package func targetRect(edge: SwiftUICore.Edge) -> CoreFoundation.CGRect
}
package struct ScrollablePreferenceKey : SwiftUICore.PreferenceKey {
  package typealias Value = [any SwiftUICore.Scrollable]
  package static let defaultValue: SwiftUICore.ScrollablePreferenceKey.Value
  package static func reduce(value: inout SwiftUICore.ScrollablePreferenceKey.Value, nextValue: () -> SwiftUICore.ScrollablePreferenceKey.Value)
}
extension SwiftUICore._GraphInputs {
  package var scrollable: AttributeGraph.OptionalAttribute<any SwiftUICore.Scrollable> {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var scrollable: AttributeGraph.OptionalAttribute<any SwiftUICore.Scrollable> {
    get
    set
  }
  package var weakScrollable: AttributeGraph.WeakAttribute<any SwiftUICore.Scrollable> {
    get
  }
}
package struct UnaryScrollablePreferenceProvider : AttributeGraph.Rule {
  package init(scrollable: AttributeGraph.Attribute<any SwiftUICore.Scrollable>)
  package var value: [any SwiftUICore.Scrollable] {
    get
  }
  package typealias Value = [any SwiftUICore.Scrollable]
}
extension SwiftUICore.EnvironmentValues {
  package var nearestScrollableAxes: SwiftUICore.Axis.Set {
    get
    set
  }
}
extension SwiftUICore.EnvironmentValues {
  package var allScrollableAxes: SwiftUICore.Axis.Set {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct ScrollGeometry : Swift.Equatable, Swift.Sendable {
  public var contentOffset: CoreFoundation.CGPoint {
    get
    set
  }
  public var contentSize: CoreFoundation.CGSize
  public var contentInsets: SwiftUICore.EdgeInsets
  public var containerSize: CoreFoundation.CGSize {
    get
    set
  }
  public var visibleRect: CoreFoundation.CGRect {
    get
  }
  public var bounds: CoreFoundation.CGRect {
    get
  }
  package init(contentOffset: CoreFoundation.CGPoint, contentSize: CoreFoundation.CGSize, contentInsets: SwiftUICore.EdgeInsets, containerSize: CoreFoundation.CGSize, visibleRect: CoreFoundation.CGRect)
  public static func == (a: SwiftUICore.ScrollGeometry, b: SwiftUICore.ScrollGeometry) -> Swift.Bool
}
extension SwiftUICore.ScrollGeometry {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public init(contentOffset: CoreFoundation.CGPoint, contentSize: CoreFoundation.CGSize, contentInsets: SwiftUICore.EdgeInsets, containerSize: CoreFoundation.CGSize)
  package static var zero: SwiftUICore.ScrollGeometry {
    get
  }
  package static func viewTransform(contentInsets: SwiftUICore.EdgeInsets, contentSize: CoreFoundation.CGSize, containerSize: CoreFoundation.CGSize) -> SwiftUICore.ScrollGeometry
  package static func rootViewTransform(contentOffset: CoreFoundation.CGPoint, containerSize: CoreFoundation.CGSize) -> SwiftUICore.ScrollGeometry
  package static func size(_ size: CoreFoundation.CGSize) -> SwiftUICore.ScrollGeometry
}
extension SwiftUICore.ScrollGeometry {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func applyLayoutDirection(_ direction: SwiftUICore.LayoutDirection, contentSize: CoreFoundation.CGSize?)
  #else
  package mutating func applyLayoutDirection(_ direction: SwiftUICore.LayoutDirection, contentSize: CoreFoundation.CGSize?)
  #endif
  package mutating func translate(by size: CoreFoundation.CGSize, limit: CoreFoundation.CGSize)
  package mutating func outsetForAX(limit: CoreFoundation.CGSize)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.ScrollGeometry : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ScrollLayout : Swift.Equatable {
  public var contentOffset: CoreFoundation.CGPoint
  public var size: CoreFoundation.CGSize
  public var visibleRect: CoreFoundation.CGRect
  public init(contentOffset: CoreFoundation.CGPoint, size: CoreFoundation.CGSize, visibleRect: CoreFoundation.CGRect)
  public static func == (a: SwiftUICore._ScrollLayout, b: SwiftUICore._ScrollLayout) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._ScrollLayout : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public enum ResizingMode : Swift.Sendable {
    case tile
    case stretch
    public static func == (a: SwiftUICore.Image.ResizingMode, b: SwiftUICore.Image.ResizingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func resizable(capInsets: SwiftUICore.EdgeInsets = EdgeInsets(), resizingMode: SwiftUICore.Image.ResizingMode = .stretch) -> SwiftUICore.Image
  package struct ResizingInfo : Swift.Equatable {
    package var capInsets: SwiftUICore.EdgeInsets
    package var mode: SwiftUICore.Image.ResizingMode
    package static let resizable: SwiftUICore.Image.ResizingInfo
    package init(capInsets: SwiftUICore.EdgeInsets, mode: SwiftUICore.Image.ResizingMode)
    package static func == (a: SwiftUICore.Image.ResizingInfo, b: SwiftUICore.Image.ResizingInfo) -> Swift.Bool
  }
  package struct ResizableProvider : SwiftUICore.ImageProvider {
    package var base: SwiftUICore.Image
    package var capInsets: SwiftUICore.EdgeInsets
    package var resizingMode: SwiftUICore.Image.ResizingMode
    package func resolve(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.Resolved
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
    #else
    package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
    #endif
    package static func == (a: SwiftUICore.Image.ResizableProvider, b: SwiftUICore.Image.ResizableProvider) -> Swift.Bool
  }
}
extension SwiftUICore.Image.ResizingInfo : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.Image.ResizingMode : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var defaultPadding: SwiftUICore.EdgeInsets {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _ignoresAutomaticPadding(_ ignoresPadding: Swift.Bool) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func _automaticPadding(_ edgeInsets: SwiftUICore.EdgeInsets? = nil) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func _automaticPadding(_ edgeInsets: SwiftUICore.EdgeInsets? = nil) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct ZStack<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package var _tree: SwiftUICore._VariadicView.Tree<SwiftUICore._ZStackLayout, Content>
  @inlinable nonisolated public init(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(_ZStackLayout(alignment: alignment)) { content() }
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.ZStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.ZStack : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ZStackLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(alignment: SwiftUICore.Alignment = .center) {
        self.alignment = alignment
    }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUICore._ZStackLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ZStackLayout : SwiftUICore.Layout {
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore._ZStackLayout.Subviews, cache: inout Swift.Void)
  public func spacing(subviews: SwiftUICore._ZStackLayout.Subviews, cache: inout Swift.Void) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore._ZStackLayout.Subviews, cache: inout Swift.Void) -> CoreFoundation.CGSize
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = Swift.Void
}
extension SwiftUICore._ZStackLayout : SwiftUICore._VariadicView.ImplicitRoot {
  package static var implicitRoot: SwiftUICore._ZStackLayout {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ZStackLayout : SwiftUICore.Layout {
  public var alignment: SwiftUICore.Alignment
  @inlinable public init(alignment: SwiftUICore.Alignment = .center) {
        self.alignment = alignment
    }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = Swift.Void
}
extension SwiftUICore.ZStackLayout : SwiftUICore.DerivedLayout {
  package var base: SwiftUICore._ZStackLayout {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  package typealias Base = SwiftUICore._ZStackLayout
}
extension SwiftUICore.Alignment {
  package var fraction: SwiftUICore.UnitPoint {
    get
  }
}
package protocol ScrollStateRequest {
  var id: Swift.ObjectIdentifier { get }
  var kind: Self.Kind { get }
  var transaction: SwiftUICore.Transaction { get }
  mutating func updateScrollable(_ scrollable: AttributeGraph.Attribute<(any SwiftUICore.Scrollable)>)
  var hasUpdate: Swift.Bool { get }
  func update() -> Swift.Bool
  typealias Kind = SwiftUICore.ScrollStateRequestKind
}
package enum ScrollStateRequestKind {
  case updateValue(SwiftUICore.ScrollStateRequestKind.UpdateValueConfig)
  case scrollTo
  package struct UpdateValueConfig {
    package var targetDistance: CoreFoundation.CGFloat
  }
}
extension SwiftUICore.ScrollStateRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func overrides(_ other: (any SwiftUICore.ScrollStateRequest)?) -> Swift.Bool
  #else
  package func overrides(_ other: (any SwiftUICore.ScrollStateRequest)?) -> Swift.Bool
  #endif
  package mutating func updateScrollable(_ scrollable: AttributeGraph.Attribute<(any SwiftUICore.Scrollable)>)
}
package struct ScrollStateEnqueueRequests : AttributeGraph.StatefulRule {
  package init(phaseState: AttributeGraph.Attribute<SwiftUICore.ScrollPhaseState>, scrollable: AttributeGraph.Attribute<(any SwiftUICore.Scrollable)>, inputs: SwiftUICore._ViewInputs, outputs: SwiftUICore._ViewOutputs)
  package typealias Value = Swift.Void
  package mutating func updateValue()
}
package struct ScrollToScrollStateRequest : SwiftUICore.ScrollStateRequest {
  package var binding: SwiftUICore.Binding<SwiftUICore.ScrollPosition>
  package var anchor: SwiftUICore.UnitPoint?
  package var id: Swift.ObjectIdentifier
  package var value: SwiftUICore.ScrollPosition
  package var baseTransaction: SwiftUICore.Transaction
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.WeakAttribute @_projectedValueProperty($scrollable) package var scrollable: (any SwiftUICore.Scrollable)? {
    get
  }
  #else
  @AttributeGraph.WeakAttribute @_projectedValueProperty($scrollable) package var scrollable: (any SwiftUICore.Scrollable)? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $scrollable: AttributeGraph.Attribute<(any SwiftUICore.Scrollable)>? {
    get
    set
  }
  #else
  package var $scrollable: AttributeGraph.Attribute<(any SwiftUICore.Scrollable)>? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(binding: SwiftUICore.Binding<SwiftUICore.ScrollPosition>, anchor: SwiftUICore.UnitPoint?, id: Swift.ObjectIdentifier, value: SwiftUICore.ScrollPosition, baseTransaction: SwiftUICore.Transaction)
  #else
  package init(binding: SwiftUICore.Binding<SwiftUICore.ScrollPosition>, anchor: SwiftUICore.UnitPoint?, id: Swift.ObjectIdentifier, value: SwiftUICore.ScrollPosition, baseTransaction: SwiftUICore.Transaction)
  #endif
  package var kind: SwiftUICore.ScrollToScrollStateRequest.Kind {
    get
  }
  package var transaction: SwiftUICore.Transaction {
    get
  }
  package mutating func updateScrollable(_ scrollable: AttributeGraph.Attribute<(any SwiftUICore.Scrollable)>)
  package var hasUpdate: Swift.Bool {
    get
  }
  package func update() -> Swift.Bool
}
package struct ScrollStateRequestTransform : AttributeGraph.StatefulRule {
  package init(collection: AttributeGraph.Attribute<any SwiftUICore.ScrollableCollection>, inputs: SwiftUICore._ViewInputs)
  package typealias Value = (inout [any SwiftUICore.ScrollStateRequest]) -> Swift.Void
  package mutating func updateValue()
}
package struct UpdateScrollStateRequest : SwiftUICore.ScrollStateRequest {
  package var binding: SwiftUICore.Binding<SwiftUICore.ScrollPosition>
  package var newPosition: SwiftUICore.ScrollPosition
  package var isVisible: Swift.Bool
  package var targetDistance: CoreFoundation.CGFloat
  package var id: Swift.ObjectIdentifier {
    get
  }
  package var kind: SwiftUICore.UpdateScrollStateRequest.Kind {
    get
  }
  package var transaction: SwiftUICore.Transaction {
    get
  }
  package var hasUpdate: Swift.Bool {
    get
  }
  package func update() -> Swift.Bool
}
extension SwiftUICore.ScrollPhaseState {
  package var shouldUpdateValue: Swift.Bool {
    get
  }
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var updateScrollStateRequest: AttributeGraph.OptionalAttribute<(any SwiftUICore.ScrollStateRequest)?> {
    get
    set
  }
  #else
  package var updateScrollStateRequest: AttributeGraph.OptionalAttribute<(any SwiftUICore.ScrollStateRequest)?> {
    get
    set
  }
  #endif
}
package struct ScrollGeometryState : Swift.Equatable {
  package var geometry: SwiftUICore.ScrollGeometry
  package var scrollableAxes: SwiftUICore.Axis.Set
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.WeakAttribute @_projectedValueProperty($transform) package var transform: SwiftUICore.ViewTransform? {
    get
  }
  #else
  @AttributeGraph.WeakAttribute @_projectedValueProperty($transform) package var transform: SwiftUICore.ViewTransform? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>? {
    get
    set
  }
  #else
  package var $transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>? {
    get
    set
  }
  #endif
  package init(geometry: SwiftUICore.ScrollGeometry, scrollableAxes: SwiftUICore.Axis.Set, transform: AttributeGraph.WeakAttribute<SwiftUICore.ViewTransform>)
  package static var zero: SwiftUICore.ScrollGeometryState {
    get
  }
  package static func == (a: SwiftUICore.ScrollGeometryState, b: SwiftUICore.ScrollGeometryState) -> Swift.Bool
}
package struct ScrollGeometryPreferenceKey : SwiftUICore.PreferenceKey {
  package typealias Value = [SwiftUICore.ScrollGeometryState]
  package static let defaultValue: SwiftUICore.ScrollGeometryPreferenceKey.Value
  package static func reduce(value: inout SwiftUICore.ScrollGeometryPreferenceKey.Value, nextValue: () -> SwiftUICore.ScrollGeometryPreferenceKey.Value)
}
package struct ScrollGeometryTransformProvider : AttributeGraph.Rule {
  package init(position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>)
  package var value: SwiftUICore.ViewTransform {
    get
  }
  package typealias Value = SwiftUICore.ViewTransform
}
package struct ScrollGeometryStateProvider : AttributeGraph.Rule {
  package init(geometry: AttributeGraph.Attribute<SwiftUICore.ScrollGeometry>, scrollableAxes: AttributeGraph.Attribute<SwiftUICore.Axis.Set>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>)
  package var value: [SwiftUICore.ScrollGeometryState] {
    get
  }
  package typealias Value = [SwiftUICore.ScrollGeometryState]
}
package struct UpdateScrollStateRequestKey : SwiftUICore.PreferenceKey {
  package typealias Value = [any SwiftUICore.ScrollStateRequest]
  package static let defaultValue: SwiftUICore.UpdateScrollStateRequestKey.Value
  package static func reduce(value: inout SwiftUICore.UpdateScrollStateRequestKey.Value, nextValue: () -> SwiftUICore.UpdateScrollStateRequestKey.Value)
}
extension SwiftUICore.ScrollStateRequestKind : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
extension SwiftUICore.ScrollToScrollStateRequest : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
extension SwiftUICore.UpdateScrollStateRequest : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
extension SwiftUICore.Log {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var scroll: os.Logger? {
    get
  }
  #else
  package static var scroll: os.Logger? {
    get
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.LinearGradient {
  @_alwaysEmitIntoClient public static func linearGradient(_ gradient: SwiftUICore.Gradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> SwiftUICore.LinearGradient {
        .init(gradient: gradient, startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public static func linearGradient(colors: [SwiftUICore.Color], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> SwiftUICore.LinearGradient {
        .init(colors: colors, startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient public static func linearGradient(stops: [SwiftUICore.Gradient.Stop], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> SwiftUICore.LinearGradient {
        .init(stops: stops, startPoint: startPoint, endPoint: endPoint)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.RadialGradient {
  @_alwaysEmitIntoClient public static func radialGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) -> SwiftUICore.RadialGradient {
        .init(
            gradient: gradient, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public static func radialGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) -> SwiftUICore.RadialGradient {
        .init(
            colors: colors, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient public static func radialGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) -> SwiftUICore.RadialGradient {
        .init(
            stops: stops, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.EllipticalGradient {
  @_alwaysEmitIntoClient public static func ellipticalGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> SwiftUICore.EllipticalGradient {
        .init(
            gradient: gradient, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  @_alwaysEmitIntoClient public static func ellipticalGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> SwiftUICore.EllipticalGradient {
        .init(
            colors: colors, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  @_alwaysEmitIntoClient public static func ellipticalGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> SwiftUICore.EllipticalGradient {
        .init(
            stops: stops, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AngularGradient {
  @_alwaysEmitIntoClient public static func angularGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> SwiftUICore.AngularGradient {
        .init(
            gradient: gradient, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public static func angularGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> SwiftUICore.AngularGradient {
        .init(
            colors: colors, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient public static func angularGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> SwiftUICore.AngularGradient {
        .init(
            stops: stops, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AngularGradient {
  @_alwaysEmitIntoClient public static func conicGradient(_ gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) -> SwiftUICore.AngularGradient {
        .init(gradient: gradient, center: center, angle: angle)
    }
  @_alwaysEmitIntoClient public static func conicGradient(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) -> SwiftUICore.AngularGradient {
        .init(colors: colors, center: center, angle: angle)
    }
  @_alwaysEmitIntoClient public static func conicGradient(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) -> SwiftUICore.AngularGradient {
        .init(stops: stops, center: center, angle: angle)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct LinearGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency package var gradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency package var startPoint: SwiftUICore.UnitPoint
  @_Concurrency.MainActor @preconcurrency package var endPoint: SwiftUICore.UnitPoint
  nonisolated public init(gradient: SwiftUICore.Gradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint)
  @_alwaysEmitIntoClient nonisolated public init(colors: [SwiftUICore.Color], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) {
        self.init(
            gradient: Gradient(colors: colors),
            startPoint: startPoint, endPoint: endPoint)
    }
  @_alwaysEmitIntoClient nonisolated public init(stops: [SwiftUICore.Gradient.Stop], startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) {
        self.init(
            gradient: Gradient(stops: stops),
            startPoint: startPoint, endPoint: endPoint)
    }
  package struct _Paint : SwiftUICore.ResolvedPaint {
    package var gradient: SwiftUICore.ResolvedGradient
    package var startPoint: SwiftUICore.UnitPoint
    package var endPoint: SwiftUICore.UnitPoint
    package init(gradient: SwiftUICore.ResolvedGradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #else
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #endif
    package static func == (a: SwiftUICore.LinearGradient._Paint, b: SwiftUICore.LinearGradient._Paint) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency package func resolvePaint(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.LinearGradient._Paint
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.LinearGradient>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.LinearGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct RadialGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency package var gradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency package var center: SwiftUICore.UnitPoint
  @_Concurrency.MainActor @preconcurrency package var startRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency package var endRadius: CoreFoundation.CGFloat
  nonisolated public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat)
  @_alwaysEmitIntoClient nonisolated public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) {
        self.init(
            gradient: Gradient(colors: colors), center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  @_alwaysEmitIntoClient nonisolated public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) {
        self.init(
            gradient: Gradient(stops: stops), center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  package struct _Paint : SwiftUICore.ResolvedPaint {
    package var gradient: SwiftUICore.ResolvedGradient
    package var center: SwiftUICore.UnitPoint
    package var startRadius: CoreFoundation.CGFloat
    package var endRadius: CoreFoundation.CGFloat
    package init(gradient: SwiftUICore.ResolvedGradient, center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #else
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #endif
    package static func == (a: SwiftUICore.RadialGradient._Paint, b: SwiftUICore.RadialGradient._Paint) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency package func resolvePaint(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.RadialGradient._Paint
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.RadialGradient>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.RadialGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct EllipticalGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency package var gradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency package var center: SwiftUICore.UnitPoint
  @_Concurrency.MainActor @preconcurrency package var startRadiusFraction: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency package var endRadiusFraction: CoreFoundation.CGFloat
  nonisolated public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5)
  nonisolated public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5)
  nonisolated public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5)
  package struct _Paint : SwiftUICore.ResolvedPaint {
    package var gradient: SwiftUICore.ResolvedGradient
    package var center: SwiftUICore.UnitPoint
    package var startRadiusFraction: CoreFoundation.CGFloat
    package var endRadiusFraction: CoreFoundation.CGFloat
    package init(gradient: SwiftUICore.ResolvedGradient, center: SwiftUICore.UnitPoint, startRadiusFraction: CoreFoundation.CGFloat, endRadiusFraction: CoreFoundation.CGFloat)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #else
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #endif
    package static func == (a: SwiftUICore.EllipticalGradient._Paint, b: SwiftUICore.EllipticalGradient._Paint) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency package func resolvePaint(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.EllipticalGradient._Paint
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.EllipticalGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct AngularGradient : SwiftUICore.ShapeStyle, SwiftUICore.View, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency package var gradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency package var center: SwiftUICore.UnitPoint
  @_Concurrency.MainActor @preconcurrency package var startAngle: SwiftUICore.Angle
  @_Concurrency.MainActor @preconcurrency package var endAngle: SwiftUICore.Angle
  nonisolated public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle = .zero, endAngle: SwiftUICore.Angle = .zero)
  @_alwaysEmitIntoClient nonisolated public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) {
        self.init(gradient: Gradient(colors: colors), center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  @_alwaysEmitIntoClient nonisolated public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) {
        self.init(gradient: Gradient(stops: stops), center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  nonisolated public init(gradient: SwiftUICore.Gradient, center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero)
  @_alwaysEmitIntoClient nonisolated public init(colors: [SwiftUICore.Color], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) {
        self.init(gradient: Gradient(colors: colors), center: center,
            angle: angle)
    }
  @_alwaysEmitIntoClient nonisolated public init(stops: [SwiftUICore.Gradient.Stop], center: SwiftUICore.UnitPoint, angle: SwiftUICore.Angle = .zero) {
        self.init(gradient: Gradient(stops: stops), center: center,
            angle: angle)
    }
  package struct _Paint : SwiftUICore.ResolvedPaint {
    package var gradient: SwiftUICore.ResolvedGradient
    package var center: SwiftUICore.UnitPoint
    package var startAngle: SwiftUICore.Angle
    package var endAngle: SwiftUICore.Angle
    package init(gradient: SwiftUICore.ResolvedGradient, center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #else
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #endif
    package static func == (a: SwiftUICore.AngularGradient._Paint, b: SwiftUICore.AngularGradient._Paint) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency package func resolvePaint(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.AngularGradient._Paint
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  @_Concurrency.MainActor @preconcurrency package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.AngularGradient>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.AngularGradient>
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
extension SwiftUICore.LinearGradient._Paint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #else
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #endif
  package typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<SwiftUICore.UnitPoint.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>, SwiftUICore.ResolvedGradient.AnimatableData>
  package var animatableData: SwiftUICore.LinearGradient._Paint.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.LinearGradient._Paint : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.RadialGradient._Paint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #else
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #endif
  package typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<SwiftUICore.UnitPoint.AnimatableData, SwiftUICore.ResolvedGradient.AnimatableData>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  package var animatableData: SwiftUICore.RadialGradient._Paint.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.RadialGradient._Paint : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.EllipticalGradient._Paint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #else
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #endif
  package typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<SwiftUICore.UnitPoint.AnimatableData, SwiftUICore.ResolvedGradient.AnimatableData>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  package var animatableData: SwiftUICore.EllipticalGradient._Paint.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.EllipticalGradient._Paint : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.AngularGradient._Paint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #else
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #endif
  package typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<SwiftUICore.UnitPoint.AnimatableData, SwiftUICore.ResolvedGradient.AnimatableData>, SwiftUICore.AnimatablePair<SwiftUICore.Angle.AnimatableData, SwiftUICore.Angle.AnimatableData>>
  package var animatableData: SwiftUICore.AngularGradient._Paint.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.AngularGradient._Paint : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct ConicGradient {
  package var gradient: SwiftUICore.ResolvedGradient
  package var center: CoreFoundation.CGPoint
  package var angle: SwiftUICore.Angle
  package init(gradient: SwiftUICore.ResolvedGradient, center: CoreFoundation.CGPoint, angle: SwiftUICore.Angle)
  package init(angular: SwiftUICore.AngularGradient._Paint, bounds: CoreFoundation.CGRect)
  package init(gradient: SwiftUICore.ResolvedGradient, center: CoreFoundation.CGPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum ScrollPhase : Swift.Equatable {
  case idle
  case tracking
  case interacting
  case decelerating
  case animating
  public var isScrolling: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.ScrollPhase, b: SwiftUICore.ScrollPhase) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
package struct ScrollPhaseState : Swift.Equatable {
  package var phase: SwiftUICore.ScrollPhase
  package var velocity: CoreFoundation.CGVector
  package init(phase: SwiftUICore.ScrollPhase = .idle, velocity: CoreFoundation.CGVector = .zero)
  package var isScrolling: Swift.Bool {
    get
  }
  package var isTracking: Swift.Bool {
    get
  }
  package var isInteracting: Swift.Bool {
    get
  }
  package var isDecelerating: Swift.Bool {
    get
  }
  package var isAnimating: Swift.Bool {
    get
  }
  package static func == (a: SwiftUICore.ScrollPhaseState, b: SwiftUICore.ScrollPhaseState) -> Swift.Bool
}
package struct ScrollPhasePreferenceKey : SwiftUICore.PreferenceKey {
  package typealias Value = [SwiftUICore.ScrollPhaseState]
  package static let defaultValue: SwiftUICore.ScrollPhasePreferenceKey.Value
  package static func reduce(value: inout SwiftUICore.ScrollPhasePreferenceKey.Value, nextValue: () -> SwiftUICore.ScrollPhasePreferenceKey.Value)
}
package struct ScrollPhaseProvider : AttributeGraph.Rule {
  package init(phaseState: AttributeGraph.Attribute<SwiftUICore.ScrollPhaseState>)
  package var value: [SwiftUICore.ScrollPhaseState] {
    get
  }
  package typealias Value = [SwiftUICore.ScrollPhaseState]
}
extension SwiftUICore._GraphInputs {
  package var scrollPhaseState: AttributeGraph.OptionalAttribute<SwiftUICore.ScrollPhaseState> {
    get
    set
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func configuresScrollPhaseState() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency package func resetScrollInputs() -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollPhase : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SwiftUICore.ScrollPhaseState : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
package struct ArchivedViewCore {
  package static let majorVersion: Swift.Int
  package static let archivedViewHostKey: Swift.CodingUserInfoKey
  package static let archiveOptionsKey: Swift.CodingUserInfoKey
  package static let rbEncoderSetKey: Swift.CodingUserInfoKey
  package struct Metadata : Swift.Codable {
    package var majorVersion: Swift.Int
    package var stateAttachments: [Swift.Int]
    package var stableIDsAttachment: Swift.Int?
    package var dataAttachment: Swift.Int?
    package var archiveID: Foundation.UUID
    package var deploymentVersion: SwiftUICore.ArchivedViewInput.DeploymentVersion
    package var preferredBundleLanguage: Swift.String?
    @SwiftUICore.CodableRawRepresentable package var preferredCompositionLanguage: CoreText_Private.CTCompositionLanguage {
      get
      set
      _modify
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(majorVersion: Swift.Int = ArchivedViewCore.majorVersion, stateAttachments: [Swift.Int] = [], stableIDAttachment: Swift.Int? = nil, dataAttachment: Swift.Int? = nil, archiveID: Foundation.UUID = .init(), deploymentVersion: SwiftUICore.ArchivedViewInput.DeploymentVersion = .current)
    #else
    package init(majorVersion: Swift.Int = ArchivedViewCore.majorVersion, stateAttachments: [Swift.Int] = [], stableIDAttachment: Swift.Int? = nil, dataAttachment: Swift.Int? = nil, archiveID: Foundation.UUID = .init(), deploymentVersion: SwiftUICore.ArchivedViewInput.DeploymentVersion = .current)
    #endif
    package func encode(to encoder: any Swift.Encoder) throws
  }
}
extension SwiftUICore.ArchivedViewCore.Metadata {
  package init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.DateReference {
  public static func reference(to date: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.RelativeFormatStyle.Field> = [.year, .month, .day, .hour, .minute], maxFieldCount: Swift.Int = 2, thresholdField: Foundation.Date.RelativeFormatStyle.Field = .day) -> SwiftUICore.SystemFormatStyle.DateReference
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct DateReference : Swift.Sendable {
    public init(to date: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.RelativeFormatStyle.Field> = [.year, .month, .day, .hour, .minute], maxFieldCount: Swift.Int = 2, thresholdField: Foundation.Date.RelativeFormatStyle.Field = .day)
    public func calendar(_ calendar: Foundation.Calendar) -> SwiftUICore.SystemFormatStyle.DateReference
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateReference : Foundation.FormatStyle {
  public func format(_ referenceDate: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.DateReference
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.SystemFormatStyle.DateReference, b: SwiftUICore.SystemFormatStyle.DateReference) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias FormatInput = Foundation.Date
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateReference : Foundation.DiscreteFormatStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(before referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(before referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(after referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(after referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func input(before referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func input(before referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func input(after referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func input(after referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
}
extension SwiftUICore.SystemFormatStyle.DateReference : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> SwiftUICore.SystemFormatStyle.DateReference
}
extension SwiftUICore.SystemFormatStyle.DateReference : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, SwiftUICore.SystemFormatStyle.DateReference>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension SwiftUICore.AccessibilityCore {
  package static func textResolvesToEmpty(_ text: SwiftUICore.Text, in environment: SwiftUICore.EnvironmentValues) -> Swift.Bool
  package static func textsResolveToEmpty(_ texts: [SwiftUICore.Text], in environment: SwiftUICore.EnvironmentValues) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func textResolvedToPlainText(_ text: SwiftUICore.Text, in environment: SwiftUICore.EnvironmentValues, updateResolvableAttributes: Swift.Bool = false, idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Swift.String
  #else
  package static func textResolvedToPlainText(_ text: SwiftUICore.Text, in environment: SwiftUICore.EnvironmentValues, updateResolvableAttributes: Swift.Bool = false, idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func textsResolvedToPlainText(_ texts: [SwiftUICore.Text], in environment: SwiftUICore.EnvironmentValues, updateResolvableAttributes: Swift.Bool = false, idiom: SwiftUICore.AnyInterfaceIdiom? = nil, separator: Swift.String = ", ") -> Swift.String?
  #else
  package static func textsResolvedToPlainText(_ texts: [SwiftUICore.Text], in environment: SwiftUICore.EnvironmentValues, updateResolvableAttributes: Swift.Bool = false, idiom: SwiftUICore.AnyInterfaceIdiom? = nil, separator: Swift.String = ", ") -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func textResolvedToAttributedText(_ text: SwiftUICore.Text, in environment: SwiftUICore.EnvironmentValues, includeResolvableAttributes: Swift.Bool = false, includeDefaultAttributes: Swift.Bool = true, updateResolvableAttributes: Swift.Bool = true, idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Foundation.NSAttributedString?
  #else
  package static func textResolvedToAttributedText(_ text: SwiftUICore.Text, in environment: SwiftUICore.EnvironmentValues, includeResolvableAttributes: Swift.Bool = false, includeDefaultAttributes: Swift.Bool = true, updateResolvableAttributes: Swift.Bool = true, idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Foundation.NSAttributedString?
  #endif
  @discardableResult
  package static func resolveAttributedTextAttributes(in string: inout Foundation.NSAttributedString, environment: SwiftUICore.EnvironmentValues, includeResolvableAttributes: Swift.Bool = false) -> Swift.Bool
  package static func resolveAttributedTextAttributes(_ attributes: inout [Foundation.NSAttributedString.Key : Any], environment: SwiftUICore.EnvironmentValues)
  package static func resolveAccessibilitySpeechAttributes(into attributes: inout [Foundation.NSAttributedString.Key : Any], speechAttr: SwiftUICore.AccessibilitySpeechAttributes, environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func textsResolvedToAttributedText(_ texts: [SwiftUICore.Text], in environment: SwiftUICore.EnvironmentValues, includeResolvableAttributes: Swift.Bool = false, includeDefaultAttributes: Swift.Bool = true, updateResolvableAttributes: Swift.Bool = true, idiom: SwiftUICore.AnyInterfaceIdiom? = nil, separator: Swift.String = ", ") -> Foundation.NSAttributedString?
  #else
  package static func textsResolvedToAttributedText(_ texts: [SwiftUICore.Text], in environment: SwiftUICore.EnvironmentValues, includeResolvableAttributes: Swift.Bool = false, includeDefaultAttributes: Swift.Bool = true, updateResolvableAttributes: Swift.Bool = true, idiom: SwiftUICore.AnyInterfaceIdiom? = nil, separator: Swift.String = ", ") -> Foundation.NSAttributedString?
  #endif
}
extension SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func accessibilityResolvedText(in environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> SwiftUICore.AccessibilityText?
  #else
  package func accessibilityResolvedText(in environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> SwiftUICore.AccessibilityText?
  #endif
}
package protocol AccessibilityTextAttributeResolver {
  func resolveDefaultAttributes(_: inout [Foundation.NSAttributedString.Key : Any])
  func resolveTextStyleAttributes(_: inout [Foundation.NSAttributedString.Key : Any], textStyle: SwiftUICore.Text.Style, environment: SwiftUICore.EnvironmentValues)
  func resolveAccessibilitySpeechAttributes(into attributes: inout [Foundation.NSAttributedString.Key : Any], speechAttr: SwiftUICore.AccessibilitySpeechAttributes, environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool)
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var accessibilityTextAttributeResolver: (any SwiftUICore.AccessibilityTextAttributeResolver)? {
    get
    set
  }
  #else
  package var accessibilityTextAttributeResolver: (any SwiftUICore.AccessibilityTextAttributeResolver)? {
    get
    set
  }
  #endif
}
extension Foundation.NSAttributedString {
  convenience package init(axAttributedString: Swift.String)
}
extension Foundation.NSAttributedString.Key {
  package static var coreAXForegroundColor: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXFontName: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXFontSize: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXFontFamily: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXStrikethrough: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXUnderline: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXAlignment: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXAttachment: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXLink: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXTextHeadingLevel: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXSpeechPitch: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXSpeechPunctuation: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXSpeechSpellOut: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXSpeechIPANotation: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXTextualContext: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXSpeechAnnouncementPriority: Foundation.NSAttributedString.Key {
    get
  }
  package static var coreAXSpeechLanguage: Foundation.NSAttributedString.Key {
    get
  }
  package static let coreAXLabel: Foundation.NSAttributedString.Key
  package static var coreAXDurationTimeMMSS: Foundation.NSAttributedString.Key {
    get
  }
}
extension Foundation.NSAttributedString.Key {
  package var isAccessibilityAttribute: Swift.Bool {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct ScrollPosition : Swift.Sendable {
  package enum Storage : Swift.Equatable {
    case automatic
    case positionedByUser
    case viewID(SwiftUICore.ScrollPosition.ViewID)
    case edge(SwiftUICore.Edge)
    case point(CoreFoundation.CGPoint)
    case x(CoreFoundation.CGFloat)
    case y(CoreFoundation.CGFloat)
    package static func == (a: SwiftUICore.ScrollPosition.Storage, b: SwiftUICore.ScrollPosition.Storage) -> Swift.Bool
  }
  package struct ViewID {
    package var id: (any Swift.Hashable & Swift.Sendable)
    package var anchor: SwiftUICore.UnitPoint?
  }
  package var storage: SwiftUICore.ScrollPosition.Storage
  package var idType: any Swift.Hashable.Type
  package init(idType: (some Hashable).Type = Never.self, storage: SwiftUICore.ScrollPosition.Storage)
  package func matches(id: some Hashable) -> Swift.Bool
  package func wantsUpdate(toPosition newValue: SwiftUICore.ScrollPosition) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(id: some Hashable & Sendable, anchor: SwiftUICore.UnitPoint? = nil)
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(id: some Hashable & Sendable, anchor: SwiftUICore.UnitPoint? = nil)
  #endif
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, edge: SwiftUICore.Edge)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, point: CoreFoundation.CGPoint)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, x: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init(idType: (some Hashable & Sendable).Type = Never.self, y: CoreFoundation.CGFloat)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(id: some Hashable & Sendable, anchor: SwiftUICore.UnitPoint? = nil)
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(id: some Hashable & Sendable, anchor: SwiftUICore.UnitPoint? = nil)
  #endif
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(edge: SwiftUICore.Edge)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(point: CoreFoundation.CGPoint)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(x: CoreFoundation.CGFloat)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func scrollTo(y: CoreFoundation.CGFloat)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var isPositionedByUser: Swift.Bool {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var edge: SwiftUICore.Edge? {
    get
  }
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var edge: SwiftUICore.Edge? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var point: CoreFoundation.CGPoint? {
    get
  }
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var point: CoreFoundation.CGPoint? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var viewID: (any Swift.Hashable & Swift.Sendable)? {
    get
  }
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var viewID: (any Swift.Hashable & Swift.Sendable)? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func viewID<T>(type: T.Type) -> T? where T : Swift.Hashable, T : Swift.Sendable
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func viewID<T>(type: T.Type) -> T? where T : Swift.Hashable, T : Swift.Sendable
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ScrollPosition : Swift.Equatable {
  public static func == (lhs: SwiftUICore.ScrollPosition, rhs: SwiftUICore.ScrollPosition) -> Swift.Bool
}
extension SwiftUICore.ScrollPosition.ViewID : Swift.Equatable {
  package static func == (lhs: SwiftUICore.ScrollPosition.ViewID, rhs: SwiftUICore.ScrollPosition.ViewID) -> Swift.Bool
}
package struct ScrollPositionToValue<V> : SwiftUICore.Projection where V : Swift.Hashable {
  package var anchor: SwiftUICore.UnitPoint?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ binding: SwiftUICore.Binding<V?>, anchor: SwiftUICore.UnitPoint?)
  #else
  package init(_ binding: SwiftUICore.Binding<V?>, anchor: SwiftUICore.UnitPoint?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func get(base: SwiftUICore.ScrollPosition) -> V?
  #else
  package func get(base: SwiftUICore.ScrollPosition) -> V?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func set(base: inout SwiftUICore.ScrollPosition, newValue: V?)
  #else
  package func set(base: inout SwiftUICore.ScrollPosition, newValue: V?)
  #endif
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.ScrollPositionToValue<V>, b: SwiftUICore.ScrollPositionToValue<V>) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  package typealias Base = SwiftUICore.ScrollPosition
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  package typealias Projected = V?
  package var hashValue: Swift.Int {
    get
  }
}
package struct ValueToScrollPosition<V> : SwiftUICore.Projection where V : Swift.Hashable {
  package var anchor: SwiftUICore.UnitPoint?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ binding: SwiftUICore.Binding<V?>, anchor: SwiftUICore.UnitPoint?)
  #else
  package init(_ binding: SwiftUICore.Binding<V?>, anchor: SwiftUICore.UnitPoint?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func get(base: V?) -> SwiftUICore.ScrollPosition
  #else
  package func get(base: V?) -> SwiftUICore.ScrollPosition
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func set(base: inout V?, newValue: SwiftUICore.ScrollPosition)
  #else
  package func set(base: inout V?, newValue: SwiftUICore.ScrollPosition)
  #endif
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.ValueToScrollPosition<V>, b: SwiftUICore.ValueToScrollPosition<V>) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  package typealias Base = V?
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  package typealias Projected = SwiftUICore.ScrollPosition
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen public enum HorizontalDirection : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case leading
  case trailing
  @frozen public struct Set : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
    public typealias Element = SwiftUICore.HorizontalDirection.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let leading: SwiftUICore.HorizontalDirection.Set
    public static let trailing: SwiftUICore.HorizontalDirection.Set
    public static let all: SwiftUICore.HorizontalDirection.Set
    public init(_ direction: SwiftUICore.HorizontalDirection)
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.HorizontalDirection.Set.Element
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias AllCases = [SwiftUICore.HorizontalDirection]
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUICore.HorizontalDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen public enum VerticalDirection : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case up
  case down
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.VerticalDirection.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let up: SwiftUICore.VerticalDirection.Set
    public static let down: SwiftUICore.VerticalDirection.Set
    public static let all: SwiftUICore.VerticalDirection.Set
    public init(_ direction: SwiftUICore.VerticalDirection)
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.VerticalDirection.Set.Element
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias AllCases = [SwiftUICore.VerticalDirection]
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUICore.VerticalDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
package protocol GestureGraphDelegate : AnyObject {
  func enqueueAction(_ action: @escaping () -> Swift.Void)
}
final package class GestureGraph : SwiftUICore.GraphHost, SwiftUICore.EventGraphHost, Swift.CustomStringConvertible {
  final package let eventBindingManager: SwiftUICore.EventBindingManager
  final package var description: Swift.String {
    get
  }
  override final package func instantiateOutputs()
  override final package func uninstantiateOutputs()
  override final package func timeDidChange()
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var responderNode: SwiftUICore.ResponderNode? {
    get
  }
  #else
  final package var responderNode: SwiftUICore.ResponderNode? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var focusedResponder: SwiftUICore.ResponderNode? {
    get
  }
  #else
  final package var focusedResponder: SwiftUICore.ResponderNode? {
    get
  }
  #endif
  final package var nextGestureUpdateTime: SwiftUICore.Time {
    get
  }
  final package func setInheritedPhase(_ phase: SwiftUICore._GestureInputs.InheritedPhase)
  final package func sendEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType], rootNode: SwiftUICore.ResponderNode, at time: SwiftUICore.Time) -> SwiftUICore.GesturePhase<Swift.Void>
  final package func resetEvents()
  final package func enqueueAction(_ action: @escaping () -> Swift.Void)
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func gestureCategory() -> SwiftUICore.GestureCategory?
  #else
  final package func gestureCategory() -> SwiftUICore.GestureCategory?
  #endif
  @objc deinit
}
extension SwiftUICore.GestureGraph {
  package static var current: SwiftUICore.GestureGraph {
    get
  }
}
package enum ScrollPositionStorage {
  case binding(AttributeGraph.Attribute<SwiftUICore.Binding<SwiftUICore.ScrollPosition>>)
  case value(AttributeGraph.Attribute<SwiftUICore.ScrollPosition>)
}
@_Concurrency.MainActor @preconcurrency package struct ScrollPositionBindingModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @_Concurrency.MainActor @preconcurrency package var binding: SwiftUICore.Binding<SwiftUICore.ScrollPosition>
  @_Concurrency.MainActor @preconcurrency package var anchor: SwiftUICore.UnitPoint?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package init(binding: SwiftUICore.Binding<SwiftUICore.ScrollPosition>, anchor: SwiftUICore.UnitPoint?)
  #else
  @_Concurrency.MainActor @preconcurrency package init(binding: SwiftUICore.Binding<SwiftUICore.ScrollPosition>, anchor: SwiftUICore.UnitPoint?)
  #endif
  @_Concurrency.MainActor @preconcurrency package static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore.ScrollPositionBindingModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@_Concurrency.MainActor @preconcurrency package struct ScrollValueModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @_Concurrency.MainActor @preconcurrency package var value: SwiftUICore.ScrollPosition
  @_Concurrency.MainActor @preconcurrency package init(value: SwiftUICore.ScrollPosition)
  @_Concurrency.MainActor @preconcurrency package static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore.ScrollValueModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
package enum ScrollStateInputKind {
  case scrollView
  case scrollContent
  package static func == (a: SwiftUICore.ScrollStateInputKind, b: SwiftUICore.ScrollStateInputKind) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func scrollPositionAnchor(kind: SwiftUICore.ScrollStateInputKind) -> AttributeGraph.OptionalAttribute<SwiftUICore.UnitPoint?>
  #else
  package func scrollPositionAnchor(kind: SwiftUICore.ScrollStateInputKind) -> AttributeGraph.OptionalAttribute<SwiftUICore.UnitPoint?>
  #endif
  package func scrollPositionBinding(kind: SwiftUICore.ScrollStateInputKind) -> AttributeGraph.OptionalAttribute<SwiftUICore.Binding<SwiftUICore.ScrollPosition>>
  package func scrollPositionValue() -> AttributeGraph.OptionalAttribute<SwiftUICore.ScrollPosition>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func setScrollPosition(storage: SwiftUICore.ScrollPositionStorage?, kind: SwiftUICore.ScrollStateInputKind)
  #else
  package mutating func setScrollPosition(storage: SwiftUICore.ScrollPositionStorage?, kind: SwiftUICore.ScrollStateInputKind)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func setScrollPositionAnchor(_ anchor: AttributeGraph.OptionalAttribute<SwiftUICore.UnitPoint?>, kind: SwiftUICore.ScrollStateInputKind)
  #else
  package mutating func setScrollPositionAnchor(_ anchor: AttributeGraph.OptionalAttribute<SwiftUICore.UnitPoint?>, kind: SwiftUICore.ScrollStateInputKind)
  #endif
  package func hasValueScrollPosition(kind: SwiftUICore.ScrollStateInputKind) -> Swift.Bool
  package mutating func resetScrollPosition(kind: SwiftUICore.ScrollStateInputKind)
  package mutating func convertScrollStateInputsToContent()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static func modifier<E>(active: E, identity: E) -> SwiftUICore.AnyTransition where E : SwiftUICore.ViewModifier
}
extension SwiftUICore.DisplayList {
  package enum PlatformEffect {
    case identity
    package var features: SwiftUICore.DisplayList.Features {
      get
    }
    package func encode(to encoder: any Swift.Encoder) throws
    package init(from decoder: any Swift.Decoder) throws
    package func print(into sexp: inout SwiftUICore.SExpPrinter)
    package static func == (a: SwiftUICore.DisplayList.PlatformEffect, b: SwiftUICore.DisplayList.PlatformEffect) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftUICore.DisplayList.PlatformEffect : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.DisplayList.ViewUpdater {
  package struct PlatformViewInfo {
  }
}
extension SwiftUICore.DisplayList.ViewUpdater.Platform {
  package typealias PlatformViewInfo = SwiftUICore.DisplayList.ViewUpdater.PlatformViewInfo
  package struct PlatformState {
  }
}
extension SwiftUICore.DisplayList : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  package var minimalDescription: Swift.String {
    get
  }
}
extension SwiftUICore.DisplayList.Item : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
extension SwiftUICore.DisplayList {
  final package class GraphicsRenderer {
    package enum PlatformViewMode {
      case ignored
      case unsupported
      case rendered(update: Swift.Bool)
    }
    final package var platformViewMode: SwiftUICore.DisplayList.GraphicsRenderer.PlatformViewMode
    package init(platformViewMode: SwiftUICore.DisplayList.GraphicsRenderer.PlatformViewMode)
    final package func render(at time: SwiftUICore.Time, do body: () -> Swift.Void)
    final package func renderDisplayList(_ list: SwiftUICore.DisplayList, at time: SwiftUICore.Time, in ctx: inout SwiftUICore.GraphicsContext)
    final package func render(list: SwiftUICore.DisplayList, in ctx: inout SwiftUICore.GraphicsContext)
    final package func render(item: SwiftUICore.DisplayList.Item, in ctx: inout SwiftUICore.GraphicsContext)
    final package func drawImplicitLayer(in ctx: inout SwiftUICore.GraphicsContext, content: (inout SwiftUICore.GraphicsContext) -> Swift.Void)
    #if compiler(>=5.3) && $NoncopyableGenerics
    final package func renderPlatformView(_ view: Swift.AnyObject?, in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, viewType: any Any.Type)
    #else
    final package func renderPlatformView(_ view: Swift.AnyObject?, in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, viewType: any Any.Type)
    #endif
    @objc deinit
  }
}
extension SwiftUICore.DisplayList {
  package class InterpolatorGroup {
    final package var maxDuration: Swift.Double
    @objc deinit
  }
  @_inheritsConvenienceInitializers final package class UnaryInterpolatorGroup : SwiftUICore.DisplayList.InterpolatorGroup {
    package init()
    final package func apply(to item: inout SwiftUICore.DisplayList.Item)
    @objc deinit
  }
}
package struct ScrollPrefetchState : SwiftUICore.ViewInput {
  package static let defaultValue: AttributeGraph.OptionalAttribute<SwiftUICore.ScrollPrefetchState>
  package var id: SwiftUICore.UniqueID
  package var deadline: Swift.UInt64
  package var edges: SwiftUICore.Edge.Set
  package init(deadline: Swift.UInt64 = 0)
  package func commit(to state: AttributeGraph.WeakAttribute<SwiftUICore.ScrollPrefetchState>)
  package typealias Value = AttributeGraph.OptionalAttribute<SwiftUICore.ScrollPrefetchState>
}
extension SwiftUICore.Image {
  package struct LayoutMetrics : Swift.Equatable {
    package var baselineOffset: CoreFoundation.CGFloat
    package var capHeight: CoreFoundation.CGFloat
    package var contentSize: CoreFoundation.CGSize
    package var alignmentOrigin: CoreFoundation.CGPoint
    package var backgroundSize: CoreFoundation.CGSize
    package init(baselineOffset: CoreFoundation.CGFloat, capHeight: CoreFoundation.CGFloat, contentSize: CoreFoundation.CGSize, alignmentOrigin: CoreFoundation.CGPoint)
    package static func == (a: SwiftUICore.Image.LayoutMetrics, b: SwiftUICore.Image.LayoutMetrics) -> Swift.Bool
  }
  package struct Resolved : Swift.Equatable {
    package var image: SwiftUICore.GraphicsImage {
      get
      set
    }
    package var label: SwiftUICore.AccessibilityImageLabel?
    #if compiler(>=5.3) && $NoncopyableGenerics
    @SwiftUICore.EquatableOptionalObject package var basePlatformItemImage: Swift.AnyObject? {
      get
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      set
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      _modify
    }
    #else
    @SwiftUICore.EquatableOptionalObject package var basePlatformItemImage: Swift.AnyObject? {
      get
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      set
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      _modify
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @SwiftUICore.IndirectOptional package var layoutMetrics: SwiftUICore.Image.LayoutMetrics? {
      get
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      set
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      _modify
    }
    #else
    @SwiftUICore.IndirectOptional package var layoutMetrics: SwiftUICore.Image.LayoutMetrics? {
      get
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      set
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      _modify
    }
    #endif
    package var decorative: Swift.Bool
    package var backgroundShape: SwiftUICore.SymbolVariants.Shape?
    package var backgroundCornerRadius: Swift.Float?
    package var styleResolverMode: SwiftUICore._ShapeStyle_ResolverMode
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(image: SwiftUICore.GraphicsImage, decorative: Swift.Bool, label: SwiftUICore.AccessibilityImageLabel?, basePlatformItemImage: Swift.AnyObject? = nil, backgroundShape: SwiftUICore.SymbolVariants.Shape? = nil, backgroundCornerRadius: CoreFoundation.CGFloat? = nil)
    #else
    package init(image: SwiftUICore.GraphicsImage, decorative: Swift.Bool, label: SwiftUICore.AccessibilityImageLabel?, basePlatformItemImage: Swift.AnyObject? = nil, backgroundShape: SwiftUICore.SymbolVariants.Shape? = nil, backgroundCornerRadius: CoreFoundation.CGFloat? = nil)
    #endif
    package var size: CoreFoundation.CGSize {
      get
    }
    package var baselineOffset: CoreFoundation.CGFloat {
      get
    }
    package var capHeight: CoreFoundation.CGFloat {
      get
    }
    package var contentSize: CoreFoundation.CGSize {
      get
    }
    package var alignmentOrigin: CoreFoundation.CGPoint {
      get
    }
    package func foregroundColor(_ color: () -> SwiftUICore.Color.Resolved) -> SwiftUICore.Image.Resolved
    package static func == (a: SwiftUICore.Image.Resolved, b: SwiftUICore.Image.Resolved) -> Swift.Bool
  }
  package struct NamedResolved {
    package var name: Swift.String
    package var location: SwiftUICore.Image.Location
    package var value: Swift.Float?
    package var symbolRenderingMode: SwiftUICore.SymbolRenderingMode.Storage?
    package var isTemplate: Swift.Bool
    package var environment: SwiftUICore.EnvironmentValues
  }
}
extension SwiftUICore.Image.Resolved : SwiftUICore.UnaryView, SwiftUICore.PrimitiveView, SwiftUICore.ShapeStyledLeafView, SwiftUICore.LeafViewLayout {
  package struct UpdateData {
  }
  package mutating func mustUpdate(data: SwiftUICore.Image.Resolved.UpdateData, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>) -> Swift.Bool
  package func frame(in size: CoreFoundation.CGSize) -> CoreFoundation.CGRect
  package func shape(in size: CoreFoundation.CGSize) -> SwiftUICore.Image.Resolved.FramedShape
  package static var hasBackground: Swift.Bool {
    get
  }
  package func backgroundShape(in size: CoreFoundation.CGSize) -> SwiftUICore.Image.Resolved.FramedShape
  package func isClear(styles: SwiftUICore._ShapeStyle_Pack) -> Swift.Bool
  package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  nonisolated package static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Image.Resolved>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ShapeUpdateData = SwiftUICore.Image.Resolved.UpdateData
}
extension SwiftUICore.Image.Resolved : SwiftUICore.InterpolatableContent {
  package static var defaultTransition: SwiftUICore.ContentTransition {
    get
  }
  package func modifyTransition(state: inout SwiftUICore.ContentTransition.State, to other: SwiftUICore.Image.Resolved)
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func imageIsTemplate(renderingMode: SwiftUICore.Image.TemplateRenderingMode? = nil) -> Swift.Bool
  #else
  package func imageIsTemplate(renderingMode: SwiftUICore.Image.TemplateRenderingMode? = nil) -> Swift.Bool
  #endif
}
extension SwiftUICore.Image.Resolved : SwiftUICore.ImageProvider {
  package func resolve(in _: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveNamedImage(in _: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #else
  package func resolveNamedImage(in _: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #endif
}
package protocol PlatformImageRepresentable {
  static func shouldMakeRepresentation(inputs: SwiftUICore._ViewInputs) -> Swift.Bool
  static func makeRepresentation(inputs: SwiftUICore._ViewInputs, context: AttributeGraph.Attribute<Self.Context>, outputs: inout SwiftUICore._ViewOutputs)
  typealias Context = SwiftUICore.PlatformImageRepresentableContext
}
package struct PlatformImageRepresentableContext {
  package var image: SwiftUICore.Image.Resolved
  package var tintColor: SwiftUICore.Color?
  package var foregroundStyle: SwiftUICore.AnyShapeStyle?
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedImageRepresentation: (any SwiftUICore.PlatformImageRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedImageRepresentation: (any SwiftUICore.PlatformImageRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedImageRepresentation: (any SwiftUICore.PlatformImageRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedImageRepresentation: (any SwiftUICore.PlatformImageRepresentable.Type)? {
    get
    set
  }
  #endif
}
package protocol PlatformNamedImageRepresentable {
  static func shouldMakeRepresentation(inputs: SwiftUICore._ViewInputs) -> Swift.Bool
  static func makeRepresentation(inputs: SwiftUICore._ViewInputs, context: AttributeGraph.Attribute<Self.Context>, outputs: inout SwiftUICore._ViewOutputs)
  typealias Context = SwiftUICore.PlatformNamedImageRepresentableContext
}
package struct PlatformNamedImageRepresentableContext {
  package var image: SwiftUICore.Image
  package var environment: SwiftUICore.EnvironmentValues
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedNamedImageRepresentation: (any SwiftUICore.PlatformNamedImageRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedNamedImageRepresentation: (any SwiftUICore.PlatformNamedImageRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedNamedImageRepresentation: (any SwiftUICore.PlatformNamedImageRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedNamedImageRepresentation: (any SwiftUICore.PlatformNamedImageRepresentable.Type)? {
    get
    set
  }
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ScrollTarget {
  public var rect: CoreFoundation.CGRect
  public var anchor: SwiftUICore.UnitPoint?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(rect: CoreFoundation.CGRect, anchor: SwiftUICore.UnitPoint? = nil)
  #else
  package init(rect: CoreFoundation.CGRect, anchor: SwiftUICore.UnitPoint? = nil)
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollTarget : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.ScrollTarget, b: SwiftUICore.ScrollTarget) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.ScrollTarget : Swift.Sendable {
}
package struct ScrollTargetConfiguration {
  package var animated: Swift.Bool
  package var requiresCompleteVisibility: Swift.Bool
  package init(animated: Swift.Bool, requiresCompleteVisibility: Swift.Bool = true)
}
package struct ScrollTargetRole {
  package enum Role {
    case container
    case target
    package static func == (a: SwiftUICore.ScrollTargetRole.Role, b: SwiftUICore.ScrollTargetRole.Role) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package var role: SwiftUICore.ScrollTargetRole.Role
  package static var container: SwiftUICore.ScrollTargetRole {
    get
  }
  package static var target: SwiftUICore.ScrollTargetRole {
    get
  }
}
extension SwiftUICore.ScrollTargetRole {
  package typealias TargetCollection = [SwiftUICore.ScrollTargetRole.Role : [any SwiftUICore.ScrollableCollection]]
  package struct Key : SwiftUICore.PreferenceKey {
    package typealias Value = SwiftUICore.ScrollTargetRole.TargetCollection
    package static let defaultValue: SwiftUICore.ScrollTargetRole.Key.Value
    package static func reduce(value: inout SwiftUICore.ScrollTargetRole.Key.Value, nextValue: () -> SwiftUICore.ScrollTargetRole.Key.Value)
  }
  package struct ContentKey : SwiftUICore.PreferenceKey {
    package typealias Value = SwiftUICore.ScrollTargetRole.TargetCollection
    package static let defaultValue: SwiftUICore.ScrollTargetRole.ContentKey.Value
    package static func reduce(value: inout SwiftUICore.ScrollTargetRole.ContentKey.Value, nextValue: () -> SwiftUICore.ScrollTargetRole.ContentKey.Value)
  }
  package struct SetLayout : AttributeGraph.Rule {
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(role: AttributeGraph.Attribute<SwiftUICore.ScrollTargetRole.Role?>, collection: AttributeGraph.Attribute<any SwiftUICore.ScrollableCollection>)
    #else
    package init(role: AttributeGraph.Attribute<SwiftUICore.ScrollTargetRole.Role?>, collection: AttributeGraph.Attribute<any SwiftUICore.ScrollableCollection>)
    #endif
    package var value: (inout SwiftUICore.ScrollTargetRole.TargetCollection) -> Swift.Void {
      get
    }
    package typealias Value = (inout SwiftUICore.ScrollTargetRole.TargetCollection) -> Swift.Void
  }
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var scrollTargetRole: AttributeGraph.OptionalAttribute<SwiftUICore.ScrollTargetRole.Role?> {
    get
    set
  }
  #else
  package var scrollTargetRole: AttributeGraph.OptionalAttribute<SwiftUICore.ScrollTargetRole.Role?> {
    get
    set
  }
  #endif
  package var scrollTargetRemovePreference: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var scrollTargetRole: AttributeGraph.OptionalAttribute<SwiftUICore.ScrollTargetRole.Role?> {
    get
  }
  #else
  package var scrollTargetRole: AttributeGraph.OptionalAttribute<SwiftUICore.ScrollTargetRole.Role?> {
    get
  }
  #endif
  package var scrollTargetRemovePreference: Swift.Bool {
    get
  }
}
extension SwiftUICore.Transaction {
  package var _scrollToRequiresCompleteVisibility: Swift.Bool {
    get
    set
  }
}
package protocol DerivedUnaryLayout : SwiftUICore.UnaryLayout {
  associatedtype Base : SwiftUICore.UnaryLayout where Self.PlacementContextType == Self.Base.PlacementContextType
  var base: Self.Base { get }
}
extension SwiftUICore.DerivedUnaryLayout {
  package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  package func placement(of child: SwiftUICore.LayoutProxy, in context: Self.PlacementContextType) -> SwiftUICore._Placement
  package func layoutPriority(child: SwiftUICore.LayoutProxy) -> Swift.Double
  package func ignoresAutomaticPadding(child: SwiftUICore.LayoutProxy) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _OffsetEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var offset: CoreFoundation.CGSize
  @inlinable @_Concurrency.MainActor @preconcurrency public init(offset: CoreFoundation.CGSize) {
        self.offset = offset
    }
  @_Concurrency.MainActor @preconcurrency public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  @_Concurrency.MainActor @preconcurrency public var animatableData: CoreFoundation.CGSize.AnimatableData {
    get
    set
  }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OffsetEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func == (a: SwiftUICore._OffsetEffect, b: SwiftUICore._OffsetEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = CoreFoundation.CGSize.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func offset(_ offset: CoreFoundation.CGSize) -> some SwiftUICore.View {
        return modifier(_OffsetEffect(offset: offset))
    }
  
  @inlinable nonisolated public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View {
        return offset(CGSize(width: x, height: y))
    }
  
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func repeatingOffset(from: CoreFoundation.CGSize, to: CoreFoundation.CGSize, animation: SwiftUICore.Animation = Animation.default) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static func offset(_ offset: CoreFoundation.CGSize) -> SwiftUICore.AnyTransition
  public static func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.OffsetTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func offset(_ offset: CoreFoundation.CGSize) -> Self { Self(offset) }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> Self {
        offset(CGSize(width: x, height: y))
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct OffsetTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var offset: CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public init(_ offset: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.OffsetTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16OffsetTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.OffsetTransition : Swift.Sendable {
}
extension SwiftUICore._OffsetEffect : SwiftUICore.ProtobufMessage {
  @_Concurrency.MainActor @preconcurrency package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_Concurrency.MainActor @preconcurrency package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyAnimatableData : SwiftUICore.VectorArithmetic {
  package var vtable: SwiftUICore._AnyAnimatableDataVTable.Type
  package var value: Any
  package init<T>(_ container: T) where T : SwiftUICore.Animatable
  package func update<T>(_ container: inout T) where T : SwiftUICore.Animatable
  public static var zero: SwiftUICore._AnyAnimatableData {
    get
  }
  public static func == (lhs: SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData) -> Swift.Bool
  public static func += (lhs: inout SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData)
  public static func -= (lhs: inout SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData)
  @_transparent public static func + (lhs: SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData) -> SwiftUICore._AnyAnimatableData {
        var ret = lhs
        ret += rhs
        return ret
    }
  @_transparent public static func - (lhs: SwiftUICore._AnyAnimatableData, rhs: SwiftUICore._AnyAnimatableData) -> SwiftUICore._AnyAnimatableData {
        var ret = lhs
        ret -= rhs
        return ret
    }
  public mutating func scale(by rhs: Swift.Double)
  public var magnitudeSquared: Swift.Double {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._AnyAnimatableData : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class _AnyAnimatableDataVTable {
  package class var zero: Any {
    get
  }
  package class func isEqual(_ lhs: Any, _ rhs: Any) -> Swift.Bool
  package class func add(_ lhs: inout Any, _ rhs: Any)
  package class func subtract(_ lhs: inout Any, _ rhs: Any)
  package class func negate(_ lhs: inout Any)
  package class func scale(_ lhs: inout Any, by rhs: Swift.Double)
  package class func magnitudeSquared(_ lhs: Any) -> Swift.Double
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore._AnyAnimatableDataVTable : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMonochromeEffect : SwiftUICore.EnvironmentalModifier {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var bias: Swift.Double
  @inlinable @_Concurrency.MainActor @preconcurrency public init(color: SwiftUICore.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) {
        self.color = color
        self.bias = bias
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore._ColorMonochromeEffect._Resolved
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public static var _requiresMainThread: Swift.Bool {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct _Resolved : SwiftUICore.RendererEffect {
    public typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>>>
    @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._ColorMonochromeEffect._Resolved.AnimatableData {
      get
      set
    }
    @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ResolvedModifier = SwiftUICore._ColorMonochromeEffect._Resolved
}
@available(*, unavailable)
extension SwiftUICore._ColorMonochromeEffect._Resolved : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ColorMonochromeEffect : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _colorMonochrome(_ color: SwiftUICore.Color, amount: Swift.Double = 1, bias: Swift.Double = 0) -> some SwiftUICore.View {
        return modifier(_ColorMonochromeEffect(
            color: color, amount: amount, bias: bias))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  @inlinable public func simultaneously<Other>(with other: Other) -> SwiftUICore.SimultaneousGesture<Self, Other> where Other : SwiftUICore.Gesture {
        return SimultaneousGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct SimultaneousGesture<First, Second> : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {
  @frozen public struct Value {
    public var first: First.Value?
    public var second: Second.Value?
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.SimultaneousGesture<First, Second>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUICore.SimultaneousGesture<First, Second>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SimultaneousGesture.Value : Swift.Sendable where First.Value : Swift.Sendable, Second.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.SimultaneousGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SimultaneousGesture : SwiftUICore.PrimitiveDebuggableGesture {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SimultaneousGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUICore.SimultaneousGesture<First, Second>.Value, b: SwiftUICore.SimultaneousGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SimultaneousGesture.Value : Swift.Hashable where First.Value : Swift.Hashable, Second.Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore._GraphInputs {
  package var hasWidgetMetadata: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var hasWidgetMetadata: Swift.Bool {
    get
    set
  }
}
package struct CodableAttributedString {
  package struct Range {
    package var extent: Foundation.NSRange
    package var attributes: [Foundation.NSAttributedString.Key : Any]
  }
  package var base: Foundation.NSAttributedString
  package init(_ base: Foundation.NSAttributedString)
}
extension SwiftUICore.CodableAttributedString : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.CodableAttributedString.Range : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.ArchivedViewCore {
  package static let preferredBundleLanguageKey: Swift.CodingUserInfoKey
  package static let preferredCompositionLanguage: Swift.CodingUserInfoKey
}
extension SwiftUICore.ProtobufEncoder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var preferredBundleLanguage: Swift.String? {
    get
  }
  #else
  package var preferredBundleLanguage: Swift.String? {
    get
  }
  #endif
  package var preferredCompositionLanguage: CoreText_Private.CTCompositionLanguage {
    get
  }
}
extension SwiftUICore.ProtobufDecoder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var preferredBundleLanguage: Swift.String? {
    get
  }
  #else
  package var preferredBundleLanguage: Swift.String? {
    get
  }
  #endif
  package var preferredCompositionLanguage: CoreText_Private.CTCompositionLanguage {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct VStack<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUICore._VStackLayout, Content>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(
            _VStackLayout(alignment: alignment, spacing: spacing)
        ) {
            content()
        }
    }
  #else
  @inlinable nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(
            _VStackLayout(alignment: alignment, spacing: spacing)
        ) {
            content()
        }
    }
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.VStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.VStack : Swift.Sendable {
}
@_spi(ReallyDoNotImport) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "VStackLayout")
extension SwiftUICore.VStack : SwiftUICore.Animatable where Content == SwiftUICore.EmptyView {
  @_spi(ReallyDoNotImport) public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@_spi(ReallyDoNotImport) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "VStackLayout")
extension SwiftUICore.VStack : SwiftUICore.Layout where Content == SwiftUICore.EmptyView {
  @_spi(ReallyDoNotImport) public typealias Cache = SwiftUICore._VStackLayout.Cache
}
@available(*, deprecated, renamed: "VStackLayout")
extension SwiftUICore.VStack : SwiftUICore.DerivedLayout where Content == SwiftUICore.EmptyView {
  package typealias Base = SwiftUICore._VStackLayout
  @_Concurrency.MainActor @preconcurrency package var base: SwiftUICore._VStackLayout {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _VStackLayout {
  public var alignment: SwiftUICore.HorizontalAlignment
  public var spacing: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #else
  @inlinable public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #endif
  package static let majorAxis: SwiftUICore.Axis
}
extension SwiftUICore._VStackLayout : SwiftUICore.HVStack {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias MinorAxisAlignment = SwiftUICore.HorizontalAlignment
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._VStackLayout : SwiftUICore.Layout {
  public typealias Cache = SwiftUICore._StackLayoutCache
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
extension SwiftUICore._VStackLayout : SwiftUICore._VariadicView.ImplicitRoot {
  package static var implicitRoot: SwiftUICore._VStackLayout {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct VStackLayout : SwiftUICore.Layout {
  public var alignment: SwiftUICore.HorizontalAlignment
  public var spacing: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #else
  @inlinable public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #endif
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = SwiftUICore._VStackLayout.Cache
}
extension SwiftUICore.VStackLayout : SwiftUICore.DerivedLayout {
  package var base: SwiftUICore._VStackLayout {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  package typealias Base = SwiftUICore._VStackLayout
}
package struct ArrayWith2Inline<T> {
  package enum Storage {
    case empty, one(T), two(T, T), many(Swift.ContiguousArray<T>)
  }
  package typealias Element = T
  package var storage: SwiftUICore.ArrayWith2Inline<T>.Storage
  package init()
  package init(_ first: T)
  package init(_ first: T, _ second: T)
  package init<S>(_ s: S) where T == S.Element, S : Swift.Sequence
}
extension SwiftUICore.ArrayWith2Inline : Swift.RandomAccessCollection, Swift.MutableCollection {
  package var startIndex: Swift.Int {
    get
  }
  package var endIndex: Swift.Int {
    get
  }
  package subscript(i: Swift.Int) -> T {
    get
    set
  }
  package func index(after i: Swift.Int) -> Swift.Int
  package func index(before i: Swift.Int) -> Swift.Int
  package func index(_ i: Swift.Int, offsetBy offset: Swift.Int) -> Swift.Int
  package func distance(from i: Swift.Int, to j: Swift.Int) -> Swift.Int
  package func _copyToContiguousArray() -> Swift.ContiguousArray<SwiftUICore.ArrayWith2Inline<T>.Element>
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<Swift.Int>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.ArrayWith2Inline<T>>
  package typealias SubSequence = Swift.Slice<SwiftUICore.ArrayWith2Inline<T>>
}
extension SwiftUICore.ArrayWith2Inline {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func withUnsafeMutableBufferPointer<R>(_ body: (inout Swift.UnsafeMutableBufferPointer<SwiftUICore.ArrayWith2Inline<T>.Element>) throws -> R) rethrows -> R
  #else
  @inline(__always) package mutating func withUnsafeMutableBufferPointer<R>(_ body: (inout Swift.UnsafeMutableBufferPointer<SwiftUICore.ArrayWith2Inline<T>.Element>) throws -> R) rethrows -> R
  #endif
}
extension SwiftUICore.ArrayWith2Inline {
  package mutating func append(_ x: T)
  package mutating func reserveCapacity(_ n: Swift.Int)
  package mutating func removeAll(keepingCapacity: Swift.Bool = false)
}
extension SwiftUICore.ArrayWith2Inline : Swift.RangeReplaceableCollection {
  package mutating func replaceSubrange<C>(_ target: Swift.Range<Swift.Int>, with source: C) where T == C.Element, C : Swift.Collection
}
extension SwiftUICore.ArrayWith2Inline : Swift.Equatable where T : Swift.Equatable {
  package static func == (lhs: SwiftUICore.ArrayWith2Inline<T>, rhs: SwiftUICore.ArrayWith2Inline<T>) -> Swift.Bool
}
extension SwiftUICore.ArrayWith2Inline : Swift.ExpressibleByArrayLiteral {
  package init(arrayLiteral: SwiftUICore.ArrayWith2Inline<T>.Element...)
  package typealias ArrayLiteralElement = SwiftUICore.ArrayWith2Inline<T>.Element
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum Edge : Swift.Int8, Swift.CaseIterable {
  case top, leading, bottom, trailing
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.Edge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let top: SwiftUICore.Edge.Set
    public static let leading: SwiftUICore.Edge.Set
    public static let bottom: SwiftUICore.Edge.Set
    public static let trailing: SwiftUICore.Edge.Set
    public static let all: SwiftUICore.Edge.Set
    public static let horizontal: SwiftUICore.Edge.Set
    public static let vertical: SwiftUICore.Edge.Set
    public init(_ e: SwiftUICore.Edge)
    package func contains(_ e: SwiftUICore.Edge) -> Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ArrayLiteralElement = SwiftUICore.Edge.Set.Element
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.Edge]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUICore.Edge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge {
  @_alwaysEmitIntoClient internal init(vertical edge: SwiftUICore.VerticalEdge) {
        self = Edge(rawValue: edge.rawValue << 1).unsafelyUnwrapped
    }
  package init(_vertical edge: SwiftUICore.VerticalEdge)
  @_alwaysEmitIntoClient internal init(horizontal edge: SwiftUICore.HorizontalEdge) {
        self = Edge(rawValue: 1 &+ (edge.rawValue << 1)).unsafelyUnwrapped
    }
  package init(_horizontal edge: SwiftUICore.HorizontalEdge)
}
extension SwiftUICore.Edge {
  package var opposite: SwiftUICore.Edge {
    get
  }
}
extension SwiftUICore.Edge.Set {
  package init(_ axes: SwiftUICore.Axis.Set)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum HorizontalEdge : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case leading
  case trailing
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.HorizontalEdge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let leading: SwiftUICore.HorizontalEdge.Set
    public static let trailing: SwiftUICore.HorizontalEdge.Set
    public static let all: SwiftUICore.HorizontalEdge.Set
    public init(_ edge: SwiftUICore.HorizontalEdge)
    package func contains(_ e: SwiftUICore.HorizontalEdge) -> Swift.Bool
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.HorizontalEdge.Set.Element
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUICore.HorizontalEdge]
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUICore.HorizontalEdge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum VerticalEdge : Swift.Int8, Swift.CaseIterable, Swift.Codable {
  case top
  case bottom
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.VerticalEdge.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let top: SwiftUICore.VerticalEdge.Set
    public static let bottom: SwiftUICore.VerticalEdge.Set
    public static let all: SwiftUICore.VerticalEdge.Set
    public init(_ e: SwiftUICore.VerticalEdge)
    package func contains(_ e: SwiftUICore.VerticalEdge) -> Swift.Bool
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.VerticalEdge.Set.Element
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUICore.VerticalEdge]
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUICore.VerticalEdge] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
extension SwiftUICore.Edge.Set : SwiftUICore.CustomViewDebugValueConvertible {
  package var viewDebugValue: Any {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ViewDimensions {
  package let guideComputer: SwiftUICore.LayoutComputer
  public var width: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  package var size: SwiftUICore.ViewSize
  package init(guideComputer: SwiftUICore.LayoutComputer, size: SwiftUICore.ViewSize)
  package init(guideComputer: SwiftUICore.LayoutComputer, size: CoreFoundation.CGSize, proposal: SwiftUICore._ProposedSize)
  public subscript(guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat {
    get
  }
  public subscript(guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(explicit guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #else
  public subscript(explicit guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(explicit guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #else
  public subscript(explicit guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #endif
}
@available(*, unavailable)
extension SwiftUICore.ViewDimensions : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewDimensions : Swift.Equatable {
  public static func == (lhs: SwiftUICore.ViewDimensions, rhs: SwiftUICore.ViewDimensions) -> Swift.Bool
}
package struct ViewOrigin : Swift.Equatable {
  package var value: CoreFoundation.CGPoint {
    get
    set
  }
  @inlinable package init(invalid: Swift.Void)
  @inlinable package init(_ value: CoreFoundation.CGPoint)
  @inlinable package init()
  package var x: CoreFoundation.CGFloat {
    @inlinable get
    @inlinable set
  }
  package var y: CoreFoundation.CGFloat {
    @inlinable get
    @inlinable set
  }
  package static func == (a: SwiftUICore.ViewOrigin, b: SwiftUICore.ViewOrigin) -> Swift.Bool
}
extension SwiftUICore.ViewOrigin {
  package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get
    set
  }
}
extension SwiftUICore.ViewOrigin : SwiftUICore.Animatable {
  package typealias AnimatableData = CoreFoundation.CGPoint.AnimatableData
  package var animatableData: SwiftUICore.ViewOrigin.AnimatableData {
    get
    set
  }
}
package struct ViewSize : Swift.Equatable {
  package var value: CoreFoundation.CGSize
  @inlinable package init(_ size: CoreFoundation.CGSize, proposal: SwiftUICore._ProposedSize)
  @inlinable package static func fixed(_ size: CoreFoundation.CGSize) -> SwiftUICore.ViewSize
  @inlinable package var width: CoreFoundation.CGFloat {
    @inlinable get
    @inlinable set
  }
  package var height: CoreFoundation.CGFloat {
    @inlinable get
    @inlinable set
  }
  package var proposal: SwiftUICore._ProposedSize {
    @inlinable get
    @inlinable set
  }
  package mutating func didSetAnimatableData(_ value: CoreFoundation.CGSize)
  package static func == (lhs: SwiftUICore.ViewSize, rhs: SwiftUICore.ViewSize) -> Swift.Bool
  package static var zero: SwiftUICore.ViewSize {
    get
  }
  package static var invalidValue: SwiftUICore.ViewSize {
    get
  }
}
extension SwiftUICore.ViewSize {
  package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get
    set
  }
  package func inset(by insets: SwiftUICore.EdgeInsets) -> SwiftUICore.ViewSize
}
extension SwiftUICore.ViewSize : SwiftUICore.Animatable {
  package typealias AnimatableData = CoreFoundation.CGSize.AnimatableData
  package var animatableData: SwiftUICore.ViewSize.AnimatableData {
    get
    set
  }
}
package struct ViewGeometry : Swift.Equatable {
  package var origin: SwiftUICore.ViewOrigin
  package var dimensions: SwiftUICore.ViewDimensions
  package init(origin: SwiftUICore.ViewOrigin, dimensions: SwiftUICore.ViewDimensions)
  package init(dimensions: SwiftUICore.ViewDimensions)
  package init(origin: CoreFoundation.CGPoint, dimensions: SwiftUICore.ViewDimensions)
  package init(placement p: SwiftUICore._Placement, dimensions d: SwiftUICore.ViewDimensions)
  package subscript(guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat {
    get
  }
  package subscript(guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(explicit guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #else
  package subscript(explicit guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(explicit guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #else
  package subscript(explicit guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.ViewGeometry, b: SwiftUICore.ViewGeometry) -> Swift.Bool
}
package struct ViewFrame : Swift.Equatable {
  package var origin: SwiftUICore.ViewOrigin
  package var size: SwiftUICore.ViewSize
  @inlinable package init(origin: SwiftUICore.ViewOrigin, size: SwiftUICore.ViewSize)
  @inlinable package init(size: SwiftUICore.ViewSize)
  package static func == (a: SwiftUICore.ViewFrame, b: SwiftUICore.ViewFrame) -> Swift.Bool
}
extension SwiftUICore.ViewFrame {
  package mutating func round(toMultipleOf m: CoreFoundation.CGFloat)
}
extension SwiftUICore.ViewFrame : SwiftUICore.Animatable {
  package var animatableData: CoreFoundation.CGRect.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnimatableData = CoreFoundation.CGRect.AnimatableData
}
extension AttributeGraph.Attribute where Value == SwiftUICore.ViewGeometry {
  package func origin() -> AttributeGraph.Attribute<SwiftUICore.ViewOrigin>
  package func size() -> AttributeGraph.Attribute<SwiftUICore.ViewSize>
}
extension AttributeGraph.Attribute where Value == SwiftUICore.ViewSize {
  package var cgSize: AttributeGraph.Attribute<CoreFoundation.CGSize> {
    get
  }
}
extension CoreFoundation.CGRect {
  package init(_ frame: SwiftUICore.ViewFrame)
}
extension SwiftUICore.ViewDimensions {
  package static let invalidValue: SwiftUICore.ViewDimensions
  package static let zero: SwiftUICore.ViewDimensions
  package func at(_ topLeadingCorner: CoreFoundation.CGPoint) -> SwiftUICore.ViewGeometry
  package func centered(in setting: CoreFoundation.CGSize) -> SwiftUICore.ViewGeometry
  package subscript(key: SwiftUICore.AlignmentKey) -> CoreFoundation.CGFloat {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(explicit key: SwiftUICore.AlignmentKey) -> CoreFoundation.CGFloat? {
    get
  }
  #else
  package subscript(explicit key: SwiftUICore.AlignmentKey) -> CoreFoundation.CGFloat? {
    get
  }
  #endif
}
extension SwiftUICore.ViewGeometry {
  package var frame: CoreFoundation.CGRect {
    get
  }
  package static let invalidValue: SwiftUICore.ViewGeometry
  package var isInvalid: Swift.Bool {
    get
  }
  package static let zero: SwiftUICore.ViewGeometry
  package subscript(key: SwiftUICore.AlignmentKey) -> CoreFoundation.CGFloat {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(explicit key: SwiftUICore.AlignmentKey) -> CoreFoundation.CGFloat? {
    get
  }
  #else
  package subscript(explicit key: SwiftUICore.AlignmentKey) -> CoreFoundation.CGFloat? {
    get
  }
  #endif
  package mutating func finalizeLayoutDirection(_ layoutDirection: SwiftUICore.LayoutDirection, parentSize: CoreFoundation.CGSize)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _FixedSizeLayout {
  @inlinable public init(horizontal: Swift.Bool = true, vertical: Swift.Bool = true) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  @usableFromInline
  internal var horizontal: Swift.Bool
  @usableFromInline
  internal var vertical: Swift.Bool
}
extension SwiftUICore._FixedSizeLayout : SwiftUICore.UnaryLayout {
  package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func fixedSize(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUICore.View {
        return modifier(
            _FixedSizeLayout(horizontal: horizontal, vertical: vertical))
    }
  
  @inlinable nonisolated public func fixedSize() -> some SwiftUICore.View {
         
         
        return fixedSize(horizontal: true, vertical: true)
    }
  
}
package struct _DisplayList_StableIdentity : Swift.Hashable, Swift.Codable {
  package var hash: SwiftUICore.StrongHash
  package var serial: Swift.UInt32
  package init(hash: SwiftUICore.StrongHash, serial: Swift.UInt32)
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore._DisplayList_StableIdentity, b: SwiftUICore._DisplayList_StableIdentity) -> Swift.Bool
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
package struct _DisplayList_StableIdentityMap {
  package var map: [SwiftUICore._DisplayList_Identity : SwiftUICore._DisplayList_StableIdentity]
  package init()
  package var isEmpty: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(index: SwiftUICore._DisplayList_Identity) -> SwiftUICore._DisplayList_StableIdentity? {
    get
    set
  }
  #else
  package subscript(index: SwiftUICore._DisplayList_Identity) -> SwiftUICore._DisplayList_StableIdentity? {
    get
    set
  }
  #endif
  package mutating func formUnion(_ other: SwiftUICore._DisplayList_StableIdentityMap)
}
final package class _DisplayList_StableIdentityRoot {
  package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package subscript(index: SwiftUICore._DisplayList_Identity) -> SwiftUICore._DisplayList_StableIdentity? {
    get
  }
  #else
  final package subscript(index: SwiftUICore._DisplayList_Identity) -> SwiftUICore._DisplayList_StableIdentity? {
    get
  }
  #endif
  @objc deinit
}
package struct _DisplayList_StableIdentityScope : SwiftUICore.ViewInput, SwiftUICore._ViewTraitKey {
  package typealias Value = AttributeGraph.WeakAttribute<SwiftUICore._DisplayList_StableIdentityScope>
  package static let defaultValue: SwiftUICore._DisplayList_StableIdentityScope.Value
  package let root: SwiftUICore._DisplayList_StableIdentityRoot
  package let hash: SwiftUICore.StrongHash
  package var map: SwiftUICore._DisplayList_StableIdentityMap
  package var serial: Swift.UInt32
  package init(root: SwiftUICore._DisplayList_StableIdentityRoot)
  package init<ID>(id: ID, parent: SwiftUICore._DisplayList_StableIdentityScope) where ID : SwiftUICore.StronglyHashable
  package mutating func makeIdentity() -> SwiftUICore._DisplayList_StableIdentity
  package mutating func pushIdentity(_ identity: SwiftUICore._DisplayList_Identity)
}
extension SwiftUICore._DisplayList_StableIdentity : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._DisplayList_StableIdentityMap : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._ViewInputs {
  package mutating func configureStableIDs(root: SwiftUICore._DisplayList_StableIdentityRoot)
  package func pushIdentity(_ identity: SwiftUICore._DisplayList_Identity)
  package func makeStableIdentity() -> SwiftUICore._DisplayList_StableIdentity
}
extension SwiftUICore._GraphInputs {
  package mutating func pushStableID<ID>(_ id: ID) where ID : Swift.Hashable
  package mutating func pushStableIndex(_ index: Swift.Int)
  package mutating func pushStableType(_ type: any Any.Type)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var stableIDScope: AttributeGraph.WeakAttribute<SwiftUICore._DisplayList_StableIdentityScope>? {
    get
  }
  #else
  package var stableIDScope: AttributeGraph.WeakAttribute<SwiftUICore._DisplayList_StableIdentityScope>? {
    get
  }
  #endif
}
package func makeStableTypeData(_ type: any Any.Type) -> SwiftUICore.StrongHash
#if compiler(>=5.3) && $NoncopyableGenerics
package func makeStableIDData<ID>(from id: ID) -> SwiftUICore.StrongHash?
#else
package func makeStableIDData<ID>(from id: ID) -> SwiftUICore.StrongHash?
#endif
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
package protocol PrimitiveCustomHoverContextEffect : SwiftUICore.PrimitiveCustomHoverEffect {
  func updateContext(_ context: inout SwiftUICore.CustomHoverEffectContext, identity: SwiftUICore.DisplayList.Identity)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func makeContextValue() -> SwiftUICore.CustomHoverEffectContext.Value?
  #else
  func makeContextValue() -> SwiftUICore.CustomHoverEffectContext.Value?
  #endif
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.PrimitiveCustomHoverContextEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
  package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    get
  }
  package func updateContext(_ context: inout SwiftUICore.CustomHoverEffectContext, identity: SwiftUICore.DisplayList.Identity)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static let `default`: SwiftUICore.Animation
  package static let defaultCustomAnimation: SwiftUICore.DefaultAnimation
}
package struct DefaultAnimation : SwiftUICore.InternalCustomAnimation {
  package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  package func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
  package var function: SwiftUICore.Animation.Function {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.DefaultAnimation, b: SwiftUICore.DefaultAnimation) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.DefaultAnimation : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafePointer {
  package subscript() -> Pointee {
    @_transparent unsafeAddress
  }
  package static var null: Swift.UnsafePointer<Pointee> {
    @_transparent get
  }
}
#else
extension Swift.UnsafePointer {
  package subscript() -> Pointee {
    @_transparent unsafeAddress
  }
  package static var null: Swift.UnsafePointer<Pointee> {
    @_transparent get
  }
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafeMutablePointer {
  package subscript() -> Pointee {
    @_transparent unsafeAddress
    @_transparent nonmutating unsafeMutableAddress
  }
  package static var null: Swift.UnsafeMutablePointer<Pointee> {
    @_transparent get
  }
}
#else
extension Swift.UnsafeMutablePointer {
  package subscript() -> Pointee {
    @_transparent unsafeAddress
    @_transparent nonmutating unsafeMutableAddress
  }
  package static var null: Swift.UnsafeMutablePointer<Pointee> {
    @_transparent get
  }
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafeBufferPointer {
  package var startAddress: Swift.UnsafePointer<Element> {
    @_transparent get
  }
}
#else
extension Swift.UnsafeBufferPointer {
  package var startAddress: Swift.UnsafePointer<Element> {
    @_transparent get
  }
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafeMutableBufferPointer {
  package var startAddress: Swift.UnsafeMutablePointer<Element> {
    @_transparent get
  }
}
#else
extension Swift.UnsafeMutableBufferPointer {
  package var startAddress: Swift.UnsafeMutablePointer<Element> {
    @_transparent get
  }
}
#endif
extension SwiftUICore.AccessibilityProperties {
  package struct ActivationPointKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.AccessibilityActivationPointStorage.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityActivationPointStorage
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityActivationPointStorage>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var activationPointStorage: SwiftUICore.AccessibilityActivationPointStorage? {
    get
    set
  }
  #else
  package var activationPointStorage: SwiftUICore.AccessibilityActivationPointStorage? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var activationPoint: SwiftUICore.AccessibilityActivationPoint.Location? {
    get
  }
  #else
  package var activationPoint: SwiftUICore.AccessibilityActivationPoint.Location? {
    get
  }
  #endif
  package struct ChartDescriptorKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static var valueType: SwiftUICore.AccessibilityChartDescriptorStorage.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityChartDescriptorStorage
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityChartDescriptorStorage>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var chartDescriptor: SwiftUICore.AccessibilityChartDescriptorStorage? {
    get
    set
  }
  #else
  package var chartDescriptor: SwiftUICore.AccessibilityChartDescriptorStorage? {
    get
    set
  }
  #endif
  package struct ChildBehaviorKind : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static var valueType: SwiftUICore.AccessibilityChildBehaviorKind.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityChildBehaviorKind
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityChildBehaviorKind>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var childBehaviorKind: SwiftUICore.AccessibilityChildBehaviorKind? {
    get
    set
  }
  #else
  package var childBehaviorKind: SwiftUICore.AccessibilityChildBehaviorKind? {
    get
    set
  }
  #endif
  package struct CustomContentListKey : SwiftUICore.AccessibilityPropertiesKey {
    package static let defaultValue: SwiftUICore.AccessibilityCustomContentList
    package typealias PropertyValue = SwiftUICore.AccessibilityCustomContentList
  }
  package var customContentList: SwiftUICore.AccessibilityCustomContentList {
    get
    set
  }
  package struct CustomAttributesKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.AccessibilityCustomAttributes.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityCustomAttributes
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityCustomAttributes>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var customAttributes: SwiftUICore.AccessibilityCustomAttributes? {
    get
    set
  }
  #else
  package var customAttributes: SwiftUICore.AccessibilityCustomAttributes? {
    get
    set
  }
  #endif
  package struct DataSeriesConfigurationKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static var valueType: SwiftUICore.AccessibilityDataSeriesConfiguration.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityDataSeriesConfiguration
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityDataSeriesConfiguration>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var dataSeriesConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration? {
    get
    set
  }
  #else
  package var dataSeriesConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration? {
    get
    set
  }
  #endif
  package struct AutomationTypeKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static var valueType: libAccessibilityPrivate.AXAutomationType.Type
    package typealias NonOptionalPropertyValue = libAccessibilityPrivate.AXAutomationType
    package typealias PropertyValue = Swift.Optional<libAccessibilityPrivate.AXAutomationType>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var explicitAutomationType: libAccessibilityPrivate.AXAutomationType? {
    get
    set
  }
  #else
  package var explicitAutomationType: libAccessibilityPrivate.AXAutomationType? {
    get
    set
  }
  #endif
  package struct IdentifierKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.AccessibilityIdentifierStorage.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityIdentifierStorage
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityIdentifierStorage>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var identifierStorage: SwiftUICore.AccessibilityIdentifierStorage? {
    get
    set
  }
  #else
  package var identifierStorage: SwiftUICore.AccessibilityIdentifierStorage? {
    get
    set
  }
  #endif
  package struct HintsKey : SwiftUICore.AccessibilityPropertiesKey {
    package static let defaultValue: [SwiftUICore.Text]
    package typealias PropertyValue = [SwiftUICore.Text]
  }
  package var hints: [SwiftUICore.Text] {
    get
    set
  }
  package struct InputLabelsKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: [SwiftUICore.Text].Type
    package typealias NonOptionalPropertyValue = [SwiftUICore.Text]
    package typealias PropertyValue = Swift.Optional<[SwiftUICore.Text]>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var inputLabels: [SwiftUICore.Text]? {
    get
    set
  }
  #else
  package var inputLabels: [SwiftUICore.Text]? {
    get
    set
  }
  #endif
  package struct LabelKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.AccessibilityLabelStorage.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityLabelStorage
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityLabelStorage>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var labelStorage: SwiftUICore.AccessibilityLabelStorage? {
    get
    set
  }
  #else
  package var labelStorage: SwiftUICore.AccessibilityLabelStorage? {
    get
    set
  }
  #endif
  package struct LocaleKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: Foundation.Locale.Type
    package typealias NonOptionalPropertyValue = Foundation.Locale
    package typealias PropertyValue = Swift.Optional<Foundation.Locale>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var locale: Foundation.Locale? {
    get
    set
  }
  #else
  package var locale: Foundation.Locale? {
    get
    set
  }
  #endif
  package struct LinkDestinationKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.LinkDestination.Configuration.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.LinkDestination.Configuration
    package typealias PropertyValue = Swift.Optional<SwiftUICore.LinkDestination.Configuration>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var linkDestination: SwiftUICore.LinkDestination.Configuration? {
    get
    set
  }
  #else
  package var linkDestination: SwiftUICore.LinkDestination.Configuration? {
    get
    set
  }
  #endif
  package struct RoleDescriptionKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.Text.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.Text
    package typealias PropertyValue = Swift.Optional<SwiftUICore.Text>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var roleDescription: SwiftUICore.Text? {
    get
    set
  }
  #else
  package var roleDescription: SwiftUICore.Text? {
    get
    set
  }
  #endif
  package struct SortPriorityKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: Swift.Double.Type
    package typealias NonOptionalPropertyValue = Swift.Double
    package typealias PropertyValue = Swift.Optional<Swift.Double>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var sortPriority: Swift.Double? {
    get
    set
  }
  #else
  package var sortPriority: Swift.Double? {
    get
    set
  }
  #endif
  package struct TextContentTypeKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.AccessibilityTextContentType.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityTextContentType
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityTextContentType>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var textContentType: SwiftUICore.AccessibilityTextContentType? {
    get
    set
  }
  #else
  package var textContentType: SwiftUICore.AccessibilityTextContentType? {
    get
    set
  }
  #endif
  package struct TextHeadingLevelKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.AccessibilityHeadingLevel.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityHeadingLevel
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityHeadingLevel>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var textHeadingLevel: SwiftUICore.AccessibilityHeadingLevel? {
    get
    set
  }
  #else
  package var textHeadingLevel: SwiftUICore.AccessibilityHeadingLevel? {
    get
    set
  }
  #endif
  package struct TraitsKey : SwiftUICore.AccessibilityPropertiesKey {
    package static let defaultValue: SwiftUICore.AccessibilityTraitStorage
    package typealias PropertyValue = SwiftUICore.AccessibilityTraitStorage
  }
  package var traits: SwiftUICore.AccessibilityTraitStorage {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(trait trait: SwiftUICore.AccessibilityTrait) -> Swift.Bool? {
    get
    set
  }
  #else
  package subscript(trait trait: SwiftUICore.AccessibilityTrait) -> Swift.Bool? {
    get
    set
  }
  #endif
  package subscript(trait trait: SwiftUICore.AccessibilityTrait, default defaultValue: Swift.Bool) -> Swift.Bool {
    get
  }
  package struct ValueKey : SwiftUICore.AccessibilityOptionalPropertiesKey {
    package static let valueType: SwiftUICore.AccessibilityValueStorage.Type
    package typealias NonOptionalPropertyValue = SwiftUICore.AccessibilityValueStorage
    package typealias PropertyValue = Swift.Optional<SwiftUICore.AccessibilityValueStorage>
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var value: SwiftUICore.AccessibilityValueStorage? {
    get
    set
  }
  #else
  package var value: SwiftUICore.AccessibilityValueStorage? {
    get
    set
  }
  #endif
  package struct VisibilityKey : SwiftUICore.AccessibilityPropertiesKey {
    package static let defaultValue: SwiftUICore.AccessibilityVisibilityStorage
    package typealias PropertyValue = SwiftUICore.AccessibilityVisibilityStorage
  }
  package var visibility: SwiftUICore.AccessibilityVisibilityStorage {
    get
    set
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol CustomHoverEffect {
  associatedtype Body : SwiftUICore.CustomHoverEffect
  typealias Content = SwiftUICore.EmptyHoverEffect
  func body(content: Self.Content) -> Self.Body
  static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyHoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.PrimitiveCustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<SwiftUICore.EmptyHoverEffect>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
  package init()
  package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    get
  }
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.EmptyHoverEffect : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUICore.EmptyHoverEffect {
  public static var empty: SwiftUICore.EmptyHoverEffect {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct _CustomHoverEffectInputs {
  package var base: SwiftUICore._ViewInputs
  package var context: AttributeGraph.Attribute<SwiftUICore.CustomHoverEffectContext> {
    get
  }
  package init(base: SwiftUICore._ViewInputs, context: AttributeGraph.Attribute<SwiftUICore.CustomHoverEffectContext>)
  package func makeIndirectOutputs() -> SwiftUICore._CustomHoverEffectOutputs
  package mutating func updateContext(_ newContext: AttributeGraph.Attribute<SwiftUICore.CustomHoverEffectContext>)
  package mutating func removeContextFromEnvironment()
  package mutating func applyImplicitContextIfNeeded()
}
@available(*, unavailable)
extension SwiftUICore._CustomHoverEffectInputs : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct _CustomHoverEffectOutputs {
  package var base: SwiftUICore._ViewOutputs
  package init(base: SwiftUICore._ViewOutputs)
}
@available(*, unavailable)
extension SwiftUICore._CustomHoverEffectOutputs : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
package protocol PrimitiveCustomHoverEffect : SwiftUICore.InternalCustomHoverEffect where Self.Body == Swift.Never {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self.Body == Swift.Never {
  public func body(content: Self.Content) -> Self.Body
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUICore.CustomHoverEffect {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
package protocol InternalCustomHoverEffect : SwiftUICore.CustomHoverEffect {
  var systemHoverEffect: SwiftUICore.SystemHoverEffect { get }
}
package struct SystemHoverEffect {
  package var info: SwiftUICore.SystemHoverEffect.Info?
  package var isEnabled: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(info: SwiftUICore.SystemHoverEffect.Info? = nil, isEnabled: Swift.Bool = true)
  #else
  package init(info: SwiftUICore.SystemHoverEffect.Info? = nil, isEnabled: Swift.Bool = true)
  #endif
  package enum Style : Swift.Equatable {
    case automatic
    case highlight
    case lift
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.SystemHoverEffect.Style, b: SwiftUICore.SystemHoverEffect.Style) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct Info : Swift.Equatable {
    package var style: SwiftUICore.SystemHoverEffect.Style
    package init(_ style: SwiftUICore.SystemHoverEffect.Style)
    package static func == (a: SwiftUICore.SystemHoverEffect.Info, b: SwiftUICore.SystemHoverEffect.Info) -> Swift.Bool
  }
  package struct Resolved : Swift.Equatable {
    package var info: SwiftUICore.SystemHoverEffect.Info
    package var isEnabled: Swift.Bool
    package init(info: SwiftUICore.SystemHoverEffect.Info, isEnabled: Swift.Bool)
    package static func == (a: SwiftUICore.SystemHoverEffect.Resolved, b: SwiftUICore.SystemHoverEffect.Resolved) -> Swift.Bool
  }
  package func resolve() -> SwiftUICore.SystemHoverEffect.Resolved
  package func merge(with child: SwiftUICore.SystemHoverEffect) -> SwiftUICore.SystemHoverEffect
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var customHoverEffectContext: SwiftUICore.CustomHoverEffectContext? {
    get
    set
  }
  #else
  package var customHoverEffectContext: SwiftUICore.CustomHoverEffectContext? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color : SwiftUICore.ShapeStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  package func resolvePaint(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.Color>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
}
extension SwiftUICore.ColorProvider {
  package func apply(color: SwiftUICore.Color, to shape: inout SwiftUICore._ShapeStyle_Shape)
  package func _apply(color: SwiftUICore.Color, to shape: inout SwiftUICore._ShapeStyle_Shape)
}
extension SwiftUICore.Color.Resolved : SwiftUICore.ResolvedPaint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #else
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #endif
}
extension Swift.BidirectionalCollection where Self : Swift.MutableCollection, Self.Element : Swift.Comparable {
  package mutating func insertionSort()
}
extension Swift.BidirectionalCollection where Self : Swift.MutableCollection {
  package mutating func insertionSort(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Swift.Bool) rethrows
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  @inlinable public func exclusively<Other>(before other: Other) -> SwiftUICore.ExclusiveGesture<Self, Other> where Other : SwiftUICore.Gesture {
        return ExclusiveGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ExclusiveGesture<First, Second> : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(Second.Value)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.ExclusiveGesture<First, Second>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUICore.ExclusiveGesture<First, Second>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ExclusiveGesture.Value : Swift.Sendable where First.Value : Swift.Sendable, Second.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.ExclusiveGesture : Swift.Sendable {
}
extension SwiftUICore.ExclusiveGesture : SwiftUICore.PrimitiveDebuggableGesture {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ExclusiveGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUICore.ExclusiveGesture<First, Second>.Value, b: SwiftUICore.ExclusiveGesture<First, Second>.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _RotationEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var angle: SwiftUICore.Angle
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.UnitPoint
  @inlinable @_Concurrency.MainActor @preconcurrency public init(angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) {
        self.angle = angle
        self.anchor = anchor
    }
  package struct Data {
    package var angle: SwiftUICore.Angle
    package var anchor: CoreFoundation.CGPoint
    package init()
    package init(_ effect: SwiftUICore._RotationEffect, size: CoreFoundation.CGSize, layoutDirection: SwiftUICore.LayoutDirection = .leftToRight)
    package var transform: CoreFoundation.CGAffineTransform {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.Angle.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._RotationEffect.AnimatableData {
    get
    set
  }
  nonisolated public static func == (a: SwiftUICore._RotationEffect, b: SwiftUICore._RotationEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func rotationEffect(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return modifier(_RotationEffect(angle: angle, anchor: anchor))
    }
  
}
extension SwiftUICore._RotationEffect : SwiftUICore.ProtobufMessage {
  @_Concurrency.MainActor @preconcurrency package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_Concurrency.MainActor @preconcurrency package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._RotationEffect.Data : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyGradient : Swift.Hashable, SwiftUICore.ShapeStyle, Swift.Sendable {
  package var provider: SwiftUICore.AnyGradientBox
  package init(box: SwiftUICore.AnyGradientBox)
  package init<P>(provider: P) where P : SwiftUICore.GradientProvider
  public init(_ gradient: SwiftUICore.Gradient)
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ResolvedGradient
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.AnyGradient, rhs: SwiftUICore.AnyGradient) -> Swift.Bool
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
  public var hashValue: Swift.Int {
    get
  }
}
package protocol GradientProvider : Swift.Hashable {
  func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ResolvedGradient
  #if compiler(>=5.3) && $NoncopyableGenerics
  func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
}
extension SwiftUICore.GradientProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
}
extension SwiftUICore.Gradient : SwiftUICore.GradientProvider {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyGradientBox : SwiftUICore.AnyShapeStyleBox, @unchecked Swift.Sendable {
  final package func apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ResolvedGradient
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  package func hash(into hasher: inout Swift.Hasher)
  @objc @usableFromInline
  deinit
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.LinearGradient {
  @_alwaysEmitIntoClient public static func linearGradient(_ gradient: SwiftUICore.AnyGradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) -> some SwiftUICore.ShapeStyle {
        return _AnyLinearGradient(gradient: gradient,
            startPoint: startPoint, endPoint: endPoint)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.RadialGradient {
  @_alwaysEmitIntoClient public static func radialGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startRadius: CoreFoundation.CGFloat = 0, endRadius: CoreFoundation.CGFloat) -> some SwiftUICore.ShapeStyle {
        return _AnyRadialGradient(gradient: gradient, center: center,
            startRadius: startRadius, endRadius: endRadius)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.EllipticalGradient {
  @_alwaysEmitIntoClient public static func ellipticalGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat = 0, endRadiusFraction: CoreFoundation.CGFloat = 0.5) -> some SwiftUICore.ShapeStyle {
        return _AnyEllipticalGradient(gradient: gradient, center: center,
            startRadiusFraction: startRadiusFraction,
            endRadiusFraction: endRadiusFraction)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AngularGradient {
  @_alwaysEmitIntoClient public static func angularGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle) -> some SwiftUICore.ShapeStyle {
        return _AnyAngularGradient(gradient: gradient, center: center,
            startAngle: startAngle, endAngle: endAngle)
    }
  
  @_alwaysEmitIntoClient public static func conicGradient(_ gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, angle: SwiftUICore.Angle = .zero) -> some SwiftUICore.ShapeStyle {
        return _AnyAngularGradient(gradient: gradient, center: center,
            startAngle: angle, endAngle: angle + .radians(2 * .pi))
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyLinearGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var startPoint: SwiftUICore.UnitPoint
  @usableFromInline
  internal var endPoint: SwiftUICore.UnitPoint
  @inlinable internal init(gradient: SwiftUICore.AnyGradient, startPoint: SwiftUICore.UnitPoint, endPoint: SwiftUICore.UnitPoint) {
        self.gradient = gradient
        self.startPoint = startPoint
        self.endPoint = endPoint
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyRadialGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var center: SwiftUICore.UnitPoint
  @usableFromInline
  internal var startRadius: CoreFoundation.CGFloat
  @usableFromInline
  internal var endRadius: CoreFoundation.CGFloat
  @inlinable internal init(gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat) {
        self.gradient = gradient
        self.center = center
        self.startRadius = startRadius
        self.endRadius = endRadius
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyEllipticalGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var center: SwiftUICore.UnitPoint
  @usableFromInline
  internal var startRadiusFraction: CoreFoundation.CGFloat
  @usableFromInline
  internal var endRadiusFraction: CoreFoundation.CGFloat
  @inlinable internal init(gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint = .center, startRadiusFraction: CoreFoundation.CGFloat, endRadiusFraction: CoreFoundation.CGFloat) {
        self.gradient = gradient
        self.center = center
        self.startRadiusFraction = startRadiusFraction
        self.endRadiusFraction = endRadiusFraction
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnyAngularGradient : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var gradient: SwiftUICore.AnyGradient
  @usableFromInline
  internal var center: SwiftUICore.UnitPoint
  @usableFromInline
  internal var startAngle: SwiftUICore.Angle
  @usableFromInline
  internal var endAngle: SwiftUICore.Angle
  @usableFromInline
  internal init(gradient: SwiftUICore.AnyGradient, center: SwiftUICore.UnitPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
package enum EitherGradient : Swift.Hashable {
  case gradient(SwiftUICore.Gradient)
  case anyGradient(SwiftUICore.AnyGradient)
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ResolvedGradient
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  package func fallbackColor(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var constantColor: SwiftUICore.Color? {
    get
  }
  #else
  package var constantColor: SwiftUICore.Color? {
    get
  }
  #endif
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.EitherGradient, b: SwiftUICore.EitherGradient) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct _ViewModifier_Content<Modifier> : SwiftUICore.View where Modifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._ViewModifier_Content<Modifier>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._ViewModifier_Content<Modifier>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int? {
        _viewListCount(inputs: inputs) { _ in nil }
    }
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int? {
        _viewListCount(inputs: inputs) { _ in nil }
    }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct PlaceholderContentView<Value> : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init()
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.PlaceholderContentView<Value>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.PlaceholderContentView<Value>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.PlaceholderContentView : Swift.Sendable {
}
extension SwiftUICore._ViewInputs {
  package mutating func pushModifierBody<Token>(_ type: Token.Type, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs)
}
extension SwiftUICore._ViewListInputs {
  package mutating func pushModifierBody<Token>(_ type: Token.Type, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs)
}
@available(*, unavailable)
extension SwiftUICore._ViewModifier_Content : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  nonisolated package static func makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated package static func makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated package static func viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  nonisolated package static func viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
package struct AccessibilityVisibility : Swift.OptionSet, Swift.Hashable, Swift.Codable {
  package enum Resolved : Swift.Int, Swift.Codable {
    case element
    case containerElement
    case container
    case hidden
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(rawValue: Swift.Int)
    #else
    package init?(rawValue: Swift.Int)
    #endif
    package typealias RawValue = Swift.Int
    package var rawValue: Swift.Int {
      get
    }
  }
  package let rawValue: Swift.UInt32
  package init(rawValue: Swift.UInt32)
  package static let element: SwiftUICore.AccessibilityVisibility
  package static let container: SwiftUICore.AccessibilityVisibility
  package static let hidden: SwiftUICore.AccessibilityVisibility
  package static let transparent: SwiftUICore.AccessibilityVisibility
  package static let ignored: SwiftUICore.AccessibilityVisibility
  package static let host: SwiftUICore.AccessibilityVisibility
  package static let childrenIgnored: SwiftUICore.AccessibilityVisibility
  package static let stack: SwiftUICore.AccessibilityVisibility
  package typealias ArrayLiteralElement = SwiftUICore.AccessibilityVisibility
  package typealias Element = SwiftUICore.AccessibilityVisibility
  package typealias RawValue = Swift.UInt32
}
extension SwiftUICore.AccessibilityVisibility {
  package static var `default`: SwiftUICore.AccessibilityVisibility {
    get
  }
  package static var containerElement: SwiftUICore.AccessibilityVisibility {
    get
  }
}
extension SwiftUICore.AccessibilityVisibility {
  package init(_ value: SwiftUICore.AccessibilityVisibility.Resolved)
}
package typealias AccessibilityVisibilityStorage = SwiftUICore.AccessibilityNullableOptionSet<SwiftUICore.AccessibilityVisibility>
extension SwiftUICore.AccessibilityNullableOptionSet where T == SwiftUICore.AccessibilityVisibility {
  package var resolvesToHidden: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolved: SwiftUICore.AccessibilityVisibility.Resolved? {
    get
  }
  #else
  package var resolved: SwiftUICore.AccessibilityVisibility.Resolved? {
    get
  }
  #endif
  package var shouldApplyPlatformElementOverride: (isAXElement: Swift.Bool, isAXElementsHidden: Swift.Bool) {
    get
  }
}
package struct PreferenceCombiner<K> : AttributeGraph.Rule, SwiftUICore.AsyncAttribute, Swift.CustomStringConvertible where K : SwiftUICore.PreferenceKey {
  package var attributes: [AttributeGraph.WeakAttribute<K.Value>]
  package init()
  package init(attributes: [AttributeGraph.Attribute<K.Value>])
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var initialValue: K.Value? {
    get
  }
  #else
  package static var initialValue: K.Value? {
    get
  }
  #endif
  package var value: K.Value {
    get
  }
  package var description: Swift.String {
    get
  }
  package typealias Value = K.Value
}
package struct PairwisePreferenceCombinerVisitor : SwiftUICore.PreferenceKeyVisitor {
  package let outputs: (SwiftUICore.PreferencesOutputs, SwiftUICore.PreferencesOutputs)
  package var result: SwiftUICore.PreferencesOutputs
  package init(outputs: (SwiftUICore.PreferencesOutputs, SwiftUICore.PreferencesOutputs))
  package mutating func visit<K>(key: K.Type) where K : SwiftUICore.PreferenceKey
}
package struct MultiPreferenceCombinerVisitor : SwiftUICore.PreferenceKeyVisitor {
  package let outputs: [SwiftUICore.PreferencesOutputs]
  package var result: SwiftUICore.PreferencesOutputs
  package init(outputs: [SwiftUICore.PreferencesOutputs], result: SwiftUICore.PreferencesOutputs)
  package mutating func visit<K>(key: K.Type) where K : SwiftUICore.PreferenceKey
}
package struct PreferenceAggregator<K> : AttributeGraph.Rule, SwiftUICore.AsyncAttribute where K : SwiftUICore.PreferenceKey {
  package var attributes: [AttributeGraph.WeakAttribute<K.Value>]
  package init(attributes: [AttributeGraph.Attribute<K.Value>])
  package var value: [K.Value] {
    get
  }
  package typealias Value = [K.Value]
}
package struct HostPreferencesCombiner : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>, values: AttributeGraph.Attribute<SwiftUICore.PreferenceList>?)
  #else
  package init(keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>, values: AttributeGraph.Attribute<SwiftUICore.PreferenceList>?)
  #endif
  package mutating func addChild(keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>, values: AttributeGraph.WeakAttribute<SwiftUICore.PreferenceList>)
  package mutating func removeChild(keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>) -> Swift.Bool
  package var value: SwiftUICore.PreferenceList {
    get
  }
  package typealias Value = SwiftUICore.PreferenceList
}
extension SwiftUICore.ContentStyle.MaterialStyle {
  package func resolveColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func speed(_ speed: Swift.Double) -> SwiftUICore.Animation
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct KeyframeTrack<Root, Value, Content> : SwiftUICore.Keyframes, SwiftUICore.PrimitiveKeyframes where Value == Content.Value, Content : SwiftUICore.KeyframeTrackContent {
  public init(@SwiftUICore.KeyframeTrackContentBuilder<Root> content: () -> Content) where Root == Value
  public init(_ keyPath: Swift.WritableKeyPath<Root, Value>, @SwiftUICore.KeyframeTrackContentBuilder<Value> content: () -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Root>, initialValue: Root, initialVelocity: Root?)
  #else
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Root>, initialValue: Root, initialVelocity: Root?)
  #endif
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTrack : Swift.Sendable {
}
package struct AccessibilityCustomAttributes : Swift.Equatable {
  package enum Value : Swift.Equatable {
    case string(Swift.String)
    case data(Foundation.Data)
    case nsNumber(Foundation.NSNumber)
    case nsValue(Foundation.NSValue)
    case date(Foundation.Date)
    case url(Foundation.URL)
    case attributedString(Foundation.NSAttributedString)
    case object(ObjectiveC.NSObject)
    package var displayDescription: Swift.String {
      get
    }
    package func axRepresentation() -> Any
    package static func == (a: SwiftUICore.AccessibilityCustomAttributes.Value, b: SwiftUICore.AccessibilityCustomAttributes.Value) -> Swift.Bool
  }
  package init()
  package init(_ attributeName: Swift.String, value: SwiftUICore.AccessibilityCustomAttributes.Value)
  package typealias AttributesDictionary = [Swift.String : SwiftUICore.AccessibilityCustomAttributes.Value]
  package var attributeNames: [Swift.String] {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(attributeName: Swift.String) -> SwiftUICore.AccessibilityCustomAttributes.Value? {
    get
    set
  }
  #else
  package subscript(attributeName: Swift.String) -> SwiftUICore.AccessibilityCustomAttributes.Value? {
    get
    set
  }
  #endif
  package static func == (lhs: SwiftUICore.AccessibilityCustomAttributes, rhs: SwiftUICore.AccessibilityCustomAttributes) -> Swift.Bool
}
extension SwiftUICore.AccessibilityCustomAttributes : Swift.Collection {
  package typealias Index = SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Index
  package typealias Element = SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Element
  package var startIndex: SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Index {
    get
  }
  package var endIndex: SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Index {
    get
  }
  package subscript(position: SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Index) -> SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Element {
    get
  }
  package func index(after i: SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Index) -> SwiftUICore.AccessibilityCustomAttributes.AttributesDictionary.Index
  package typealias Indices = Swift.DefaultIndices<SwiftUICore.AccessibilityCustomAttributes>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.AccessibilityCustomAttributes>
  package typealias SubSequence = Swift.Slice<SwiftUICore.AccessibilityCustomAttributes>
}
extension SwiftUICore.AccessibilityCustomAttributes : Swift.CustomDebugStringConvertible {
  package var debugDescription: Swift.String {
    get
  }
}
extension SwiftUICore.AccessibilityCustomAttributes : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityCustomAttributes) -> Swift.Bool
}
extension SwiftUICore.AccessibilityCustomAttributes.Value : Swift.Codable {
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
}
extension SwiftUICore.AccessibilityCustomAttributes : Swift.Codable {
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class AnimationListener : @unchecked Swift.Sendable {
  @_spi(ForSwiftUIOnly) public init()
  @_spi(ForSwiftUIOnly) open func animationWasAdded()
  @_spi(ForSwiftUIOnly) open func animationWasRemoved()
  @_spi(ForSwiftUIOnly) @objc deinit
}
extension SwiftUICore.Transaction {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var animationListener: SwiftUICore.AnimationListener? {
    get
  }
  #else
  package var animationListener: SwiftUICore.AnimationListener? {
    get
  }
  #endif
  package mutating func addAnimationListener(_ listener: SwiftUICore.AnimationListener)
  package mutating func addAnimationListener(added: @escaping () -> Swift.Void, removed: @escaping () -> Swift.Void)
  package mutating func addAnimationListener(allFinished: @escaping () -> Swift.Void)
  package mutating func addAnimationListener(allFinished: @escaping (SwiftUICore.Transaction.AnimationCompletionInfo) -> Swift.Void)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var animationLogicalListener: SwiftUICore.AnimationListener? {
    get
  }
  #else
  package var animationLogicalListener: SwiftUICore.AnimationListener? {
    get
  }
  #endif
  package mutating func addAnimationLogicalListener(_ listener: SwiftUICore.AnimationListener)
  package mutating func addAnimationLogicalListener(allFinished: @escaping () -> Swift.Void)
  package mutating func addAnimationLogicalListener(allFinished: @escaping (SwiftUICore.Transaction.AnimationCompletionInfo) -> Swift.Void)
  package struct AnimationCompletionInfo {
    package var completedCount: Swift.Int
    package init(completedCount: Swift.Int)
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var combinedAnimationListener: SwiftUICore.AnimationListener? {
    get
  }
  #else
  package var combinedAnimationListener: SwiftUICore.AnimationListener? {
    get
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func defaultForegroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency package func defaultForegroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @inlinable nonisolated public func foregroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View {
        return environment(\.foregroundColor, color)
    }
  
  #else
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @inlinable nonisolated public func foregroundColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View {
        return environment(\.foregroundColor, color)
    }
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultForegroundColor: SwiftUICore.Color? {
    get
    set
  }
  #else
  package var defaultForegroundColor: SwiftUICore.Color? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  package var foregroundColor: SwiftUICore.Color? {
    get
    set
  }
  #else
  @usableFromInline
  package var foregroundColor: SwiftUICore.Color? {
    get
    set
  }
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var _effectiveForegroundColor: SwiftUICore.Color? {
    get
  }
  #else
  package var _effectiveForegroundColor: SwiftUICore.Color? {
    get
  }
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "will be removed")
@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundColorModifier : SwiftUICore.ViewInputsModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(color: SwiftUICore.Color?) { self.color = color }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(color: SwiftUICore.Color?) { self.color = color }
  #endif
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundColorModifier>, inputs: inout SwiftUICore._ViewInputs)
  @available(*, deprecated, message: "will be removed")
  @available(iOS, introduced: 15.0, message: "will be removed")
  @available(tvOS, introduced: 15.0, message: "will be removed")
  @available(watchOS, introduced: 8.0, message: "will be removed")
  @available(macOS, introduced: 12.0, message: "will be removed")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundColorModifier : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct BitVector64 : Swift.OptionSet {
  @_spi(ForSwiftUIOnly) public var rawValue: Swift.UInt64
  @_spi(ForSwiftUIOnly) public init(rawValue: Swift.UInt64)
  @_spi(ForSwiftUIOnly) @inlinable public init() { self.init(rawValue: 0) }
  @_spi(ForSwiftUIOnly) package subscript(index: Swift.Int) -> Swift.Bool {
    @_spi(ForSwiftUIOnly) get
    @_spi(ForSwiftUIOnly) set
  }
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.BitVector64
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUICore.BitVector64
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias RawValue = Swift.UInt64
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.BitVector64 : Swift.Sendable {
}
extension Swift.Array {
  package func mapBool(_ predicate: (Element) -> Swift.Bool) -> SwiftUICore.BitVector64
}
package struct BitVector : Swift.MutableCollection, Swift.RandomAccessCollection {
  package init(count: Swift.Int)
  @inlinable package var startIndex: Swift.Int {
    get
  }
  package var endIndex: Swift.Int {
    get
  }
  @inlinable package subscript(index: Swift.Int) -> Swift.Bool {
    get
    set
  }
  package typealias Element = Swift.Bool
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<SwiftUICore.BitVector.Index>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.BitVector>
  package typealias SubSequence = Swift.Slice<SwiftUICore.BitVector>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public static var accentColor: SwiftUICore.Color {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @inlinable nonisolated public func accentColor(_ accentColor: SwiftUICore.Color?) -> some SwiftUICore.View {
        return environment(\.accentColor, accentColor)
    }
  
  #else
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use the asset catalog's accent color or View.tint(_:) instead.")
  @inlinable nonisolated public func accentColor(_ accentColor: SwiftUICore.Color?) -> some SwiftUICore.View {
        return environment(\.accentColor, accentColor)
    }
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  package var accentColor: SwiftUICore.Color? {
    get
    set
  }
  #else
  @usableFromInline
  package var accentColor: SwiftUICore.Color? {
    get
    set
  }
  #endif
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultAccentColor: SwiftUICore.Color? {
    get
  }
  #else
  package var defaultAccentColor: SwiftUICore.Color? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultAccentColorProvider: (any SwiftUICore.DefaultAccentColorProvider.Type)? {
    get
    set
  }
  #else
  package var defaultAccentColorProvider: (any SwiftUICore.DefaultAccentColorProvider.Type)? {
    get
    set
  }
  #endif
}
package protocol DefaultAccentColorProvider {
  static func accentColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color
}
extension SwiftUICore.EnvironmentValues {
  package var systemAccentColor: SwiftUICore.Color {
    get
  }
  package var systemAccentValue: SwiftUICore.SystemAccentValue {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var systemAccentValueProvider: (any SwiftUICore.SystemAccentValueProvider.Type)? {
    get
    set
  }
  #else
  package var systemAccentValueProvider: (any SwiftUICore.SystemAccentValueProvider.Type)? {
    get
    set
  }
  #endif
}
package enum SystemAccentValue : Swift.Int, Swift.Equatable {
  case red
  case orange
  case yellow
  case green
  case blue
  case purple
  case pink
  case graphite
  case multicolor
  case hardware
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.Int)
  #else
  package init?(rawValue: Swift.Int)
  #endif
  package typealias RawValue = Swift.Int
  package var rawValue: Swift.Int {
    get
  }
}
package protocol SystemAccentValueProvider {
  static var defaultValue: SwiftUICore.SystemAccentValue { get }
}
package protocol ConditionalProtocolDescriptor : SwiftUICore.ProtocolDescriptor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func fetchConditionalType(key: Swift.ObjectIdentifier) -> SwiftUICore.ConditionalTypeDescriptor<Self>?
  #else
  static func fetchConditionalType(key: Swift.ObjectIdentifier) -> SwiftUICore.ConditionalTypeDescriptor<Self>?
  #endif
  static func insertConditionalType(key: Swift.ObjectIdentifier, value: SwiftUICore.ConditionalTypeDescriptor<Self>)
}
package struct ConditionalMetadata<P> where P : SwiftUICore.ConditionalProtocolDescriptor {
}
package struct ConditionalTypeDescriptor<P> where P : SwiftUICore.ConditionalProtocolDescriptor {
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional {
  package static func makeConditionalMetadata<P>(_ protocolDescriptor: P.Type) -> SwiftUICore.ConditionalMetadata<P> where P : SwiftUICore.ConditionalProtocolDescriptor
}
#else
extension Swift.Optional {
  package static func makeConditionalMetadata<P>(_ protocolDescriptor: P.Type) -> SwiftUICore.ConditionalMetadata<P> where P : SwiftUICore.ConditionalProtocolDescriptor
}
#endif
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper public struct Namespace : SwiftUICore.DynamicProperty, Swift.Sendable {
  @usableFromInline
  internal var id: Swift.Int
  package init(id: Swift.Int)
  @inlinable public init() { id = 0 }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public var wrappedValue: SwiftUICore.Namespace.ID {
    get
  }
  @frozen public struct ID : Swift.Hashable {
    @_hasStorage package var id: Swift.Int {
      get
    }
    package init(id: Swift.Int)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Namespace.ID, b: SwiftUICore.Namespace.ID) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public class CAHostingLayer<Content> : QuartzCore.CALayer, SwiftUICore.EventGraphHost, SwiftUICore.EventBindingManagerDelegate where Content : SwiftUICore.View {
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) final package let viewGraph: SwiftUICore.ViewGraph
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) final package let eventBindingManager: SwiftUICore.EventBindingManager
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var propertiesNeedingUpdate: SwiftUICore.ViewRendererHostProperties
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var renderingPhase: SwiftUICore.ViewRenderingPhase
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var isHiddenForReuse: Swift.Bool
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var currentTimestamp: SwiftUICore.Time
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var externalUpdateCount: Swift.Int
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var environmentOverride: SwiftUICore.EnvironmentValues? {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) get
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) set
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var accessibilityEnabled: Swift.Bool {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) get
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) set
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) final package let focusedResponder: SwiftUICore.ResponderNode?
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public init(rootView: Content, environment: SwiftUICore.EnvironmentValues = .init())
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc override dynamic public var bounds: CoreFoundation.CGRect {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc get
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc set
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc override dynamic public var position: CoreFoundation.CGPoint {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc get
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc set
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc override dynamic public var contentsScale: CoreFoundation.CGFloat {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc get
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc set
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc override dynamic public func layoutSublayers()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public var rootView: Content {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) get
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) set
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public var environment: SwiftUICore.EnvironmentValues {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) get
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) set
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) final public let referenceInstant: _Concurrency.ContinuousClock.Instant
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public func send(event: SwiftUICore.CAHostingLayerEvent) -> Swift.Bool
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func didBind(to newBinding: SwiftUICore.EventBinding, id: SwiftUICore.EventID)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func didUpdate(phase: SwiftUICore.GesturePhase<Swift.Void>, in eventBindingManager: SwiftUICore.EventBindingManager)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func requestHoverUpdate(in eventBindingManager: SwiftUICore.EventBindingManager)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @objc deinit
}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @available(*, unavailable)
extension SwiftUICore.CAHostingLayer : Swift.Sendable {
}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) extension SwiftUICore.CAHostingLayer : SwiftUICore.ViewRendererHost {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func `as`<T>(_ type: T.Type) -> T?
  #else
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func `as`<T>(_ type: T.Type) -> T?
  #endif
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func modifyViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateRootView()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateEnvironment()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateSize()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateSafeArea()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func requestUpdate(after delay: Swift.Double)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #else
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #endif
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public func preferencesDidChange()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateScrollableContainerSize()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateFocusedItem()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateFocusedValues()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateFocusStore()
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func updateAccessibilityFocus()
}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) extension SwiftUICore.CAHostingLayer : SwiftUICore.TestHost {
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var attributeCountInfo: SwiftUICore.AttributeCountTestInfo {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) get
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package var viewCacheIsEmpty: Swift.Bool {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) get
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func setTestSize(_ size: CoreFoundation.CGSize)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func setTestSafeAreaInsets(_ insets: SwiftUICore.EdgeInsets)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func renderForTest(interval: Swift.Double)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public func _renderForTest(interval: Swift.Double)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) final package func forEachDescendantHost(body: (any SwiftUICore.TestHost) -> Swift.Void)
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) package func forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
}
package protocol CodableByProxy {
  associatedtype CodingProxy : Swift.Decodable, Swift.Encodable
  var codingProxy: Self.CodingProxy { get }
  static func unwrap(codingProxy: Self.CodingProxy) -> Self
}
package protocol CodableProxy : Swift.Decodable, Swift.Encodable {
  associatedtype Base
  var base: Self.Base { get }
}
extension SwiftUICore.CodableByProxy where Self == Self.CodingProxy.Base, Self.CodingProxy : SwiftUICore.CodableProxy {
  package static func unwrap(codingProxy: Self.CodingProxy) -> Self
}
@propertyWrapper package struct ProxyCodable<Value> : Swift.Codable where Value : SwiftUICore.CodableByProxy {
  package var wrappedValue: Value
  package var projectedValue: SwiftUICore.ProxyCodable<Value> {
    get
  }
  package init(_ value: Value)
  package init(wrappedValue: Value)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.ProxyCodable : Swift.Equatable where Value : Swift.Equatable {
  package static func == (a: SwiftUICore.ProxyCodable<Value>, b: SwiftUICore.ProxyCodable<Value>) -> Swift.Bool
}
extension SwiftUICore.ProxyCodable : Swift.Hashable where Value : Swift.Hashable {
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : SwiftUICore.CodableByProxy where Wrapped : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUICore.CodableOptional<Wrapped> {
    get
  }
  package typealias CodingProxy = SwiftUICore.CodableOptional<Wrapped>
}
#else
extension Swift.Optional : SwiftUICore.CodableByProxy where Wrapped : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUICore.CodableOptional<Wrapped> {
    get
  }
  package typealias CodingProxy = SwiftUICore.CodableOptional<Wrapped>
}
#endif
extension Swift.RawRepresentable where Self.RawValue : Swift.Decodable, Self.RawValue : Swift.Encodable {
  package var codingProxy: SwiftUICore.RawRepresentableProxy<Self> {
    get
  }
}
package struct RawRepresentableProxy<Value> : SwiftUICore.CodableProxy where Value : Swift.RawRepresentable, Value.RawValue : Swift.Decodable, Value.RawValue : Swift.Encodable {
  package let base: Value
  package init(base: Value)
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
  package typealias Base = Value
}
extension Foundation.NSAttributedString.Key : SwiftUICore.CodableByProxy {
  package typealias CodingProxy = SwiftUICore.RawRepresentableProxy<Foundation.NSAttributedString.Key>
}
extension Swift.Array : SwiftUICore.CodableByProxy where Element : SwiftUICore.CodableByProxy {
  package var codingProxy: [Element.CodingProxy] {
    get
  }
  package static func unwrap(codingProxy: [Element.CodingProxy]) -> [Element]
  package typealias CodingProxy = [Element.CodingProxy]
}
package struct JSONCodable<Value> : Swift.Codable {
  package var base: Value
  package init(_ base: Value)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
@propertyWrapper package struct CodableRawRepresentable<Value> : Swift.Codable where Value : Swift.RawRepresentable, Value.RawValue : Swift.Decodable, Value.RawValue : Swift.Encodable {
  package var wrappedValue: Value
  package init(_ value: Value)
  package init(wrappedValue: Value)
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
}
extension SwiftUICore.CodableRawRepresentable : Swift.Equatable where Value : Swift.Equatable {
  package static func == (a: SwiftUICore.CodableRawRepresentable<Value>, b: SwiftUICore.CodableRawRepresentable<Value>) -> Swift.Bool
}
extension SwiftUICore.CodableRawRepresentable : Swift.Hashable where Value : Swift.Hashable {
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package struct CodableOptional<Wrapped> : SwiftUICore.CodableProxy where Wrapped : SwiftUICore.CodableByProxy {
  package var base: Wrapped?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ base: Wrapped?)
  #else
  package init(_ base: Wrapped?)
  #endif
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package typealias Base = Wrapped?
}
@propertyWrapper package struct CodableNSAttributes : SwiftUICore.CodableByProtobuf, Swift.Hashable {
  package typealias Value = [Foundation.NSAttributedString.Key : Any]
  package var wrappedValue: SwiftUICore.CodableNSAttributes.Value
  package var projectedValue: SwiftUICore.CodableNSAttributes {
    get
  }
  package init(_ value: SwiftUICore.CodableNSAttributes.Value)
  package init(wrappedValue: SwiftUICore.CodableNSAttributes.Value)
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
  package static func == (lhs: SwiftUICore.CodableNSAttributes, rhs: SwiftUICore.CodableNSAttributes) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.ImagePaint {
  @_alwaysEmitIntoClient public static func image(_ image: SwiftUICore.Image, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1) -> SwiftUICore.ImagePaint {
        .init(image: image, sourceRect: sourceRect, scale: scale)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ImagePaint : SwiftUICore.ShapeStyle {
  public var image: SwiftUICore.Image
  public var sourceRect: CoreFoundation.CGRect
  public var scale: CoreFoundation.CGFloat
  public init(image: SwiftUICore.Image, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1)
  package struct _Paint : SwiftUICore.ResolvedPaint {
    package var image: SwiftUICore.GraphicsImage
    package var sourceRect: CoreFoundation.CGRect
    package var scale: CoreFoundation.CGFloat
    package init(image: SwiftUICore.GraphicsImage, sourceRect: CoreFoundation.CGRect, scale: CoreFoundation.CGFloat)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #else
    package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
      get
    }
    #endif
    package static func == (a: SwiftUICore.ImagePaint._Paint, b: SwiftUICore.ImagePaint._Paint) -> Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  }
  package func resolvePaint(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ImagePaint._Paint
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.ImagePaint>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
extension SwiftUICore.ImagePaint._Paint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
}
extension SwiftUICore.ImagePaint._Paint : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package protocol RendererLeafView : SwiftUICore.ContentResponder, SwiftUICore.PrimitiveView, SwiftUICore.UnaryView {
  static var requiresMainThread: Swift.Bool { get }
  func content() -> SwiftUICore.DisplayList.Content.Value
}
extension SwiftUICore.RendererLeafView {
  package static var requiresMainThread: Swift.Bool {
    get
  }
  package func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  package static func makeLeafView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
package protocol LeafViewLayout {
  func spacing() -> SwiftUICore.Spacing
  func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
}
extension SwiftUICore.LeafViewLayout {
  package func spacing() -> SwiftUICore.Spacing
  package static func makeLeafLayout(_ outputs: inout SwiftUICore._ViewOutputs, view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs)
}
package struct LeafLayoutEngine<V> : SwiftUICore.LayoutEngine where V : SwiftUICore.LeafViewLayout {
  package let view: V
  package init(_ view: V)
  package func spacing() -> SwiftUICore.Spacing
  package mutating func sizeThatFits(_ proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
}
@_inheritsConvenienceInitializers @objc final package class TextAnimationsProvider : ObjectiveC.NSObject, Swift.Sendable, UIFoundation_Private.NSTextAnimationProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc(animationWithName:) package static func animation(named name: Swift.String) -> (any UIFoundation_Private._NSTextAnimation)?
  #else
  @objc(animationWithName:) package static func animation(named name: Swift.String) -> (any UIFoundation_Private._NSTextAnimation)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc(animationWithName:localeIdentifier:) package static func animation(named name: Swift.String, localeIdentifier: Swift.String) -> (any UIFoundation_Private._NSTextAnimation)?
  #else
  @objc(animationWithName:localeIdentifier:) package static func animation(named name: Swift.String, localeIdentifier: Swift.String) -> (any UIFoundation_Private._NSTextAnimation)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc(animationNamesForDomain:) package static func animationNames(for domain: Swift.String?) -> [Swift.String]
  #else
  @objc(animationNamesForDomain:) package static func animationNames(for domain: Swift.String?) -> [Swift.String]
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc(drawStaticString:withAttributes:options:inRect:withPadding:forceClipping:cgContext:stringDrawingContext:) package static func drawStatic(string: Any, attributes: [Swift.AnyHashable : Any]?, options: Swift.UInt, rect: CoreFoundation.CGRect, padding: CoreFoundation.CGFloat, forceClipping: Swift.Bool, cgContext: CoreGraphics.CGContext?, stringDrawingContext: UIFoundation.NSStringDrawingContext) -> CoreFoundation.CGRect
  #else
  @objc(drawStaticString:withAttributes:options:inRect:withPadding:forceClipping:cgContext:stringDrawingContext:) package static func drawStatic(string: Any, attributes: [Swift.AnyHashable : Any]?, options: Swift.UInt, rect: CoreFoundation.CGRect, padding: CoreFoundation.CGFloat, forceClipping: Swift.Bool, cgContext: CoreGraphics.CGContext?, stringDrawingContext: UIFoundation.NSStringDrawingContext) -> CoreFoundation.CGRect
  #endif
  @objc override dynamic package init()
  @objc deinit
}
@_spi(TextAnimations) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_silgen_name("SwiftUICoreTextAnimationProviderClass")
public func SwiftUICoreTextAnimationProviderClass() -> any UIFoundation_Private.NSTextAnimationProvider.Type
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol ConditionallyArchivableView : SwiftUICore.View {
  associatedtype ArchivedBody : SwiftUICore.View
  @_spi(Private) @SwiftUICore.ViewBuilder var archivedBody: Self.ArchivedBody { get }
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ConditionallyArchivableView {
  @_spi(Private) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
package struct SExpPrinter {
  package var indent: Swift.String {
    get
  }
  package init(tag: Swift.String, singleLine: Swift.Bool = false)
  package mutating func end() -> Swift.String
  package mutating func print(_ string: Swift.String, newline: Swift.Bool = true)
  package mutating func newline()
  package mutating func push(_ tag: Swift.String)
  package mutating func pop()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TimelineSchedule {
  typealias Mode = SwiftUICore.TimelineScheduleMode
  associatedtype Entries : Swift.Sequence where Self.Entries.Element == Foundation.Date
  func entries(from startDate: Foundation.Date, mode: Self.Mode) -> Self.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum TimelineScheduleMode : Swift.Sendable {
  case normal
  case lowFrequency
  public static func == (a: SwiftUICore.TimelineScheduleMode, b: SwiftUICore.TimelineScheduleMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.TimelineSchedule {
  package func entries(within interval: Foundation.DateInterval, mode: SwiftUICore.TimelineScheduleMode = .normal) -> [Foundation.Date]
}
extension SwiftUICore.TimelineSchedule {
  package func nextEntry(after date: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> Foundation.Date
  package func entries(within range: Swift.Range<Foundation.Date>, mode: SwiftUICore.TimelineScheduleMode = .normal) -> Swift.AnySequence<Foundation.Date>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineSchedule where Self == SwiftUICore.PeriodicTimelineSchedule {
  @_alwaysEmitIntoClient public static func periodic(from startDate: Foundation.Date, by interval: Foundation.TimeInterval) -> SwiftUICore.PeriodicTimelineSchedule {
        .init(from: startDate, by: interval)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineSchedule where Self == SwiftUICore.EveryMinuteTimelineSchedule {
  @_alwaysEmitIntoClient public static var everyMinute: SwiftUICore.EveryMinuteTimelineSchedule {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineSchedule {
  @_alwaysEmitIntoClient public static func explicit<S>(_ dates: S) -> SwiftUICore.ExplicitTimelineSchedule<S> where Self == SwiftUICore.ExplicitTimelineSchedule<S>, S : Swift.Sequence, S.Element == Foundation.Date {
        .init(dates)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PeriodicTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol, Swift.Sendable {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public mutating func next() -> Foundation.Date?
    #else
    public mutating func next() -> Foundation.Date?
    #endif
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Foundation.Date
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = SwiftUICore.PeriodicTimelineSchedule.Entries
  }
  public init(from startDate: Foundation.Date, by interval: Foundation.TimeInterval)
  public func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> SwiftUICore.PeriodicTimelineSchedule.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct EveryMinuteTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol, Swift.Sendable {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public mutating func next() -> Foundation.Date?
    #else
    public mutating func next() -> Foundation.Date?
    #endif
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Foundation.Date
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = SwiftUICore.EveryMinuteTimelineSchedule.Entries
  }
  public init()
  public func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> SwiftUICore.EveryMinuteTimelineSchedule.Entries
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ExplicitTimelineSchedule<Entries> : SwiftUICore.TimelineSchedule where Entries : Swift.Sequence, Entries.Element == Foundation.Date {
  public init(_ dates: Entries)
  public func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> Entries
}
@available(*, unavailable)
extension SwiftUICore.ExplicitTimelineSchedule : Swift.Sendable {
}
package protocol ShapeStyledLeafView : SwiftUICore.ContentResponder {
  static var animatesSize: Swift.Bool { get }
  associatedtype ShapeUpdateData = Swift.Void
  mutating func mustUpdate(data: Self.ShapeUpdateData, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>) -> Swift.Bool
  typealias FramedShape = (shape: SwiftUICore._ShapeStyle_RenderedShape.Shape, frame: CoreFoundation.CGRect)
  func shape(in size: CoreFoundation.CGSize) -> Self.FramedShape
  static var hasBackground: Swift.Bool { get }
  func backgroundShape(in size: CoreFoundation.CGSize) -> Self.FramedShape
  func isClear(styles: SwiftUICore._ShapeStyle_Pack) -> Swift.Bool
}
extension SwiftUICore.ShapeStyledLeafView {
  package static var animatesSize: Swift.Bool {
    get
  }
  package static var hasBackground: Swift.Bool {
    get
  }
  package func backgroundShape(in size: CoreFoundation.CGSize) -> Self.FramedShape
  package func isClear(styles: SwiftUICore._ShapeStyle_Pack) -> Swift.Bool
  package func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  package func contentPath(size: CoreFoundation.CGSize) -> SwiftUICore.Path
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func makeLeafView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, styles: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>, interpolatorGroup: SwiftUICore._ShapeStyle_InterpolatorGroup? = nil, data: Self.ShapeUpdateData) -> SwiftUICore._ViewOutputs
  #else
  package static func makeLeafView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, styles: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>, interpolatorGroup: SwiftUICore._ShapeStyle_InterpolatorGroup? = nil, data: Self.ShapeUpdateData) -> SwiftUICore._ViewOutputs
  #endif
}
extension SwiftUICore.ShapeStyledLeafView where Self.ShapeUpdateData == () {
  package mutating func mustUpdate(data: Self.ShapeUpdateData, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func makeLeafView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, styles: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>, interpolatorGroup: SwiftUICore._ShapeStyle_InterpolatorGroup? = nil) -> SwiftUICore._ViewOutputs
  #else
  @inline(__always) package static func makeLeafView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, styles: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>, interpolatorGroup: SwiftUICore._ShapeStyle_InterpolatorGroup? = nil) -> SwiftUICore._ViewOutputs
  #endif
}
package struct ShapeStyledResponderData<V> : SwiftUICore.ContentResponder where V : SwiftUICore.ShapeStyledLeafView {
  package func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  package func contentPath(size: CoreFoundation.CGSize) -> SwiftUICore.Path
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol EnvironmentalModifier : SwiftUICore.ViewModifier where Self.Body == Swift.Never {
  associatedtype ResolvedModifier : SwiftUICore.ViewModifier
  func resolve(in environment: SwiftUICore.EnvironmentValues) -> Self.ResolvedModifier
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static var _requiresMainThread: Swift.Bool { get }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static var _tracksEnvironmentDependencies: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentalModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var _requiresMainThread: Swift.Bool {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static var _tracksEnvironmentDependencies: Swift.Bool {
    get
  }
}
package protocol StyledFormatStyle : Foundation.FormatStyle where Self.FormatOutput == Foundation.AttributedString {
  mutating func makePlatformAttributes(resolver: inout SwiftUICore.PlatformAttributeResolver)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Gradient : Swift.Equatable {
  @frozen public struct Stop : Swift.Equatable {
    public var color: SwiftUICore.Color
    public var location: CoreFoundation.CGFloat
    public init(color: SwiftUICore.Color, location: CoreFoundation.CGFloat)
    package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ResolvedGradient.Stop
    public static func == (a: SwiftUICore.Gradient.Stop, b: SwiftUICore.Gradient.Stop) -> Swift.Bool
  }
  public var stops: [SwiftUICore.Gradient.Stop]
  public init(stops: [SwiftUICore.Gradient.Stop])
  public init(colors: [SwiftUICore.Color])
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ResolvedGradient
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var constantColor: SwiftUICore.Color? {
    get
  }
  #else
  package var constantColor: SwiftUICore.Color? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var fallbackColor: SwiftUICore.Color? {
    get
  }
  #else
  package var fallbackColor: SwiftUICore.Color? {
    get
  }
  #endif
  public static func == (a: SwiftUICore.Gradient, b: SwiftUICore.Gradient) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient.Stop : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient : SwiftUICore.ShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
extension SwiftUICore.Gradient {
  package var reversed: SwiftUICore.Gradient {
    get
  }
}
package struct ResolvedGradient : Swift.Equatable {
  package typealias Interpolation = SwiftUICore.BezierTimingFunction<Swift.Float>
  package struct Stop : Swift.Equatable {
    package var color: SwiftUICore.Color.Resolved
    package var location: CoreFoundation.CGFloat
    package var interpolation: SwiftUICore.ResolvedGradient.Interpolation?
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(color: SwiftUICore.Color.Resolved, location: CoreFoundation.CGFloat, interpolation: SwiftUICore.ResolvedGradient.Interpolation? = nil)
    #else
    package init(color: SwiftUICore.Color.Resolved, location: CoreFoundation.CGFloat, interpolation: SwiftUICore.ResolvedGradient.Interpolation? = nil)
    #endif
    package static func == (a: SwiftUICore.ResolvedGradient.Stop, b: SwiftUICore.ResolvedGradient.Stop) -> Swift.Bool
  }
  package enum ColorSpace : Swift.UInt8, Swift.Hashable {
    case device
    case linear
    case perceptual
    package static let `default`: SwiftUICore.ResolvedGradient.ColorSpace
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(rawValue: Swift.UInt8)
    #else
    package init?(rawValue: Swift.UInt8)
    #endif
    package typealias RawValue = Swift.UInt8
    package var rawValue: Swift.UInt8 {
      get
    }
  }
  package var stops: [SwiftUICore.ResolvedGradient.Stop]
  package var colorSpace: SwiftUICore.ResolvedGradient.ColorSpace
  package init()
  package init(stops: [SwiftUICore.ResolvedGradient.Stop], colorSpace: SwiftUICore.ResolvedGradient.ColorSpace = .default)
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  package var hasInterpolations: Swift.Bool {
    get
  }
  package var interpolationsCount: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var constantColor: SwiftUICore.Color.Resolved? {
    get
  }
  #else
  package var constantColor: SwiftUICore.Color.Resolved? {
    get
  }
  #endif
  package mutating func multiplyOpacity(by value: Swift.Float)
  package static func == (a: SwiftUICore.ResolvedGradient, b: SwiftUICore.ResolvedGradient) -> Swift.Bool
}
extension SwiftUICore.ResolvedGradient : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.ResolvedGradient.ColorSpace : SwiftUICore.ProtobufEnum {
}
extension SwiftUICore.ResolvedGradient : SwiftUICore.CodableByProtobuf {
}
extension SwiftUICore.ResolvedGradient.Stop : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.ResolvedGradient.ColorSpace {
  package func mix(_ a: SwiftUICore.Color.Resolved, _ b: SwiftUICore.Color.Resolved, by t: Swift.Float) -> SwiftUICore.Color.Resolved
  package struct InterpolatableColor : Swift.Equatable {
    package static func == (a: SwiftUICore.ResolvedGradient.ColorSpace.InterpolatableColor, b: SwiftUICore.ResolvedGradient.ColorSpace.InterpolatableColor) -> Swift.Bool
  }
  package func convertIn(_ c: SwiftUICore.Color.Resolved) -> SwiftUICore.ResolvedGradient.ColorSpace.InterpolatableColor
  package func convertOut(_ c: SwiftUICore.ResolvedGradient.ColorSpace.InterpolatableColor) -> SwiftUICore.Color.Resolved
}
extension SwiftUICore.ResolvedGradient : SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.ResolvedGradientVector
  package var animatableData: SwiftUICore.ResolvedGradient.AnimatableData {
    get
    set
  }
}
package struct ResolvedGradientVector : SwiftUICore.VectorArithmetic {
  package init()
  package init(_ base: SwiftUICore.ResolvedGradient)
  package static var zero: SwiftUICore.ResolvedGradientVector {
    get
  }
  package static func += (lhs: inout SwiftUICore.ResolvedGradientVector, rhs: SwiftUICore.ResolvedGradientVector)
  package static func -= (lhs: inout SwiftUICore.ResolvedGradientVector, rhs: SwiftUICore.ResolvedGradientVector)
  package mutating func scale(by rhs: Swift.Double)
  package var magnitudeSquared: Swift.Double {
    get
  }
  package static func + (lhs: SwiftUICore.ResolvedGradientVector, rhs: SwiftUICore.ResolvedGradientVector) -> SwiftUICore.ResolvedGradientVector
  package static func - (lhs: SwiftUICore.ResolvedGradientVector, rhs: SwiftUICore.ResolvedGradientVector) -> SwiftUICore.ResolvedGradientVector
  package static func == (a: SwiftUICore.ResolvedGradientVector, b: SwiftUICore.ResolvedGradientVector) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  @frozen public struct Resolved : Swift.Hashable {
    public var linearRed: Swift.Float
    public var linearGreen: Swift.Float
    public var linearBlue: Swift.Float
    public var opacity: Swift.Float
    package init(linearRed: Swift.Float, linearGreen: Swift.Float, linearBlue: Swift.Float, opacity: Swift.Float = 1)
    package func multiplyingOpacity(by opacity: Swift.Float) -> SwiftUICore.Color.Resolved
    package func over(_ s: SwiftUICore.Color.Resolved) -> SwiftUICore.Color.Resolved
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Color.Resolved, b: SwiftUICore.Color.Resolved) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  package struct ResolvedVibrant : Swift.Equatable {
    package var scale: Swift.Float
    package var bias: (Swift.Float, Swift.Float, Swift.Float)
    package var colorMatrix: SwiftUICore._ColorMatrix {
      get
    }
    package static func == (lhs: SwiftUICore.Color.ResolvedVibrant, rhs: SwiftUICore.Color.ResolvedVibrant) -> Swift.Bool
  }
  public init(_ resolved: SwiftUICore.Color.Resolved)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>
  package static var legacyInterpolation: Swift.Bool
  public var animatableData: SwiftUICore.Color.Resolved.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.Color.ResolvedVibrant : SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>
  package var animatableData: SwiftUICore.Color.ResolvedVibrant.AnimatableData {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved {
  package static let clear: SwiftUICore.Color.Resolved
  package static let black: SwiftUICore.Color.Resolved
  package static let gray_75: SwiftUICore.Color.Resolved
  package static let gray_50: SwiftUICore.Color.Resolved
  package static let gray_25: SwiftUICore.Color.Resolved
  package static let white: SwiftUICore.Color.Resolved
  package static let red: SwiftUICore.Color.Resolved
  package static let blue: SwiftUICore.Color.Resolved
  package static let green: SwiftUICore.Color.Resolved
  package init(red: Swift.Float, green: Swift.Float, blue: Swift.Float, opacity: Swift.Float = 1)
  public init(colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, red: Swift.Float, green: Swift.Float, blue: Swift.Float, opacity: Swift.Float = 1)
  package init(linearWhite: Swift.Float, opacity: Swift.Float = 1)
  package init(white: Swift.Float, opacity: Swift.Float = 1)
  public var red: Swift.Float {
    get
    set
  }
  public var green: Swift.Float {
    get
    set
  }
  public var blue: Swift.Float {
    get
    set
  }
  package var white: Swift.Float {
    get
  }
  package var linearWhite: Swift.Float {
    get
  }
}
extension SwiftUICore.Color.Resolved {
  package init(linearDisplayP3Red red: Swift.Float, green: Swift.Float, blue: Swift.Float, opacity a: Swift.Float = 1)
  package init(displayP3Red red: Swift.Float, green: Swift.Float, blue: Swift.Float, opacity: Swift.Float = 1)
  package var linearDisplayP3Components: (Swift.Float, Swift.Float, Swift.Float) {
    get
  }
  package var displayP3Components: (Swift.Float, Swift.Float, Swift.Float) {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.Color.Resolved : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.Signpost {
  package static let render: SwiftUICore.Signpost
  package static let postUpdateActions: SwiftUICore.Signpost
  package static let renderUpdate: SwiftUICore.Signpost
  package static let renderFlattened: SwiftUICore.Signpost
  package static let bodyInvoke: SwiftUICore.Signpost
  package static let linkCreate: SwiftUICore.Signpost
  package static let linkUpdate: SwiftUICore.Signpost
  package static let linkDestroy: SwiftUICore.Signpost
  package static let viewHost: SwiftUICore.Signpost
  package static let platformView: SwiftUICore.Signpost
  package static let platformUpdate: SwiftUICore.Signpost
  package static let animationState: SwiftUICore.Signpost
  package static let eventHandling: SwiftUICore.Signpost
}
package struct Signpost {
  package static let archiving: os.OSSignposter
  package static let metadataExtraction: os.OSSignposter
  package static let moduleName: Swift.String
  @inlinable package static func os_log(_ code: Swift.UInt8, _ name: Swift.StaticString) -> SwiftUICore.Signpost
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable package static func kdebug(_ code: Swift.UInt8, _ name: Swift.StaticString?) -> SwiftUICore.Signpost
  #else
  @inlinable package static func kdebug(_ code: Swift.UInt8, _ name: Swift.StaticString?) -> SwiftUICore.Signpost
  #endif
  package static func kdebug(_ code: Swift.UInt8) -> SwiftUICore.Signpost
  @inlinable package var disabled: SwiftUICore.Signpost {
    get
  }
  @inlinable package var verbose: SwiftUICore.Signpost {
    get
  }
  @inlinable package var published: SwiftUICore.Signpost {
    get
  }
  package var isEnabled: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_transparent package func traceInterval<T>(object: Swift.AnyObject?, _ message: Swift.StaticString?, closure: () -> T) -> T
  #else
  @_transparent package func traceInterval<T>(object: Swift.AnyObject?, _ message: Swift.StaticString?, closure: () -> T) -> T
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_transparent package func traceInterval<T>(object: Swift.AnyObject?, _ message: Swift.StaticString, _ args: @autoclosure () -> [any Swift.CVarArg], closure: () -> T) -> T
  #else
  @_transparent package func traceInterval<T>(object: Swift.AnyObject?, _ message: Swift.StaticString, _ args: @autoclosure () -> [any Swift.CVarArg], closure: () -> T) -> T
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_transparent package func traceEvent(type: os.OSSignpostType, object: Swift.AnyObject?, _ message: Swift.StaticString, _ args: @autoclosure () -> [any Swift.CVarArg])
  #else
  @_transparent package func traceEvent(type: os.OSSignpostType, object: Swift.AnyObject?, _ message: Swift.StaticString, _ args: @autoclosure () -> [any Swift.CVarArg])
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.Text {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func textVariant<V>(_ preference: V) -> some SwiftUICore.View where V : SwiftUICore.TextVariantPreference
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public protocol TextVariantPreference {
  var _preference: SwiftUICore._TextVariantPreference<Self> { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct _TextVariantPreference<Preference> : Swift.Sendable where Preference : SwiftUICore.TextVariantPreference {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct FixedTextVariant : SwiftUICore.TextVariantPreference, Swift.Sendable {
  public var _preference: SwiftUICore._TextVariantPreference<SwiftUICore.FixedTextVariant> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct SizeDependentTextVariant : SwiftUICore.TextVariantPreference, Swift.Sendable {
  public var _preference: SwiftUICore._TextVariantPreference<SwiftUICore.SizeDependentTextVariant> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.TextVariantPreference where Self == SwiftUICore.FixedTextVariant {
  public static var fixed: SwiftUICore.FixedTextVariant {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.TextVariantPreference where Self == SwiftUICore.SizeDependentTextVariant {
  public static var sizeDependent: SwiftUICore.SizeDependentTextVariant {
    get
  }
}
package struct TextSizeVariant : Swift.Comparable, Swift.Hashable, Swift.RawRepresentable {
  package var rawValue: Swift.Int
  package init(rawValue: Swift.Int)
  package static let regular: SwiftUICore.TextSizeVariant
  package static let compact: SwiftUICore.TextSizeVariant
  package static let small: SwiftUICore.TextSizeVariant
  package static let tiny: SwiftUICore.TextSizeVariant
  package static func < (lhs: SwiftUICore.TextSizeVariant, rhs: SwiftUICore.TextSizeVariant) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var nextUp: SwiftUICore.TextSizeVariant? {
    get
  }
  #else
  package var nextUp: SwiftUICore.TextSizeVariant? {
    get
  }
  #endif
  package var nextDown: SwiftUICore.TextSizeVariant {
    get
  }
  package typealias RawValue = Swift.Int
}
extension SwiftUICore.TextSizeVariant : Swift.Codable {
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping @Sendable (SwiftUICore.PlaceholderContentView<Self>, Value) -> some View, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> some Keyframes<Value>) -> some SwiftUICore.View
  
  nonisolated public func keyframeAnimator<Value>(initialValue: Value, repeating: Swift.Bool = true, @SwiftUICore.ViewBuilder content: @escaping @Sendable (SwiftUICore.PlaceholderContentView<Self>, Value) -> some View, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> some Keyframes<Value>) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct KeyframeAnimator<Value, KeyframePath, Content> : SwiftUICore.View, SwiftUICore.PrimitiveView, SwiftUICore.UnaryView where Value == KeyframePath.Value, KeyframePath : SwiftUICore.Keyframes, Content : SwiftUICore.View {
  nonisolated public init(initialValue: Value, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (Value) -> Content, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> KeyframePath)
  nonisolated public init(initialValue: Value, repeating: Swift.Bool = true, @SwiftUICore.ViewBuilder content: @escaping (Value) -> Content, @SwiftUICore.KeyframesBuilder<Value> keyframes: @escaping (Value) -> KeyframePath)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.KeyframeAnimator<Value, KeyframePath, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.KeyframeAnimator : Swift.Sendable {
}
package protocol ResolvedPaint : Swift.Equatable, SwiftUICore.Animatable, SwiftUICore.ProtobufEncodableMessage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in context: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in context: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  var isClear: Swift.Bool { get }
  var isOpaque: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var resolvedGradient: SwiftUICore.ResolvedGradient? { get }
  #else
  var resolvedGradient: SwiftUICore.ResolvedGradient? { get }
  #endif
  var isCALayerCompatible: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? { get }
  #else
  static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? { get }
  #endif
  func encodePaint(to encoder: inout SwiftUICore.ProtobufEncoder) throws
}
extension SwiftUICore.ResolvedPaint {
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #else
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #endif
  package var isCALayerCompatible: Swift.Bool {
    get
  }
  package func encodePaint(to encoder: inout SwiftUICore.ProtobufEncoder) throws
}
package class AnyResolvedPaint : Swift.Equatable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var protobufPaint: Any? {
    get
  }
  #else
  package var protobufPaint: Any? {
    get
  }
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #else
  package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #endif
  package var isCALayerCompatible: Swift.Bool {
    get
  }
  package func isEqual(to other: SwiftUICore.AnyResolvedPaint) -> Swift.Bool
  package func visit<V>(_ visitor: inout V) where V : SwiftUICore.ResolvedPaintVisitor
  package func encode(to encoder: any Swift.Encoder) throws
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package static func == (lhs: SwiftUICore.AnyResolvedPaint, rhs: SwiftUICore.AnyResolvedPaint) -> Swift.Bool
  @objc deinit
}
final package class _AnyResolvedPaint<P> : SwiftUICore.AnyResolvedPaint where P : SwiftUICore.ResolvedPaint {
  final package let paint: P
  package init(_ paint: P)
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  final package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var protobufPaint: Any? {
    get
  }
  #else
  final package var protobufPaint: Any? {
    get
  }
  #endif
  final package var isClear: Swift.Bool {
    get
  }
  final package var isOpaque: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #else
  final package var resolvedGradient: SwiftUICore.ResolvedGradient? {
    get
  }
  #endif
  final package var isCALayerCompatible: Swift.Bool {
    get
  }
  final package func isEqual(to other: SwiftUICore.AnyResolvedPaint) -> Swift.Bool
  final package func visit<V>(_ visitor: inout V) where V : SwiftUICore.ResolvedPaintVisitor
  final package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @objc deinit
}
package protocol ResolvedPaintVisitor {
  mutating func visitPaint<P>(_ paint: P) where P : SwiftUICore.ResolvedPaint
}
package struct CodableResolvedPaint : SwiftUICore.ProtobufMessage {
  package struct Tag : Swift.Equatable, SwiftUICore.ProtobufTag {
    package let rawValue: Swift.UInt
    package init(rawValue: Swift.UInt)
    package static let color: SwiftUICore.CodableResolvedPaint.Tag
    package static let linearGradient: SwiftUICore.CodableResolvedPaint.Tag
    package static let radialGradient: SwiftUICore.CodableResolvedPaint.Tag
    package static let angularGradient: SwiftUICore.CodableResolvedPaint.Tag
    package static let ellipticalGradient: SwiftUICore.CodableResolvedPaint.Tag
    package static let image: SwiftUICore.CodableResolvedPaint.Tag
    package static let anchorRect: SwiftUICore.CodableResolvedPaint.Tag
    package static let shader: SwiftUICore.CodableResolvedPaint.Tag
    package static let meshGradient: SwiftUICore.CodableResolvedPaint.Tag
    package static func == (a: SwiftUICore.CodableResolvedPaint.Tag, b: SwiftUICore.CodableResolvedPaint.Tag) -> Swift.Bool
  }
  package var base: SwiftUICore.AnyResolvedPaint
  package init(_ paint: SwiftUICore.AnyResolvedPaint)
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum Axis : Swift.Int8, Swift.CaseIterable {
  case horizontal
  case vertical
  package init(edge: SwiftUICore.Edge)
  @inlinable package var otherAxis: SwiftUICore.Axis {
    get {
        return self == .horizontal ? .vertical : .horizontal
    }
  }
  @inlinable package var perpendicularEdges: (min: SwiftUICore.Edge, max: SwiftUICore.Edge) {
    get {
        return self == .vertical ? (.top, .bottom) : (.leading, .trailing)
    }
  }
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUICore.Axis.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let horizontal: SwiftUICore.Axis.Set
    public static let vertical: SwiftUICore.Axis.Set
    package static let both: SwiftUICore.Axis.Set
    package init(_ a: SwiftUICore.Axis)
    package func contains(_ a: SwiftUICore.Axis) -> Swift.Bool
    package func isOrthogonal(to other: SwiftUICore.Axis.Set) -> Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ArrayLiteralElement = SwiftUICore.Axis.Set.Element
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.Axis]
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUICore.Axis] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
extension SwiftUICore.Axis {
  package enum Alignment : CoreFoundation.CGFloat {
    case min
    case center
    case max
    package init(_ y: SwiftUICore._VAlignment)
    package init(_ x: SwiftUICore.TextAlignment)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(rawValue: CoreFoundation.CGFloat)
    #else
    package init?(rawValue: CoreFoundation.CGFloat)
    #endif
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias RawValue = CoreFoundation.CGFloat
    package var rawValue: CoreFoundation.CGFloat {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func debugLabel(_ l: Swift.String?) -> some SwiftUICore.Gesture<Self.Value>
  
  #else
  @_spi(Private) public func debugLabel(_ l: Swift.String?) -> some SwiftUICore.Gesture<Self.Value>
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PaddingLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency public var edges: SwiftUICore.Edge.Set
  @_Concurrency.MainActor @preconcurrency public var insets: SwiftUICore.EdgeInsets?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(edges: SwiftUICore.Edge.Set = .all, insets: SwiftUICore.EdgeInsets?) {
        self.edges = edges
        self.insets = insets
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(edges: SwiftUICore.Edge.Set = .all, insets: SwiftUICore.EdgeInsets?) {
        self.edges = edges
        self.insets = insets
    }
  #endif
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func ignoresAutomaticPadding(child: SwiftUICore.LayoutProxy) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func padding(_ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View {
        return modifier(_PaddingLayout(insets: insets))
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func padding(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View {
        let insets = length.map { EdgeInsets(_all: $0) }
        return modifier(_PaddingLayout(edges: edges, insets: insets))
    }
  
  #else
  @inlinable nonisolated public func padding(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View {
        let insets = length.map { EdgeInsets(_all: $0) }
        return modifier(_PaddingLayout(edges: edges, insets: insets))
    }
  
  #endif
  @inlinable nonisolated public func padding(_ length: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return padding(.all, length)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency public func _tightPadding() -> some SwiftUICore.View
  
}
package struct UpdateCycleDetector {
  package init()
  package mutating func reset()
  package mutating func dispatch(label: @autoclosure () -> Swift.String, isDebug: Swift.Bool = false) -> Swift.Bool
}
package protocol StyleContext {
  static func accepts<Q>(_: Q.Type, at: Swift.Int) -> Swift.Bool
  #if compiler(>=5.3) && $ParameterPacks
  static func acceptsAny<each Q>(_ queries: repeat (each Q).Type) -> Swift.Bool where repeat each Q : SwiftUICore.StyleContext
  #endif
  static func visitStyle<V>(_ visitor: inout V) where V : SwiftUICore.StyleContextVisitor
}
extension SwiftUICore.StyleContext {
  package static func visitStyle<V>(_ visitor: inout V) where V : SwiftUICore.StyleContextVisitor
  package static func accepts<Q>(_ query: Q.Type, at: Swift.Int) -> Swift.Bool
  #if compiler(>=5.3) && $ParameterPacks
  package static func acceptsAny<each Q>(_ queries: repeat (each Q).Type) -> Swift.Bool where repeat each Q : SwiftUICore.StyleContext
  #endif
  package static func acceptsTop<Q>(_ query: Q.Type) -> Swift.Bool
}
package struct WindowRootContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.WindowRootContext {
  package static var windowRoot: SwiftUICore.WindowRootContext {
    get
  }
}
package struct AccessibilityRepresentableStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.AccessibilityRepresentableStyleContext {
  package static var accessibilityRepresentable: SwiftUICore.AccessibilityRepresentableStyleContext {
    get
  }
}
package struct AccessibilityQuickActionStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.AccessibilityQuickActionStyleContext {
  package static var accessibilityQuickAction: SwiftUICore.AccessibilityQuickActionStyleContext {
    get
  }
}
package struct ContainerStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.ContainerStyleContext {
  package static var container: SwiftUICore.ContainerStyleContext {
    get
  }
}
package struct ContentListStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.ContentListStyleContext {
  package static var contentList: SwiftUICore.ContentListStyleContext {
    get
  }
}
package struct DocumentStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.DocumentStyleContext {
  package static var document: SwiftUICore.DocumentStyleContext {
    get
  }
}
package struct ControlGroupStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.ControlGroupStyleContext {
  package static var controlGroup: SwiftUICore.ControlGroupStyleContext {
    get
  }
}
package struct DialogActionStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.DialogActionStyleContext {
  package static var dialogAction: SwiftUICore.DialogActionStyleContext {
    get
  }
}
package struct HostingConfigurationContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.HostingConfigurationContext {
  package static var hostingConfiguration: SwiftUICore.HostingConfigurationContext {
    get
  }
}
package struct MenuStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.MenuStyleContext {
  package static var menu: SwiftUICore.MenuStyleContext {
    get
  }
}
package struct MultimodalListContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.MultimodalListContext {
  package static var multimodalList: SwiftUICore.MultimodalListContext {
    get
  }
}
package struct MultimodalListGridContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.MultimodalListGridContext {
  package static var multimodalListGrid: SwiftUICore.MultimodalListGridContext {
    get
  }
}
package struct MultimodalListStackContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.MultimodalListStackContext {
  package static var multimodalListStack: SwiftUICore.MultimodalListStackContext {
    get
  }
}
package struct NoStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.NoStyleContext {
  package static var none: SwiftUICore.NoStyleContext {
    get
  }
}
package struct ScrollViewStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.ScrollViewStyleContext {
  package static var scrollView: SwiftUICore.ScrollViewStyleContext {
    get
  }
}
package struct TextInputSuggestionsContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.TextInputSuggestionsContext {
  package static var textInputSuggestions: SwiftUICore.TextInputSuggestionsContext {
    get
  }
}
package struct SectionHeaderStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.SectionHeaderStyleContext {
  package static var sectionHeader: SwiftUICore.SectionHeaderStyleContext {
    get
  }
}
package struct SheetStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.SheetStyleContext {
  package static var sheet: SwiftUICore.SheetStyleContext {
    get
  }
}
package struct SheetToolbarStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.SheetToolbarStyleContext {
  package static var sheetToolbar: SwiftUICore.SheetToolbarStyleContext {
    get
  }
}
package struct SidebarStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.SidebarStyleContext {
  package static var sidebar: SwiftUICore.SidebarStyleContext {
    get
  }
}
package struct SwipeActionsStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.SwipeActionsStyleContext {
  package static var swipeActions: SwiftUICore.SwipeActionsStyleContext {
    get
  }
}
package struct TableStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.TableStyleContext {
  package static var table: SwiftUICore.TableStyleContext {
    get
  }
}
package struct ToolbarStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.ToolbarStyleContext {
  package static var toolbar: SwiftUICore.ToolbarStyleContext {
    get
  }
}
package struct InspectorStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.InspectorStyleContext {
  package static var inspector: SwiftUICore.InspectorStyleContext {
    get
  }
}
package struct MenuBarExtraWindowStyleContext : SwiftUICore.StyleContext {
  package init()
}
extension SwiftUICore.StyleContext where Self == SwiftUICore.MenuBarExtraWindowStyleContext {
  package static var menuBarExtraWindow: SwiftUICore.MenuBarExtraWindowStyleContext {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func styleContext<C>(_ context: C) -> some SwiftUICore.View where C : SwiftUICore.StyleContext
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _defaultContext() -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency package struct StyleContextWriter<Context> : SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier where Context : SwiftUICore.StyleContext {
  @_Concurrency.MainActor @preconcurrency package init()
  @_Concurrency.MainActor @preconcurrency package static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore.StyleContextWriter<Context>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@_Concurrency.MainActor @preconcurrency package struct DefaultStyleContextWriter : SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @_Concurrency.MainActor @preconcurrency package static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore.DefaultStyleContextWriter>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
package struct StyleContextInput : SwiftUICore.ViewInput {
  package static var defaultValue: SwiftUICore.AnyStyleContextType
  package typealias Value = SwiftUICore.AnyStyleContextType
}
package struct StyleContextAcceptsPredicate<Query> : SwiftUICore.ViewInputPredicate {
  package init()
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
}
#if compiler(>=5.3) && $ParameterPacks
package struct StyleContextAcceptsAnyPredicate<each Query> : SwiftUICore.ViewInputPredicate where repeat each Query : SwiftUICore.StyleContext {
  package init()
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
}
#endif
extension SwiftUICore._GraphInputs {
  package var isDefaultStyleContext: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $ParameterPacks
  package func accepts<each C>(_ context: repeat each C) -> Swift.Bool where repeat each C : SwiftUICore.StyleContext
  #endif
  package mutating func pushStyleContext<C>(_ context: C) where C : SwiftUICore.StyleContext
  package mutating func resetStyleContext()
  package func printStyleContext()
}
extension SwiftUICore._ViewListCountInputs {
  package mutating func resetStyleContext()
}
package typealias StyleContextPrintingModifier = SwiftUICore.EmptyModifier
package struct TupleStyleContext<T> : SwiftUICore.StyleContext {
  #if compiler(>=5.3) && $ParameterPacks
  package static func acceptsAny<each Q>(_: repeat (each Q).Type) -> Swift.Bool where repeat each Q : SwiftUICore.StyleContext
  #endif
  package static func visitStyle<V>(_ visitor: inout V) where V : SwiftUICore.StyleContextVisitor
  package static func accepts<Q>(_ query: Q.Type, at queryIndex: Swift.Int) -> Swift.Bool
}
package protocol StyleContextVisitor {
  mutating func visit<C>(_ context: C.Type) where C : SwiftUICore.StyleContext
}
package struct StyleContextDescriptor : SwiftUICore.TupleDescriptor {
  package static var typeCache: [Swift.ObjectIdentifier : SwiftUICore.TupleTypeDescription<SwiftUICore.StyleContextDescriptor>]
  package static var descriptor: Swift.UnsafeRawPointer {
    get
  }
}
extension SwiftUICore.TypeConformance where P == SwiftUICore.StyleContextDescriptor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func visitType<V>(visitor: Swift.UnsafeMutablePointer<V>) where V : SwiftUICore.StyleContextVisitor
  #else
  package func visitType<V>(visitor: Swift.UnsafeMutablePointer<V>) where V : SwiftUICore.StyleContextVisitor
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct TupleView<T> : SwiftUICore.PrimitiveView, SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var value: T
  @inlinable nonisolated public init(_ value: T) { self.value = value }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.TupleView<T>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.TupleView<T>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.TupleView : Swift.Sendable {
}
extension SwiftUICore.ResolvedShadowStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(nsShadow: ObjectiveC.NSObject)
  #else
  package init?(nsShadow: ObjectiveC.NSObject)
  #endif
}
extension Swift.Dictionary where Key == Foundation.NSAttributedString.Key, Value == Any {
  package mutating func setShadow(shadowStyle style: SwiftUICore.ResolvedShadowStyle)
  package mutating func setShadow(customStyleIndex: Swift.Int)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BlendModeEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var blendMode: SwiftUICore.BlendMode
  @inlinable @_Concurrency.MainActor @preconcurrency public init(blendMode: SwiftUICore.BlendMode) {
        self.blendMode = blendMode
    }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._BlendModeEffect, b: SwiftUICore._BlendModeEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BlendModeEffect : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 12.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 8.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ExtendedBlendModeEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var blendMode: SwiftUICore.GraphicsContext.BlendMode
  @_spi(Private) @inlinable @_Concurrency.MainActor @preconcurrency public init(blendMode: SwiftUICore.GraphicsContext.BlendMode) {
        self.blendMode = blendMode
    }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @_spi(Private) nonisolated public static func == (a: SwiftUICore._ExtendedBlendModeEffect, b: SwiftUICore._ExtendedBlendModeEffect) -> Swift.Bool
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func blendMode(_ blendMode: SwiftUICore.BlendMode) -> some SwiftUICore.View {
        return modifier(_BlendModeEffect(blendMode: blendMode))
    }
  
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 12.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 8.0)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func extendedBlendMode(_ blendMode: SwiftUICore.GraphicsContext.BlendMode) -> some SwiftUICore.View {
        return modifier(_ExtendedBlendModeEffect(blendMode: blendMode))
    }
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func graphicsBlendMode(_ blendMode: SwiftUICore.GraphicsBlendMode) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _Placement : Swift.Equatable {
  public var proposedSize: CoreFoundation.CGSize {
    get
    set
  }
  package var proposedSize_: SwiftUICore._ProposedSize
  public var anchor: SwiftUICore.UnitPoint
  public var anchorPosition: CoreFoundation.CGPoint
  public init(proposedSize: CoreFoundation.CGSize, anchoring anchor: SwiftUICore.UnitPoint = .topLeading, at anchorPosition: CoreFoundation.CGPoint)
  package init(proposedSize: SwiftUICore._ProposedSize, anchoring anchor: SwiftUICore.UnitPoint, at anchorPosition: CoreFoundation.CGPoint)
  package init(proposedSize: SwiftUICore._ProposedSize, at anchorPosition: CoreFoundation.CGPoint)
  package init(proposedSize: CoreFoundation.CGSize, aligning anchor: SwiftUICore.UnitPoint, in area: CoreFoundation.CGSize)
  package init(proposedSize: SwiftUICore._ProposedSize, aligning anchor: SwiftUICore.UnitPoint, in area: CoreFoundation.CGSize)
  public static func == (a: SwiftUICore._Placement, b: SwiftUICore._Placement) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._Placement : Swift.Sendable {
}
extension SwiftUICore._Placement {
  package func frameOrigin(childSize: CoreFoundation.CGSize) -> CoreFoundation.CGPoint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMatrixEffect : SwiftUICore.RendererEffect {
  @_Concurrency.MainActor @preconcurrency public var matrix: SwiftUICore._ColorMatrix
  @inlinable @_Concurrency.MainActor @preconcurrency public init(matrix: SwiftUICore._ColorMatrix) {
        self.matrix = matrix
    }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _colorMatrix(_ matrix: SwiftUICore._ColorMatrix) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 10.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PremultipliedColorMatrixEffect : SwiftUICore.RendererEffect {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var matrix: SwiftUICore._ColorMatrix
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(matrix: SwiftUICore._ColorMatrix) {
        self.matrix = matrix
    }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 10.0)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func premultipliedColorMatrix(_ matrix: SwiftUICore._ColorMatrix) -> some SwiftUICore.View {
        return modifier(_PremultipliedColorMatrixEffect(matrix: matrix))
    }
  
}
package protocol ContentResponder {
  func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  func contentPath(size: CoreFoundation.CGSize) -> SwiftUICore.Path
  func contentPath(size: CoreFoundation.CGSize, kind: SwiftUICore.ContentShapeKinds) -> SwiftUICore.Path
}
extension SwiftUICore.ContentResponder {
  package func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  package func contentPath(size: CoreFoundation.CGSize) -> SwiftUICore.Path
  package func contentPath(size: CoreFoundation.CGSize, kind: SwiftUICore.ContentShapeKinds) -> SwiftUICore.Path
}
package struct TrivialContentResponder : SwiftUICore.ContentResponder {
  package init()
}
package struct LeafResponderFilter<Data> : AttributeGraph.StatefulRule where Data : SwiftUICore.ContentResponder {
  package init(data: AttributeGraph.Attribute<Data>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>)
  package typealias Value = SwiftUICore.ViewRespondersKey.Value
  package mutating func updateValue()
}
package struct ContentResponderHelper<Data> where Data : SwiftUICore.ContentResponder {
  package var size: CoreFoundation.CGSize
  package var data: Data?
  package var transform: SwiftUICore.ViewTransform
  package init()
  package mutating func update(data: (value: Data, changed: Swift.Bool), size: (value: SwiftUICore.ViewSize, changed: Swift.Bool), position: (value: SwiftUICore.ViewOrigin, changed: Swift.Bool), transform: (value: SwiftUICore.ViewTransform, changed: Swift.Bool), parent: SwiftUICore.ViewResponder)
  package var globalPosition: CoreFoundation.CGPoint {
    get
  }
  package var bounds: CoreFoundation.CGRect {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #else
  package mutating func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #else
  package mutating func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #endif
}
extension SwiftUICore.DisplayList.ViewUpdater.Platform {
  package func viewLayer(_ view: Swift.AnyObject) -> QuartzCore.CALayer
}
#if compiler(>=5.3) && $NoncopyableGenerics
package func bind<T>(_ action: ((T) -> Swift.Void)?, _ value: T) -> (() -> Swift.Void)?
#else
package func bind<T>(_ action: ((T) -> Swift.Void)?, _ value: T) -> (() -> Swift.Void)?
#endif
extension Swift.Double {
  package var quantized: Swift.Double {
    get
  }
}
extension Swift.Float {
  package var quantized: Swift.Float {
    get
  }
}
extension CoreFoundation.CGFloat {
  package var quantized: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.FloatingPoint {
  package func mappingNaN(to value: Self) -> Self
}
extension Swift.BinaryFloatingPoint {
  package func ensuringNonzeroValue() -> Self
}
extension Swift.UInt32 {
  package mutating func unsafeIncrement()
}
extension Swift.FixedWidthInteger {
  package init<T>(clamping value: T) where T : Swift.BinaryFloatingPoint
}
extension Swift.Double {
  package init(_ duration: Swift.Duration)
}
package func abs(_ duration: Swift.Duration) -> Swift.Duration
extension Foundation.Date {
  package var nextUp: Foundation.Date {
    get
  }
  package var nextDown: Foundation.Date {
    get
  }
}
package struct Pair<First, Second> {
  package var first: First
  package var second: Second
  package init(_ first: First, _ second: Second)
}
extension SwiftUICore.Pair : Swift.Equatable where First : Swift.Equatable, Second : Swift.Equatable {
  package static func == (a: SwiftUICore.Pair<First, Second>, b: SwiftUICore.Pair<First, Second>) -> Swift.Bool
}
extension SwiftUICore.Pair : Swift.Hashable where First : Swift.Hashable, Second : Swift.Hashable {
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.Pair : Swift.Codable where First : Swift.Decodable, First : Swift.Encodable, Second : Swift.Decodable, Second : Swift.Encodable {
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package struct ArrayID : Swift.Hashable {
  package init<T>(_ items: [T])
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.ArrayID, b: SwiftUICore.ArrayID) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package func address(of object: Swift.AnyObject) -> Swift.UnsafeRawPointer
package struct UnsafeMutableBufferProjectionPointer<Scene, Subject> : Swift.RandomAccessCollection, Swift.MutableCollection {
  package var startIndex: Swift.Int {
    get
  }
  package let endIndex: Swift.Int
  @inline(__always) package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package init(start: Swift.UnsafeMutablePointer<Subject>, count: Swift.Int)
  #else
  @inline(__always) package init(start: Swift.UnsafeMutablePointer<Subject>, count: Swift.Int)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package init(_ base: Swift.UnsafeMutableBufferPointer<Scene>, _ l: Swift.WritableKeyPath<Scene, Subject>)
  #else
  @inline(__always) package init(_ base: Swift.UnsafeMutableBufferPointer<Scene>, _ l: Swift.WritableKeyPath<Scene, Subject>)
  #endif
  package subscript(i: Swift.Int) -> Subject {
    @_transparent unsafeAddress
    @_transparent nonmutating unsafeMutableAddress
  }
  package typealias Element = Subject
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<Swift.Int>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.UnsafeMutableBufferProjectionPointer<Scene, Subject>>
  package typealias SubSequence = Swift.Slice<SwiftUICore.UnsafeMutableBufferProjectionPointer<Scene, Subject>>
}
extension Swift.Numeric {
  package var isNaN: Swift.Bool {
    get
  }
  package var isFinite: Swift.Bool {
    get
  }
}
extension Swift.Sequence {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func first<T>(ofType: T.Type) -> T?
  #else
  package func first<T>(ofType: T.Type) -> T?
  #endif
}
extension Swift.Collection where Self.Element : Swift.Equatable {
  package func commonPrefix<Other>(with other: Other) -> (Self.SubSequence, Other.SubSequence) where Other : Swift.Collection, Self.Element == Other.Element
}
extension Swift.BidirectionalCollection where Self.Element : Swift.Equatable {
  package func commonSuffix<Other>(with other: Other) -> (Self.SubSequence, Other.SubSequence) where Other : Swift.BidirectionalCollection, Self.Element == Other.Element
}
package struct CountingIndexCollection<Base> where Base : Swift.BidirectionalCollection {
  package let base: Base
  package init(_ base: Base)
}
extension SwiftUICore.CountingIndexCollection : Swift.BidirectionalCollection {
  package typealias Index = SwiftUICore.CountingIndex<Base.Index>
  package typealias Element = Base.Element
  package var startIndex: SwiftUICore.CountingIndexCollection<Base>.Index {
    get
  }
  package var endIndex: SwiftUICore.CountingIndexCollection<Base>.Index {
    get
  }
  package func index(before i: SwiftUICore.CountingIndexCollection<Base>.Index) -> SwiftUICore.CountingIndexCollection<Base>.Index
  package func index(after i: SwiftUICore.CountingIndexCollection<Base>.Index) -> SwiftUICore.CountingIndexCollection<Base>.Index
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func index(_ i: SwiftUICore.CountingIndex<Base.Index>, offsetBy distance: Swift.Int, limitedBy limit: SwiftUICore.CountingIndex<Base.Index>) -> SwiftUICore.CountingIndex<Base.Index>?
  #else
  package func index(_ i: SwiftUICore.CountingIndex<Base.Index>, offsetBy distance: Swift.Int, limitedBy limit: SwiftUICore.CountingIndex<Base.Index>) -> SwiftUICore.CountingIndex<Base.Index>?
  #endif
  package subscript(position: SwiftUICore.CountingIndexCollection<Base>.Index) -> SwiftUICore.CountingIndexCollection<Base>.Element {
    get
  }
  package typealias Indices = Swift.DefaultIndices<SwiftUICore.CountingIndexCollection<Base>>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.CountingIndexCollection<Base>>
  package typealias SubSequence = Swift.Slice<SwiftUICore.CountingIndexCollection<Base>>
}
package struct CountingIndex<Base> : Swift.Equatable where Base : Swift.Comparable {
  package let base: Base
  package let offset: Swift.Int?
  package static func == (a: SwiftUICore.CountingIndex<Base>, b: SwiftUICore.CountingIndex<Base>) -> Swift.Bool
}
extension SwiftUICore.CountingIndex : Swift.Comparable {
  package static func < (lhs: SwiftUICore.CountingIndex<Base>, rhs: SwiftUICore.CountingIndex<Base>) -> Swift.Bool
}
extension SwiftUICore.CountingIndex : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
package func == <A, B, C, D>(lhs: ((A, B), (C, D)), rhs: ((A, B), (C, D))) -> Swift.Bool where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable, D : Swift.Equatable
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional {
  package init(if condition: Swift.Bool, then value: @autoclosure () -> Wrapped)
}
#else
extension Swift.Optional {
  package init(if condition: Swift.Bool, then value: @autoclosure () -> Wrapped)
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
package func min<C>(_ a: C, ifPresent b: C?) -> C where C : Swift.Comparable
#else
package func min<C>(_ a: C, ifPresent b: C?) -> C where C : Swift.Comparable
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
package func max<C>(_ a: C, ifPresent b: C?) -> C where C : Swift.Comparable
#else
package func max<C>(_ a: C, ifPresent b: C?) -> C where C : Swift.Comparable
#endif
@propertyWrapper package enum IndirectOptional<Wrapped> : Swift.ExpressibleByNilLiteral {
  case none
  indirect case some(Wrapped)
  package init(_ value: Wrapped)
  package init(nilLiteral: ())
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(wrappedValue: Wrapped?)
  #else
  package init(wrappedValue: Wrapped?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var wrappedValue: Wrapped? {
    get
    set
  }
  #else
  package var wrappedValue: Wrapped? {
    get
    set
  }
  #endif
}
extension SwiftUICore.IndirectOptional : Swift.Equatable where Wrapped : Swift.Equatable {
  package static func == (a: SwiftUICore.IndirectOptional<Wrapped>, b: SwiftUICore.IndirectOptional<Wrapped>) -> Swift.Bool
}
extension SwiftUICore.IndirectOptional : Swift.Hashable where Wrapped : Swift.Hashable {
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package struct Cache3<Key, Value> where Key : Swift.Equatable {
  package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package func find(_ k: Key) -> Value?
  #else
  @inline(__always) package func find(_ k: Key) -> Value?
  #endif
  @inline(__always) package mutating func put(_ k: Key, value: Value)
  @inline(__always) package mutating func get(_ k: Key, makeValue: () -> Value) -> Value
}
extension Swift.Dictionary {
  package func optimisticFilter(_ predicate: (Swift.Dictionary<Key, Value>.Element) -> Swift.Bool) -> Swift.Dictionary<Key, Value>
  package init(identifying items: some Sequence<Value>, by identifier: (Value) -> Key)
}
#if compiler(>=5.3) && $NoncopyableGenerics
package func readEnvironment(_ value: inout Swift.Bool?, _ key: Swift.UnsafePointer<Swift.CChar>) -> Swift.Bool
#else
package func readEnvironment(_ value: inout Swift.Bool?, _ key: Swift.UnsafePointer<Swift.CChar>) -> Swift.Bool
#endif
extension Swift.BidirectionalCollection where Self : Swift.MutableCollection, Self.Element : Swift.Comparable {
  package mutating func formNextLexicographicalPermutation() -> Swift.Bool
}
extension Swift.RandomAccessCollection {
  package func lowerBound(_ predicate: (Self.Element) -> Swift.Bool) -> Self.Index
}
extension Swift.RandomAccessCollection where Self.Element : Swift.Comparable {
  package func lowerBound(of value: Self.Element) -> Self.Index
}
extension Swift.Range {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func intersection(_ other: Swift.Range<Bound>) -> Swift.Range<Bound>?
  #else
  package func intersection(_ other: Swift.Range<Bound>) -> Swift.Range<Bound>?
  #endif
  package func contains(_ other: Swift.Range<Bound>) -> Swift.Bool
}
extension Swift.Range where Bound : Swift.Numeric {
  package var length: Bound {
    get
  }
}
extension Swift.Range where Bound : Swift.SignedNumeric {
  package func offset(by delta: Bound) -> Swift.Range<Bound>
}
extension Swift.ClosedRange {
  package init(bounds a: Bound, _ b: Bound)
  package func union(_ other: Swift.ClosedRange<Bound>) -> Swift.ClosedRange<Bound>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func intersection(_ other: Swift.ClosedRange<Bound>) -> Swift.ClosedRange<Bound>?
  #else
  package func intersection(_ other: Swift.ClosedRange<Bound>) -> Swift.ClosedRange<Bound>?
  #endif
  package func contains(_ other: Swift.ClosedRange<Bound>) -> Swift.Bool
}
extension Swift.ClosedRange where Bound : Swift.Numeric {
  package var length: Bound {
    get
  }
  package static func + (lhs: Swift.ClosedRange<Bound>, rhs: Bound) -> Swift.ClosedRange<Bound>
  package static func - (lhs: Swift.ClosedRange<Bound>, rhs: Bound) -> Swift.ClosedRange<Bound>
  package static func += (lhs: inout Swift.ClosedRange<Bound>, rhs: Bound)
  package static func -= (lhs: inout Swift.ClosedRange<Bound>, rhs: Bound)
}
extension Swift.ClosedRange where Bound : Swift.SignedNumeric {
  package func offset(by delta: Bound) -> Swift.ClosedRange<Bound>
}
extension Swift.ClosedRange where Bound == Foundation.Date {
  package func progress(at date: Foundation.Date, countdown: Swift.Bool) -> Swift.Double
}
package struct CollectionOfTwo<T> : Swift.RandomAccessCollection, Swift.MutableCollection {
  package var startIndex: Swift.Int {
    get
  }
  package var endIndex: Swift.Int {
    get
  }
  package var elements: (T, T)
  package subscript(i: Swift.Int) -> T {
    get
    set
  }
  package typealias Element = T
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<Swift.Int>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.CollectionOfTwo<T>>
  package typealias SubSequence = Swift.Slice<SwiftUICore.CollectionOfTwo<T>>
}
package func conformsToProtocol(_ type: any Any.Type, _ desc: Swift.UnsafeRawPointer) -> Swift.Bool
extension Swift.String {
  package var isNewLineOrReturn: Swift.Bool {
    get
  }
}
extension Swift.DefaultStringInterpolation {
  package mutating func appendInterpolation(rounding value: Swift.Float)
  package mutating func appendInterpolation(rounding value: Swift.Double)
  package mutating func appendInterpolation(rounding value: Swift.SIMD2<Swift.Double>)
  package mutating func appendInterpolation(rounding value: Swift.SIMD3<Swift.Double>)
  package mutating func appendInterpolation(rounding value: Swift.SIMD4<Swift.Double>)
}
extension Swift.Sequence {
  package func sorted(by keyPath: Swift.KeyPath<Self.Element, some Comparable>) -> [Self.Element]
}
extension Swift.Array {
  package mutating func sort(by keyPath: Swift.KeyPath<Element, some Comparable>, reversed: Swift.Bool = false)
}
extension Swift.Array where Element : Swift.Hashable {
  package func removingDuplicates() -> [Element]
  package mutating func removeDuplicates()
}
@propertyWrapper package struct EquatableOptionalObject<T> : Swift.Equatable where T : AnyObject {
  package var wrappedValue: T?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(wrappedValue: T?)
  #else
  package init(wrappedValue: T?)
  #endif
  package static func == (lhs: SwiftUICore.EquatableOptionalObject<T>, rhs: SwiftUICore.EquatableOptionalObject<T>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Group<Content> {
  public typealias Body = Swift.Never
  @usableFromInline
  package var content: Content
  @_disfavoredOverload @_alwaysEmitIntoClient internal init(_content: Content) { self.content = _content }
}
@available(*, unavailable)
extension SwiftUICore.Group : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Group {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient public static func _make(content: Content) -> SwiftUICore.Group<Content> {
         
         
        self.init(_content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Group : SwiftUICore.View, SwiftUICore.MultiView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @inlinable nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content) {
        self.content = content()
    }
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
extension SwiftUICore._ViewListOutputs {
  package static func sectionListOutputs(_ outputs: [SwiftUICore._ViewListOutputs], inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  package static func groupViewList<Parent, Footer>(parent: SwiftUICore._GraphValue<Parent>, footer: AttributeGraph.Attribute<Footer>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs where Parent : SwiftUICore.View, Footer : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func groupViewListCount<V, H, F>(inputs: SwiftUICore._ViewListCountInputs, contentType: V.Type, headerType: H.Type, footerType: F.Type) -> Swift.Int? where V : SwiftUICore.View, H : SwiftUICore.View, F : SwiftUICore.View
  #else
  package static func groupViewListCount<V, H, F>(inputs: SwiftUICore._ViewListCountInputs, contentType: V.Type, headerType: H.Type, footerType: F.Type) -> Swift.Int? where V : SwiftUICore.View, H : SwiftUICore.View, F : SwiftUICore.View
  #endif
  package static func nonEmptyParentViewList(inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
package struct DepthTrait : AttributeGraph.Rule {
  package init(traits: AttributeGraph.OptionalAttribute<SwiftUICore.ViewTraitCollection>)
  package var value: SwiftUICore.ViewTraitCollection {
    get
  }
  package typealias Value = SwiftUICore.ViewTraitCollection
}
package struct SectionHeaderTrait : AttributeGraph.Rule {
  package init(traits: AttributeGraph.OptionalAttribute<SwiftUICore.ViewTraitCollection>)
  package var value: SwiftUICore.ViewTraitCollection {
    get
  }
  package typealias Value = SwiftUICore.ViewTraitCollection
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct DepthTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Int {
    get { 0 }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Int
}
@available(*, unavailable)
extension SwiftUICore.DepthTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var groupDepth: Swift.Int {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsSectionedTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsSectionedTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var isSectioned: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func definesSection() -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsEmptyViewTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsEmptyViewTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var isEmptyView: Swift.Bool {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsSectionHeaderTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsSectionHeaderTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var isSectionHeader: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsSectionFooterTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsSectionFooterTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var isSectionFooter: Swift.Bool {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func privacySensitive(_ sensitive: Swift.Bool = true) -> some SwiftUICore.View
  
}
package protocol PrivacyReductionAccessibilityProvider {
  associatedtype Modifier : SwiftUICore.ViewModifier
  static func makeModifier(shouldRedact: Swift.Bool) -> Self.Modifier
}
extension SwiftUICore._GraphInputs {
  package var privacyReductionAccessibilityProvider: (any SwiftUICore.PrivacyReductionAccessibilityProvider.Type) {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var privacyReductionAccessibilityProvider: (any SwiftUICore.PrivacyReductionAccessibilityProvider.Type) {
    get
    set
  }
}
extension SwiftUICore.EnvironmentValues {
  package var sensitiveContent: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContrastEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable @_Concurrency.MainActor @preconcurrency public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._ContrastEffect, b: SwiftUICore._ContrastEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func contrast(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_ContrastEffect(amount: amount))
    }
  
}
package protocol EventGraphHost : AnyObject {
  var eventBindingManager: SwiftUICore.EventBindingManager { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var responderNode: SwiftUICore.ResponderNode? { get }
  #else
  var responderNode: SwiftUICore.ResponderNode? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var focusedResponder: SwiftUICore.ResponderNode? { get }
  #else
  var focusedResponder: SwiftUICore.ResponderNode? { get }
  #endif
  var nextGestureUpdateTime: SwiftUICore.Time { get }
  func setInheritedPhase(_ phase: SwiftUICore._GestureInputs.InheritedPhase)
  func sendEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType], rootNode: SwiftUICore.ResponderNode, at time: SwiftUICore.Time) -> SwiftUICore.GesturePhase<Swift.Void>
  func resetEvents()
  #if compiler(>=5.3) && $NoncopyableGenerics
  func gestureCategory() -> SwiftUICore.GestureCategory?
  #else
  func gestureCategory() -> SwiftUICore.GestureCategory?
  #endif
}
extension Foundation.URL : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension Foundation.UUID : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension Foundation.Data : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension Foundation.Locale : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  @frozen public enum Orientation : Swift.UInt8, Swift.CaseIterable, Swift.Hashable {
    case up
    case upMirrored
    case down
    case downMirrored
    case left
    case leftMirrored
    case right
    case rightMirrored
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public init?(exifValue: Swift.Int)
    #else
    @_spi(Private) public init?(exifValue: Swift.Int)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.UInt8)
    #else
    public init?(rawValue: Swift.UInt8)
    #endif
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias AllCases = [SwiftUICore.Image.Orientation]
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.UInt8
    public static var allCases: [SwiftUICore.Image.Orientation] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
extension SwiftUICore.Image.Orientation : SwiftUICore.ProtobufEnum {
}
extension CoreFoundation.CGSize {
  package func apply(_ orientation: SwiftUICore.Image.Orientation) -> CoreFoundation.CGSize
  package func unapply(_ orientation: SwiftUICore.Image.Orientation) -> CoreFoundation.CGSize
}
extension CoreFoundation.CGRect {
  package func apply(_ orientation: SwiftUICore.Image.Orientation, in size: CoreFoundation.CGSize) -> CoreFoundation.CGRect
  package func unapply(_ orientation: SwiftUICore.Image.Orientation, in size: CoreFoundation.CGSize) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGAffineTransform {
  package init(orientation: SwiftUICore.Image.Orientation, in size: CoreFoundation.CGSize)
  package init(orientation: SwiftUICore.Image.Orientation, in rect: CoreFoundation.CGRect)
  package mutating func apply(_ orientation: SwiftUICore.Image.Orientation, in size: CoreFoundation.CGSize)
  package mutating func apply(_ orientation: SwiftUICore.Image.Orientation)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct UnitCurve {
  package var function: SwiftUICore.UnitCurve.Function
  public static func bezier(startControlPoint: SwiftUICore.UnitPoint, endControlPoint: SwiftUICore.UnitPoint) -> SwiftUICore.UnitCurve
  public func value(at progress: Swift.Double) -> Swift.Double
  public func velocity(at progress: Swift.Double) -> Swift.Double
  public var inverse: SwiftUICore.UnitCurve {
    get
  }
}
extension SwiftUICore.UnitCurve {
  package enum Function : Swift.Hashable {
    case linear
    case circularEaseIn
    case circularEaseOut
    case circularEaseInOut
    case bezier(startControlPoint: SwiftUICore.UnitPoint, endControlPoint: SwiftUICore.UnitPoint)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.UnitCurve.Function, b: SwiftUICore.UnitCurve.Function) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.UnitCurve : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitCurve : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.UnitCurve, b: SwiftUICore.UnitCurve) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitCurve {
  @available(*, deprecated, message: "Use easeInOut instead")
  public static let easeInEaseOut: SwiftUICore.UnitCurve
  public static let easeInOut: SwiftUICore.UnitCurve
  public static let easeIn: SwiftUICore.UnitCurve
  public static let easeOut: SwiftUICore.UnitCurve
  public static let circularEaseIn: SwiftUICore.UnitCurve
  public static let circularEaseOut: SwiftUICore.UnitCurve
  public static let circularEaseInOut: SwiftUICore.UnitCurve
  public static let linear: SwiftUICore.UnitCurve
}
extension SwiftUICore.UnitCurve {
  package struct CubicSolver : Swift.Sendable, Swift.Hashable {
    package init(startControlPoint: SwiftUICore.UnitPoint, endControlPoint: SwiftUICore.UnitPoint)
    package var startControlPoint: SwiftUICore.UnitPoint {
      get
    }
    package var endControlPoint: SwiftUICore.UnitPoint {
      get
    }
    package func value(at time: Swift.Double) -> Swift.Double
    package func velocity(at time: Swift.Double) -> Swift.Double
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.UnitCurve.CubicSolver, b: SwiftUICore.UnitCurve.CubicSolver) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftUICore.UnitCurve.CubicSolver : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.UnitCurve {
  package init<T>(_ curve: SwiftUICore.BezierTimingFunction<T>) where T : Swift.BinaryFloatingPoint
}
package struct UnitCurveAnimation : SwiftUICore.InternalCustomAnimation {
  package var duration: Foundation.TimeInterval
  package var curve: SwiftUICore.UnitCurve
  package init(curve: SwiftUICore.UnitCurve, duration: Foundation.TimeInterval)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  package var function: SwiftUICore.Animation.Function {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.UnitCurveAnimation, b: SwiftUICore.UnitCurveAnimation) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
#if compiler(>=5.3) && $Macros && $AttachedMacros
@attached(accessor) @attached(peer, names: prefixed(__Key_)) public macro Entry() = #externalMacro(
    module: "SwiftUIMacros", type: "EntryMacro"
)
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(*, deprecated, message: "Attach @Entry macro to each individual property instead")
@attached(memberAttribute) package macro CustomProperties() = #externalMacro(
    module: "SwiftUIInternalMacros", type: "CustomPropertiesMacro"
)
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(*, deprecated, renamed: "Entry")
@attached(accessor) @attached(peer, names: prefixed(__Key_)) package macro CustomProperty() = #externalMacro(
    module: "SwiftUIInternalMacros", type: "CustomPropertyMacro"
)
#endif
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct MatchedGeometryProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
  public static let position: SwiftUICore.MatchedGeometryProperties
  public static let size: SwiftUICore.MatchedGeometryProperties
  public static let frame: SwiftUICore.MatchedGeometryProperties
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let clipRect: SwiftUICore.MatchedGeometryProperties
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.MatchedGeometryProperties
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.MatchedGeometryProperties
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.UInt32
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func matchedGeometryEffect<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID, properties: SwiftUICore.MatchedGeometryProperties = .frame, anchor: SwiftUICore.UnitPoint = .center, isSource: Swift.Bool = true) -> some SwiftUICore.View where ID : Swift.Hashable {
        return modifier(_MatchedGeometryEffect(id: id,
            namespace: namespace, properties: properties,
            anchor: anchor, isSource: isSource))
    }
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func matchedGeometryEffect<ID, S>(id: ID, in namespace: SwiftUICore.Namespace.ID, clipShape: S, properties: SwiftUICore.MatchedGeometryProperties = .frame, anchor: SwiftUICore.UnitPoint = .center, isSource: Swift.Bool = true) -> some SwiftUICore.View where ID : Swift.Hashable, S : SwiftUICore.Shape
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _MatchedGeometryEffect<ID> : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where ID : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var id: ID
  @_Concurrency.MainActor @preconcurrency public var namespace: SwiftUICore.Namespace.ID
  @_Concurrency.MainActor @preconcurrency public var args: (properties: SwiftUICore.MatchedGeometryProperties, anchor: SwiftUICore.UnitPoint, isSource: Swift.Bool)
  @inlinable @_Concurrency.MainActor @preconcurrency public init(id: ID, namespace: SwiftUICore.Namespace.ID, properties: SwiftUICore.MatchedGeometryProperties, anchor: SwiftUICore.UnitPoint, isSource: Swift.Bool) {
        (self.id, self.namespace) = (id, namespace)
        args = (properties: properties, anchor: anchor, isSource: isSource)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._MatchedGeometryEffect<ID>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._MatchedGeometryEffect : Swift.Sendable {
}
extension SwiftUICore.Color.Resolved {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(platformColor: Swift.AnyObject)
  #else
  package init?(platformColor: Swift.AnyObject)
  #endif
  package var kitColor: ObjectiveC.NSObject {
    get
  }
}
extension SwiftUI_SPI.CoreColor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func platformColor(resolvedColor: SwiftUICore.Color.Resolved) -> ObjectiveC.NSObject?
  #else
  package static func platformColor(resolvedColor: SwiftUICore.Color.Resolved) -> ObjectiveC.NSObject?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func platformColor(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> ObjectiveC.NSObject?
  #else
  package static func platformColor(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> ObjectiveC.NSObject?
  #endif
}
package protocol CoreUINamedColorProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func effectiveCGColor(cuiColor: CoreUI.CUINamedColor, in environment: SwiftUICore.EnvironmentValues) -> CoreGraphics.CGColor?
  #else
  static func effectiveCGColor(cuiColor: CoreUI.CUINamedColor, in environment: SwiftUICore.EnvironmentValues) -> CoreGraphics.CGColor?
  #endif
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var cuiNamedColorProvider: (any SwiftUICore.CoreUINamedColorProvider.Type)? {
    get
    set
  }
  #else
  package var cuiNamedColorProvider: (any SwiftUICore.CoreUINamedColorProvider.Type)? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _EnvironmentKeyWritingModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>
  @_Concurrency.MainActor @preconcurrency public var value: Value
  @inlinable nonisolated public init(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentKeyWritingModifier<Value>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._EnvironmentKeyWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, _ value: V) -> some SwiftUICore.View {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }
  
}
extension SwiftUICore._ViewInputs {
  package func makeIndirectOutputs() -> SwiftUICore._ViewOutputs
}
extension SwiftUICore._ViewOutputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func setIndirectDependency(_ dependency: AttributeGraph.AnyAttribute?)
  #else
  package func setIndirectDependency(_ dependency: AttributeGraph.AnyAttribute?)
  #endif
  package func attachIndirectOutputs(to childOutputs: SwiftUICore._ViewOutputs)
  package func detachIndirectOutputs()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public struct OpenURLAction {
  package typealias SystemHandler = (Foundation.URL, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void
  package typealias UserConfiguredHandler = (Foundation.URL) -> SwiftUICore.OpenURLAction.Result
  package enum Handler {
    case system(SwiftUICore.OpenURLAction.SystemHandler)
    case custom(SwiftUICore.OpenURLAction.UserConfiguredHandler, fallback: SwiftUICore.OpenURLAction.SystemHandler? = nil)
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct Result : Swift.Sendable {
    public static let handled: SwiftUICore.OpenURLAction.Result
    public static let discarded: SwiftUICore.OpenURLAction.Result
    public static let systemAction: SwiftUICore.OpenURLAction.Result
    public static func systemAction(_ url: Foundation.URL) -> SwiftUICore.OpenURLAction.Result
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency @_Concurrency.MainActor public init(handler: @escaping (Foundation.URL) -> SwiftUICore.OpenURLAction.Result)
  @_Concurrency.MainActor @preconcurrency package init(handler: SwiftUICore.OpenURLAction.Handler)
  @_Concurrency.MainActor @preconcurrency package init(isDefault: Swift.Bool = false, handler: @escaping (Foundation.URL, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(_handler handler: @escaping (Foundation.URL, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(_ url: Foundation.URL)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(_ url: Foundation.URL, completion: @escaping (_ accepted: Swift.Bool) -> Swift.Void)
}
extension SwiftUICore.OpenURLAction {
  @_Concurrency.MainActor @preconcurrency package static var invalidAction: SwiftUICore.OpenURLAction {
    get
  }
}
package struct OpenURLActionKey : SwiftUICore.EnvironmentKey {
  package static let defaultValue: SwiftUICore.OpenURLAction?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = SwiftUICore.OpenURLAction?
}
extension SwiftUICore.EnvironmentValues {
  package var hasSystemOpenURLAction: Swift.Bool {
    get
    set
  }
}
package struct OpenSensitiveURLActionKey : SwiftUICore.EnvironmentKey {
  package static let defaultValue: SwiftUICore.OpenURLAction?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = SwiftUICore.OpenURLAction?
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var openURL: SwiftUICore.OpenURLAction {
    get
    @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    set
  }
  public var _openURL: SwiftUICore.OpenURLAction {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var _openSensitiveURL: SwiftUICore.OpenURLAction {
    get
    set
  }
}
extension SwiftUICore.Gesture {
  package func delayed(by duration: Swift.Double, filter: @escaping (Self.Value) -> Swift.Bool = { _ in true }) -> SwiftUICore.ModifierGesture<SwiftUICore.DelayedGesture<Self.Value>, Self>
}
package struct DelayedGesture<BodyValue> : SwiftUICore.GestureModifier {
  package var duration: Swift.Double
  package var filter: (BodyValue) -> Swift.Bool
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.DelayedGesture<BodyValue>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<BodyValue>) -> SwiftUICore._GestureOutputs<BodyValue>
  package typealias Value = BodyValue
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct Spring : Swift.Hashable, Swift.Sendable {
  package var angularFrequency: Swift.Double
  package var decayConstant: Swift.Double
  package var _mass: Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.Spring, b: SwiftUICore.Spring) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(duration: Foundation.TimeInterval = 0.5, bounce: Swift.Double = 0.0)
  public var duration: Foundation.TimeInterval {
    get
  }
  public var bounce: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(response: Swift.Double, dampingRatio: Swift.Double)
  public var response: Swift.Double {
    get
  }
  public var dampingRatio: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(mass: Swift.Double = 1.0, stiffness: Swift.Double, damping: Swift.Double, allowOverDamping: Swift.Bool = false)
  public var mass: Swift.Double {
    get
  }
  public var stiffness: Swift.Double {
    get
  }
  public var damping: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public init(settlingDuration: Foundation.TimeInterval, dampingRatio: Swift.Double, epsilon: Swift.Double = 0.001)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public var settlingDuration: Foundation.TimeInterval {
    get
  }
  public func settlingDuration<V>(target: V, initialVelocity: V = .zero, epsilon: Swift.Double) -> Foundation.TimeInterval where V : SwiftUICore.VectorArithmetic
  public func value<V>(target: V, initialVelocity: V = .zero, time: Foundation.TimeInterval) -> V where V : SwiftUICore.VectorArithmetic
  public func velocity<V>(target: V, initialVelocity: V = .zero, time: Foundation.TimeInterval) -> V where V : SwiftUICore.VectorArithmetic
  public func update<V>(value: inout V, velocity: inout V, target: V, deltaTime: Foundation.TimeInterval) where V : SwiftUICore.VectorArithmetic
  public func force<V>(target: V, position: V, velocity: V) -> V where V : SwiftUICore.VectorArithmetic
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  public func settlingDuration<V>(fromValue: V, toValue: V, initialVelocity: V, epsilon: Swift.Double) -> Foundation.TimeInterval where V : SwiftUICore.Animatable
  public func value<V>(fromValue: V, toValue: V, initialVelocity: V, time: Foundation.TimeInterval) -> V where V : SwiftUICore.Animatable
  public func velocity<V>(fromValue: V, toValue: V, initialVelocity: V, time: Foundation.TimeInterval) -> V where V : SwiftUICore.Animatable
  public func force<V>(fromValue: V, toValue: V, position: V, velocity: V) -> V where V : SwiftUICore.Animatable
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Spring {
  @_alwaysEmitIntoClient public static var smooth: SwiftUICore.Spring {
    get { smooth() }
  }
  @_alwaysEmitIntoClient public static func smooth(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: extraBounce)
    }
  @_spi(_) @available(*, deprecated)
  @_alwaysEmitIntoClient public static func smooth(duration: Foundation.TimeInterval = 0.5, additionalBounce: Swift.Double) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: additionalBounce)
    }
  @_alwaysEmitIntoClient public static var snappy: SwiftUICore.Spring {
    get { snappy() }
  }
  @_alwaysEmitIntoClient public static func snappy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: 0.15 + extraBounce)
    }
  @_spi(_) @available(*, deprecated)
  @_alwaysEmitIntoClient public static func snappy(duration: Foundation.TimeInterval = 0.5, additionalBounce: Swift.Double) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: 0.15 + additionalBounce)
    }
  @_alwaysEmitIntoClient public static var bouncy: SwiftUICore.Spring {
    get { bouncy() }
  }
  @_alwaysEmitIntoClient public static func bouncy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: 0.3 + extraBounce)
    }
  @_spi(_) @available(*, deprecated)
  @_alwaysEmitIntoClient public static func bouncy(duration: Foundation.TimeInterval = 0.5, additionalBounce: Swift.Double) -> SwiftUICore.Spring {
        Self(duration: duration, bounce: 0.3 + additionalBounce)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static func spring(_ spring: SwiftUICore.Spring, blendDuration: Foundation.TimeInterval = 0.0) -> SwiftUICore.Animation
  public static func interpolatingSpring(_ spring: SwiftUICore.Spring, initialVelocity: Swift.Double = 0.0) -> SwiftUICore.Animation
}
package protocol ProtobufEncodableMessage {
  func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
}
package protocol ProtobufDecodableMessage {
  init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package typealias ProtobufMessage = SwiftUICore.ProtobufDecodableMessage & SwiftUICore.ProtobufEncodableMessage
package protocol ProtobufEnum {
  var protobufValue: Swift.UInt { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  init?(protobufValue: Swift.UInt)
  #else
  init?(protobufValue: Swift.UInt)
  #endif
}
extension SwiftUICore.ProtobufEnum where Self : Swift.RawRepresentable, Self.RawValue : Swift.BinaryInteger {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue: Swift.UInt)
  #else
  package init?(protobufValue: Swift.UInt)
  #endif
}
package protocol ProtobufTag : Swift.Equatable {
  var rawValue: Swift.UInt { get }
  init(rawValue: Swift.UInt)
}
package enum ProtobufFormat {
  package struct WireType : Swift.Equatable {
    package let rawValue: Swift.UInt
    package init(rawValue: Swift.UInt)
    package static var varint: SwiftUICore.ProtobufFormat.WireType {
      get
    }
    package static var fixed64: SwiftUICore.ProtobufFormat.WireType {
      get
    }
    package static var lengthDelimited: SwiftUICore.ProtobufFormat.WireType {
      get
    }
    package static var fixed32: SwiftUICore.ProtobufFormat.WireType {
      get
    }
    package static func == (a: SwiftUICore.ProtobufFormat.WireType, b: SwiftUICore.ProtobufFormat.WireType) -> Swift.Bool
  }
  package struct Field : Swift.Equatable {
    package var rawValue: Swift.UInt
    package init(rawValue: Swift.UInt)
    package init(_ tag: Swift.UInt, wireType: SwiftUICore.ProtobufFormat.WireType)
    package var tag: Swift.UInt {
      get
    }
    package var wireType: SwiftUICore.ProtobufFormat.WireType {
      get
    }
    package var _isEmpty: Swift.Bool {
      get
    }
    @inline(__always) package func tag<T>(as: T.Type = T.self) -> T where T : SwiftUICore.ProtobufTag
    package static func == (a: SwiftUICore.ProtobufFormat.Field, b: SwiftUICore.ProtobufFormat.Field) -> Swift.Bool
  }
}
package protocol CodableByProtobuf : Swift.Decodable, Swift.Encodable, SwiftUICore.ProtobufDecodableMessage, SwiftUICore.ProtobufEncodableMessage {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CodableByProtobuf {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@propertyWrapper package struct ProtobufCodable<Value> : Swift.Codable where Value : SwiftUICore.ProtobufDecodableMessage, Value : SwiftUICore.ProtobufEncodableMessage {
  package var wrappedValue: Value
  package init(wrappedValue: Value)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.ProtobufCodable : Swift.Equatable where Value : Swift.Equatable {
  package static func == (lhs: SwiftUICore.ProtobufCodable<Value>, rhs: SwiftUICore.ProtobufCodable<Value>) -> Swift.Bool
}
#if compiler(>=5.3) && $NoncopyableGenerics
package func makeSecondaryLayerView<SecondaryLayer>(secondaryLayer: AttributeGraph.Attribute<SecondaryLayer>, alignment: AttributeGraph.Attribute<SwiftUICore.Alignment>?, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs, flipOrder: Swift.Bool) -> SwiftUICore._ViewOutputs where SecondaryLayer : SwiftUICore.View
#else
package func makeSecondaryLayerView<SecondaryLayer>(secondaryLayer: AttributeGraph.Attribute<SecondaryLayer>, alignment: AttributeGraph.Attribute<SwiftUICore.Alignment>?, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs, flipOrder: Swift.Bool) -> SwiftUICore._ViewOutputs where SecondaryLayer : SwiftUICore.View
#endif
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayModifier<Overlay> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Overlay : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var overlay: Overlay
  @_Concurrency.MainActor @preconcurrency public var alignment: SwiftUICore.Alignment
  @inlinable nonisolated public init(overlay: Overlay, alignment: SwiftUICore.Alignment = .center) {
        self.overlay = overlay
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayModifier<Overlay>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OverlayModifier : Swift.Equatable where Overlay : Swift.Equatable {
  nonisolated public static func == (a: SwiftUICore._OverlayModifier<Overlay>, b: SwiftUICore._OverlayModifier<Overlay>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayStyleModifier<Style> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Style : SwiftUICore.ShapeStyle {
  @_Concurrency.MainActor @preconcurrency public var style: Style
  @_Concurrency.MainActor @preconcurrency public var ignoresSafeAreaEdges: SwiftUICore.Edge.Set
  @inlinable nonisolated public init(style: Style, ignoresSafeAreaEdges: SwiftUICore.Edge.Set) {
        self.style = style
        self.ignoresSafeAreaEdges = ignoresSafeAreaEdges
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayStyleModifier<Style>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayStyleModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var style: Style
  @_Concurrency.MainActor @preconcurrency public var shape: Bounds
  @_Concurrency.MainActor @preconcurrency public var fillStyle: SwiftUICore.FillStyle
  @inlinable nonisolated public init(style: Style, shape: Bounds, fillStyle: SwiftUICore.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayShapeModifier<Style, Bounds>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayShapeModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `overlay(alignment:content:)` instead.")
  @inlinable @_disfavoredOverload nonisolated public func overlay<Overlay>(_ overlay: Overlay, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View where Overlay : SwiftUICore.View {
        return modifier(_OverlayModifier(
            overlay: overlay, alignment: alignment))
    }
  
  @inlinable nonisolated public func border<S>(_ content: S, width: CoreFoundation.CGFloat = 1) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return overlay(Rectangle().strokeBorder(content, lineWidth: width))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func overlay<V>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_OverlayModifier(overlay: content(), alignment: alignment))
    }
  
  @inlinable nonisolated public func overlay<S>(_ style: S, ignoresSafeAreaEdges edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_OverlayStyleModifier(
            style: style, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable nonisolated public func overlay<S, T>(_ style: S, in shape: T, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle, T : SwiftUICore.Shape {
        modifier(_OverlayShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
}
package struct SecondaryLayerGeometryQuery : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($alignment) package var alignment: SwiftUICore.Alignment? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($alignment) package var alignment: SwiftUICore.Alignment? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $alignment: AttributeGraph.Attribute<SwiftUICore.Alignment>? {
    get
    set
  }
  #else
  package var $alignment: AttributeGraph.Attribute<SwiftUICore.Alignment>? {
    get
    set
  }
  #endif
  @AttributeGraph.Attribute @_projectedValueProperty($layoutDirection) package var layoutDirection: SwiftUICore.LayoutDirection {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $layoutDirection: AttributeGraph.Attribute<SwiftUICore.LayoutDirection> {
    get
    set
  }
  @AttributeGraph.Attribute @_projectedValueProperty($primaryPosition) package var primaryPosition: SwiftUICore.ViewOrigin {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $primaryPosition: AttributeGraph.Attribute<SwiftUICore.ViewOrigin> {
    get
    set
  }
  @AttributeGraph.Attribute @_projectedValueProperty($primarySize) package var primarySize: SwiftUICore.ViewSize {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $primarySize: AttributeGraph.Attribute<SwiftUICore.ViewSize> {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($primaryLayoutComputer) package var primaryLayoutComputer: SwiftUICore.LayoutComputer? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($primaryLayoutComputer) package var primaryLayoutComputer: SwiftUICore.LayoutComputer? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $primaryLayoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #else
  package var $primaryLayoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($secondaryLayoutComputer) package var secondaryLayoutComputer: SwiftUICore.LayoutComputer? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($secondaryLayoutComputer) package var secondaryLayoutComputer: SwiftUICore.LayoutComputer? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $secondaryLayoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #else
  package var $secondaryLayoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #endif
  package init(alignment: AttributeGraph.OptionalAttribute<SwiftUICore.Alignment>, layoutDirection: AttributeGraph.Attribute<SwiftUICore.LayoutDirection>, primaryPosition: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, primarySize: AttributeGraph.Attribute<SwiftUICore.ViewSize>, primaryLayoutComputer: AttributeGraph.OptionalAttribute<SwiftUICore.LayoutComputer> = .init(), secondaryLayoutComputer: AttributeGraph.OptionalAttribute<SwiftUICore.LayoutComputer> = .init())
  package var value: SwiftUICore.ViewGeometry {
    get
  }
  package typealias Value = SwiftUICore.ViewGeometry
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Font : Swift.Hashable, Swift.Sendable {
  private var provider: SwiftUICore.AnyFontBox
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct ResolvedTraits {
    @_spi(Private) public init(pointSize: CoreFoundation.CGFloat, weight: CoreFoundation.CGFloat)
    @_spi(Private) public init(_ descriptor: CoreText.CTFontDescriptor)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public init(textStyle: SwiftUICore.Font.TextStyle, weight: SwiftUICore.Font.Weight?, dynamicTypeSize: SwiftUICore.DynamicTypeSize)
    #else
    @_spi(Private) public init(textStyle: SwiftUICore.Font.TextStyle, weight: SwiftUICore.Font.Weight?, dynamicTypeSize: SwiftUICore.DynamicTypeSize)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
    public init(textStyle: SwiftUICore.Font.TextStyle, weight: SwiftUICore.Font.Weight?, sizeCategory: SwiftUICore.ContentSizeCategory)
    #else
    @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
    public init(textStyle: SwiftUICore.Font.TextStyle, weight: SwiftUICore.Font.Weight?, sizeCategory: SwiftUICore.ContentSizeCategory)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public init(textStyle: SwiftUICore.Font.PrivateTextStyle, weight: SwiftUICore.Font.Weight?, dynamicTypeSize: SwiftUICore.DynamicTypeSize)
    #else
    @_spi(Private) public init(textStyle: SwiftUICore.Font.PrivateTextStyle, weight: SwiftUICore.Font.Weight?, dynamicTypeSize: SwiftUICore.DynamicTypeSize)
    #endif
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.Font, rhs: SwiftUICore.Font) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Font {
  @_spi(Private) public func resolveTraits(in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.Font.ResolvedTraits : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyFontBox : @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct Context : Swift.Hashable {
    @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
    public var sizeCategory: SwiftUICore.ContentSizeCategory
    @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
    public var legibilityWeight: SwiftUICore.LegibilityWeight?
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 9.0, *)
    public var watchDisplayVariant: SwiftUICore.WatchDisplayVariant
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.Font.Context, b: SwiftUICore.Font.Context) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func platformFont(in context: SwiftUICore.Font.Context) -> CoreText.CTFont
  package func platformFont(in context: SwiftUICore.Font.Context, modifiers: [SwiftUICore.AnyFontModifier]) -> CoreText.CTFont
  package func platformFont(in environment: SwiftUICore.EnvironmentValues, modifiers: [SwiftUICore.AnyFontModifier]) -> CoreText.CTFont
  package func platformFont(in environment: SwiftUICore.EnvironmentValues) -> CoreText.CTFont
  package static func scaleFactor(textStyle: SwiftUICore.Font.TextStyle, in category: SwiftUICore.DynamicTypeSize) -> CoreFoundation.CGFloat
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.Font.Context : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Font.Context : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var fontResolutionContext: SwiftUICore.Font.Context {
    @_spi(Private) get
  }
}
extension CoreText.CTFont {
  package var pointSize: CoreFoundation.CGFloat {
    get
  }
  package var capHeight: CoreFoundation.CGFloat {
    get
  }
  package var ascender: CoreFoundation.CGFloat {
    get
  }
  package var descender: CoreFoundation.CGFloat {
    get
  }
  package var leading: CoreFoundation.CGFloat {
    get
  }
  package var bodyLeading: CoreFoundation.CGFloat {
    get
  }
  package var isSystemUIFont: Swift.Bool {
    get
  }
  package var weight: CoreFoundation.CGFloat {
    get
  }
  package var symbolicTraits: CoreText.CTFontSymbolicTraits {
    get
  }
  package var stylisticClass: CoreText.CTFontStylisticClass {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func scaled(by factor: CoreFoundation.CGFloat, toMultipleOf: CoreFoundation.CGFloat? = 0.25, maintainVisualWeight: Swift.Bool = false) -> CoreText.CTFont
  #else
  package func scaled(by factor: CoreFoundation.CGFloat, toMultipleOf: CoreFoundation.CGFloat? = 0.25, maintainVisualWeight: Swift.Bool = false) -> CoreText.CTFont
  #endif
  package var mayRequireLanguageAwareOutsets: Swift.Bool {
    get
  }
}
extension CoreText_Private.CTFontLegibilityWeight {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ legibilityWeight: SwiftUICore.LegibilityWeight?)
  #else
  package init(_ legibilityWeight: SwiftUICore.LegibilityWeight?)
  #endif
}
extension CoreText.CTFontDescriptor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func fontDescriptor(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, sizeCategory: SwiftUICore.ContentSizeCategory, legibilityWeight: SwiftUICore.LegibilityWeight?) -> CoreText.CTFontDescriptor
  #else
  package static func fontDescriptor(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, sizeCategory: SwiftUICore.ContentSizeCategory, legibilityWeight: SwiftUICore.LegibilityWeight?) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func fontDescriptor(size: CoreFoundation.CGFloat, design: CoreFoundation.CFString, weight: SwiftUICore.Font.Weight?, legibilityWeight: SwiftUICore.LegibilityWeight?) -> CoreText.CTFontDescriptor
  #else
  package static func fontDescriptor(size: CoreFoundation.CGFloat, design: CoreFoundation.CFString, weight: SwiftUICore.Font.Weight?, legibilityWeight: SwiftUICore.LegibilityWeight?) -> CoreText.CTFontDescriptor
  #endif
}
extension SwiftUICore.Font {
  package func resolve(in dynamicTypeSize: SwiftUICore.DynamicTypeSize) -> CoreText.CTFontDescriptor
}
package struct AnyHashable2 : Swift.Hashable, Swift.CustomStringConvertible {
  package init<T>(_ value: T) where T : Swift.Hashable
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func `as`<T>(type: T.Type) -> T? where T : Swift.Hashable
  #else
  package func `as`<T>(type: T.Type) -> T? where T : Swift.Hashable
  #endif
  package var anyValue: any Swift.Hashable {
    get
  }
  package var anyHashable: Swift.AnyHashable {
    get
  }
  package var description: Swift.String {
    get
  }
  package static func == (lhs: SwiftUICore.AnyHashable2, rhs: SwiftUICore.AnyHashable2) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.AnyHashable2 : Swift._HasCustomAnyHashableRepresentation {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func _toCustomAnyHashable() -> Swift.AnyHashable?
  #else
  package func _toCustomAnyHashable() -> Swift.AnyHashable?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ProposedSize {
  package var width: CoreFoundation.CGFloat?
  package var height: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?)
  #else
  package init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?)
  #endif
  package init()
  package func fixingUnspecifiedDimensions(at defaults: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  package func fixingUnspecifiedDimensions() -> CoreFoundation.CGSize
  package func scaled(by s: CoreFoundation.CGFloat) -> SwiftUICore._ProposedSize
  package static let zero: SwiftUICore._ProposedSize
  package static let infinity: SwiftUICore._ProposedSize
  package static let unspecified: SwiftUICore._ProposedSize
}
@available(*, unavailable)
extension SwiftUICore._ProposedSize : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ProposedSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore._ProposedSize, b: SwiftUICore._ProposedSize) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore._ProposedSize {
  package init(_ s: CoreFoundation.CGSize)
}
extension CoreFoundation.CGSize {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ p: SwiftUICore._ProposedSize)
  #else
  package init?(_ p: SwiftUICore._ProposedSize)
  #endif
}
extension SwiftUICore._ProposedSize {
  package func inset(by insets: SwiftUICore.EdgeInsets) -> SwiftUICore._ProposedSize
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  package subscript(axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ l1: CoreFoundation.CGFloat?, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat?)
  #else
  package init(_ l1: CoreFoundation.CGFloat?, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat?)
  #endif
}
package struct GestureInteropFeature : SwiftUICore.Feature {
  package init()
  package static var isEnabled: Swift.Bool {
    get
  }
  package static var isEnabledForTesting: Swift.Bool
  package typealias Value = Swift.Bool
}
extension SwiftUICore.GestureInteropFeature : FeatureFlags.FeatureFlagsKey {
  package var domain: Swift.StaticString {
    get
  }
  package var feature: Swift.StaticString {
    get
  }
  package static func _isFeatureEnabled() -> Swift.Bool
}
package struct GestureContainerFeature : SwiftUICore.Feature {
  package init()
  package static var isEnabled: Swift.Bool {
    get
  }
  package static var isEnabledOverride: Swift.Bool?
  package typealias Value = Swift.Bool
}
extension SwiftUICore.GestureContainerFeature : FeatureFlags.FeatureFlagsKey {
  package var domain: Swift.StaticString {
    get
  }
  package var feature: Swift.StaticString {
    get
  }
  package static func _isFeatureEnabled() -> Swift.Bool
}
package struct GestureRecognizerBasedEvents : SwiftUICore.Feature {
  package static var isEnabledForTesting: Swift.Bool
  package static var isEnabled: Swift.Bool {
    get
  }
  package init()
  package typealias Value = Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_functionBuilder public struct KeyframesBuilder<Value> {
  public static func buildExpression<K>(_ expression: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  public static func buildArray(_ components: [some KeyframeTrackContent<Value>]) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildEither<First, Second>(first component: First) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildEither<First, Second>(second component: Second) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildPartialBlock<K>(first: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  public static func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildBlock() -> some SwiftUICore.KeyframeTrackContent<Value> where Value : SwiftUICore.Animatable
  
  public static func buildFinalResult<Content>(_ component: Content) -> SwiftUICore.KeyframeTrack<Value, Value, Content> where Value == Content.Value, Content : SwiftUICore.KeyframeTrackContent
  public static func buildExpression<Content>(_ expression: Content) -> Content where Value == Content.Value, Content : SwiftUICore.Keyframes
  public static func buildPartialBlock<Content>(first: Content) -> Content where Value == Content.Value, Content : SwiftUICore.Keyframes
  public static func buildPartialBlock(accumulated: some Keyframes<Value>, next: some Keyframes<Value>) -> some SwiftUICore.Keyframes<Value>
  
  public static func buildBlock() -> some SwiftUICore.Keyframes<Value>
  
  public static func buildFinalResult<Content>(_ component: Content) -> Content where Value == Content.Value, Content : SwiftUICore.Keyframes
}
@available(*, unavailable)
extension SwiftUICore.KeyframesBuilder : Swift.Sendable {
}
package protocol HitTestableEventType : SwiftUICore.EventType {
  var hitTestLocation: CoreFoundation.CGPoint { get }
  var hitTestRadius: CoreFoundation.CGFloat { get }
}
package struct HitTestableEvent : SwiftUICore.HitTestableEventType, Swift.Equatable {
  package var phase: SwiftUICore.EventPhase
  package var timestamp: SwiftUICore.Time
  package var binding: SwiftUICore.EventBinding?
  package var hitTestLocation: CoreFoundation.CGPoint
  package var hitTestRadius: CoreFoundation.CGFloat
  package init<T>(_ event: T) where T : SwiftUICore.HitTestableEventType
  package init(_ event: any SwiftUICore.HitTestableEventType)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ event: any SwiftUICore.EventType)
  #else
  package init?(_ event: any SwiftUICore.EventType)
  #endif
  package static func == (a: SwiftUICore.HitTestableEvent, b: SwiftUICore.HitTestableEvent) -> Swift.Bool
}
extension SwiftUICore.HitTestableEventType where Self : SwiftUICore.SpatialEventType {
  package var hitTestLocation: CoreFoundation.CGPoint {
    get
  }
  package var hitTestRadius: CoreFoundation.CGFloat {
    get
  }
}
package struct Tracing {
  package static func libraryName(defining type: any Any.Type) -> Swift.String
  package static func nominalTypeName(_ v: any Any.Type) -> Swift.String
}
@_transparent package func traceBody<Body>(_ v: any Any.Type, body: () -> Body) -> Body
@_transparent package func traceRuleBody<Body>(_ v: any Any.Type, body: () -> Body) -> Body
extension AttributeGraph.Graph {
  package func graphIdentity() -> Swift.UInt
}
extension SwiftUICore.ViewGraph {
  final package var graphIdentity: Swift.UInt {
    get
  }
}
package protocol DescriptiveDynamicProperty {
  var _linkValue: Any { get }
}
extension SwiftUICore.State : SwiftUICore.DescriptiveDynamicProperty {
  package var _linkValue: Any {
    get
  }
}
extension SwiftUICore.Environment : SwiftUICore.DescriptiveDynamicProperty {
  package var _linkValue: Any {
    get
  }
}
extension SwiftUICore.Binding : SwiftUICore.DescriptiveDynamicProperty {
  package var _linkValue: Any {
    get
  }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package init(_ point: CoreFoundation.CGPoint) {
        self.init(width: point.x, height: point.y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat = 1, y: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGSize {
         
        return CGSize(width: width == 0 ? 0 : width * x,
            height: height == 0 ? 0 : height * y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGFloat) -> CoreFoundation.CGSize {
        return self.scaledBy(x: scale, y: scale)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        return self.scaledBy(x: scale.width, y: scale.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func increasedBy(dWidth: CoreFoundation.CGFloat = 0, dHeight: CoreFoundation.CGFloat = 0) -> CoreFoundation.CGSize {
        CGSize(width: width + dWidth, height: height + dHeight)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var isFinite: Swift.Bool {
    get { width.isFinite && height.isFinite }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var isNaN: Swift.Bool {
    get { width.isNaN || height.isNaN }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var hasZero: Swift.Bool {
    get { width == 0.0 || height == 0.0 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var isNegative: Swift.Bool {
    get { width < 0.0 || height < 0.0 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var isNonEmpty: Swift.Bool {
    get { width > 0.0 && height > 0.0 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var flushingNaNs: CoreFoundation.CGSize {
    get {
        return CGSize(width: !width.isNaN ? width : 0,
            height: !height.isNaN ? height : 0)
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var flushingNegatives: CoreFoundation.CGSize {
    get {
        CGSize(width: max(width, 0.0), height: max(height, 0.0))
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func approximates(_ other: CoreFoundation.CGSize, epsilon: CoreFoundation.CGFloat) -> Swift.Bool {
        width.approximates(other.width, epsilon: epsilon)
            && height.approximates(other.height, epsilon: epsilon)
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get { return d == .horizontal ? width : height }
    set { if d == .horizontal { width = newValue } else { height = newValue } }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package init(_ l1: CoreFoundation.CGFloat, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat) {
        self = first == .horizontal ? CGSize(width: l1, height: l2) : CGSize(width: l2, height: l1)
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func contains(point p: CoreFoundation.CGPoint) -> Swift.Bool {
        return !(p.x < 0) && !(p.y < 0) && p.x < width && p.y < height
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable internal func containsAny(of points: [CoreFoundation.CGPoint]) -> Swift.Bool {
        for p in points where self.contains(point: p) {
            return true
        }
        return false
    }
}
extension CoreFoundation.CGSize {
  package static let invalidValue: CoreFoundation.CGSize
}
package struct HashableSize : Swift.Equatable, Swift.Hashable {
  package var width: CoreFoundation.CGFloat
  package var height: CoreFoundation.CGFloat
  package init(_ value: CoreFoundation.CGSize)
  package var value: CoreFoundation.CGSize {
    get
    set
  }
  package static func == (a: SwiftUICore.HashableSize, b: SwiftUICore.HashableSize) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGSize : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>
  public var animatableData: CoreFoundation.CGSize.AnimatableData {
    @inlinable get { return .init(width, height) }
    @inlinable set { (width, height) = (newValue.first, newValue.second) }
  }
}
extension CoreFoundation.CGSize : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public enum RGBColorSpace : Swift.Sendable {
    case sRGB
    case sRGBLinear
    case displayP3
    public static func == (a: SwiftUICore.Color.RGBColorSpace, b: SwiftUICore.Color.RGBColorSpace) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, red: Swift.Double, green: Swift.Double, blue: Swift.Double, opacity: Swift.Double = 1)
  public init(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, white: Swift.Double, opacity: Swift.Double = 1)
  public init(hue: Swift.Double, saturation: Swift.Double, brightness: Swift.Double, opacity: Swift.Double = 1)
}
package func HSBToRGB(_ hue: Swift.Double, _ saturation: Swift.Double, _ brightness: Swift.Double) -> (red: Swift.Double, green: Swift.Double, blue: Swift.Double)
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum AccessibilityAnnouncementPriority : Swift.Sendable {
  @_spi(_) case low
  @_spi(_) case `default`
  @_spi(_) case high
  @_spi(_) public static func == (a: SwiftUICore.AccessibilityAnnouncementPriority, b: SwiftUICore.AccessibilityAnnouncementPriority) -> Swift.Bool
  @_spi(_) public func hash(into hasher: inout Swift.Hasher)
  @_spi(_) public var hashValue: Swift.Int {
    @_spi(_) get
  }
}
@_spi(_) extension SwiftUICore.AccessibilityAnnouncementPriority {
  @_spi(_) package var platformRawValue: Swift.String {
    @_spi(_) get
  }
}
package struct AccessibilitySpeechAttributes : Swift.Equatable {
  package var alwaysIncludesPunctuation: Swift.Bool?
  package var spellsOutCharacters: Swift.Bool?
  package var adjustedPitch: Swift.Double?
  package var announcementsPriority: SwiftUICore.AccessibilityAnnouncementPriority?
  package var phoneticRepresentation: Swift.String?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(alwaysIncludesPunctuation: Swift.Bool? = nil, spellsOutCharacters: Swift.Bool? = nil, adjustedPitch: Swift.Double? = nil, announcementsPriority: SwiftUICore.AccessibilityAnnouncementPriority? = nil, phoneticRepresentation: Swift.String? = nil)
  #else
  package init(alwaysIncludesPunctuation: Swift.Bool? = nil, spellsOutCharacters: Swift.Bool? = nil, adjustedPitch: Swift.Double? = nil, announcementsPriority: SwiftUICore.AccessibilityAnnouncementPriority? = nil, phoneticRepresentation: Swift.String? = nil)
  #endif
  package func combined(with other: SwiftUICore.AccessibilitySpeechAttributes) -> SwiftUICore.AccessibilitySpeechAttributes
  package static func == (a: SwiftUICore.AccessibilitySpeechAttributes, b: SwiftUICore.AccessibilitySpeechAttributes) -> Swift.Bool
}
extension SwiftUICore.Text.Style {
  package func resolveAccessibilitySpeechAttributes(into attributes: inout [Foundation.NSAttributedString.Key : Any], environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true)
}
package protocol HVStack : SwiftUICore.Layout, SwiftUICore._VariadicView_UnaryViewRoot where Self.Cache == SwiftUICore._StackLayoutCache {
  associatedtype MinorAxisAlignment : SwiftUICore.AlignmentGuide
  #if compiler(>=5.3) && $NoncopyableGenerics
  var spacing: CoreFoundation.CGFloat? { get }
  #else
  var spacing: CoreFoundation.CGFloat? { get }
  #endif
  var alignment: Self.MinorAxisAlignment { get }
  static var majorAxis: SwiftUICore.Axis { get }
  static var resizeChildrenWithTrailingOverflow: Swift.Bool { get }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _StackLayoutCache {
}
@available(*, unavailable)
extension SwiftUICore._StackLayoutCache : Swift.Sendable {
}
extension SwiftUICore.HVStack {
  package static var resizeChildrenWithTrailingOverflow: Swift.Bool {
    get
  }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HVStack {
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func makeCache(subviews: Self.Subviews) -> Self.Cache
  public func updateCache(_ cache: inout Self.Cache, subviews: Self.Subviews)
  public func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #endif
}
package protocol LayoutAccessibilityProvider {
  static func makeAccessibility(inputs: SwiftUICore._ViewInputs, outputs: inout SwiftUICore._ViewOutputs)
}
extension SwiftUICore._GraphInputs {
  package var layoutAccessibilityProvider: (any SwiftUICore.LayoutAccessibilityProvider.Type) {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var layoutAccessibilityProvider: (any SwiftUICore.LayoutAccessibilityProvider.Type) {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BlurEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var radius: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var isOpaque: Swift.Bool
  @inlinable @_Concurrency.MainActor @preconcurrency public init(radius: CoreFoundation.CGFloat, opaque: Swift.Bool) {
        self.radius = radius
        self.isOpaque = opaque
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package var descriptionAttributes: [(name: Swift.String, value: Swift.String)] {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._BlurEffect, b: SwiftUICore._BlurEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = CoreFoundation.CGFloat
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func blur(radius: CoreFoundation.CGFloat, opaque: Swift.Bool = false) -> some SwiftUICore.View {
        return modifier(_BlurEffect(radius: radius, opaque: opaque))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityTextContentType : Swift.Sendable {
  package enum RawValue : Swift.UInt, Swift.Codable {
    case plain
    case console
    case fileSystem
    case messaging
    case narrative
    case sourceCode
    case spreadsheet
    case wordProcessing
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(rawValue: Swift.UInt)
    #else
    package init?(rawValue: Swift.UInt)
    #endif
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    package typealias RawValue = Swift.UInt
    package var rawValue: Swift.UInt {
      get
    }
  }
  package var rawValue: SwiftUICore.AccessibilityTextContentType.RawValue
  package init(_ rawValue: SwiftUICore.AccessibilityTextContentType.RawValue)
  public static let plain: SwiftUICore.AccessibilityTextContentType
  public static let console: SwiftUICore.AccessibilityTextContentType
  public static let fileSystem: SwiftUICore.AccessibilityTextContentType
  public static let messaging: SwiftUICore.AccessibilityTextContentType
  public static let narrative: SwiftUICore.AccessibilityTextContentType
  public static let sourceCode: SwiftUICore.AccessibilityTextContentType
  public static let spreadsheet: SwiftUICore.AccessibilityTextContentType
  public static let wordProcessing: SwiftUICore.AccessibilityTextContentType
}
extension SwiftUICore.AccessibilityTextContentType : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUICore.AccessibilityTextContentType.RawValue {
    get
  }
  package static func unwrap(codingProxy rawValue: SwiftUICore.AccessibilityTextContentType.RawValue) -> SwiftUICore.AccessibilityTextContentType
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias CodingProxy = SwiftUICore.AccessibilityTextContentType.RawValue
}
extension SwiftUICore.AccessibilityTextContentType : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue v: Swift.UInt)
  #else
  package init?(protobufValue v: Swift.UInt)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol GeometryEffect : SwiftUICore.Animatable, SwiftUICore.ViewModifier where Self.Body == Swift.Never {
  func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  static var _affectsLayout: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GeometryEffect {
  public static var _affectsLayout: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GeometryEffect {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  package static func makeGeometryEffect(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
package struct RoundedSize : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  package init(position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, pixelLength: AttributeGraph.Attribute<CoreFoundation.CGFloat>)
  package var value: SwiftUICore.ViewSize {
    get
  }
  package typealias Value = SwiftUICore.ViewSize
}
extension CoreFoundation.CGAffineTransform {
  package mutating func flipRTL(width: CoreFoundation.CGFloat)
}
extension SwiftUICore.ProjectionTransform {
  package mutating func flipRTL(width: CoreFoundation.CGFloat)
}
package enum TimeDataFormatting : SwiftUICore.ResolvableStringAttributeFamily {
  package static var attribute: Foundation.NSAttributedString.Key {
    get
  }
}
extension SwiftUICore.TimeDataFormatting {
  package struct Resolvable<Source, Format> : SwiftUICore.ResolvableStringAttribute, Swift.Hashable where Source : SwiftUICore.TimeDataSourceStorage, Format : Foundation.DiscreteFormatStyle, Source.Value == Format.FormatInput, Format.FormatOutput : SwiftUICore.AttributedStringConvertible {
    package typealias Family = SwiftUICore.TimeDataFormatting
    package func replacingFormat<F>(with newFormat: F) -> SwiftUICore.TimeDataFormatting.Resolvable<Source, F> where F : Foundation.DiscreteFormatStyle, Format.FormatInput == F.FormatInput, F.FormatOutput : SwiftUICore.AttributedStringConvertible
    package init(source: Source, format: Format, secondsUpdateFrequencyBudget: Foundation.TimeInterval, isLegacy: Swift.Bool = false, sizeVariant: SwiftUICore.TextSizeVariant = .regular)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
    #else
    package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package var schedule: SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>? {
      get
    }
    #else
    package var schedule: SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>? {
      get
    }
    #endif
    package var requiredFeatures: SwiftUICore.Text.ResolvedProperties.Features {
      get
    }
    package func sizeVariant(_ sizeVariant: SwiftUICore.TextSizeVariant) -> (resolvable: SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>, exact: Swift.Bool)
    package mutating func makePlatformAttributes(resolver: inout SwiftUICore.PlatformAttributeResolver)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>, b: SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>) -> Swift.Bool
    package typealias Schedule = SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>
    package var hashValue: Swift.Int {
      get
    }
  }
}
extension Foundation.AttributedString {
  package mutating func redact(for frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency, locale: Foundation.Locale)
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TimeDataFormattingContainer : Swift.Codable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) package init?(resolvable: Any)
  #else
  @_spi(Private) package init?(resolvable: Any)
  #endif
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public var text: SwiftUICore.Text {
    @_spi(Private) get
  }
  @_spi(Private) package func representation(for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.TimeDataFormattingContainer : Swift.Sendable {
}
extension SwiftUICore.TimeDataFormatting.Resolvable : Swift.Codable {
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
}
extension SwiftUICore.TimeDataFormatting {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #else
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #endif
}
extension SwiftUICore.TimeDataFormatting.Resolvable {
  package static func encode(_ resolvable: SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>, to encoder: any Swift.Encoder) throws
}
extension SwiftUICore.TimeDataFormatting.Resolvable {
  package func representation(for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorInvertEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._ColorInvertEffect, b: SwiftUICore._ColorInvertEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func colorInvert() -> some SwiftUICore.View {
        return modifier(_ColorInvertEffect())
    }
  
}
package struct LinkDestination : SwiftUICore.DynamicProperty {
  package struct Configuration : Swift.Codable {
    package var url: Foundation.URL
    package var isSensitive: Swift.Bool
    package init(url: Foundation.URL, isSensitive: Swift.Bool = false)
    package func encode(to encoder: any Swift.Encoder) throws
    package init(from decoder: any Swift.Decoder) throws
  }
  package var configuration: SwiftUICore.LinkDestination.Configuration
  package init(configuration: SwiftUICore.LinkDestination.Configuration)
  package func open()
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public var gradient: SwiftUICore.AnyGradient {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func _trait<K>(_ key: K.Type, _ value: K.Value) -> some SwiftUICore.View where K : SwiftUICore._ViewTraitKey {
        return modifier(_TraitWritingModifier<K>(value: value))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _ViewTraitKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TraitWritingModifier<Trait> : SwiftUICore.PrimitiveViewModifier where Trait : SwiftUICore._ViewTraitKey {
  @_Concurrency.MainActor @preconcurrency public let value: Trait.Value
  @inlinable nonisolated public init(value: Trait.Value) {
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._TraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._TraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._TraitWritingModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ConditionalTraitWritingModifier<Trait> : SwiftUICore.PrimitiveViewModifier where Trait : SwiftUICore._ViewTraitKey {
  @_Concurrency.MainActor @preconcurrency public var value: Trait.Value
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(traitKey: Trait.Type = Trait.self, value: Trait.Value, isEnabled: Swift.Bool) {
        self.value = value
        self.isEnabled = isEnabled
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ConditionalTraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._ConditionalTraitWritingModifier<Trait>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ConditionalTraitWritingModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func _trait<K>(_ key: K.Type = K.self, _ value: K.Value, isEnabled: Swift.Bool) -> some SwiftUICore.View where K : SwiftUICore._ViewTraitKey {
        modifier(_ConditionalTraitWritingModifier<K>(
            value: value, isEnabled: isEnabled))
    }
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func transformTrait<K>(_ key: K.Type = K.self, transform: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore._ViewTraitKey
  
}
package struct ViewTraitCollection {
  package init()
  package func contains<Trait>(_ key: Trait.Type) -> Swift.Bool where Trait : SwiftUICore._ViewTraitKey
  package func value<Trait>(for key: Trait.Type, defaultValue: Trait.Value) -> Trait.Value where Trait : SwiftUICore._ViewTraitKey
  package func value<Trait>(for key: Trait.Type) -> Trait.Value where Trait : SwiftUICore._ViewTraitKey
  package mutating func setValueIfUnset<Trait>(_ value: Trait.Value, for key: Trait.Type) where Trait : SwiftUICore._ViewTraitKey
  package subscript<Trait>(key: Trait.Type) -> Trait.Value where Trait : SwiftUICore._ViewTraitKey {
    get
    set
  }
  package mutating func mergeValues(_ traits: SwiftUICore.ViewTraitCollection)
}
package struct ViewTraitKeys {
  package var types: Swift.Set<Swift.ObjectIdentifier>
  package var isDataDependent: Swift.Bool
  package init()
  package func contains<T>(_ trait: T.Type) -> Swift.Bool where T : SwiftUICore._ViewTraitKey
  package mutating func insert<T>(_ trait: T.Type) where T : SwiftUICore._ViewTraitKey
  package mutating func formUnion(_ other: SwiftUICore.ViewTraitKeys)
  package func withDataDependency() -> SwiftUICore.ViewTraitKeys
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundLayerViewModifier : SwiftUICore.RendererEffect {
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundLayerColorMatrixEffect : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var foreground: SwiftUICore._ColorMatrix
  @_Concurrency.MainActor @preconcurrency public var background: SwiftUICore._ColorMatrix
  @inlinable @_Concurrency.MainActor @preconcurrency public init(foreground: SwiftUICore._ColorMatrix = .init(), background: SwiftUICore._ColorMatrix = .init()) {
        (self.foreground, self.background) = (foreground, background)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundLayerColorMatrixEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _ForegroundLayerLevel : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  @_spi(Private) package var properties: SwiftUICore.DisplayList.Properties
  @_spi(Private) package init(_ properties: SwiftUICore.DisplayList.Properties)
  @_spi(Private) public static let none: SwiftUICore._ForegroundLayerLevel
  @_spi(Private) public static let primary: SwiftUICore._ForegroundLayerLevel
  @_spi(Private) public static let secondary: SwiftUICore._ForegroundLayerLevel
  @_spi(Private) public static let tertiary: SwiftUICore._ForegroundLayerLevel
  @_spi(Private) public static let quaternary: SwiftUICore._ForegroundLayerLevel
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public static func == (a: SwiftUICore._ForegroundLayerLevel, b: SwiftUICore._ForegroundLayerLevel) -> Swift.Bool
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct _ForegroundLayerLevelViewModifier : SwiftUICore.RendererEffect {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(level: SwiftUICore._ForegroundLayerLevel)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore._ForegroundLayerLevelViewModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct _ForegroundLayerLevelColorMatrixEffect : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_spi(Private) @frozen public struct Options : Swift.OptionSet {
    @_spi(Private) public let rawValue: Swift.UInt32
    @_spi(Private) public init(rawValue: Swift.UInt32)
    @_spi(Private) public static let premultiplied: SwiftUICore._ForegroundLayerLevelColorMatrixEffect.Options
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias ArrayLiteralElement = SwiftUICore._ForegroundLayerLevelColorMatrixEffect.Options
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias Element = SwiftUICore._ForegroundLayerLevelColorMatrixEffect.Options
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias RawValue = Swift.UInt32
  }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(_ matrices: [SwiftUICore._ForegroundLayerLevel : SwiftUICore._ColorMatrix], options: SwiftUICore._ForegroundLayerLevelColorMatrixEffect.Options = .init())
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(level: SwiftUICore._ForegroundLayerLevel, foreground: SwiftUICore._ColorMatrix = .init(), background: SwiftUICore._ColorMatrix = .init())
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(level: SwiftUICore._ForegroundLayerLevel, foreground: SwiftUICore._ColorMatrix = .init(), background: SwiftUICore._ColorMatrix = .init(), options: SwiftUICore._ForegroundLayerLevelColorMatrixEffect.Options)
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundLayerLevelColorMatrixEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore._ForegroundLayerLevelColorMatrixEffect : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ContentShapeKinds : Swift.OptionSet, Swift.Sendable {
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let interaction: SwiftUICore.ContentShapeKinds
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let dragPreview: SwiftUICore.ContentShapeKinds
  @available(tvOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let contextMenuPreview: SwiftUICore.ContentShapeKinds
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(tvOS, introduced: 18.0)
  public static let hoverEffect: SwiftUICore.ContentShapeKinds
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let focusEffect: SwiftUICore.ContentShapeKinds
  @available(tvOS, unavailable)
  package static let _focusEffect: SwiftUICore.ContentShapeKinds
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let accessibility: SwiftUICore.ContentShapeKinds
  package var description: Swift.String {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.ContentShapeKinds
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUICore.ContentShapeKinds
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int
}
@available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  package var contentShapes: SwiftUICore.ContentShapes {
    get
    set
  }
}
package struct ContentShapes : Swift.Sendable {
  package init()
  package mutating func addShape<S>(_ shape: S, forKinds kinds: SwiftUICore.ContentShapeKinds) where S : SwiftUICore.Shape
  package func shape(for kinds: SwiftUICore.ContentShapeKinds) -> some SwiftUICore.Shape
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GrayscaleEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable @_Concurrency.MainActor @preconcurrency public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._GrayscaleEffect, b: SwiftUICore._GrayscaleEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func grayscale(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_GrayscaleEffect(amount: amount))
    }
  
}
package struct AnchorGeometry {
  package init(position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, size: AttributeGraph.Attribute<CoreFoundation.CGSize>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>)
  package var transform: SwiftUICore.ViewTransform {
    get
  }
  package var size: CoreFoundation.CGSize {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Anchor<Value> {
  fileprivate let box: SwiftUICore.AnchorValueBoxBase<Value>
  package func `in`(_ context: SwiftUICore._PositionAwarePlacementContext) -> Value
  package func convert(to transform: SwiftUICore.ViewTransform) -> Value
  package var defaultValue: Value {
    get
  }
  @frozen public struct Source {
    private var box: SwiftUICore.AnchorBoxBase<Value>
    package func prepare(geometry: SwiftUICore.AnchorGeometry) -> SwiftUICore.Anchor<Value>
    package init(box: SwiftUICore.AnchorBoxBase<Value>)
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor : Swift.Equatable where Value : Swift.Equatable {
  public static func == (lhs: SwiftUICore.Anchor<Value>, rhs: SwiftUICore.Anchor<Value>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor : Swift.Hashable where Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnchorBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnchorBoxBase : @unchecked Swift.Sendable where T : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnchorValueBoxBase<T> {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnchorValueBoxBase : @unchecked Swift.Sendable where T : Swift.Sendable {
}
package protocol AnchorProtocol {
  associatedtype AnchorValue : SwiftUICore.ViewTransformable
  static var defaultAnchor: Self.AnchorValue { get }
  func prepare(geometry: SwiftUICore.AnchorGeometry) -> Self.AnchorValue
  static func valueIsEqual(lhs: Self.AnchorValue, rhs: Self.AnchorValue) -> Swift.Bool
  static func hashValue(_ value: Self.AnchorValue, into hasher: inout Swift.Hasher)
}
extension SwiftUICore.AnchorProtocol where Self.AnchorValue : Swift.Equatable {
  package static func valueIsEqual(lhs: Self.AnchorValue, rhs: Self.AnchorValue) -> Swift.Bool
}
extension SwiftUICore.AnchorProtocol where Self.AnchorValue : Swift.Hashable {
  package static func hashValue(_ value: Self.AnchorValue, into hasher: inout Swift.Hasher)
}
extension SwiftUICore.Anchor.Source {
  package init<A>(anchor value: A) where Value == A.AnchorValue, A : SwiftUICore.AnchorProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source {
  public init<T>(_ array: [SwiftUICore.Anchor<T>.Source]) where Value == [T]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<T>(_ anchor: SwiftUICore.Anchor<T>.Source?) where Value == T?
  #else
  public init<T>(_ anchor: SwiftUICore.Anchor<T>.Source?) where Value == T?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _Rotation3DEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var angle: SwiftUICore.Angle
  @_Concurrency.MainActor @preconcurrency public var axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.UnitPoint
  @_Concurrency.MainActor @preconcurrency public var anchorZ: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var perspective: CoreFoundation.CGFloat
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(angle: SwiftUICore.Angle, axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat), anchor: SwiftUICore.UnitPoint = .center, anchorZ: CoreFoundation.CGFloat = 0, perspective: CoreFoundation.CGFloat = 1) {
        self.angle = angle
        self.axis = axis
        self.anchor = anchor
        self.anchorZ = anchorZ
        self.perspective = perspective
    }
  package struct Data {
    package var angle: SwiftUICore.Angle
    package var axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat)
    package var anchor: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat)
    package var perspective: CoreFoundation.CGFloat
    package var flipWidth: CoreFoundation.CGFloat
    package init()
    package init(_ effect: SwiftUICore._Rotation3DEffect, size: CoreFoundation.CGSize, layoutDirection: SwiftUICore.LayoutDirection = .leftToRight)
    package var transform: SwiftUICore.ProjectionTransform {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.Angle.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<SwiftUICore.UnitPoint.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>>>>>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._Rotation3DEffect.AnimatableData {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public static func == (lhs: SwiftUICore._Rotation3DEffect, rhs: SwiftUICore._Rotation3DEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
extension SwiftUICore._Rotation3DEffect.Data : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum LayoutDirectionBehavior : Swift.Hashable, Swift.Sendable {
  case fixed
  case mirrors(in: SwiftUICore.LayoutDirection)
  public static var mirrors: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func shouldFlip(in direction: @autoclosure () -> SwiftUICore.LayoutDirection?) -> Swift.Bool
  #else
  package func shouldFlip(in direction: @autoclosure () -> SwiftUICore.LayoutDirection?) -> Swift.Bool
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.LayoutDirectionBehavior, b: SwiftUICore.LayoutDirectionBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol HoverEffectContent {
  static func _makeHoverEffectContent(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._HoverEffectContentInputs, body: @escaping (SwiftUICore._HoverEffectContentInputs) -> SwiftUICore._HoverEffectContentOutputs) -> SwiftUICore._HoverEffectContentOutputs
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct EmptyHoverEffectContent : SwiftUICore.HoverEffectContent {
  public static func _makeHoverEffectContent(effect: SwiftUICore._GraphValue<SwiftUICore.EmptyHoverEffectContent>, inputs: SwiftUICore._HoverEffectContentInputs, body: @escaping (SwiftUICore._HoverEffectContentInputs) -> SwiftUICore._HoverEffectContentOutputs) -> SwiftUICore._HoverEffectContentOutputs
  package init()
}
@available(*, unavailable)
extension SwiftUICore.EmptyHoverEffectContent : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct _HoverEffectContentInputs {
  package var base: SwiftUICore._CustomHoverEffectInputs
  package var isActive: Swift.Bool
  package init(base: SwiftUICore._CustomHoverEffectInputs, isActive: Swift.Bool)
}
@available(*, unavailable)
extension SwiftUICore._HoverEffectContentInputs : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct _HoverEffectContentOutputs {
  package var content: AttributeGraph.Attribute<SwiftUICore.HoverEffectContentList>
  package init(content: AttributeGraph.Attribute<SwiftUICore.HoverEffectContentList>)
}
@available(*, unavailable)
extension SwiftUICore._HoverEffectContentOutputs : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  package func rendererEffect(_ effect: some RendererEffect) -> some SwiftUICore.HoverEffectContent
  
  package func geometryEffect(_ effect: some GeometryEffect) -> some SwiftUICore.HoverEffectContent
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(CustomHoverEffects) package func concat<T>(_ effect: T) -> SwiftUICore.ModifiedContent<Self, T>
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUICore.HoverEffectContent where Content : SwiftUICore.HoverEffectContent, Modifier : SwiftUICore.HoverEffectContent {
  public static func _makeHoverEffectContent(effect: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._HoverEffectContentInputs, body: @escaping (SwiftUICore._HoverEffectContentInputs) -> SwiftUICore._HoverEffectContentOutputs) -> SwiftUICore._HoverEffectContentOutputs
}
package struct HoverEffectContentList : Swift.Equatable {
  package typealias Identity = SwiftUICore.DisplayList.Identity
  package typealias Version = SwiftUICore.DisplayList.Version
  package struct Item : Swift.Equatable {
    package var identity: SwiftUICore.HoverEffectContentList.Identity
    package var version: SwiftUICore.HoverEffectContentList.Version
    package var value: SwiftUICore.HoverEffectContentList.Item.Value
    package init(identity: SwiftUICore.HoverEffectContentList.Identity, version: SwiftUICore.HoverEffectContentList.Version, value: SwiftUICore.HoverEffectContentList.Item.Value)
    package enum Value {
      indirect case effect(SwiftUICore.HoverEffectContentList.Effect, SwiftUICore.HoverEffectContentList)
    }
    package static func == (lhs: SwiftUICore.HoverEffectContentList.Item, rhs: SwiftUICore.HoverEffectContentList.Item) -> Swift.Bool
    package var affectsBoundsForHitTesting: Swift.Bool {
      get
    }
  }
  package enum Effect {
    case identity
    case opacity(Swift.Float)
    case transform(CoreFoundation.CGAffineTransform)
    case resize(SwiftUICore.Path)
    case clip(SwiftUICore.Path)
    case scopedAnimation(SwiftUICore.Animation, SwiftUICore.HoverEffectContentList)
  }
  package var item: SwiftUICore.HoverEffectContentList.Item?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(item: SwiftUICore.HoverEffectContentList.Item? = nil)
  #else
  package init(item: SwiftUICore.HoverEffectContentList.Item? = nil)
  #endif
  package static func == (a: SwiftUICore.HoverEffectContentList, b: SwiftUICore.HoverEffectContentList) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _OpacityEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var opacity: Swift.Double
  @inlinable @_Concurrency.MainActor @preconcurrency public init(opacity: Swift.Double) {
        self.opacity = opacity
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OpacityEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func == (a: SwiftUICore._OpacityEffect, b: SwiftUICore._OpacityEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.View {
        return modifier(_OpacityEffect(opacity: opacity))
    }
  
}
@_Concurrency.MainActor @preconcurrency package struct OpacityRendererEffect : SwiftUICore.RendererEffect {
  @_Concurrency.MainActor @preconcurrency package var opacity: Swift.Double
  @_Concurrency.MainActor @preconcurrency package init(opacity: Swift.Double)
  @_Concurrency.MainActor @preconcurrency package init(isHidden: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency package var animatableData: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated package static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.OpacityRendererEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static let opacity: SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.OpacityTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var opacity: SwiftUICore.OpacityTransition {
    get { Self() }
  }
}
extension SwiftUICore._OpacityEffect : SwiftUICore.ProtobufMessage {
  @_Concurrency.MainActor @preconcurrency package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_Concurrency.MainActor @preconcurrency package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AnyShapeStyle {
  @_alwaysEmitIntoClient public static func opacity(_ opacity: Swift.Double) -> some SwiftUICore.ShapeStyle {
        return _OpacityShapeStyle(
            style: _ImplicitShapeStyle(), opacity: Float(opacity))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OpacityShapeStyle<Style> : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle where Style : SwiftUICore.ShapeStyle {
  public var style: Style
  public var opacity: Swift.Float
  @inlinable public init(style: Style, opacity: Swift.Float) {
        self.style = style
        self.opacity = opacity
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _OpacitiesShapeStyle<Style> : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle where Style : SwiftUICore.ShapeStyle {
  @_spi(Private) public var style: Style
  @_spi(Private) public var opacities: [Swift.Double]
  @_spi(Private) @inlinable public init(style: Style, opacities: [Swift.Double]) {
        self.style = style
        self.opacities = opacities
    }
  @_spi(Private) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(Private) public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct OpacityTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.OpacityTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public static let properties: SwiftUICore.TransitionProperties
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17OpacityTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.OpacityTransition : Swift.Sendable {
}
package protocol OpacityAccessibilityProvider {
  static func makeOpacity(effect: @autoclosure () -> AttributeGraph.Attribute<SwiftUICore._OpacityEffect>, inputs: SwiftUICore._ViewInputs, outputs: inout SwiftUICore._ViewOutputs)
}
extension SwiftUICore._GraphInputs {
  package var opacityAccessibilityProvider: (any SwiftUICore.OpacityAccessibilityProvider.Type) {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var opacityAccessibilityProvider: (any SwiftUICore.OpacityAccessibilityProvider.Type) {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShadowEffect : SwiftUICore.EnvironmentalModifier, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public var radius: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var offset: CoreFoundation.CGSize
  @inlinable @_Concurrency.MainActor @preconcurrency public init(color: SwiftUICore.Color, radius: CoreFoundation.CGFloat, offset: CoreFoundation.CGSize) {
        self.color = color
        self.radius = radius
        self.offset = offset
    }
  @_Concurrency.MainActor @preconcurrency public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore._ShadowEffect._Resolved
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public static var _requiresMainThread: Swift.Bool {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct _Resolved : SwiftUICore.RendererEffect {
    @_Concurrency.MainActor @preconcurrency package var style: SwiftUICore.ResolvedShadowStyle
    public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGSize.AnimatableData>>
    @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._ShadowEffect._Resolved.AnimatableData {
      get
      set
    }
    @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  nonisolated public static func == (a: SwiftUICore._ShadowEffect, b: SwiftUICore._ShadowEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ResolvedModifier = SwiftUICore._ShadowEffect._Resolved
}
@available(*, unavailable)
extension SwiftUICore._ShadowEffect : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ShadowEffect._Resolved : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View {
        return modifier(
            _ShadowEffect(
                color: color,
                radius: radius,
                offset: CGSize(width: x, height: y)
        ))
    }
  
}
package struct LayoutProxyAttributes : Swift.Equatable {
  package init(layoutComputer: AttributeGraph.OptionalAttribute<SwiftUICore.LayoutComputer>, traitsList: AttributeGraph.OptionalAttribute<any SwiftUICore.ViewList>)
  package init(traitsList: AttributeGraph.OptionalAttribute<any SwiftUICore.ViewList>)
  package init(layoutComputer: AttributeGraph.OptionalAttribute<SwiftUICore.LayoutComputer>)
  package init()
  package var isEmpty: Swift.Bool {
    get
  }
  package static func == (a: SwiftUICore.LayoutProxyAttributes, b: SwiftUICore.LayoutProxyAttributes) -> Swift.Bool
}
package struct LayoutProxy : Swift.Equatable {
  package init(context: AttributeGraph.AnyRuleContext, attributes: SwiftUICore.LayoutProxyAttributes)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(context: AttributeGraph.AnyRuleContext, layoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>?)
  #else
  package init(context: AttributeGraph.AnyRuleContext, layoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>?)
  #endif
  package var layoutComputer: SwiftUICore.LayoutComputer {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var traits: SwiftUICore.ViewTraitCollection? {
    get
  }
  #else
  package var traits: SwiftUICore.ViewTraitCollection? {
    get
  }
  #endif
  package subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore._ViewTraitKey {
    get
  }
  package func spacing() -> SwiftUICore.Spacing
  package func idealSize() -> CoreFoundation.CGSize
  package func size(in proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  package func lengthThatFits(_ proposal: SwiftUICore._ProposedSize, in direction: SwiftUICore.Axis) -> CoreFoundation.CGFloat
  package func dimensions(in proposedSize: SwiftUICore._ProposedSize) -> SwiftUICore.ViewDimensions
  package func finallyPlaced(at p: SwiftUICore._Placement, in parentSize: CoreFoundation.CGSize, layoutDirection: SwiftUICore.LayoutDirection) -> SwiftUICore.ViewGeometry
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at mySize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #else
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at mySize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #endif
  package var layoutPriority: Swift.Double {
    get
  }
  package var ignoresAutomaticPadding: Swift.Bool {
    get
  }
  package var requiresSpacingProjection: Swift.Bool {
    get
  }
  package static func == (lhs: SwiftUICore.LayoutProxy, rhs: SwiftUICore.LayoutProxy) -> Swift.Bool
}
package struct LayoutProxyCollection : Swift.RandomAccessCollection {
  package init(context: AttributeGraph.AnyRuleContext, attributes: [SwiftUICore.LayoutProxyAttributes])
  package var startIndex: Swift.Int {
    get
  }
  package var endIndex: Swift.Int {
    get
  }
  package subscript(index: Swift.Int) -> SwiftUICore.LayoutProxy {
    get
  }
  package typealias Element = SwiftUICore.LayoutProxy
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<Swift.Int>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.LayoutProxyCollection>
  package typealias SubSequence = Swift.Slice<SwiftUICore.LayoutProxyCollection>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ColorRenderingMode : Swift.Sendable {
  case nonLinear
  case linear
  case extendedLinear
  public static func == (a: SwiftUICore.ColorRenderingMode, b: SwiftUICore.ColorRenderingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.ColorRenderingMode : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
package struct RasterizationOptions : Swift.Equatable {
  package struct Flags : Swift.OptionSet {
    package let rawValue: Swift.UInt32
    package init(rawValue: Swift.UInt32)
    package static let isAccelerated: SwiftUICore.RasterizationOptions.Flags
    package static let isOpaque: SwiftUICore.RasterizationOptions.Flags
    package static let rendersAsynchronously: SwiftUICore.RasterizationOptions.Flags
    package static let prefersDisplayCompositing: SwiftUICore.RasterizationOptions.Flags
    package static let rendersFirstFrameAsync: SwiftUICore.RasterizationOptions.Flags
    package static let allowsPackedDrawable: SwiftUICore.RasterizationOptions.Flags
    package static let alphaOnly: SwiftUICore.RasterizationOptions.Flags
    package static let requiresLayer: SwiftUICore.RasterizationOptions.Flags
    package static let rgbaContext: SwiftUICore.RasterizationOptions.Flags
    package static let defaultFlags: SwiftUICore.RasterizationOptions.Flags
    package typealias ArrayLiteralElement = SwiftUICore.RasterizationOptions.Flags
    package typealias Element = SwiftUICore.RasterizationOptions.Flags
    package typealias RawValue = Swift.UInt32
  }
  package var colorMode: SwiftUICore.ColorRenderingMode
  package var rbColorMode: Swift.Int32?
  package var flags: SwiftUICore.RasterizationOptions.Flags
  package var maxDrawableCount: Swift.Int8
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, rbColorMode: Swift.Int32? = nil, flags: SwiftUICore.RasterizationOptions.Flags = .defaultFlags, maxDrawableCount: Swift.Int8 = 3)
  #else
  package init(colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, rbColorMode: Swift.Int32? = nil, flags: SwiftUICore.RasterizationOptions.Flags = .defaultFlags, maxDrawableCount: Swift.Int8 = 3)
  #endif
  package var isAccelerated: Swift.Bool {
    get
    set
  }
  package var isOpaque: Swift.Bool {
    get
    set
  }
  package var rendersAsynchronously: Swift.Bool {
    get
    set
  }
  package var rendersFirstFrameAsynchronously: Swift.Bool {
    get
    set
  }
  package var prefersDisplayCompositing: Swift.Bool {
    get
    set
  }
  package var allowsPackedDrawable: Swift.Bool {
    get
    set
  }
  package var resolvedColorMode: RenderBox.RBColorMode {
    get
  }
  package var colorSpace: RenderBox.RBColorSpace {
    get
  }
  package var alphaOnly: Swift.Bool {
    get
    set
  }
  package var requiresLayer: Swift.Bool {
    get
    set
  }
  package static func == (a: SwiftUICore.RasterizationOptions, b: SwiftUICore.RasterizationOptions) -> Swift.Bool
}
extension SwiftUICore.RasterizationOptions : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct _DrawingGroupEffect : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency package var rasterizationOptions: SwiftUICore.RasterizationOptions
  @_Concurrency.MainActor @preconcurrency public var isOpaque: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var colorMode: SwiftUICore.ColorRenderingMode {
    get
    set
  }
  nonisolated public init(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear)
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._DrawingGroupEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func == (a: SwiftUICore._DrawingGroupEffect, b: SwiftUICore._DrawingGroupEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DrawingGroupEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func drawingGroup(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._DrawingGroupEffect {
  @_Concurrency.MainActor @preconcurrency package var _rendersAsynchronously: Swift.Bool {
    get
    set
  }
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._DrawingGroupEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var rbColorMode: Swift.Int32? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #else
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var rbColorMode: Swift.Int32? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var rendersFirstFrameAsynchronously: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var isAccelerated: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._DrawingGroupEffect {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var allowsPackedDrawable: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var isLuminanceReduced: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BrightnessEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable @_Concurrency.MainActor @preconcurrency public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._BrightnessEffect, b: SwiftUICore._BrightnessEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func brightness(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_BrightnessEffect(amount: amount))
    }
  
}
package protocol _RendererEffect : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  static var isolatesChildPosition: Swift.Bool { get }
  static var disabledForFlattenedContent: Swift.Bool { get }
}
extension SwiftUICore._RendererEffect {
  package static var isolatesChildPosition: Swift.Bool {
    get
  }
  package static var disabledForFlattenedContent: Swift.Bool {
    get
  }
  package static func _makeRendererEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
package protocol RendererEffect : SwiftUICore.Animatable, SwiftUICore._RendererEffect {
}
@available(iOS 13.0, macOS 10.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.RendererEffect {
  package static func makeRendererEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
package struct ResetPositionTransform : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  package init(position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>)
  package var value: SwiftUICore.ViewTransform {
    get
  }
  package typealias Value = SwiftUICore.ViewTransform
}
extension SwiftUICore.GraphicsFilter : SwiftUICore.RendererEffect {
  package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
extension SwiftUICore.GraphicsBlendMode : SwiftUICore.RendererEffect {
  package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GeometryGroupEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency package static let isolatesChildPosition: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init() {}
  nonisolated public static func == (a: SwiftUICore._GeometryGroupEffect, b: SwiftUICore._GeometryGroupEffect) -> Swift.Bool
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func geometryGroup() -> some SwiftUICore.View {
        return modifier(_GeometryGroupEffect())
    }
  
}
extension CoreFoundation.CGPoint : SwiftUICore.AnchorProtocol {
  package static var defaultAnchor: CoreFoundation.CGPoint {
    get
  }
  package func prepare(geometry: SwiftUICore.AnchorGeometry) -> CoreFoundation.CGPoint
  package static func hashValue(_ value: CoreFoundation.CGPoint, into hasher: inout Swift.Hasher)
  package typealias AnchorValue = CoreFoundation.CGPoint
}
extension SwiftUICore.UnitPoint : SwiftUICore.AnchorProtocol {
  package static var defaultAnchor: CoreFoundation.CGPoint {
    get
  }
  package func prepare(geometry: SwiftUICore.AnchorGeometry) -> CoreFoundation.CGPoint
  package static func hashValue(_ value: CoreFoundation.CGPoint, into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnchorValue = CoreFoundation.CGPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Anchor.Source where Value == CoreFoundation.CGPoint {
  public static func point(_ p: CoreFoundation.CGPoint) -> SwiftUICore.Anchor<Value>.Source
  public static func unitPoint(_ p: SwiftUICore.UnitPoint) -> SwiftUICore.Anchor<Value>.Source
  public static var topLeading: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var top: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var topTrailing: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var leading: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var center: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var trailing: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var bottomLeading: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var bottom: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
  public static var bottomTrailing: SwiftUICore.Anchor<CoreFoundation.CGPoint>.Source {
    get
  }
}
package enum AbsoluteEdge : Swift.Int8, Swift.CaseIterable, Swift.Hashable {
  case top, left, bottom, right
  package struct Set : Swift.OptionSet {
    package typealias Element = SwiftUICore.AbsoluteEdge.Set
    package let rawValue: Swift.Int8
    package init(rawValue: Swift.Int8)
    package static let top: SwiftUICore.AbsoluteEdge.Set
    package static let left: SwiftUICore.AbsoluteEdge.Set
    package static let bottom: SwiftUICore.AbsoluteEdge.Set
    package static let right: SwiftUICore.AbsoluteEdge.Set
    package static let all: SwiftUICore.AbsoluteEdge.Set
    package static let horizontal: SwiftUICore.AbsoluteEdge.Set
    package static let vertical: SwiftUICore.AbsoluteEdge.Set
    package init(_ e: SwiftUICore.AbsoluteEdge)
    package func contains(_ e: SwiftUICore.AbsoluteEdge) -> Swift.Bool
    package typealias ArrayLiteralElement = SwiftUICore.AbsoluteEdge.Set.Element
    package typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.Int8)
  #else
  package init?(rawValue: Swift.Int8)
  #endif
  package typealias AllCases = [SwiftUICore.AbsoluteEdge]
  package typealias RawValue = Swift.Int8
  package static var allCases: [SwiftUICore.AbsoluteEdge] {
    get
  }
  package var rawValue: Swift.Int8 {
    get
  }
}
extension SwiftUICore.AbsoluteEdge.Set {
  package init(_ edges: SwiftUICore.Edge.Set, layoutDirection: SwiftUICore.LayoutDirection)
}
extension SwiftUICore.AbsoluteEdge {
  package var horizontal: Swift.Bool {
    get
  }
  package var opposite: SwiftUICore.AbsoluteEdge {
    get
  }
}
extension SwiftUICore.Axis {
  package func perpendicularAbsoluteEdges(with layoutDirection: SwiftUICore.LayoutDirection) -> (min: SwiftUICore.AbsoluteEdge, max: SwiftUICore.AbsoluteEdge)
}
extension AttributeGraph.Graph.NamedTraceEvent {
  package static let update: AttributeGraph.Graph.NamedTraceEvent
  package static let sizeThatFits: AttributeGraph.Graph.NamedTraceEvent
  package static let lengthThatFits: AttributeGraph.Graph.NamedTraceEvent
  package static let childGeometries: AttributeGraph.Graph.NamedTraceEvent
  package static let contentDescription: AttributeGraph.Graph.NamedTraceEvent
}
package struct LayoutTrace {
  package static func register(graph: AttributeGraph.Graph)
  @inline(__always) package static var isEnabled: Swift.Bool {
    get
  }
  package static var recorder: SwiftUICore.LayoutTrace.Recorder?
  final package class Recorder {
    final package var graph: AttributeGraph.Graph
    final package var frameActive: Swift.Bool
    final package var cacheLookup: (proposal: SwiftUICore._ProposedSize, hit: Swift.Bool)?
    @objc deinit
  }
}
extension SwiftUICore.LayoutTrace {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func traceSizeThatFits(_ attribute: AttributeGraph.AnyAttribute?, proposal: SwiftUICore._ProposedSize, _ block: () -> CoreFoundation.CGSize) -> CoreFoundation.CGSize
  #else
  @inline(__always) package static func traceSizeThatFits(_ attribute: AttributeGraph.AnyAttribute?, proposal: SwiftUICore._ProposedSize, _ block: () -> CoreFoundation.CGSize) -> CoreFoundation.CGSize
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func traceLengthThatFits(_ attribute: AttributeGraph.AnyAttribute?, proposal: SwiftUICore._ProposedSize, in axis: SwiftUICore.Axis, _ block: () -> CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  #else
  @inline(__always) package static func traceLengthThatFits(_ attribute: AttributeGraph.AnyAttribute?, proposal: SwiftUICore._ProposedSize, in axis: SwiftUICore.Axis, _ block: () -> CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  #endif
  @inline(__always) package static func traceCacheLookup(_ proposal: SwiftUICore._ProposedSize, _ hit: Swift.Bool)
  @inline(__always) package static func traceCacheLookup(_ proposal: CoreFoundation.CGSize, _ hit: Swift.Bool)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func traceChildGeometries(_ attribute: AttributeGraph.AnyAttribute?, at parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint, _ block: () -> [SwiftUICore.ViewGeometry]) -> [SwiftUICore.ViewGeometry]
  #else
  @inline(__always) package static func traceChildGeometries(_ attribute: AttributeGraph.AnyAttribute?, at parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint, _ block: () -> [SwiftUICore.ViewGeometry]) -> [SwiftUICore.ViewGeometry]
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func traceContentDescription(_ attribute: AttributeGraph.AnyAttribute?, _ description: Swift.String)
  #else
  @inline(__always) package static func traceContentDescription(_ attribute: AttributeGraph.AnyAttribute?, _ description: Swift.String)
  #endif
}
extension Foundation.URL {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var swiftUI_contentType: UniformTypeIdentifiers.UTType? {
    get
  }
  #else
  package var swiftUI_contentType: UniformTypeIdentifiers.UTType? {
    get
  }
  #endif
}
extension Swift.Set where Element == Swift.Duration.UnitsFormatStyle.Unit {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ nsCalendarUnit: Foundation.NSCalendar.Unit?)
  #else
  package init(_ nsCalendarUnit: Foundation.NSCalendar.Unit?)
  #endif
}
extension Swift.Set where Element == Foundation.Date.ComponentsFormatStyle.Field {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ nsCalendarUnit: Foundation.NSCalendar.Unit?)
  #else
  package init(_ nsCalendarUnit: Foundation.NSCalendar.Unit?)
  #endif
}
extension Foundation.NSCalendar.Unit {
  package init(_ fields: Swift.Set<Foundation.Date.ComponentsFormatStyle.Field>)
}
extension Foundation.NSCalendar.Unit {
  package init(_ units: Swift.Set<Swift.Duration.UnitsFormatStyle.Unit>)
}
extension Foundation.Calendar.Component {
  package struct Magnitude : Swift.Comparable, Swift.Hashable, Swift.Codable {
    package init(_ duration: Swift.Duration)
    package init(_ interval: Foundation.TimeInterval)
    package static func < (lhs: Foundation.Calendar.Component.Magnitude, rhs: Foundation.Calendar.Component.Magnitude) -> Swift.Bool
    package mutating func incrementByOrderOfMagnitude()
    package mutating func decrementByOrderOfMagnitude()
    package func ratio(to other: Foundation.Calendar.Component.Magnitude) -> Swift.Double
    package static let max: Foundation.Calendar.Component.Magnitude
    package static let zero: Foundation.Calendar.Component.Magnitude
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: Foundation.Calendar.Component.Magnitude, b: Foundation.Calendar.Component.Magnitude) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
}
extension Foundation.Date.ComponentsFormatStyle.Field {
  package var magnitude: Foundation.Calendar.Component.Magnitude {
    get
  }
}
extension Swift.Duration.UnitsFormatStyle.Unit {
  package var magnitude: Foundation.Calendar.Component.Magnitude {
    get
  }
}
extension Foundation.AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field {
  package var magnitude: Foundation.Calendar.Component.Magnitude {
    get
  }
}
extension Foundation.AttributeScopes.FoundationAttributes.DateFieldAttribute.Field {
  package var magnitude: Foundation.Calendar.Component.Magnitude {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_functionBuilder public struct ViewBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUICore.View {
       content
    }
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUICore.EmptyView {
        EmptyView()
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUICore.View {
        content
    }
  #if compiler(>=5.3) && $ParameterPacks
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildBlock<each Content>(_ content: repeat each Content) -> SwiftUICore.TupleView<(repeat each Content)> where repeat each Content : SwiftUICore.View {
        TupleView((repeat each content))
    }
  #endif
}
@available(*, unavailable)
extension SwiftUICore.ViewBuilder : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewBuilder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUICore.View {
        content
    }
  #else
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUICore.View {
        content
    }
  #endif
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUICore.View, FalseContent : SwiftUICore.View {
        .init(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUICore.View, FalseContent : SwiftUICore.View {
        .init(storage: .falseContent(second))
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewBuilder {
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> SwiftUICore.AnyView where Content : SwiftUICore.View {
        .init(content)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func mask<Mask>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ mask: () -> Mask) -> some SwiftUICore.View where Mask : SwiftUICore.View {
        return modifier(_MaskAlignmentEffect(
            alignment: alignment, mask: mask()))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _MaskAlignmentEffect<Mask> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Mask : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var alignment: SwiftUICore.Alignment
  @_Concurrency.MainActor @preconcurrency public var mask: Mask
  @inlinable nonisolated public init(alignment: SwiftUICore.Alignment, mask: Mask) {
        self.mask = mask
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._MaskAlignmentEffect<Mask>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._MaskAlignmentEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._MaskEffect : Swift.Equatable where Mask : Swift.Equatable {
  nonisolated public static func == (a: SwiftUICore._MaskEffect<Mask>, b: SwiftUICore._MaskEffect<Mask>) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._MaskEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(macOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(tvOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(watchOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @available(visionOS, deprecated: 100000.0, message: "Use overload where mask accepts a @ViewBuilder instead.")
  @inlinable nonisolated public func mask<Mask>(_ mask: Mask) -> some SwiftUICore.View where Mask : SwiftUICore.View {
        return modifier(_MaskEffect(mask: mask))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _MaskEffect<Mask> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Mask : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var mask: Mask
  @inlinable nonisolated public init(mask: Mask) {
        self.mask = mask
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._MaskEffect<Mask>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
package protocol ContentTransitionProvidingFormatStyle<FormatInput> : Foundation.FormatStyle {
  func contentTransition<S>(for source: S) -> SwiftUICore.ContentTransition where S : SwiftUICore.TimeDataSourceStorage, Self.FormatInput == S.Value
}
#else
package protocol ContentTransitionProvidingFormatStyle : Foundation.FormatStyle {
  func contentTransition<S>(for source: S) -> SwiftUICore.ContentTransition where S : SwiftUICore.TimeDataSourceStorage, Self.FormatInput == S.Value
}
#endif
package enum ContainerBackgroundKind : Swift.Hashable {
  package enum Builtin : Swift.Hashable, Swift.CaseIterable {
    case navigation
    case navigationSplitView
    case tabView
    case presentation
    case window
    package static func == (a: SwiftUICore.ContainerBackgroundKind.Builtin, b: SwiftUICore.ContainerBackgroundKind.Builtin) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package typealias AllCases = [SwiftUICore.ContainerBackgroundKind.Builtin]
    package static var allCases: [SwiftUICore.ContainerBackgroundKind.Builtin] {
      get
    }
    package var hashValue: Swift.Int {
      get
    }
  }
  case builtin(SwiftUICore.ContainerBackgroundKind.Builtin)
  case custom
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.ContainerBackgroundKind, b: SwiftUICore.ContainerBackgroundKind) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var containerBackgroundKind: SwiftUICore.ContainerBackgroundKind? {
    get
    set
  }
  #else
  package var containerBackgroundKind: SwiftUICore.ContainerBackgroundKind? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  nonisolated package static func makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated package static func makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
package struct ViewBodyAccessor<V> : SwiftUICore.BodyAccessor where V : SwiftUICore.View {
  package init()
  package typealias Body = V.Body
  package func updateBody(of value: V, changed: Swift.Bool)
  package typealias Container = V
}
package struct ViewValuePredicate<V> where V : SwiftUICore.View {
  package var view: V?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(view: V?)
  #else
  package init(view: V?)
  #endif
  package mutating func apply(to ident: AttributeGraph.AnyAttribute) -> Swift.Bool
}
package struct ViewStatePredicate<V, S> where V : SwiftUICore.View {
  package var state: SwiftUICore.Binding<S>?
  package init()
  package mutating func apply(to ident: AttributeGraph.AnyAttribute) -> Swift.Bool
}
package struct _SymbolEffect : Swift.Equatable {
  package enum Storage : Swift.Equatable {
    case none
    case pulse(SwiftUICore._SymbolEffect.PulseConfiguration)
    case breathe(SwiftUICore._SymbolEffect.BreatheConfiguration)
    case bounce(SwiftUICore._SymbolEffect.BounceConfiguration)
    case wiggle(SwiftUICore._SymbolEffect.WiggleConfiguration)
    case rotate(SwiftUICore._SymbolEffect.RotateConfiguration)
    case variableColor(SwiftUICore._SymbolEffect.VariableColorConfiguration)
    case scale(SwiftUICore._SymbolEffect.ScaleConfiguration)
    case hidden(SwiftUICore._SymbolEffect.HiddenConfiguration)
    package static func == (a: SwiftUICore._SymbolEffect.Storage, b: SwiftUICore._SymbolEffect.Storage) -> Swift.Bool
  }
  package enum Trigger : Swift.Equatable {
    case value(SwiftUICore.AnyEquatable)
    case condition(Swift.Bool)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func activates(after oldTrigger: SwiftUICore._SymbolEffect.Trigger?) -> Swift.Bool
    #else
    package func activates(after oldTrigger: SwiftUICore._SymbolEffect.Trigger?) -> Swift.Bool
    #endif
    package static func == (a: SwiftUICore._SymbolEffect.Trigger, b: SwiftUICore._SymbolEffect.Trigger) -> Swift.Bool
  }
  package struct Options : Swift.Equatable {
    package var speed: Swift.Float
    package var repeatCount: Swift.Float?
    package var repeatDelay: Swift.Float?
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.Options, b: SwiftUICore._SymbolEffect.Options) -> Swift.Bool
  }
  package var storage: SwiftUICore._SymbolEffect.Storage
  package var options: SwiftUICore._SymbolEffect.Options
  package init(_ storage: SwiftUICore._SymbolEffect.Storage, options: SwiftUICore._SymbolEffect.Options = .init())
  package struct PulseConfiguration : Swift.Equatable {
    package var trigger: SwiftUICore._SymbolEffect.Trigger?
    package var layered: Swift.Bool
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.PulseConfiguration, b: SwiftUICore._SymbolEffect.PulseConfiguration) -> Swift.Bool
  }
  package struct BreatheConfiguration : Swift.Equatable {
    package var trigger: SwiftUICore._SymbolEffect.Trigger?
    package var flags: RenderBox.RBSymbolAnimation.BreatheOptions
    package var layered: Swift.Bool
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.BreatheConfiguration, b: SwiftUICore._SymbolEffect.BreatheConfiguration) -> Swift.Bool
  }
  package struct BounceConfiguration : Swift.Equatable {
    package var trigger: SwiftUICore._SymbolEffect.Trigger?
    package var flags: RenderBox.RBSymbolAnimation.BounceOptions
    package var layered: Swift.Bool
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.BounceConfiguration, b: SwiftUICore._SymbolEffect.BounceConfiguration) -> Swift.Bool
  }
  package struct WiggleConfiguration : Swift.Equatable {
    package var trigger: SwiftUICore._SymbolEffect.Trigger?
    package var angle: SwiftUICore.Angle?
    package var flags: RenderBox.RBSymbolAnimation.WiggleOptions
    package var layered: Swift.Bool
    package var appliesRTL: Swift.Bool
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.WiggleConfiguration, b: SwiftUICore._SymbolEffect.WiggleConfiguration) -> Swift.Bool
  }
  package struct RotateConfiguration : Swift.Equatable {
    package var trigger: SwiftUICore._SymbolEffect.Trigger?
    package var flags: RenderBox.RBSymbolAnimation.RotateOptions
    package var layered: Swift.Bool
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.RotateConfiguration, b: SwiftUICore._SymbolEffect.RotateConfiguration) -> Swift.Bool
  }
  package struct VariableColorConfiguration : Swift.Equatable {
    package var trigger: SwiftUICore._SymbolEffect.Trigger?
    package var flags: RenderBox.RBSymbolAnimation.VariableColorOptions
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.VariableColorConfiguration, b: SwiftUICore._SymbolEffect.VariableColorConfiguration) -> Swift.Bool
  }
  package struct ScaleConfiguration : Swift.Equatable {
    package var level: RenderBox.RBSymbolScaleLevel
    package var layered: Swift.Bool
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.ScaleConfiguration, b: SwiftUICore._SymbolEffect.ScaleConfiguration) -> Swift.Bool
  }
  package struct HiddenConfiguration : Swift.Equatable {
    package var flags: RenderBox.RBSymbolAnimation.AppearDisappearOptions
    package var layered: Swift.Bool
    package var isHidden: Swift.Bool
    package init()
    package var transitionFlags: RenderBox.RBSymbolAnimation.AppearDisappearOptions {
      get
    }
    package static func == (a: SwiftUICore._SymbolEffect.HiddenConfiguration, b: SwiftUICore._SymbolEffect.HiddenConfiguration) -> Swift.Bool
  }
  package struct ReplaceConfiguration : Swift.Equatable {
    package var flags: RenderBox.RBSymbolAnimation.ReplaceOptions
    package var layered: Swift.Bool
    package var speed: Swift.Float
    package init()
    package var transitionFlags: RenderBox.RBSymbolAnimation.ReplaceOptions {
      get
    }
    package static func == (a: SwiftUICore._SymbolEffect.ReplaceConfiguration, b: SwiftUICore._SymbolEffect.ReplaceConfiguration) -> Swift.Bool
  }
  package static func == (a: SwiftUICore._SymbolEffect, b: SwiftUICore._SymbolEffect) -> Swift.Bool
}
extension SwiftUICore._SymbolEffect {
  package struct Identified : Swift.Equatable {
    package var identifier: Swift.Int
    package var serial: Swift.Int
    package var effect: SwiftUICore._SymbolEffect
    package init(identifier: Swift.Int, serial: Swift.Int = 0, effect: SwiftUICore._SymbolEffect)
    package static func == (a: SwiftUICore._SymbolEffect.Identified, b: SwiftUICore._SymbolEffect.Identified) -> Swift.Bool
  }
  package struct Phase : Swift.Equatable {
    package init()
    package static func == (a: SwiftUICore._SymbolEffect.Phase, b: SwiftUICore._SymbolEffect.Phase) -> Swift.Bool
  }
}
extension SwiftUICore.EnvironmentValues {
  package var symbolEffects: [SwiftUICore._SymbolEffect.Identified] {
    get
    set
  }
  package mutating func appendSymbolEffect(_ effect: SwiftUICore._SymbolEffect, for identifier: Swift.Int)
}
extension SwiftUICore._SymbolEffect : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.Storage : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.Options : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.Trigger : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.PulseConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.BreatheConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.BounceConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.WiggleConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.RotateConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.VariableColorConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension RenderBox.RBSymbolScaleLevel : SwiftUICore.ProtobufEnum {
}
extension SwiftUICore._SymbolEffect.ScaleConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.HiddenConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect.ReplaceConfiguration : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore._SymbolEffect {
  package var isIndefinite: Swift.Bool {
    get
  }
}
package enum ToggleState : Swift.UInt {
  case on
  case off
  case mixed
  package init(_ isOn: Swift.Bool)
  package mutating func toggle()
  package static func stateFor<T, C>(item: T, in collection: C) -> SwiftUICore.ToggleState where T : Swift.Equatable, C : Swift.Collection, C.Element == SwiftUICore.Binding<T>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.UInt)
  #else
  package init?(rawValue: Swift.UInt)
  #endif
  package typealias RawValue = Swift.UInt
  package var rawValue: Swift.UInt {
    get
  }
}
extension SwiftUICore.ToggleState : Swift.Codable {
}
extension SwiftUICore.ToggleState : Swift.CaseIterable {
  package typealias AllCases = [SwiftUICore.ToggleState]
  package static var allCases: [SwiftUICore.ToggleState] {
    get
  }
}
extension SwiftUICore.ToggleState : SwiftUICore.StronglyHashable {
}
extension SwiftUICore.ToggleState : Swift.CustomDebugStringConvertible {
  package var debugDescription: Swift.String {
    get
  }
}
package struct AccessibilityNullableOptionSet<T> : Swift.Equatable, Swift.Hashable, Swift.Codable where T : Swift.Decodable, T : Swift.Encodable, T : Swift.Hashable, T : Swift.OptionSet, T.RawValue : Swift.Decodable, T.RawValue : Swift.Encodable, T.RawValue : Swift.FixedWidthInteger, T.RawValue : Swift.UnsignedInteger {
  package var value: T {
    get
  }
  package var mask: T {
    get
  }
  package init()
  package init(implying bits: T.Element...)
  package init(adding bits: T.Element...)
  package init(removing bits: T.Element...)
  package init(adding: T.Element..., removing: T.Element...)
  package subscript(bit: T.Element, default defaultValue: Swift.Bool) -> Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(bit: T.Element) -> Swift.Bool? {
    get
    set
  }
  #else
  package subscript(bit: T.Element) -> Swift.Bool? {
    get
    set
  }
  #endif
  package var isDefault: Swift.Bool {
    get
  }
  package func isSet(_ bit: T.Element) -> Swift.Bool
  package static func == (a: SwiftUICore.AccessibilityNullableOptionSet<T>, b: SwiftUICore.AccessibilityNullableOptionSet<T>) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.AccessibilityNullableOptionSet : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
extension SwiftUICore.AccessibilityNullableOptionSet : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with other: SwiftUICore.AccessibilityNullableOptionSet<T>) -> Swift.Bool
}
extension SwiftUICore.AccessibilityNullableOptionSet : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension Swift.Comparable {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func clamp(min minValue: Self, max maxValue: Self) -> Self {
        return min(max(minValue, self), maxValue)
    }
  package mutating func formMin(_ other: Self)
  package mutating func formMax(_ other: Self)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func clamp(to limits: Swift.ClosedRange<Self>) {
        self = self.clamp(
            min: limits.lowerBound, max: limits.upperBound)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func clamped(to limits: Swift.ClosedRange<Self>) -> Self {
        var result = self
        result.clamp(to: limits)
        return result
    }
}
extension Swift.Collection {
  package func index(atOffset n: Swift.Int) -> Self.Index
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func index(atOffset n: Swift.Int, limitedBy limit: Self.Index) -> Self.Index?
  #else
  package func index(atOffset n: Swift.Int, limitedBy limit: Self.Index) -> Self.Index?
  #endif
  package func offset(of i: Self.Index) -> Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(safe index: Self.Index) -> Self.Element? {
    get
  }
  #else
  package subscript(safe index: Self.Index) -> Self.Element? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func withContiguousStorage<R>(_ body: (Swift.UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R
  #else
  package func withContiguousStorage<R>(_ body: (Swift.UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R
  #endif
}
package protocol TextAlwaysOnProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func makeAlwaysOn(inputs: SwiftUICore._ViewInputs, schedule: @autoclosure () -> AttributeGraph.Attribute<(any SwiftUICore.TimelineSchedule)?>, outputs: inout SwiftUICore._ViewOutputs)
  #else
  static func makeAlwaysOn(inputs: SwiftUICore._ViewInputs, schedule: @autoclosure () -> AttributeGraph.Attribute<(any SwiftUICore.TimelineSchedule)?>, outputs: inout SwiftUICore._ViewOutputs)
  #endif
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var textAlwaysOnProvider: (any SwiftUICore.TextAlwaysOnProvider.Type)? {
    get
    set
  }
  #else
  package var textAlwaysOnProvider: (any SwiftUICore.TextAlwaysOnProvider.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var textAlwaysOnProvider: (any SwiftUICore.TextAlwaysOnProvider.Type)? {
    get
    set
  }
  #else
  package var textAlwaysOnProvider: (any SwiftUICore.TextAlwaysOnProvider.Type)? {
    get
    set
  }
  #endif
}
extension CoreFoundation.CGPoint {
  package func unapplying(_ m: CoreFoundation.CGAffineTransform) -> CoreFoundation.CGPoint
}
package func distance(_ p0: CoreFoundation.CGPoint, _ p1: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
extension CoreFoundation.CGPoint {
  package func clamp(min minValue: CoreFoundation.CGPoint, max maxValue: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
}
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func + (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        return lhs.offset(by: rhs)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func - (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGPoint {
        return lhs + -rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func += (lhs: inout CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) {
        lhs = lhs + rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func -= (lhs: inout CoreFoundation.CGPoint, rhs: CoreFoundation.CGSize) {
        lhs = lhs - rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable prefix package static func - (lhs: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint {
        return CGPoint(x: -lhs.x, y: -lhs.y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func - (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGPoint) -> CoreFoundation.CGSize {
        return CGSize(width: lhs.x - rhs.x, height: lhs.y - rhs.y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func * (lhs: CoreFoundation.CGPoint, rhs: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        return lhs.scaled(by: rhs)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func *= (lhs: inout CoreFoundation.CGPoint, rhs: CoreFoundation.CGFloat) {
        lhs = lhs * rhs
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func + (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint {
        return CGPoint(x: rhs.x + lhs.width, y: rhs.y + lhs.height)
    }
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum SystemStyleMetrics {
  @_spi(UIFrameworks) public static var list: SwiftUICore.SystemListStyleMetrics
  @_spi(UIFrameworks) @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var shadows: SwiftUICore.SystemShadowStyleMetrics
  @_spi(UIFrameworks) @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var hoverEffect: SwiftUICore.SystemHoverEffectStyleMetrics
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SystemListStyleMetrics {
  @_spi(UIFrameworks) @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct Sidebar {
    @_spi(UIFrameworks) public var headerFont: SwiftUICore.Font
    @_spi(UIFrameworks) public var outlineDisclosureIsTinted: Swift.Bool
    @_spi(UIFrameworks) public var outlineDisclosureFont: SwiftUICore.Font?
  }
  @_spi(UIFrameworks) @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public var sidebar: SwiftUICore.SystemListStyleMetrics.Sidebar {
    @_spi(UIFrameworks) get
    @_spi(UIFrameworks) set
  }
  @_spi(UIFrameworks) public init()
}
@_spi(UIFrameworks) @available(visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 1.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct SystemShadowStyleMetrics {
  @_spi(UIFrameworks) public struct Grounding {
    @_spi(UIFrameworks) public var intensity: CoreFoundation.CGFloat
    @_spi(UIFrameworks) public var decayRate: CoreFoundation.CGFloat
  }
  @_spi(UIFrameworks) public struct Separated {
    @_spi(UIFrameworks) public var radius: CoreFoundation.CGFloat
    @_spi(UIFrameworks) public var offsetX: CoreFoundation.CGFloat
    @_spi(UIFrameworks) public var offsetY: CoreFoundation.CGFloat
    @_spi(UIFrameworks) public var opacity: CoreFoundation.CGFloat
    @_spi(UIFrameworks) package var cgColor: CoreGraphics.CGColor
  }
  @_spi(UIFrameworks) public var grounding: SwiftUICore.SystemShadowStyleMetrics.Grounding
  @_spi(UIFrameworks) public var separated: SwiftUICore.SystemShadowStyleMetrics.Separated
  @_spi(UIFrameworks) public init()
}
@_spi(UIFrameworks) @available(visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 1.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct SystemHoverEffectStyleMetrics {
  @_spi(UIFrameworks) public var highlightOpacity: Swift.Double
  @_spi(UIFrameworks) public var increaseFocusStateOpacity: Swift.Double
  @_spi(UIFrameworks) public var defaultBrightnessMultiplier: CoreFoundation.CGFloat
  @_spi(UIFrameworks) public init()
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUICore.SystemStyleMetrics : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUICore.SystemListStyleMetrics.Sidebar : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUICore.SystemListStyleMetrics : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUICore.SystemShadowStyleMetrics.Grounding : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUICore.SystemShadowStyleMetrics.Separated : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUICore.SystemShadowStyleMetrics : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUICore.SystemHoverEffectStyleMetrics : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityTraits : Swift.SetAlgebra, Swift.Sendable {
  public static let isButton: SwiftUICore.AccessibilityTraits
  public static let isHeader: SwiftUICore.AccessibilityTraits
  public static let isSelected: SwiftUICore.AccessibilityTraits
  public static let isLink: SwiftUICore.AccessibilityTraits
  public static let isSearchField: SwiftUICore.AccessibilityTraits
  public static let isImage: SwiftUICore.AccessibilityTraits
  public static let playsSound: SwiftUICore.AccessibilityTraits
  public static let isKeyboardKey: SwiftUICore.AccessibilityTraits
  public static let isStaticText: SwiftUICore.AccessibilityTraits
  public static let isSummaryElement: SwiftUICore.AccessibilityTraits
  public static let updatesFrequently: SwiftUICore.AccessibilityTraits
  public static let startsMediaSession: SwiftUICore.AccessibilityTraits
  public static let allowsDirectInteraction: SwiftUICore.AccessibilityTraits
  public static let causesPageTurn: SwiftUICore.AccessibilityTraits
  public static let isModal: SwiftUICore.AccessibilityTraits
  @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
  public static let isToggle: SwiftUICore.AccessibilityTraits
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let isTabBar: SwiftUICore.AccessibilityTraits
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let isTabButton: SwiftUICore.AccessibilityTraits
  @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static let isBackButton: SwiftUICore.AccessibilityTraits
  @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static let excludeFromItemChooser: SwiftUICore.AccessibilityTraits
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let isSwitch: SwiftUICore.AccessibilityTraits
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static let isMathEquation: SwiftUICore.AccessibilityTraits
  public init()
  public func union(_ other: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits
  public mutating func formUnion(_ other: SwiftUICore.AccessibilityTraits)
  public func intersection(_ other: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits
  public mutating func formIntersection(_ other: SwiftUICore.AccessibilityTraits)
  public func symmetricDifference(_ other: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits
  public mutating func formSymmetricDifference(_ other: SwiftUICore.AccessibilityTraits)
  public func contains(_ member: SwiftUICore.AccessibilityTraits) -> Swift.Bool
  public mutating func insert(_ newMember: SwiftUICore.AccessibilityTraits) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUICore.AccessibilityTraits)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public mutating func remove(_ member: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits?
  #else
  public mutating func remove(_ member: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public mutating func update(with newMember: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits?
  #else
  public mutating func update(with newMember: SwiftUICore.AccessibilityTraits) -> SwiftUICore.AccessibilityTraits?
  #endif
  public static func == (a: SwiftUICore.AccessibilityTraits, b: SwiftUICore.AccessibilityTraits) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore.AccessibilityTraits
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore.AccessibilityTraits
}
package enum AccessibilityTrait : Swift.UInt64, Swift.CaseIterable {
  case isButton
  case isHeader
  case isSelected
  case isLink
  case isSearchField
  case isImage
  case playsSound
  case isKeyboardKey
  case isStaticText
  case isSummaryElement
  case updatesFrequently
  case startsMediaSession
  case allowsDirectInteraction
  case causesPageTurn
  case isModal
  case isCheckbox
  case isSwitch
  case isRadioButton
  case isRadioGroup
  case isLabel
  case isSingleSiblingWithGesture
  case isInteractive
  case isTabBar
  case isTabButton
  case isBackButton
  case excludeFromItemChooser
  case isControlGroup
  case isPopupButton
  case isToggle
  case isMathEquation
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var uiTrait: SwiftUI_SPI.AXSwiftUITraits? {
    get
  }
  #else
  package var uiTrait: SwiftUI_SPI.AXSwiftUITraits? {
    get
  }
  #endif
  package var isElementUITrait: Swift.Bool {
    get
  }
  package var isContainerUITrait: Swift.Bool {
    get
  }
  package var isInteractionUITrait: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.UInt64)
  #else
  package init?(rawValue: Swift.UInt64)
  #endif
  package typealias AllCases = [SwiftUICore.AccessibilityTrait]
  package typealias RawValue = Swift.UInt64
  package static var allCases: [SwiftUICore.AccessibilityTrait] {
    get
  }
  package var rawValue: Swift.UInt64 {
    get
  }
}
package struct AccessibilityTraitSet : Swift.OptionSet, Swift.Hashable, Swift.Codable {
  package let rawValue: Swift.UInt64
  package init(rawValue: Swift.UInt64)
  package init(trait: SwiftUICore.AccessibilityTrait)
  package init(traits: [SwiftUICore.AccessibilityTrait])
  package typealias ArrayLiteralElement = SwiftUICore.AccessibilityTraitSet
  package typealias Element = SwiftUICore.AccessibilityTraitSet
  package typealias RawValue = Swift.UInt64
}
package typealias AccessibilityTraitStorage = SwiftUICore.AccessibilityNullableOptionSet<SwiftUICore.AccessibilityTraitSet>
extension SwiftUICore.AccessibilityNullableOptionSet where T == SwiftUICore.AccessibilityTraitSet {
  package init(adding traits: SwiftUICore.AccessibilityTraits)
  package init(removing traits: SwiftUICore.AccessibilityTraits)
  @_disfavoredOverload package init(adding trait: SwiftUICore.AccessibilityTrait)
  @_disfavoredOverload package init(adding traits: [SwiftUICore.AccessibilityTrait])
  @_disfavoredOverload package init(removing trait: SwiftUICore.AccessibilityTrait)
  @_disfavoredOverload package init(removing traits: [SwiftUICore.AccessibilityTrait])
  @_disfavoredOverload package func isSet(_ trait: SwiftUICore.AccessibilityTrait) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(trait: SwiftUICore.AccessibilityTrait) -> Swift.Bool? {
    get
    set
  }
  #else
  package subscript(trait: SwiftUICore.AccessibilityTrait) -> Swift.Bool? {
    get
    set
  }
  #endif
  package subscript(trait: SwiftUICore.AccessibilityTrait, default defaultValue: Swift.Bool) -> Swift.Bool {
    get
  }
}
extension SwiftUICore.AccessibilityProperties {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var isTabBar: Swift.Bool? {
    get
    set
  }
  #else
  package var isTabBar: Swift.Bool? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var isTabButton: Swift.Bool? {
    get
    set
  }
  #else
  package var isTabButton: Swift.Bool? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var isBackButton: Swift.Bool? {
    get
    set
  }
  #else
  package var isBackButton: Swift.Bool? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var excludeFromItemChooser: Swift.Bool? {
    get
    set
  }
  #else
  package var excludeFromItemChooser: Swift.Bool? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_semantics("swiftui.init_with_localization") public init(_ key: SwiftUICore.LocalizedStringKey, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, comment: Swift.StaticString? = nil)
  #else
  @_semantics("swiftui.init_with_localization") public init(_ key: SwiftUICore.LocalizedStringKey, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, comment: Swift.StaticString? = nil)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct LocalizedStringKey : Swift.Equatable, Swift.ExpressibleByStringInterpolation {
  internal var key: Swift.String
  internal var hasFormatting: Swift.Bool = false
  private var arguments: [SwiftUICore.LocalizedStringKey.FormatArgument]
  public init(_ value: Swift.String)
  @_semantics("swiftui.localized_string_key.init_literal") public init(stringLiteral value: Swift.String)
  @_semantics("swiftui.localized_string_key.init_interpolation") public init(stringInterpolation: SwiftUICore.LocalizedStringKey.StringInterpolation)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolve(in environment: SwiftUICore.EnvironmentValues, table: Swift.String?, bundle: Foundation.Bundle?) -> Swift.String
  #else
  package func resolve(in environment: SwiftUICore.EnvironmentValues, table: Swift.String?, bundle: Foundation.Bundle?) -> Swift.String
  #endif
  @usableFromInline
  internal struct FormatArgument : Swift.Equatable {
    @usableFromInline
    internal static func == (lhs: SwiftUICore.LocalizedStringKey.FormatArgument, rhs: SwiftUICore.LocalizedStringKey.FormatArgument) -> Swift.Bool
  }
  public struct StringInterpolation : Swift.StringInterpolationProtocol {
    @_semantics("swiftui.localized.interpolation_init") public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
    @_semantics("swiftui.localized.appendLiteral") public mutating func appendLiteral(_ literal: Swift.String)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ string: Swift.String)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : Foundation.ReferenceConvertible
    #else
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : Foundation.ReferenceConvertible
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : ObjectiveC.NSObject
    #else
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<Subject>(_ subject: Subject, formatter: Foundation.Formatter? = nil) where Subject : ObjectiveC.NSObject
    #endif
    @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Foundation.AttributedString
    @_transparent public mutating func appendInterpolation<T>(_ value: T) where T : SwiftUICore._FormatSpecifiable {
            appendInterpolation(value, specifier: formatSpecifier(T.self))
        }
    @_semantics("swiftui.localized.appendInterpolation_param_specifier") public mutating func appendInterpolation<T>(_ value: T, specifier: Swift.String) where T : SwiftUICore._FormatSpecifiable
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ text: SwiftUICore.Text)
    @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
    @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ attributedString: Foundation.AttributedString)
    @available(*, unavailable, message: "Unsupported type for interpolation, see LocalizedStringKey.StringInterpolation for supported types.")
    public mutating func appendInterpolation<T>(_ view: T) where T : SwiftUICore.View
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias StringLiteralType = Swift.String
  }
  public static func == (a: SwiftUICore.LocalizedStringKey, b: SwiftUICore.LocalizedStringKey) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(*, unavailable)
extension SwiftUICore.LocalizedStringKey.StringInterpolation : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.LocalizedStringKey : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.LocalizedStringKey.FormatArgument : Swift.Sendable {
}
@_alwaysEmitIntoClient internal var int64Specifier: Swift.String {
  get { "%lld" }
}
@_alwaysEmitIntoClient internal var int32Specifier: Swift.String {
  get { "%d" }
}
@_alwaysEmitIntoClient internal var uint64Specifier: Swift.String {
  get { "%llu" }
}
@_alwaysEmitIntoClient internal var uint32Specifier: Swift.String {
  get { "%u" }
}
@_alwaysEmitIntoClient internal var floatSpecifier: Swift.String {
  get { "%f" }
}
@_alwaysEmitIntoClient internal var doubleSpecifier: Swift.String {
  get { "%lf" }
}
@_alwaysEmitIntoClient @_semantics("constant_evaluable") internal func formatSpecifier<T>(_ type: T.Type) -> Swift.String {
    switch type {
    case is Int.Type:
        fallthrough
    case is Int64.Type:
        return int64Specifier
    case is Int8.Type:
        fallthrough
    case is Int16.Type:
        fallthrough
    case is Int32.Type:
        return int32Specifier
    case is UInt.Type:
        fallthrough
    case is UInt64.Type:
        return uint64Specifier
    case is UInt8.Type:
        fallthrough
    case is UInt16.Type:
        fallthrough
    case is UInt32.Type:
        return uint32Specifier
    case is Float.Type:
        return floatSpecifier
    case is CGFloat.Type:
        fallthrough
    case is Double.Type:
        return doubleSpecifier
    default:
        return "%@"
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _FormatSpecifiable : Swift.Equatable {
  associatedtype _Arg : Swift.CVarArg
  var _arg: Self._Arg { get }
  var _specifier: Swift.String { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int8 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int16 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int32 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Int64 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Int64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt8 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt16 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt32 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt32 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.UInt64 : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.UInt64 {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Float : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Float {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Double : SwiftUICore._FormatSpecifiable {
  public var _arg: Swift.Double {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGFloat : SwiftUICore._FormatSpecifiable {
  public var _arg: CoreFoundation.CGFloat {
    get
  }
  public var _specifier: Swift.String {
    get
  }
}
package protocol PlatformTextRepresentable {
  static func shouldMakeRepresentation(inputs: SwiftUICore._ViewInputs) -> Swift.Bool
  static func representationOptions(inputs: SwiftUICore._ViewInputs) -> Self.RepresentationOptions
  static func makeRepresentation(inputs: SwiftUICore._ViewInputs, context: AttributeGraph.Attribute<Self.Context>, outputs: inout SwiftUICore._ViewOutputs)
  typealias Context = SwiftUICore.PlatformTextRepresentableContext
  typealias RepresentationOptions = SwiftUICore.PlatformTextRepresentationOptions
}
package struct PlatformTextRepresentableContext {
  package var text: Foundation.NSAttributedString?
}
package struct PlatformTextRepresentationOptions : Swift.OptionSet {
  package let rawValue: Swift.Int
  package init(rawValue: Swift.Int)
  package static let includeStyledText: SwiftUICore.PlatformTextRepresentationOptions
  package typealias ArrayLiteralElement = SwiftUICore.PlatformTextRepresentationOptions
  package typealias Element = SwiftUICore.PlatformTextRepresentationOptions
  package typealias RawValue = Swift.Int
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedTextRepresentation: (any SwiftUICore.PlatformTextRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedTextRepresentation: (any SwiftUICore.PlatformTextRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedTextRepresentation: (any SwiftUICore.PlatformTextRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedTextRepresentation: (any SwiftUICore.PlatformTextRepresentable.Type)? {
    get
    set
  }
  #endif
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TextSelectability {
  static var allowsSelection: Swift.Bool { get }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.TextSelectability where Self == SwiftUICore.EnabledTextSelectability {
  @_alwaysEmitIntoClient public static var enabled: SwiftUICore.EnabledTextSelectability {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.TextSelectability where Self == SwiftUICore.DisabledTextSelectability {
  @_alwaysEmitIntoClient public static var disabled: SwiftUICore.DisabledTextSelectability {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EnabledTextSelectability : SwiftUICore.TextSelectability {
  public static let allowsSelection: Swift.Bool
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUICore.EnabledTextSelectability : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisabledTextSelectability : SwiftUICore.TextSelectability {
  public static let allowsSelection: Swift.Bool
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUICore.DisabledTextSelectability : Swift.Sendable {
}
package struct TextAllowsSelection : SwiftUICore.ViewInput {
  package static let defaultValue: Swift.Bool
  package typealias Value = Swift.Bool
}
package struct TextSelectionForbidden : SwiftUICore.ViewInputBoolFlag {
  package init()
  package typealias Value = Swift.Bool
}
package protocol PlatformTextSelectionRepresentation {
  static func makeSelectableText(resolvedText: AttributeGraph.Attribute<SwiftUICore.ResolvedStyledText>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var textSelectionRepresentation: (any SwiftUICore.PlatformTextSelectionRepresentation.Type)? {
    get
    set
  }
  #else
  package var textSelectionRepresentation: (any SwiftUICore.PlatformTextSelectionRepresentation.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var textSelectionRepresentation: (any SwiftUICore.PlatformTextSelectionRepresentation.Type)? {
    get
    set
  }
  #else
  package var textSelectionRepresentation: (any SwiftUICore.PlatformTextSelectionRepresentation.Type)? {
    get
    set
  }
  #endif
}
@available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload public init(_ resource: Foundation.LocalizedStringResource)
}
@available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @available(iOS 16.0, macOS 13, tvOS 16.0, watchOS 9.0, *)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ resource: Foundation.LocalizedStringResource)
}
package func makeParagraphStyle(environment: SwiftUICore.EnvironmentValues) -> UIFoundation.NSMutableParagraphStyle
extension Foundation.NSAttributedString.Key {
  package static let resolvableAttributeConfiguration: Foundation.NSAttributedString.Key
  package static let _textScale: Foundation.NSAttributedString.Key
  package static let _textScaleRatio: Foundation.NSAttributedString.Key
}
extension Foundation.NSAttributedString {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstAttribute<T>(_ type: T.Type) -> T? where T : SwiftUICore.ResolvableStringAttribute
  #else
  package func firstAttribute<T>(_ type: T.Type) -> T? where T : SwiftUICore.ResolvableStringAttribute
  #endif
}
extension Foundation.NSMutableAttributedString {
  package func addResolvableAttributes(with config: SwiftUICore.ResolvableAttributeConfiguration)
  package func resolveAttributes(in context: SwiftUICore.ResolvableStringResolutionContext)
}
extension SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveAttributedString(in environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true, options: SwiftUICore.Text.ResolveOptions = [.includeSupportForRepeatedResolution], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Foundation.NSAttributedString?
  #else
  package func resolveAttributedString(in environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true, options: SwiftUICore.Text.ResolveOptions = [.includeSupportForRepeatedResolution], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Foundation.NSAttributedString?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveAttributedStringAndProperties(in environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true, options: SwiftUICore.Text.ResolveOptions = [.includeSupportForRepeatedResolution], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> (Foundation.NSAttributedString?, SwiftUICore.Text.ResolvedProperties)
  #else
  package func resolveAttributedStringAndProperties(in environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true, options: SwiftUICore.Text.ResolveOptions = [.includeSupportForRepeatedResolution], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> (Foundation.NSAttributedString?, SwiftUICore.Text.ResolvedProperties)
  #endif
}
extension SwiftUICore.EnvironmentValues {
  package func resolveNSAttributes(includeDefaultAttributes: Swift.Bool = true, options: SwiftUICore.Text.ResolveOptions = []) -> [Foundation.NSAttributedString.Key : Any]
}
extension Foundation.NSAttributedString {
  package func scaled(by factor: CoreFoundation.CGFloat) -> Foundation.NSAttributedString
  package struct EncodedFontMetrics {
    package var capHeight: CoreFoundation.CGFloat, ascender: CoreFoundation.CGFloat, descender: CoreFoundation.CGFloat, leading: CoreFoundation.CGFloat
    package var outsets: SwiftUICore.EdgeInsets
  }
  package var maxFontMetrics: Foundation.NSAttributedString.EncodedFontMetrics {
    get
  }
}
extension SwiftUICore.Text.Style {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func nsAttributes(content: (() -> Swift.String)?, environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool, with options: SwiftUICore.Text.ResolveOptions, properties: inout SwiftUICore.Text.ResolvedProperties) -> [Foundation.NSAttributedString.Key : Any]
  #else
  package func nsAttributes(content: (() -> Swift.String)?, environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool, with options: SwiftUICore.Text.ResolveOptions, properties: inout SwiftUICore.Text.ResolvedProperties) -> [Foundation.NSAttributedString.Key : Any]
  #endif
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TextJustification : Swift.Sendable, Swift.Equatable {
  @_spi(Private) public static let none: SwiftUICore.TextJustification
  @_spi(Private) public static let full: SwiftUICore.TextJustification
  @_spi(Private) public static let stretched: SwiftUICore.TextJustification
  @_spi(Private) public static func stretched(_ flexible: Swift.Bool = true) -> SwiftUICore.TextJustification
  @_spi(Private) public static func full(allLines: Swift.Bool = false, flexible: Swift.Bool = false) -> SwiftUICore.TextJustification
  @_spi(Private) public static func == (a: SwiftUICore.TextJustification, b: SwiftUICore.TextJustification) -> Swift.Bool
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func justification(_ justfication: SwiftUICore.TextJustification) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct HStack<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUICore._HStackLayout, Content>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(
            _HStackLayout(alignment: alignment, spacing: spacing)
        ) {
            content()
        }
    }
  #else
  @inlinable nonisolated public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(
            _HStackLayout(alignment: alignment, spacing: spacing)
        ) {
            content()
        }
    }
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.HStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.HStack : Swift.Sendable {
}
@_spi(ReallyDoNotImport) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "HStackLayout")
extension SwiftUICore.HStack : SwiftUICore.Animatable where Content == SwiftUICore.EmptyView {
  @_spi(ReallyDoNotImport) public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@_spi(ReallyDoNotImport) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "HStackLayout")
extension SwiftUICore.HStack : SwiftUICore.Layout where Content == SwiftUICore.EmptyView {
  @_spi(ReallyDoNotImport) public typealias Cache = SwiftUICore._HStackLayout.Cache
}
@available(*, deprecated, renamed: "HStackLayout")
extension SwiftUICore.HStack : SwiftUICore.DerivedLayout where Content == SwiftUICore.EmptyView {
  package typealias Base = SwiftUICore._HStackLayout
  @_Concurrency.MainActor @preconcurrency package var base: SwiftUICore._HStackLayout {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _HStackLayout {
  public var alignment: SwiftUICore.VerticalAlignment
  public var spacing: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #else
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #endif
  package static let majorAxis: SwiftUICore.Axis
}
extension SwiftUICore._HStackLayout : SwiftUICore.HVStack {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias MinorAxisAlignment = SwiftUICore.VerticalAlignment
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._HStackLayout : SwiftUICore.Layout {
  public typealias Cache = SwiftUICore._StackLayoutCache
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
extension SwiftUICore._HStackLayout : SwiftUICore._VariadicView.ImplicitRoot {
  package static var implicitRoot: SwiftUICore._HStackLayout {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HStackLayout : SwiftUICore.Layout {
  public var alignment: SwiftUICore.VerticalAlignment
  public var spacing: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #else
  @inlinable public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.spacing = spacing
    }
  #endif
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = SwiftUICore._HStackLayout.Cache
}
extension SwiftUICore.HStackLayout : SwiftUICore.DerivedLayout {
  package var base: SwiftUICore._HStackLayout {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  package typealias Base = SwiftUICore._HStackLayout
}
package struct UnitRect : Swift.Hashable {
  package var x: CoreFoundation.CGFloat
  package var y: CoreFoundation.CGFloat
  package var width: CoreFoundation.CGFloat
  package var height: CoreFoundation.CGFloat
  @inlinable package init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @inlinable package init(point: SwiftUICore.UnitPoint)
  @inlinable package func `in`(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGRect
  @inlinable package func `in`(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  package static let one: SwiftUICore.UnitRect
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.UnitRect, b: SwiftUICore.UnitRect) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package struct CoordinateSpaceGesture<Value> : SwiftUICore.GestureModifier {
  package var coordinateSpace: SwiftUICore.CoordinateSpace
  package init(coordinateSpace: SwiftUICore.CoordinateSpace)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.CoordinateSpaceGesture<Value>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>) -> SwiftUICore._GestureOutputs<Value>
  package typealias BodyValue = Value
}
extension SwiftUICore.Gesture {
  package func coordinateSpace(_ coordinateSpace: SwiftUICore.CoordinateSpace) -> SwiftUICore.ModifierGesture<SwiftUICore.CoordinateSpaceGesture<Self.Value>, Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _CompositingGroupEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._CompositingGroupEffect, b: SwiftUICore._CompositingGroupEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func compositingGroup() -> some SwiftUICore.View {
        return modifier(_CompositingGroupEffect())
    }
  
}
package protocol GestureModifier {
  associatedtype Value
  associatedtype BodyValue
  static func _makeGesture(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.BodyValue>) -> SwiftUICore._GestureOutputs<Self.Value>
}
extension SwiftUICore.Gesture {
  package func modifier<T>(_ modifier: T) -> SwiftUICore.ModifierGesture<T, Self> where T : SwiftUICore.GestureModifier, Self.Value == T.BodyValue
}
package struct ModifierGesture<ContentModifier, Content> : SwiftUICore.PrimitiveGesture where ContentModifier : SwiftUICore.GestureModifier, Content : SwiftUICore.Gesture, ContentModifier.BodyValue == Content.Value {
  package static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.ModifierGesture<ContentModifier, Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<ContentModifier.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = ContentModifier.Value
}
extension SwiftUICore.ModifierGesture : SwiftUICore.PrimitiveDebuggableGesture {
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Keyframes<Value> {
  associatedtype Value = Self.Body.Value
  associatedtype Body : SwiftUICore.Keyframes
  @SwiftUICore.KeyframesBuilder<Self.Value> var body: Self.Body { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
  #else
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
  #endif
}
#else
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Keyframes {
  associatedtype Value = Self.Body.Value
  associatedtype Body : SwiftUICore.Keyframes
  @SwiftUICore.KeyframesBuilder<Self.Value> var body: Self.Body { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
  #else
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
  #endif
}
#endif
package protocol PrimitiveKeyframes : SwiftUICore.Keyframes where Self.Body == Swift.Never {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PrimitiveKeyframes {
  public var body: Swift.Never {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Keyframes where Self.Value == Self.Body.Value {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
  #else
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Self.Value>, initialValue: Self.Value, initialVelocity: Self.Value?)
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Never : SwiftUICore.Keyframes {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Swift.Never>, initialValue: Swift.Never, initialVelocity: Swift.Never?)
  #else
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Swift.Never>, initialValue: Swift.Never, initialVelocity: Swift.Never?)
  #endif
}
package struct AnyKeyframes<Value> : SwiftUICore.PrimitiveKeyframes {
  package init(_ base: some Keyframes<Value>)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Value>, initialValue: Value, initialVelocity: Value?)
  #else
  package func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframes<Value>, initialValue: Value, initialVelocity: Value?)
  #endif
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  package typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ResolvedKeyframes<Value> {
}
@available(*, unavailable)
extension SwiftUICore._ResolvedKeyframes : Swift.Sendable {
}
extension SwiftUICore.VisualEffect {
  package func concat(_ effect: some VisualEffect) -> some SwiftUICore.VisualEffect
  
  package func rendererEffect(_ effect: some RendererEffect & Sendable) -> some SwiftUICore.VisualEffect
  
  package func geometryEffect(_ effect: some GeometryEffect & Sendable) -> some SwiftUICore.VisualEffect
  
}
extension SwiftUICore._ViewOutputs {
  package static func makePlatformRootGeometryTransform(inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
extension SwiftUICore._VariadicView.Tree where Root : SwiftUICore._VariadicView_ViewRoot, Content : SwiftUICore.View {
  @inline(__always) package static func makePlatformSubstitutableView(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView.Tree<Root, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
package func makePlatformSecondaryView(primaryInputs: SwiftUICore._ViewInputs, primaryOutputs: SwiftUICore._ViewOutputs, secondaryInputs: SwiftUICore._ViewInputs, flipOrder: Swift.Bool, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
extension Swift.String {
  package static var nsAttachment: Swift.String {
    get
  }
  package init(_ attributedString: Foundation.AttributedString)
}
extension Swift.Character {
  package static var nsAttachment: Swift.Character {
    get
  }
}
extension Foundation.AttributedString {
  package var isEmpty: Swift.Bool {
    get
  }
}
extension Foundation.NSAttributedString {
  package var isDynamic: Swift.Bool {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyShapeStyle : SwiftUICore.ShapeStyle {
  @usableFromInline
  @frozen package struct Storage : Swift.Equatable {
    package var box: SwiftUICore.AnyShapeStyleBox
    @usableFromInline
    package static func == (lhs: SwiftUICore.AnyShapeStyle.Storage, rhs: SwiftUICore.AnyShapeStyle.Storage) -> Swift.Bool
  }
  package var storage: SwiftUICore.AnyShapeStyle.Storage
  public init<S>(_ style: S) where S : SwiftUICore.ShapeStyle
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func `as`<S>(type: S.Type) -> S? where S : SwiftUICore.ShapeStyle
  #else
  package func `as`<S>(type: S.Type) -> S? where S : SwiftUICore.ShapeStyle
  #endif
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyShapeStyle.Storage : @unchecked Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyShapeStyleBox {
  package func apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  package func isEqual(to other: SwiftUICore.AnyShapeStyleBox) -> Swift.Bool
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyShapeStyleBox : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceReadingView<Key, Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Key : SwiftUICore.PreferenceKey, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var value: SwiftUICore._PreferenceValue<Key>
  @_Concurrency.MainActor @preconcurrency public var transform: (Key.Value) -> Content
  @inlinable nonisolated public init(value: SwiftUICore._PreferenceValue<Key>, transform: @escaping (Key.Value) -> Content) {
        self.value = value
        self.transform = transform
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._PreferenceReadingView<Key, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._PreferenceReadingView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PreferenceValue {
  @inlinable public func _force<T>(_ transform: @escaping (Key.Value) -> T) -> SwiftUICore._PreferenceReadingView<Key, T> where T : SwiftUICore.View {
        return _PreferenceReadingView(value: self, transform: transform)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityCustomContentKey {
  public init(_ label: SwiftUICore.Text, id: Swift.String)
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: Swift.String)
  public init(_ labelKey: SwiftUICore.LocalizedStringKey)
  package init(_ text: SwiftUICore.Text)
}
@available(*, unavailable)
extension SwiftUICore.AccessibilityCustomContentKey : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.AccessibilityCustomContentKey : Swift.Equatable {
  public static func == (a: SwiftUICore.AccessibilityCustomContentKey, b: SwiftUICore.AccessibilityCustomContentKey) -> Swift.Bool
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityCustomContentEntry : Swift.Equatable {
  @_spi(Private) public typealias Importance = Accessibility.AXCustomContent.Importance
  @_spi(Private) public init(_ key: SwiftUICore.AccessibilityCustomContentKey, value: SwiftUICore.Text, importance: SwiftUICore.AccessibilityCustomContentEntry.Importance = .default)
  @_spi(Private) package init<V>(_ key: SwiftUICore.AccessibilityCustomContentKey, value: V, importance: SwiftUICore.AccessibilityCustomContentEntry.Importance = .default) where V : Swift.Decodable, V : Swift.Encodable, V : SwiftUICore.AccessibilityValue
  @_spi(Private) package init(clearing key: SwiftUICore.AccessibilityCustomContentKey)
  @_spi(Private) public static func == (a: SwiftUICore.AccessibilityCustomContentEntry, b: SwiftUICore.AccessibilityCustomContentEntry) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.AccessibilityCustomContentEntry : Swift.Sendable {
}
package typealias AccessibilityCustomContentList = [SwiftUICore.AccessibilityCustomContentEntry]
extension Swift.Array where Element == SwiftUICore.AccessibilityCustomContentEntry {
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> [Accessibility.AXCustomContent]
}
extension Accessibility.AXCustomContent.Importance : SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.UInt {
    get
  }
  package static func unwrap(codingProxy rawValue: Swift.UInt) -> Accessibility.AXCustomContent.Importance
  @available(iOS 14.0, *)
  package typealias CodingProxy = Swift.UInt
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum AccessibilityHeadingLevel : Swift.UInt {
  case unspecified
  case h1
  case h2
  case h3
  case h4
  case h5
  case h6
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.UInt)
  #else
  public init?(rawValue: Swift.UInt)
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension SwiftUICore.AccessibilityHeadingLevel : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUICore.AccessibilityHeadingLevel.RawValue {
    get
  }
  package static func unwrap(codingProxy rawValue: SwiftUICore.AccessibilityHeadingLevel.RawValue) -> SwiftUICore.AccessibilityHeadingLevel
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias CodingProxy = SwiftUICore.AccessibilityHeadingLevel.RawValue
}
extension SwiftUICore.AccessibilityHeadingLevel : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue v: Swift.UInt)
  #else
  package init?(protobufValue v: Swift.UInt)
  #endif
}
package enum GestureDebug {
  package typealias Properties = SwiftUICore.ArrayWith2Inline<(Swift.String, Swift.String)>
  package enum Kind {
    case empty
    case primitive
    case modifier
    case gesture
    case combiner
    package static func == (a: SwiftUICore.GestureDebug.Kind, b: SwiftUICore.GestureDebug.Kind) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct Data {
    package var kind: SwiftUICore.GestureDebug.Kind
    package var type: any Any.Type
    package var phase: SwiftUICore.GesturePhase<()>
    package var attribute: AttributeGraph.AnyOptionalAttribute
    package var resetSeed: Swift.UInt32
    package var frame: CoreFoundation.CGRect
    package var properties: SwiftUICore.GestureDebug.Properties
    package typealias Children = SwiftUICore.ArrayWith2Inline<SwiftUICore.GestureDebug.Data>
    package var children: SwiftUICore.GestureDebug.Data.Children {
      get
      set
    }
    package init()
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(kind: SwiftUICore.GestureDebug.Kind, type: any Any.Type, children: SwiftUICore.GestureDebug.Data.Children, phase: SwiftUICore.GesturePhase<()>, attribute: AttributeGraph.AnyAttribute?, resetSeed: Swift.UInt32, frame: CoreFoundation.CGRect, properties: SwiftUICore.GestureDebug.Properties)
    #else
    package init(kind: SwiftUICore.GestureDebug.Kind, type: any Any.Type, children: SwiftUICore.GestureDebug.Data.Children, phase: SwiftUICore.GesturePhase<()>, attribute: AttributeGraph.AnyAttribute?, resetSeed: Swift.UInt32, frame: CoreFoundation.CGRect, properties: SwiftUICore.GestureDebug.Properties)
    #endif
  }
}
extension SwiftUICore.GestureDebug.Data : SwiftUICore.Defaultable {
  package static var defaultValue: SwiftUICore.GestureDebug.Data
  package typealias Value = SwiftUICore.GestureDebug.Data
}
package protocol PrimitiveDebuggableGesture {
}
package protocol DebuggableGesturePhase {
  associatedtype PhaseValue
  var phase: SwiftUICore.GesturePhase<Self.PhaseValue> { get set }
  var properties: SwiftUICore.GestureDebug.Properties { get }
}
extension AttributeGraph.Attribute where Value : SwiftUICore.DebuggableGesturePhase {
  package func phase() -> AttributeGraph.Attribute<SwiftUICore.GesturePhase<Value.PhaseValue>>
}
extension SwiftUICore.Gesture {
  @inline(__always) package static func makeDebuggableGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Value>
}
extension SwiftUICore.GestureModifier {
  @inline(__always) package static func makeDebuggableGesture(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.BodyValue>) -> SwiftUICore._GestureOutputs<Self.Value>
}
extension SwiftUICore._GestureOutputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func wrapDebugOutputs<T>(_ type: T.Type, properties: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Properties>? = nil, inputs: SwiftUICore._GestureInputs)
  #else
  @inline(__always) package mutating func wrapDebugOutputs<T>(_ type: T.Type, properties: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Properties>? = nil, inputs: SwiftUICore._GestureInputs)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func wrapDebugOutputs<T, V1, V2>(_ type: T.Type, kind: SwiftUICore.GestureDebug.Kind, properties: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Properties>? = nil, inputs: SwiftUICore._GestureInputs, combiningOutputs outputs: (SwiftUICore._GestureOutputs<V1>, SwiftUICore._GestureOutputs<V2>))
  #else
  @inline(__always) package mutating func wrapDebugOutputs<T, V1, V2>(_ type: T.Type, kind: SwiftUICore.GestureDebug.Kind, properties: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Properties>? = nil, inputs: SwiftUICore._GestureInputs, combiningOutputs outputs: (SwiftUICore._GestureOutputs<V1>, SwiftUICore._GestureOutputs<V2>))
  #endif
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GesturePhase {
  @_spi(ForSwiftUIOnly) package var descriptionWithoutValue: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
}
extension SwiftUICore.GestureDebug.Data {
  package func printTree()
}
package struct EventListener<Event> : SwiftUICore.PrimitiveGesture where Event : SwiftUICore.EventType {
  package var ignoresOtherEvents: Swift.Bool
  package init(ignoresOtherEvents: Swift.Bool = false)
  package static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.EventListener<Event>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Event>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = Event
}
extension SwiftUICore.EventListener : SwiftUICore.PrimitiveDebuggableGesture {
}
package protocol GestureCallbacks {
  associatedtype StateType = Swift.Void
  static var initialState: Self.StateType { get }
  associatedtype Value
  #if compiler(>=5.3) && $NoncopyableGenerics
  func dispatch(phase: SwiftUICore.GesturePhase<Self.Value>, state: inout Self.StateType) -> (() -> Swift.Void)?
  #else
  func dispatch(phase: SwiftUICore.GesturePhase<Self.Value>, state: inout Self.StateType) -> (() -> Swift.Void)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func cancel(state: Self.StateType) -> (() -> Swift.Void)?
  #else
  func cancel(state: Self.StateType) -> (() -> Swift.Void)?
  #endif
}
extension SwiftUICore.GestureCallbacks where Self.StateType : SwiftUICore.GestureStateProtocol {
  package static var initialState: Self.StateType {
    get
  }
}
extension SwiftUICore.GestureCallbacks where Self.StateType == () {
  package static var initialState: () {
    get
  }
}
extension SwiftUICore.GestureCallbacks {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func cancel(state: Self.StateType) -> (() -> Swift.Void)?
  #else
  package func cancel(state: Self.StateType) -> (() -> Swift.Void)?
  #endif
}
package struct CallbacksGesture<Callbacks> : SwiftUICore.GestureModifier where Callbacks : SwiftUICore.GestureCallbacks {
  package var callbacks: Callbacks
  package init(callbacks: Callbacks)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.CallbacksGesture<Callbacks>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Callbacks.Value>) -> SwiftUICore._GestureOutputs<Callbacks.Value>
  package typealias BodyValue = Callbacks.Value
  package typealias Value = Callbacks.Value
}
package struct FullGestureCallbacks<T> : SwiftUICore.GestureCallbacks where T : Swift.Equatable {
  package typealias Value = T
  package struct StateType : SwiftUICore.GestureStateProtocol {
    package init()
  }
  package var possible: ((SwiftUICore.FullGestureCallbacks<T>.Value?) -> Swift.Void)?
  package var changed: ((SwiftUICore.FullGestureCallbacks<T>.Value) -> Swift.Void)?
  package var ended: ((SwiftUICore.FullGestureCallbacks<T>.Value) -> Swift.Void)?
  package var failed: (() -> Swift.Void)?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(possible: ((SwiftUICore.FullGestureCallbacks<T>.Value?) -> Swift.Void)? = nil, changed: ((SwiftUICore.FullGestureCallbacks<T>.Value) -> Swift.Void)? = nil, ended: ((SwiftUICore.FullGestureCallbacks<T>.Value) -> Swift.Void)? = nil, failed: (() -> Swift.Void)? = nil)
  #else
  package init(possible: ((SwiftUICore.FullGestureCallbacks<T>.Value?) -> Swift.Void)? = nil, changed: ((SwiftUICore.FullGestureCallbacks<T>.Value) -> Swift.Void)? = nil, ended: ((SwiftUICore.FullGestureCallbacks<T>.Value) -> Swift.Void)? = nil, failed: (() -> Swift.Void)? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func dispatch(phase: SwiftUICore.GesturePhase<SwiftUICore.FullGestureCallbacks<T>.Value>, state: inout SwiftUICore.FullGestureCallbacks<T>.StateType) -> (() -> Swift.Void)?
  #else
  package func dispatch(phase: SwiftUICore.GesturePhase<SwiftUICore.FullGestureCallbacks<T>.Value>, state: inout SwiftUICore.FullGestureCallbacks<T>.StateType) -> (() -> Swift.Void)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func cancel(state: SwiftUICore.FullGestureCallbacks<T>.StateType) -> (() -> Swift.Void)?
  #else
  package func cancel(state: SwiftUICore.FullGestureCallbacks<T>.StateType) -> (() -> Swift.Void)?
  #endif
}
package typealias FullCallbacksGesture<T> = SwiftUICore.ModifierGesture<SwiftUICore.CallbacksGesture<SwiftUICore.FullGestureCallbacks<T.Value>>, T> where T : SwiftUICore.Gesture, T.Value : Swift.Equatable
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  package func callbacks<Callbacks>(_ callbacks: Callbacks) -> SwiftUICore.ModifierGesture<SwiftUICore.CallbacksGesture<Callbacks>, Self> where Callbacks : SwiftUICore.GestureCallbacks, Self.Value == Callbacks.Value
  public func onEnded(_ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUICore._EndedGesture<Self>
  package func onFailed(_ action: @escaping () -> Swift.Void) -> SwiftUICore.ModifierGesture<SwiftUICore.CallbacksGesture<SwiftUICore.FailedCallbacks<Self.Value>>, Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture where Self.Value : Swift.Equatable {
  public func onChanged(_ action: @escaping (Self.Value) -> Swift.Void) -> SwiftUICore._ChangedGesture<Self>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func callbacks(possible: ((Self.Value?) -> Swift.Void)? = nil, changed: ((Self.Value) -> Swift.Void)? = nil, ended: ((Self.Value) -> Swift.Void)? = nil, failed: (() -> Swift.Void)? = nil) -> SwiftUICore.FullCallbacksGesture<Self>
  #else
  package func callbacks(possible: ((Self.Value?) -> Swift.Void)? = nil, changed: ((Self.Value) -> Swift.Void)? = nil, ended: ((Self.Value) -> Swift.Void)? = nil, failed: (() -> Swift.Void)? = nil) -> SwiftUICore.FullCallbacksGesture<Self>
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _EndedGesture<Content> : SwiftUICore.PrimitiveGesture where Content : SwiftUICore.Gesture {
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore._EndedGesture<Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Content.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Content.Value
}
@available(*, unavailable)
extension SwiftUICore._EndedGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ChangedGesture<Content> : SwiftUICore.PrimitiveGesture where Content : SwiftUICore.Gesture, Content.Value : Swift.Equatable {
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore._ChangedGesture<Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Content.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Content.Value
}
@available(*, unavailable)
extension SwiftUICore._ChangedGesture : Swift.Sendable {
}
package struct FailedCallbacks<T> : SwiftUICore.GestureCallbacks {
  package let failed: () -> Swift.Void
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func dispatch(phase: SwiftUICore.GesturePhase<T>, state: inout Swift.Void) -> (() -> Swift.Void)?
  #else
  package func dispatch(phase: SwiftUICore.GesturePhase<T>, state: inout Swift.Void) -> (() -> Swift.Void)?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func cancel(state: Swift.Void) -> (() -> Swift.Void)?
  #else
  package func cancel(state: Swift.Void) -> (() -> Swift.Void)?
  #endif
  package typealias StateType = ()
  package typealias Value = T
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Text>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@_Concurrency.MainActor @preconcurrency package struct AccessibilityStyledTextContentView<Provider> : SwiftUICore.View where Provider : SwiftUICore.TextAccessibilityProvider {
  @_Concurrency.MainActor @preconcurrency package var text: SwiftUICore.ResolvedStyledText
  @_Concurrency.MainActor @preconcurrency package var unresolvedText: SwiftUICore.Text
  @_Concurrency.MainActor @preconcurrency package var renderer: SwiftUICore.TextRendererBoxBase?
  @_Concurrency.MainActor @preconcurrency package var needsDrawingGroup: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package init(text: SwiftUICore.ResolvedStyledText, unresolvedText: SwiftUICore.Text, renderer: SwiftUICore.TextRendererBoxBase? = nil, needsDrawingGroup: Swift.Bool = false)
  #else
  @_Concurrency.MainActor @preconcurrency package init(text: SwiftUICore.ResolvedStyledText, unresolvedText: SwiftUICore.Text, renderer: SwiftUICore.TextRendererBoxBase? = nil, needsDrawingGroup: Swift.Bool = false)
  #endif
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI34AccessibilityStyledTextContentViewV4bodyQrvp", 0) __<Provider>
}
@_Concurrency.MainActor @preconcurrency package struct StyledTextContentView : SwiftUICore.UnaryView, SwiftUICore.PrimitiveView, SwiftUICore.ShapeStyledLeafView {
  @_Concurrency.MainActor @preconcurrency package var text: SwiftUICore.ResolvedStyledText
  @_Concurrency.MainActor @preconcurrency package var renderer: SwiftUICore.TextRendererBoxBase?
  @_Concurrency.MainActor @preconcurrency package var needsDrawingGroup: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package init(text: SwiftUICore.ResolvedStyledText, renderer: SwiftUICore.TextRendererBoxBase? = nil, needsDrawingGroup: Swift.Bool = false)
  #else
  @_Concurrency.MainActor @preconcurrency package init(text: SwiftUICore.ResolvedStyledText, renderer: SwiftUICore.TextRendererBoxBase? = nil, needsDrawingGroup: Swift.Bool = false)
  #endif
  @_Concurrency.MainActor @preconcurrency package static var animatesSize: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func shape(in size: CoreFoundation.CGSize) -> SwiftUICore.StyledTextContentView.FramedShape
  nonisolated package static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.StyledTextContentView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  package typealias ShapeUpdateData = Swift.Void
}
extension SwiftUICore.ResolvedStyledText : SwiftUICore.InterpolatableContent {
  package static var defaultTransition: SwiftUICore.ContentTransition {
    get
  }
  package func requiresTransition(to other: SwiftUICore.ResolvedStyledText) -> Swift.Bool
  package var appliesTransitionsForSizeChanges: Swift.Bool {
    get
  }
  package var addsDrawingGroup: Swift.Bool {
    get
  }
  package func modifyTransition(state: inout SwiftUICore.ContentTransition.State, to other: SwiftUICore.ResolvedStyledText)
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TextLayoutProperties : Swift.Equatable {
  @_spi(Private) public var lineLimit: Swift.Int?
  @_spi(Private) package var lowerLineLimit: Swift.Int?
  @_spi(Private) public var truncationMode: SwiftUICore.Text.TruncationMode
  @_spi(Private) public var multilineTextAlignment: SwiftUICore.TextAlignment
  @_spi(Private) public var layoutDirection: SwiftUICore.LayoutDirection
  @_spi(Private) package var transitionStyle: SwiftUICore.ContentTransition.Style
  @_spi(Private) public var minScaleFactor: CoreFoundation.CGFloat
  @_spi(Private) public var lineSpacing: CoreFoundation.CGFloat
  @_spi(Private) public var lineHeightMultiple: CoreFoundation.CGFloat
  @_spi(Private) public var maximumLineHeight: CoreFoundation.CGFloat
  @_spi(Private) public var minimumLineHeight: CoreFoundation.CGFloat
  @_spi(Private) public var hyphenationFactor: CoreFoundation.CGFloat
  @_spi(Private) package var writingMode: SwiftUICore.Text.WritingMode
  @_spi(Private) package var bodyHeadOutdent: CoreFoundation.CGFloat
  @_spi(Private) package var pixelLength: CoreFoundation.CGFloat
  @_spi(Private) package var textSizing: SwiftUICore.Text.Sizing
  @_spi(Private) package var widthIsFlexible: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) package var sizeFitting: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) package init()
  @_spi(Private) public init(_ env: SwiftUICore.EnvironmentValues)
  @_spi(Private) package func update(_ env: inout SwiftUICore.EnvironmentValues, from old: SwiftUICore.TextLayoutProperties)
  @_spi(Private) public static func == (a: SwiftUICore.TextLayoutProperties, b: SwiftUICore.TextLayoutProperties) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.TextLayoutProperties : Swift.Sendable {
}
@_spi(Private) extension SwiftUICore.TextLayoutProperties : SwiftUICore.ProtobufMessage {
  @_spi(Private) package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_spi(Private) package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
package class ResolvedStyledText : Swift.CustomStringConvertible {
  final package var layoutProperties: SwiftUICore.TextLayoutProperties
  final package var layoutMargins: SwiftUICore.EdgeInsets
  final package var scaleFactorOverride: CoreFoundation.CGFloat? {
    get
    set
  }
  package func resetCache()
  final package let storage: Foundation.NSAttributedString?
  final package let stylePadding: SwiftUICore.EdgeInsets
  package var drawingMargins: SwiftUICore.EdgeInsets {
    get
  }
  final package let isCollapsible: Swift.Bool
  final package let features: SwiftUICore.Text.ResolvedProperties.Features
  final package let styles: [SwiftUICore._ShapeStyle_Pack.Style]
  final package let transitions: [SwiftUICore.Text.ResolvedProperties.Transition]
  final package var isDynamic: Swift.Bool {
    get
  }
  final package var isEmpty: Swift.Bool {
    get
  }
  final package var needsStyledRendering: Swift.Bool {
    get
  }
  final package var needsRBDisplayList: Swift.Bool {
    get
  }
  final package var maxFontMetrics: Foundation.NSAttributedString.EncodedFontMetrics {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(storage: Foundation.NSAttributedString?, layoutProperties: SwiftUICore.TextLayoutProperties, layoutMargins: SwiftUICore.EdgeInsets?, stylePadding: SwiftUICore.EdgeInsets, archiveOptions: SwiftUICore.ArchivedViewInput.Value, isCollapsible: Swift.Bool, features: SwiftUICore.Text.ResolvedProperties.Features, suffix: SwiftUICore.ResolvedTextSuffix, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments, styles: [SwiftUICore._ShapeStyle_Pack.Style], transitions: [SwiftUICore.Text.ResolvedProperties.Transition], scaleFactorOverride: CoreFoundation.CGFloat?)
  #else
  package init(storage: Foundation.NSAttributedString?, layoutProperties: SwiftUICore.TextLayoutProperties, layoutMargins: SwiftUICore.EdgeInsets?, stylePadding: SwiftUICore.EdgeInsets, archiveOptions: SwiftUICore.ArchivedViewInput.Value, isCollapsible: Swift.Bool, features: SwiftUICore.Text.ResolvedProperties.Features, suffix: SwiftUICore.ResolvedTextSuffix, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments, styles: [SwiftUICore._ShapeStyle_Pack.Style], transitions: [SwiftUICore.Text.ResolvedProperties.Transition], scaleFactorOverride: CoreFoundation.CGFloat?)
  #endif
  package func lineHeightScalingAdjustment(lineHeightMultiple: CoreFoundation.CGFloat, maximumLineHeight: CoreFoundation.CGFloat, minimumLineHeight: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func draw(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool = true, context: SwiftUICore.TextDrawingContext = .shared, renderer: SwiftUICore.TextRendererBoxBase? = nil)
  #else
  final package func draw(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool = true, context: SwiftUICore.TextDrawingContext = .shared, renderer: SwiftUICore.TextRendererBoxBase? = nil)
  #endif
  package var majorAxis: SwiftUICore.Axis {
    get
  }
  package func drawingScale(size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  package func spacing() -> SwiftUICore.Spacing
  package func sizeThatFits(_ proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  package func size(in request: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  package func frameSize(in request: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  package func size(in request: CoreFoundation.CGSize, context: SwiftUICore.TextDrawingContext) -> CoreFoundation.CGSize
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #else
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func linkURL(at point: CoreFoundation.CGPoint, in size: CoreFoundation.CGSize) -> Foundation.URL?
  #else
  package func linkURL(at point: CoreFoundation.CGPoint, in size: CoreFoundation.CGSize) -> Foundation.URL?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool, containsResolvable: Swift.Bool, context: SwiftUICore.TextDrawingContext, renderer: SwiftUICore.TextRendererBoxBase? = nil)
  #else
  package func draw(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool, containsResolvable: Swift.Bool, context: SwiftUICore.TextDrawingContext, renderer: SwiftUICore.TextRendererBoxBase? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func layoutValue(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool = true) -> SwiftUICore.Text.Layout?
  #else
  package func layoutValue(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool = true) -> SwiftUICore.Text.Layout?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func resolvedContent(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.NSAttributedString?
  #else
  final package func resolvedContent(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.NSAttributedString?
  #endif
  final package func resolvingContent(in context: SwiftUICore.ResolvableStringResolutionContext) -> SwiftUICore.ResolvedStyledText
  final package func nextUpdate(after time: SwiftUICore.Time, equivalentDate date: Foundation.Date, reduceFrequency: Swift.Bool = false) -> SwiftUICore.Time
  final package var updatesAsynchronously: Swift.Bool {
    get
  }
  @usableFromInline
  final package var description: Swift.String {
    get
  }
  final package var accessibilityText: SwiftUICore.Text {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var cgStyleHandler: RenderBox.RBCGStyleHandler? {
    get
  }
  #else
  final package var cgStyleHandler: RenderBox.RBCGStyleHandler? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func makeRBDisplayList(for size: CoreFoundation.CGSize, renderer: SwiftUICore.TextRendererBoxBase?, deviceScale: CoreFoundation.CGFloat) -> any RenderBox.RBDisplayListContents
  #else
  final package func makeRBDisplayList(for size: CoreFoundation.CGSize, renderer: SwiftUICore.TextRendererBoxBase?, deviceScale: CoreFoundation.CGFloat) -> any RenderBox.RBDisplayListContents
  #endif
  @objc @usableFromInline
  deinit
}
extension SwiftUICore.ResolvedStyledText {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func textSizeCacheMetrics(in size: CoreFoundation.CGSize) -> (Swift.UInt?, CoreFoundation.CGSize)
  #else
  package func textSizeCacheMetrics(in size: CoreFoundation.CGSize) -> (Swift.UInt?, CoreFoundation.CGSize)
  #endif
  package func linkURLMetrics(in size: CoreFoundation.CGSize, layoutMargins: SwiftUICore.EdgeInsets) -> CoreFoundation.CGFloat
}
@available(*, unavailable)
extension SwiftUICore.ResolvedStyledText : Swift.Sendable {
}
extension SwiftUICore.ResolvedStyledText {
  package func firstBaseline(in size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  package func lastBaseline(in size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  package func frame(in request: CoreFoundation.CGSize) -> CoreFoundation.CGRect
  package func frameOffset() -> CoreFoundation.CGSize
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
final public class TextDrawingContext {
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.TextDrawingContext : Swift.Sendable {
}
extension SwiftUICore.ResolvedStyledText {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func styledText(storage: Foundation.NSAttributedString?, layoutProperties: SwiftUICore.TextLayoutProperties, layoutMargins: SwiftUICore.EdgeInsets?, stylePadding: SwiftUICore.EdgeInsets, archiveOptions: SwiftUICore.ArchivedViewInput.Value, isCollapsible: Swift.Bool, features: SwiftUICore.Text.ResolvedProperties.Features, suffix: SwiftUICore.ResolvedTextSuffix, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments, styles: [SwiftUICore._ShapeStyle_Pack.Style], transitions: [SwiftUICore.Text.ResolvedProperties.Transition], scaleFactorOverride: CoreFoundation.CGFloat?, isInitialResolution: Swift.Bool = true) -> SwiftUICore.ResolvedStyledText
  #else
  package static func styledText(storage: Foundation.NSAttributedString?, layoutProperties: SwiftUICore.TextLayoutProperties, layoutMargins: SwiftUICore.EdgeInsets?, stylePadding: SwiftUICore.EdgeInsets, archiveOptions: SwiftUICore.ArchivedViewInput.Value, isCollapsible: Swift.Bool, features: SwiftUICore.Text.ResolvedProperties.Features, suffix: SwiftUICore.ResolvedTextSuffix, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments, styles: [SwiftUICore._ShapeStyle_Pack.Style], transitions: [SwiftUICore.Text.ResolvedProperties.Transition], scaleFactorOverride: CoreFoundation.CGFloat?, isInitialResolution: Swift.Bool = true) -> SwiftUICore.ResolvedStyledText
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func styledText(storage: Foundation.NSAttributedString?, stylePadding: SwiftUICore.EdgeInsets = EdgeInsets(), layoutProperties: SwiftUICore.TextLayoutProperties, archiveOptions: SwiftUICore.ArchivedViewInput.Value = .init(), isCollapsible: Swift.Bool = false, features: SwiftUICore.Text.ResolvedProperties.Features = .init(), suffix: SwiftUICore.ResolvedTextSuffix = .none, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments = .init(), styles: [SwiftUICore._ShapeStyle_Pack.Style] = .init(), transitions: [SwiftUICore.Text.ResolvedProperties.Transition] = .init()) -> SwiftUICore.ResolvedStyledText
  #else
  package static func styledText(storage: Foundation.NSAttributedString?, stylePadding: SwiftUICore.EdgeInsets = EdgeInsets(), layoutProperties: SwiftUICore.TextLayoutProperties, archiveOptions: SwiftUICore.ArchivedViewInput.Value = .init(), isCollapsible: Swift.Bool = false, features: SwiftUICore.Text.ResolvedProperties.Features = .init(), suffix: SwiftUICore.ResolvedTextSuffix = .none, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments = .init(), styles: [SwiftUICore._ShapeStyle_Pack.Style] = .init(), transitions: [SwiftUICore.Text.ResolvedProperties.Transition] = .init()) -> SwiftUICore.ResolvedStyledText
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func styledText(storage: Foundation.NSAttributedString?, stylePadding: SwiftUICore.EdgeInsets = EdgeInsets(), environment: SwiftUICore.EnvironmentValues, archiveOptions: SwiftUICore.ArchivedViewInput.Value = .init(), isCollapsible: Swift.Bool = false, features: SwiftUICore.Text.ResolvedProperties.Features = .init(), suffix: SwiftUICore.ResolvedTextSuffix = .none, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments = .init(), styles: [SwiftUICore._ShapeStyle_Pack.Style] = .init(), transitions: [SwiftUICore.Text.ResolvedProperties.Transition] = .init(), writingMode: SwiftUICore.Text.WritingMode? = nil, sizeFitting: Swift.Bool = false) -> SwiftUICore.ResolvedStyledText
  #else
  package static func styledText(storage: Foundation.NSAttributedString?, stylePadding: SwiftUICore.EdgeInsets = EdgeInsets(), environment: SwiftUICore.EnvironmentValues, archiveOptions: SwiftUICore.ArchivedViewInput.Value = .init(), isCollapsible: Swift.Bool = false, features: SwiftUICore.Text.ResolvedProperties.Features = .init(), suffix: SwiftUICore.ResolvedTextSuffix = .none, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments = .init(), styles: [SwiftUICore._ShapeStyle_Pack.Style] = .init(), transitions: [SwiftUICore.Text.ResolvedProperties.Transition] = .init(), writingMode: SwiftUICore.Text.WritingMode? = nil, sizeFitting: Swift.Bool = false) -> SwiftUICore.ResolvedStyledText
  #endif
}
package struct AttributeCountTestInfo : Swift.Equatable {
  package static func == (a: SwiftUICore.AttributeCountTestInfo, b: SwiftUICore.AttributeCountTestInfo) -> Swift.Bool
}
package protocol GestureStateProtocol {
  init()
}
extension SwiftUICore.GestureStateProtocol {
  package static func gesture<T, U>(content: T, _ body: @escaping (inout Self, SwiftUICore.GesturePhase<T.Value>) -> SwiftUICore.GesturePhase<U>) -> SwiftUICore.ModifierGesture<SwiftUICore.StateContainerGesture<Self, T.Value, U>, T> where T : SwiftUICore.Gesture
}
package struct StateContainerGesture<StateType, BodyValue, Value> : SwiftUICore.GestureModifier where StateType : SwiftUICore.GestureStateProtocol {
  package var body: (inout StateType, SwiftUICore.GesturePhase<BodyValue>) -> SwiftUICore.GesturePhase<Value>
  package init(_ body: @escaping (inout StateType, SwiftUICore.GesturePhase<BodyValue>) -> SwiftUICore.GesturePhase<Value>)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.StateContainerGesture<StateType, BodyValue, Value>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<BodyValue>) -> SwiftUICore._GestureOutputs<Value>
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AccessibilityDataSeriesConfiguration {
  @_spi(Private) public struct ValueDescription {
    @_spi(Private) public var description: SwiftUICore.Text
    @_spi(Private) public var effectiveValueRange: Swift.Range<Swift.Double>
    @_spi(Private) public init(description: SwiftUICore.Text, effectiveValueRange: Swift.Range<Swift.Double>)
  }
  @_spi(Private) public struct AxisConfiguration {
    @_spi(Private) public var title: SwiftUICore.Text?
    @_spi(Private) public var unitLabel: SwiftUICore.Text?
    @_spi(Private) public var categoryLabels: [SwiftUICore.Text]
    @_spi(Private) public var minimumValue: Swift.Double?
    @_spi(Private) public var maximumValue: Swift.Double?
    @_spi(Private) public var gridlinePositions: [Swift.Double]
    @_spi(Private) public var values: [Swift.Double]
    @_spi(Private) public var valueDescriptions: [SwiftUICore.AccessibilityDataSeriesConfiguration.ValueDescription]
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public init(title: SwiftUICore.Text? = nil, unitLabel: SwiftUICore.Text? = nil, categoryLabels: [SwiftUICore.Text] = [], minimumValue: Swift.Double? = nil, maximumValue: Swift.Double? = nil, gridlinePositions: [Swift.Double] = [], values: [Swift.Double] = [], valueDescriptions: [SwiftUICore.AccessibilityDataSeriesConfiguration.ValueDescription] = [])
    #else
    @_spi(Private) public init(title: SwiftUICore.Text? = nil, unitLabel: SwiftUICore.Text? = nil, categoryLabels: [SwiftUICore.Text] = [], minimumValue: Swift.Double? = nil, maximumValue: Swift.Double? = nil, gridlinePositions: [Swift.Double] = [], values: [Swift.Double] = [], valueDescriptions: [SwiftUICore.AccessibilityDataSeriesConfiguration.ValueDescription] = [])
    #endif
  }
  @_spi(Private) public enum DataSeriesType : Swift.Int, Swift.Codable {
    @_spi(Private) case scatter
    @_spi(Private) case line
    @_spi(Private) case bar
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public init?(rawValue: Swift.Int)
    #else
    @_spi(Private) public init?(rawValue: Swift.Int)
    #endif
    @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias RawValue = Swift.Int
    @_spi(Private) public var rawValue: Swift.Int {
      @_spi(Private) get
    }
  }
  @_spi(Private) public var name: SwiftUICore.Text
  @_spi(Private) public var type: SwiftUICore.AccessibilityDataSeriesConfiguration.DataSeriesType
  @_spi(Private) public var supportsSonification: Swift.Bool
  @_spi(Private) public var sonificationDuration: Foundation.TimeInterval?
  @_spi(Private) public var includesTrendlineInSonification: Swift.Bool
  @_spi(Private) public var supportsSummarization: Swift.Bool
  @_spi(Private) public var xAxisConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration.AxisConfiguration?
  @_spi(Private) public var yAxisConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration.AxisConfiguration?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(name: SwiftUICore.Text, type: SwiftUICore.AccessibilityDataSeriesConfiguration.DataSeriesType, supportsSonification: Swift.Bool = false, sonificationDuration: Foundation.TimeInterval? = nil, includesTrendlineInSonification: Swift.Bool = false, supportsSummarization: Swift.Bool = false, xAxisConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration.AxisConfiguration? = nil, yAxisConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration.AxisConfiguration? = nil)
  #else
  @_spi(Private) public init(name: SwiftUICore.Text, type: SwiftUICore.AccessibilityDataSeriesConfiguration.DataSeriesType, supportsSonification: Swift.Bool = false, sonificationDuration: Foundation.TimeInterval? = nil, includesTrendlineInSonification: Swift.Bool = false, supportsSummarization: Swift.Bool = false, xAxisConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration.AxisConfiguration? = nil, yAxisConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration.AxisConfiguration? = nil)
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.AccessibilityDataSeriesConfiguration.AxisConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.AccessibilityDataSeriesConfiguration.DataSeriesType : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.AccessibilityDataSeriesConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.AccessibilityDataSeriesConfiguration.ValueDescription : Swift.Sendable {
}
extension SwiftUICore.Gesture {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func requiredTapCount(_ count: Swift.Int?) -> some SwiftUICore.Gesture<Self.Value>
  
  #else
  package func requiredTapCount(_ count: Swift.Int?) -> some SwiftUICore.Gesture<Self.Value>
  
  #endif
}
package protocol SceneStorageHost : AnyObject {
  func sceneStorageDidChange()
}
package protocol PanEventType : SwiftUICore.EventType, SwiftUICore.TouchTypeProviding {
  var translation: CoreFoundation.CGSize { get }
  var globalTranslation: CoreFoundation.CGSize { get }
}
package struct PanEvent : SwiftUICore.PanEventType, SwiftUICore.HitTestableEventType, SwiftUICore.SpatialEventType, Swift.Equatable {
  package var location: CoreFoundation.CGPoint {
    get
    set
  }
  package var globalLocation: CoreFoundation.CGPoint
  package var phase: SwiftUICore.EventPhase
  package var timestamp: SwiftUICore.Time
  package var binding: SwiftUICore.EventBinding?
  package var translation: CoreFoundation.CGSize
  package var globalTranslation: CoreFoundation.CGSize
  package var touchType: SwiftUICore.TouchType
  package init(_ event: any SwiftUICore.PanEventType)
  package init(globalLocation: CoreFoundation.CGPoint, phase: SwiftUICore.EventPhase, timestamp: SwiftUICore.Time, globalTranslation: CoreFoundation.CGSize, touchType: SwiftUICore.TouchType)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ event: any SwiftUICore.EventType)
  #else
  package init?(_ event: any SwiftUICore.EventType)
  #endif
  package var radius: CoreFoundation.CGFloat {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var kind: SwiftUICore.SpatialEvent.Kind? {
    get
  }
  #else
  package var kind: SwiftUICore.SpatialEvent.Kind? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.PanEvent, b: SwiftUICore.PanEvent) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DynamicPropertyBuffer {
  package init()
  package init<T>(fields: SwiftUICore.DynamicPropertyCache.Fields, container: SwiftUICore._GraphValue<T>, inputs: inout SwiftUICore._GraphInputs, baseOffset: Swift.Int)
  package init<T>(fields: SwiftUICore.DynamicPropertyCache.Fields, container: SwiftUICore._GraphValue<T>, inputs: inout SwiftUICore._GraphInputs)
  package var isEmpty: Swift.Bool {
    get
  }
  package mutating func addFields<T>(_ fields: SwiftUICore.DynamicPropertyCache.Fields, container: SwiftUICore._GraphValue<T>, inputs: inout SwiftUICore._GraphInputs, baseOffset: Swift.Int)
  package mutating func append<T>(_ box: T, fieldOffset: Swift.Int) where T : SwiftUICore.DynamicPropertyBox
  package func destroy()
  package func reset()
  package func traceMountedProperties<T>(to graphValue: SwiftUICore._GraphValue<T>, fields: SwiftUICore.DynamicPropertyCache.Fields)
  package func update(container: Swift.UnsafeMutableRawPointer, phase: SwiftUICore.ViewPhase) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func getState<S>(type: S.Type = S.self) -> SwiftUICore.Binding<S>?
  #else
  package func getState<S>(type: S.Type = S.self) -> SwiftUICore.Binding<S>?
  #endif
  package func applyChanged(to body: (Swift.Int) -> Swift.Void)
}
@available(*, unavailable)
extension SwiftUICore._DynamicPropertyBuffer : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol AXChartDescriptorRepresentable {
  func makeChartDescriptor() -> Accessibility.AXChartDescriptor
  func updateChartDescriptor(_ descriptor: Accessibility.AXChartDescriptor)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AXChartDescriptorRepresentable {
  public func updateChartDescriptor(_ descriptor: Accessibility.AXChartDescriptor)
}
package class AccessibilityChartDescriptorStorage : Swift.Equatable {
  package func resolve() throws -> Accessibility.AXChartDescriptor
  package func isEqual(to other: SwiftUICore.AccessibilityChartDescriptorStorage) -> Swift.Bool
  package static func == (lhs: SwiftUICore.AccessibilityChartDescriptorStorage, rhs: SwiftUICore.AccessibilityChartDescriptorStorage) -> Swift.Bool
  @objc deinit
}
final package class RepresentableChartDescriptorStorage : SwiftUICore.AccessibilityChartDescriptorStorage {
  package init(_ representable: any SwiftUICore.AXChartDescriptorRepresentable)
  final package func reset()
  final package func markNeedsUpdate(_ representable: any SwiftUICore.AXChartDescriptorRepresentable)
  final package func resolve() throws -> Accessibility.AXChartDescriptor
  final package func isEqual(to other: SwiftUICore.AccessibilityChartDescriptorStorage) -> Swift.Bool
  @objc deinit
}
package struct CodableAXChartDescriptor : Swift.Codable {
  package var storage: SwiftUICore.AccessibilityChartDescriptorStorage
  package init(_ storage: SwiftUICore.AccessibilityChartDescriptorStorage)
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct LineStyle : Swift.Hashable, Swift.Sendable {
    package var nsUnderlineStyleValue: Swift.Int
    package var color: SwiftUICore.Color?
    package var nsUnderlineStyle: UIFoundation.NSUnderlineStyle {
      get
      set
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil)
    #else
    public init(pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil)
    #endif
    public struct Pattern : Swift.Sendable {
      public static let solid: SwiftUICore.Text.LineStyle.Pattern
      public static let dot: SwiftUICore.Text.LineStyle.Pattern
      public static let dash: SwiftUICore.Text.LineStyle.Pattern
      public static let dashDot: SwiftUICore.Text.LineStyle.Pattern
      public static let dashDotDot: SwiftUICore.Text.LineStyle.Pattern
    }
    public static let single: SwiftUICore.Text.LineStyle
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(_nsUnderlineStyle: UIFoundation.NSUnderlineStyle)
    #else
    package init?(_nsUnderlineStyle: UIFoundation.NSUnderlineStyle)
    #endif
    package struct Resolved {
      package var nsUnderlineStyle: UIFoundation.NSUnderlineStyle
      package var color: SwiftUICore.Color.Resolved?
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Text.LineStyle, b: SwiftUICore.Text.LineStyle) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func underline(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func underline(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func strikethrough(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func strikethrough(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern = .solid, color: SwiftUICore.Color? = nil) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _Graph {
  package init()
}
@available(*, unavailable)
extension SwiftUICore._Graph : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GraphValue<Value> : Swift.Equatable {
  package var value: AttributeGraph.Attribute<Value>
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public init(_ value: AttributeGraph.Attribute<Value>)
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable public init<U>(_ value: U) where Value == U.Value, U : AttributeGraph.Rule {
        self.init(Attribute(value))
    }
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable public init<U>(_ value: U) where Value == U.Value, U : AttributeGraph.StatefulRule {
        self.init(Attribute(value))
    }
  public subscript<U>(keyPath: Swift.KeyPath<Value, U>) -> SwiftUICore._GraphValue<U> {
    get
  }
  package subscript<U>(offset subject: (inout Value) -> AttributeGraph.PointerOffset<Value, U>) -> SwiftUICore._GraphValue<U> {
    get
  }
  package func unsafeCast<T>(to _: T.Type = T.self) -> SwiftUICore._GraphValue<T>
  package func unsafeBitCast<T>(to _: T.Type) -> SwiftUICore._GraphValue<T>
  public static func == (a: SwiftUICore._GraphValue<Value>, b: SwiftUICore._GraphValue<Value>) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._GraphValue : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TransactionKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransactionKey {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransactionKey where Self.Value : Swift.Equatable {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransactionKey where Self : SwiftUICore.EnvironmentKey, Self.Value : Swift.Equatable {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Transaction {
  @usableFromInline
  package var plist: SwiftUICore.PropertyList
  @inlinable public init() {
        plist = PropertyList()
    }
  @inlinable package init(plist: SwiftUICore.PropertyList) {
        self.plist = plist
    }
  package struct ID : Swift.Hashable {
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Transaction.ID, b: SwiftUICore.Transaction.ID) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package static var id: SwiftUICore.Transaction.ID {
    get
  }
  package static func _core_barrier()
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.TransactionKey {
    get
    set
  }
  @inlinable package var isEmpty: Swift.Bool {
    get {
        return plist.isEmpty
    }
  }
  package func mayConcatenate(with other: SwiftUICore.Transaction) -> Swift.Bool
  @_transparent package mutating func set(_ other: SwiftUICore.Transaction)
  package static var current: SwiftUICore.Transaction {
    get
  }
  package var current: SwiftUICore.Transaction {
    get
  }
  package func forEach<K>(keyType: K.Type, _ body: (K.Value, inout Swift.Bool) -> Swift.Void) where K : SwiftUICore.TransactionKey
}
@available(*, unavailable)
extension SwiftUICore.Transaction : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public func withTransaction<Result>(_ transaction: SwiftUICore.Transaction, _ body: () throws -> Result) rethrows -> Result
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_alwaysEmitIntoClient public func withTransaction<R, V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.Transaction, V>, _ value: V, _ body: () throws -> R) rethrows -> R {
    var transaction = Transaction()
    transaction[keyPath: keyPath] = value
    return try withTransaction(transaction, body)
}
package enum Stack<Value> : Swift.Sequence, Swift.IteratorProtocol {
  case empty
  indirect case node(value: Value, next: SwiftUICore.Stack<Value>)
  @inlinable package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var top: Value? {
    get
  }
  #else
  package var top: Value? {
    get
  }
  #endif
  @inlinable package var count: Swift.Int {
    get
  }
  @inlinable package var isEmpty: Swift.Bool {
    get
  }
  @inlinable package mutating func push(_ value: Value)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  @inlinable package mutating func pop() -> Value?
  #else
  @discardableResult
  @inlinable package mutating func pop() -> Value?
  #endif
  @inlinable package mutating func popAll()
  package func map<T>(_ transform: (Value) -> T) -> SwiftUICore.Stack<T>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func next() -> Value?
  #else
  package mutating func next() -> Value?
  #endif
  package typealias Element = Value
  package typealias Iterator = SwiftUICore.Stack<Value>
}
extension SwiftUICore.Stack : Swift.Equatable where Value : Swift.Equatable {
  package static func == (a: SwiftUICore.Stack<Value>, b: SwiftUICore.Stack<Value>) -> Swift.Bool
}
extension SwiftUICore.Stack : SwiftUICore.GraphReusable where Value : SwiftUICore.GraphReusable {
  @inlinable package static var isTriviallyReusable: Swift.Bool {
    get
  }
  package mutating func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap)
  package func tryToReuse(by other: SwiftUICore.Stack<Value>, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct RedactionReasons : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let placeholder: SwiftUICore.RedactionReasons
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let privacy: SwiftUICore.RedactionReasons
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let invalidated: SwiftUICore.RedactionReasons
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static let screencaptureProhibited: SwiftUICore.RedactionReasons
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.RedactionReasons
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.RedactionReasons
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func redacted(reason: SwiftUICore.RedactionReasons) -> some SwiftUICore.View
  
  nonisolated public func unredacted() -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  package var shouldRedactContent: Swift.Bool {
    get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var unredactSymbolImage: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) package var shouldRedactSymbolImages: Swift.Bool {
    @_spi(Private) get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var redactionReasons: SwiftUICore.RedactionReasons {
    get
    set
  }
}
extension SwiftUICore.GraphicsImage {
  package mutating func redact(in environment: SwiftUICore.EnvironmentValues)
}
extension SwiftUICore.Image {
  package static let redacted: SwiftUICore.Image
}
package protocol SemanticFeature : SwiftUICore.Feature {
  static var introduced: SwiftUICore.Semantics { get }
  static var requirement: SwiftUICore.SemanticRequirement { get }
}
extension SwiftUICore.SemanticFeature {
  @inlinable package static var requirement: SwiftUICore.SemanticRequirement {
    get
  }
  @inlinable package static var prior: SwiftUICore.Semantics {
    get
  }
}
package struct _SemanticFeature_v2 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v2_1 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v2_3 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v3 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v4 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v4_4 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v5 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v5_2 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct _SemanticFeature_v6 : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
extension SwiftUICore.Semantics {
  package typealias ColumnarNavigationViewsUseUnaryWrappers = SwiftUICore._SemanticFeature_v2
  package typealias ImagesLayoutAsText = SwiftUICore._SemanticFeature_v2
  package typealias NoSpacingProjectedPadding = SwiftUICore._SemanticFeature_v2
  package typealias ScaleNamedFonts = SwiftUICore._SemanticFeature_v2
  package typealias UbiquitousTransitions = SwiftUICore._SemanticFeature_v2
  package typealias UppercaseSectionHeaders = SwiftUICore._SemanticFeature_v2
}
extension SwiftUICore.Semantics {
  package typealias IOSCompactDatePickerFeature = SwiftUICore._SemanticFeature_v2
  package typealias IOSExplicitListInsettingFeature = SwiftUICore._SemanticFeature_v2
  package typealias IOSIncreasedPhoneTableViewMargins = SwiftUICore._SemanticFeature_v2
  package typealias IOSKeyboardAvoidance = SwiftUICore._SemanticFeature_v2
  package typealias IOSMultiColumnFeature = SwiftUICore._SemanticFeature_v2
  package typealias IOSOnDropUsesLocalCoordinateSpace = SwiftUICore._SemanticFeature_v2
  package typealias IOSTableViewDefaultAnimationDisabled = SwiftUICore._SemanticFeature_v2
}
extension SwiftUICore.Semantics {
  package typealias MacListMultilineText = SwiftUICore._SemanticFeature_v2
  package typealias MacTabViewFittedSize = SwiftUICore._SemanticFeature_v2
}
extension SwiftUICore.Semantics {
  package typealias TVNavigationBarHidden = SwiftUICore._SemanticFeature_v2
}
extension SwiftUICore.Semantics {
  package typealias WatchBaselineAdjustedHeaders = SwiftUICore._SemanticFeature_v2
  package typealias WatchBorderedButtonTintFeature = SwiftUICore._SemanticFeature_v2
  package typealias WatchEllipticalListStyleFeature = SwiftUICore._SemanticFeature_v2
  package typealias WatchGlobalAccentColor = SwiftUICore._SemanticFeature_v2
  package typealias WatchNavigationPicker = SwiftUICore._SemanticFeature_v2
  package typealias WheelPickerShouldHideLabels = SwiftUICore._SemanticFeature_v2
  package typealias WatchSpecificSpacing = SwiftUICore._SemanticFeature_v2
}
extension SwiftUICore.Semantics {
  package typealias SymbolImageLayoutUsingContentBounds = SwiftUICore._SemanticFeature_v2_1
}
extension SwiftUICore.Semantics {
  package typealias PreviewPreferredColorScheme = SwiftUICore._SemanticFeature_v2_3
  package typealias ListSectionInlinePickerStyle = SwiftUICore._SemanticFeature_v2_3
  package typealias PageTabViewStyleStopsSizingChildren = SwiftUICore._SemanticFeature_v2_3
  package typealias ViewStylesMustBeValueTypes = SwiftUICore._SemanticFeature_v2_3
}
extension SwiftUICore.Semantics {
  package typealias DepthWiseSecondaryLayers = SwiftUICore._SemanticFeature_v3
  package typealias EnvironmentReaderViewIsMulti = SwiftUICore._SemanticFeature_v3
  package typealias AccessibilityCodableVersion3 = SwiftUICore._SemanticFeature_v3
  package typealias WatchSupportsLargeTitles = SwiftUICore._SemanticFeature_v3
  package typealias MergeCoincidentAnimations = SwiftUICore._SemanticFeature_v3
  package typealias UpdatedSidebarHeaderStyle = SwiftUICore._SemanticFeature_v3
  package typealias EnhancedBackgroundTransparency = SwiftUICore._SemanticFeature_v3
  package typealias TraitCollectionAnimations = SwiftUICore._SemanticFeature_v3
  package typealias FocusableCustomButtonStyleFeature = SwiftUICore._SemanticFeature_v3
  package typealias MarkdownSupportForLocalizedStringKey = SwiftUICore._SemanticFeature_v3
  package typealias DefaultListStyleInsetGrouped = SwiftUICore._SemanticFeature_v3
  package typealias StopProjectingAffectedSpacing = SwiftUICore._SemanticFeature_v3
  package typealias AvoidToolbarItemBridging = SwiftUICore._SemanticFeature_v3
  package typealias IOSPickerIsMenuByDefault = SwiftUICore._SemanticFeature_v3
  package typealias FormSectionInlinePickerStyle = SwiftUICore._SemanticFeature_v3
  package typealias PrioritizeControlLabel = SwiftUICore._SemanticFeature_v3
}
extension SwiftUICore.Semantics {
  package typealias IOSListsUseCollectionView = SwiftUICore._SemanticFeature_v4
  package typealias InferredToolbar = SwiftUICore._SemanticFeature_v4
  package typealias ChildToolbarItemsAreAppended = SwiftUICore._SemanticFeature_v4
  package typealias AutomaticHierarchicalTextLevels = SwiftUICore._SemanticFeature_v4
  package typealias NavigationBarDefaults = SwiftUICore._SemanticFeature_v4
  package typealias TextModifiersOverrideParentValues = SwiftUICore._SemanticFeature_v4
  package typealias FontModifiersNilResetValues = SwiftUICore._SemanticFeature_v4
  package typealias EvaluateDefaultFocusState = SwiftUICore._SemanticFeature_v4
  package typealias DisableFocusInSubtree = SwiftUICore._SemanticFeature_v4
  package typealias FixedSidebarInSheetContext = SwiftUICore._SemanticFeature_v4
  package typealias DesktopClassIpadFeatures = SwiftUICore._SemanticFeature_v4
  package typealias NoImplicitHStackInDisclosureGroupHeader = SwiftUICore._SemanticFeature_v4
  package typealias ImplicitlyFlexibleWindows = SwiftUICore._SemanticFeature_v4
  package typealias IOSListsUseUpdatedRowLayout = SwiftUICore._SemanticFeature_v4
  package typealias MenuIsButtonByDefault = SwiftUICore._SemanticFeature_v4
  package typealias AvoidToolbarItemToggleBridging = SwiftUICore._SemanticFeature_v4
  package typealias AllowDisabledButtonsInAlert = SwiftUICore._SemanticFeature_v4
  package typealias RefreshableInScrollView = SwiftUICore._SemanticFeature_v4
  package typealias IOSPickerIsMenuByDefaultInList = SwiftUICore._SemanticFeature_v4
  package typealias UIKitEnvironmentPrefersTint = SwiftUICore._SemanticFeature_v4
  package typealias OrderButtonsByRoleInAlert = SwiftUICore._SemanticFeature_v4
  package typealias SettingsSceneAddsCoreCommands = SwiftUICore._SemanticFeature_v4
  package typealias TVSwiftUIPlainButtonStyle = SwiftUICore._SemanticFeature_v4
  package typealias TVSwiftUIBorderedButtonStyle = SwiftUICore._SemanticFeature_v4
}
extension SwiftUICore.Semantics {
  package typealias ButtonHierarchicalTextLevels = SwiftUICore._SemanticFeature_v4_4
  package typealias ListResetRefresh = SwiftUICore._SemanticFeature_v4_4
}
extension SwiftUICore.Semantics {
  package typealias ResetScrollEnvironment = SwiftUICore._SemanticFeature_v5
  package typealias DismissActionInRootHost = SwiftUICore._SemanticFeature_v5
  package typealias TVSwiftUICardButtonStyle = SwiftUICore._SemanticFeature_v5
  package typealias ClientButtonStyleMenuComposition = SwiftUICore._SemanticFeature_v5
  package typealias HiddenSidebarHeadersForEmptyView = SwiftUICore._SemanticFeature_v5
  package typealias WatchViewsUseMaterials = SwiftUICore._SemanticFeature_v5
  package typealias RequireAccessingSecurityScopedResource = SwiftUICore._SemanticFeature_v5
  package typealias UseSettingsLinkInCommands = SwiftUICore._SemanticFeature_v5
  package typealias AllowLabelToolbarItemBridging = SwiftUICore._SemanticFeature_v5
  package typealias DefaultFocusableBehaviorIncludesKeyboard = SwiftUICore._SemanticFeature_v5
  package typealias BridgeKitAnimations = SwiftUICore._SemanticFeature_v5
  package typealias PortaledLiftPreviews = SwiftUICore._SemanticFeature_v5
  package typealias NoImplicitHStackInPrimitiveOutline = SwiftUICore._SemanticFeature_v5
  package typealias MirrorUIKitVibrancy = SwiftUICore._SemanticFeature_v5
  package typealias BottomBarManagedAppearance = SwiftUICore._SemanticFeature_v5
  package typealias TextSpacingUIKit0059v2 = SwiftUICore._SemanticFeature_v5
  package typealias FlexFrameIdealSizing = SwiftUICore._SemanticFeature_v5
  package typealias NSToolbarBridgingDoesNotRequireFullWindow = SwiftUICore._SemanticFeature_v5
  package typealias ProgrammaticSectionExpansion = SwiftUICore._SemanticFeature_v5
  package typealias ArchivedLinkIsButton = SwiftUICore._SemanticFeature_v5
  package typealias TextRenderingMetrics = SwiftUICore._SemanticFeature_v5
  package typealias ListButtonsAreUnary = SwiftUICore._SemanticFeature_v5
  package typealias SearchRepresentablesForFocusableSubviews = SwiftUICore._SemanticFeature_v5
  package typealias SectionsHaveAuxiliaryHoverEffect = SwiftUICore._SemanticFeature_v5
  package typealias ResponderBasedTooltips = SwiftUICore._SemanticFeature_v5
}
extension SwiftUICore.Semantics {
  package typealias TextContentTransitionDisabled = SwiftUICore._SemanticFeature_v5_2
}
extension SwiftUICore.Semantics {
  package typealias WindowBasedScrollGeometry = SwiftUICore._SemanticFeature_v6
  package typealias NonScrollableSafeAreaEdges = SwiftUICore._SemanticFeature_v6
  package typealias PrincipalItemsPerSplitViewPane = SwiftUICore._SemanticFeature_v6
  package typealias UnifiedHitTesting = SwiftUICore._SemanticFeature_v6
  package typealias PresentationSizing = SwiftUICore._SemanticFeature_v6
  package typealias TVBlurOverFullScreen = SwiftUICore._SemanticFeature_v6
  package typealias IgnoreNavDestInLazyContainer = SwiftUICore._SemanticFeature_v6
  package typealias TVSidebarNavSplit = SwiftUICore._SemanticFeature_v6
  package typealias PopoverDismissesOutsideSafeArea = SwiftUICore._SemanticFeature_v6
  package typealias DocumentViewControllerRoot = SwiftUICore._SemanticFeature_v6
  package typealias TabViewWindowSidebarStyling = SwiftUICore._SemanticFeature_v6
  package typealias ShapeStyleDownwardsModifiers = SwiftUICore._SemanticFeature_v6
  package typealias ProminentHeadersInSidebarDisabled = SwiftUICore._SemanticFeature_v6
  package typealias LimitWriteBacksToSheetBindings = SwiftUICore._SemanticFeature_v6
  package typealias EmptyPickerCurrentValueLabel = SwiftUICore._SemanticFeature_v6
  package typealias ListLabelCenterAlignsIcon = SwiftUICore._SemanticFeature_v6
  package struct DismissPopsInNavigationSplitViewRoots : SwiftUICore.SemanticFeature {
    package static let introduced: SwiftUICore.Semantics
    package static let requirement: SwiftUICore.SemanticRequirement
    @inlinable package init()
    package typealias Value = Swift.Bool
  }
  package typealias SearchCompletionIncludesMatches = SwiftUICore._SemanticFeature_v6
  package typealias MacOSListDoesNotEagerlyLoadsPIL = SwiftUICore._SemanticFeature_v6
}
package struct DisabledFeature : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package static var isEnabled: Swift.Bool {
    get
  }
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct EnabledFeature : SwiftUICore.SemanticFeature {
  package static let introduced: SwiftUICore.Semantics
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct WindowDragGestureIsActiveKey : SwiftUICore.PreferenceKey {
  package static let defaultValue: Swift.Bool
  package static func reduce(value: inout Swift.Bool, nextValue: () -> Swift.Bool)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.DateOffset {
  public static func offset(to anchor: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.ComponentsFormatStyle.Field> = [.year, .month, .day, .hour, .minute, .second], maxFieldCount: Swift.Int = 2, sign: Foundation.NumberFormatStyleConfiguration.SignDisplayStrategy = .automatic) -> SwiftUICore.SystemFormatStyle.DateOffset
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct DateOffset : Swift.Sendable {
    public init(to anchor: Foundation.Date, allowedFields: Swift.Set<Foundation.Date.ComponentsFormatStyle.Field> = [.year, .month, .week, .day, .hour, .minute, .second], maxFieldCount: Swift.Int = 2, sign: Foundation.NumberFormatStyleConfiguration.SignDisplayStrategy = .automatic)
    public func calendar(_ calendar: Foundation.Calendar) -> SwiftUICore.SystemFormatStyle.DateOffset
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateOffset : Foundation.FormatStyle {
  public func format(_ referenceDate: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.DateOffset
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.SystemFormatStyle.DateOffset, b: SwiftUICore.SystemFormatStyle.DateOffset) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias FormatInput = Foundation.Date
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.DateOffset : Foundation.DiscreteFormatStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(before referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(before referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(after referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(after referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func input(before referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func input(before referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func input(after referenceDate: Foundation.Date) -> Foundation.Date?
  #else
  public func input(after referenceDate: Foundation.Date) -> Foundation.Date?
  #endif
}
extension SwiftUICore.SystemFormatStyle.DateOffset : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> SwiftUICore.SystemFormatStyle.DateOffset
}
extension SwiftUICore.SystemFormatStyle.DateOffset : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, SwiftUICore.SystemFormatStyle.DateOffset>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension SwiftUICore.SystemFormatStyle.DateOffset : SwiftUICore.InterfaceIdiomDependentFormatStyle {
  package func interfaceIdiom(_ idiom: SwiftUICore.AnyInterfaceIdiom) -> SwiftUICore.SystemFormatStyle.DateOffset
}
package struct VariableBlurStyle : Swift.Equatable {
  package enum Mask : Swift.Equatable {
    case none
    case image(SwiftUICore.GraphicsImage)
    package static func == (a: SwiftUICore.VariableBlurStyle.Mask, b: SwiftUICore.VariableBlurStyle.Mask) -> Swift.Bool
  }
  package var radius: CoreFoundation.CGFloat
  package var isOpaque: Swift.Bool
  package var dither: Swift.Bool
  package var mask: SwiftUICore.VariableBlurStyle.Mask
  package init(radius: CoreFoundation.CGFloat = 0, isOpaque: Swift.Bool = false, dither: Swift.Bool = false, mask: SwiftUICore.VariableBlurStyle.Mask = .none)
  package var caFilterRadius: CoreFoundation.CGFloat {
    get
    set
  }
  package var isIdentity: Swift.Bool {
    get
  }
  package static func == (a: SwiftUICore.VariableBlurStyle, b: SwiftUICore.VariableBlurStyle) -> Swift.Bool
}
extension SwiftUICore.VariableBlurStyle : SwiftUICore.RendererEffect {
  package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
extension SwiftUICore.VariableBlurStyle : SwiftUICore.Animatable {
  package var animatableData: CoreFoundation.CGFloat {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnimatableData = CoreFoundation.CGFloat
}
extension SwiftUICore.VariableBlurStyle : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.VariableBlurStyle.Mask : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct FillStyle : Swift.Equatable {
  public var isEOFilled: Swift.Bool
  public var isAntialiased: Swift.Bool
  @inlinable public init(eoFill: Swift.Bool = false, antialiased: Swift.Bool = true) {
        self.isEOFilled = eoFill
        self.isAntialiased = antialiased
    }
  public static func == (a: SwiftUICore.FillStyle, b: SwiftUICore.FillStyle) -> Swift.Bool
}
extension SwiftUICore.FillStyle : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum BlendMode : Swift.Sendable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case softLight
  case hardLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  case sourceAtop
  case destinationOver
  case destinationOut
  case plusDarker
  case plusLighter
  public static func == (a: SwiftUICore.BlendMode, b: SwiftUICore.BlendMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @inlinable public func blendMode(_ mode: SwiftUICore.BlendMode) -> some SwiftUICore.ShapeStyle {
        _BlendModeShapeStyle(style: self, blendMode: mode)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AnyShapeStyle {
  @_alwaysEmitIntoClient public static func blendMode(_ mode: SwiftUICore.BlendMode) -> some SwiftUICore.ShapeStyle {
        return _BlendModeShapeStyle(
            style: _ImplicitShapeStyle(), blendMode: mode)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _BlendModeShapeStyle<Style> : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle where Style : SwiftUICore.ShapeStyle {
  public var style: Style
  public var blendMode: SwiftUICore.BlendMode
  @inlinable public init(style: Style, blendMode: SwiftUICore.BlendMode) {
        self.style = style
        self.blendMode = blendMode
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct Material : Swift.Sendable {
  package enum ID : Swift.Hashable {
    case ultraThin
    case thin
    case regular
    case thick
    case ultraThick
    case systemBars
    case intelligenceLightSource_Unreactive
    case intelligenceLightSource_AudioReactive
    indirect case coreMaterial(light: Swift.String, dark: Swift.String, bundle: Foundation.Bundle?)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Material.ID, b: SwiftUICore.Material.ID) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct ResolvedMaterial : Swift.Hashable {
    package struct Flags : Swift.OptionSet, Swift.Hashable {
      package let rawValue: Swift.UInt32
      package init(rawValue: Swift.UInt32)
      package static let darkColorScheme: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let reduceTransparency: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let increasedContrast: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let disableChameleon: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let isActive: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let noBlur: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let isEmphasized: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let filtersInPlace: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let noTransparentBlur: SwiftUICore.Material.ResolvedMaterial.Flags
      package static let isVisionEnabled: SwiftUICore.Material.ResolvedMaterial.Flags
      package init(environment: SwiftUICore.EnvironmentValues)
      @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
      package typealias ArrayLiteralElement = SwiftUICore.Material.ResolvedMaterial.Flags
      @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
      package typealias Element = SwiftUICore.Material.ResolvedMaterial.Flags
      @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
      package typealias RawValue = Swift.UInt32
    }
    package var id: SwiftUICore.Material.ID
    package var flags: SwiftUICore.Material.ResolvedMaterial.Flags
    package var colorScheme: SwiftUICore.ColorScheme {
      get
    }
    package var colorSchemeContrast: SwiftUICore.ColorSchemeContrast {
      get
    }
    package var isEmphasized: Swift.Bool {
      get
    }
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Material.ResolvedMaterial, b: SwiftUICore.Material.ResolvedMaterial) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package var id: SwiftUICore.Material.ID
  package var flags: SwiftUICore.Material.ResolvedMaterial.Flags
  package init(_ id: SwiftUICore.Material.ID)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolve(in env: SwiftUICore.EnvironmentValues, role: SwiftUICore.ShapeRole? = nil) -> SwiftUICore.Material.ResolvedMaterial
  #else
  package func resolve(in env: SwiftUICore.EnvironmentValues, role: SwiftUICore.ShapeRole? = nil) -> SwiftUICore.Material.ResolvedMaterial
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Material {
  @_spi(_) public func disablingBlur(_ flag: Swift.Bool = true) -> SwiftUICore.Material
  @_spi(_) public func applyingFiltersInPlace(_ flag: Swift.Bool = true) -> SwiftUICore.Material
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.Material {
  @_alwaysEmitIntoClient public static var regularMaterial: SwiftUICore.Material {
    get { .regular }
  }
  @_alwaysEmitIntoClient public static var thickMaterial: SwiftUICore.Material {
    get { .thick }
  }
  @_alwaysEmitIntoClient public static var thinMaterial: SwiftUICore.Material {
    get { .thin }
  }
  @_alwaysEmitIntoClient public static var ultraThinMaterial: SwiftUICore.Material {
    get { .ultraThin }
  }
  @_alwaysEmitIntoClient public static var ultraThickMaterial: SwiftUICore.Material {
    get { .ultraThick }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.Material {
  @_alwaysEmitIntoClient public static var bar: SwiftUICore.Material {
    get { .bar }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Material {
  public static let regular: SwiftUICore.Material
  public static let thick: SwiftUICore.Material
  public static let thin: SwiftUICore.Material
  public static let ultraThin: SwiftUICore.Material
  public static let ultraThick: SwiftUICore.Material
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Material {
  @_spi(_) public static var pinched: SwiftUICore.Material {
    get
  }
  @_spi(_) public static var selected: SwiftUICore.Material {
    get
  }
  @_spi(_) public static var disabled: SwiftUICore.Material {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public static func coreMaterial(bundle: Foundation.Bundle? = nil, provider: @escaping (SwiftUICore.ColorScheme) -> Swift.String) -> SwiftUICore.Material
  #else
  @_spi(_) public static func coreMaterial(bundle: Foundation.Bundle? = nil, provider: @escaping (SwiftUICore.ColorScheme) -> Swift.String) -> SwiftUICore.Material
  #endif
}
@available(iOS 15.0, macOS 12.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Material {
  public static let bar: SwiftUICore.Material
}
@_spi(Private) @available(iOS 15.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Material {
  @_spi(Private) @available(*, deprecated, renamed: "bar")
  public static let chrome: SwiftUICore.Material
}
@_spi(Private) @available(watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.Material {
  @_spi(Private) public static var modal: SwiftUICore.Material {
    @_spi(Private) get
  }
}
@_spi(Private) @available(watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.Material {
  @_spi(Private) public static var toolbarButton: SwiftUICore.Material {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.Material {
  @_spi(Private) public static func _intelligenceLightSource(prefersAudioReactivity: Swift.Bool = false) -> SwiftUICore.Material
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(_) @available(*, deprecated, renamed: "background(_:)")
  @_disfavoredOverload nonisolated public func backgroundMaterial(_ material: SwiftUICore.Material) -> some SwiftUICore.View
  
  @_spi(_) @available(*, deprecated, renamed: "background(_:in:)")
  @_disfavoredOverload nonisolated public func backgroundMaterial<S>(_ material: SwiftUICore.Material, in shape: S) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
  @_spi(_) @available(*, deprecated, renamed: "background(_:)")
  @_alwaysEmitIntoClient nonisolated public func backgroundMaterial(_v2: Swift.Void = (), _ material: SwiftUICore.Material) -> some SwiftUICore.View {
        background(material)
    }
  
  @_spi(_) @available(*, deprecated, renamed: "background(_:in:)")
  @_alwaysEmitIntoClient nonisolated public func backgroundMaterial<S>(_v2: Swift.Void = (), _ material: SwiftUICore.Material, in shape: S) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        background(material, in: shape)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var backgroundMaterial: SwiftUICore.Material? {
    get
    set
  }
  #else
  public var backgroundMaterial: SwiftUICore.Material? {
    get
    set
  }
  #endif
}
package struct MaterialView<S> where S : SwiftUICore.Shape {
  package var material: SwiftUICore.Material
  package var shape: S
  package var ignoredSafeAreaEdges: SwiftUICore.Edge.Set
  package init(material: SwiftUICore.Material, shape: S, ignoredSafeAreaEdges: SwiftUICore.Edge.Set = .init())
}
extension SwiftUICore.MaterialView : SwiftUICore.PrimitiveView, SwiftUICore.MultiView {
  nonisolated package static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.MaterialView<S>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
extension SwiftUICore.MaterialView : SwiftUICore.PrimitiveViewModifier, SwiftUICore.MultiViewModifier {
  nonisolated package static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.MaterialView<S>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
package protocol MaterialLayer {
  var content: SwiftUICore.DisplayList.Content.Value { get }
  var opacity: Swift.Float { get }
  var blendMode: SwiftUICore.GraphicsBlendMode { get }
}
extension SwiftUICore.MaterialLayer {
  package var opacity: Swift.Float {
    get
  }
  package var blendMode: SwiftUICore.GraphicsBlendMode {
    get
  }
}
package struct AnyMaterialLayer : SwiftUICore.MaterialLayer {
  package var content: SwiftUICore.DisplayList.Content.Value
  package var opacity: Swift.Float
  package var blendMode: SwiftUICore.GraphicsBlendMode
  package init(content: SwiftUICore.DisplayList.Content.Value, opacity: Swift.Float = 1, blendMode: SwiftUICore.GraphicsBlendMode = .normal)
}
package protocol MaterialLayerVisitor {
  mutating func visit<L>(layer: L) where L : SwiftUICore.MaterialLayer
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Material : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.Material>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
package struct ForegroundMaterialStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  package var material: SwiftUICore.Material
  package init(material: SwiftUICore.Material)
  package func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  package typealias Resolved = Swift.Never
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct MaterialActiveAppearance : Swift.Sendable, Swift.Equatable {
  public static let automatic: SwiftUICore.MaterialActiveAppearance
  public static let active: SwiftUICore.MaterialActiveAppearance
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let inactive: SwiftUICore.MaterialActiveAppearance
  public static let matchWindow: SwiftUICore.MaterialActiveAppearance
  public static func == (a: SwiftUICore.MaterialActiveAppearance, b: SwiftUICore.MaterialActiveAppearance) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EnvironmentValues {
  public var materialActiveAppearance: SwiftUICore.MaterialActiveAppearance {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.Material {
  public func materialActiveAppearance(_ appearance: SwiftUICore.MaterialActiveAppearance) -> SwiftUICore.Material
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ShapeStyle {
  public func materialActiveAppearance(_ appearance: SwiftUICore.MaterialActiveAppearance) -> some SwiftUICore.ShapeStyle
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.View {
  nonisolated public func materialActiveAppearance(_ appearance: SwiftUICore.MaterialActiveAppearance) -> some SwiftUICore.View
  
}
package struct _ShapeStyle_Pack : Swift.Equatable {
  package struct Style : Swift.Equatable, Swift.Sendable {
    package var fill: SwiftUICore._ShapeStyle_Pack.Fill
    package var opacity: Swift.Float
    package var _blend: SwiftUICore.GraphicsBlendMode?
    package var blend: SwiftUICore.GraphicsBlendMode {
      get
    }
    package var effects: [SwiftUICore._ShapeStyle_Pack.Effect]
    package init(_ fill: SwiftUICore._ShapeStyle_Pack.Fill)
    package static let clear: SwiftUICore._ShapeStyle_Pack.Style
    package static func == (a: SwiftUICore._ShapeStyle_Pack.Style, b: SwiftUICore._ShapeStyle_Pack.Style) -> Swift.Bool
  }
  package enum Fill : Swift.Equatable, Swift.Sendable {
    case color(SwiftUICore.Color.Resolved)
    case paint(SwiftUICore.AnyResolvedPaint)
    case foregroundMaterial(SwiftUICore.Color.Resolved, SwiftUICore.ContentStyle.MaterialStyle)
    case backgroundMaterial(SwiftUICore.Material.ResolvedMaterial)
    case vibrantColor(SwiftUICore.Color.ResolvedVibrant)
    case vibrantMatrix(SwiftUICore._ColorMatrix)
    case multicolor(SwiftUICore.ResolvedMulticolorStyle)
    package static func == (a: SwiftUICore._ShapeStyle_Pack.Fill, b: SwiftUICore._ShapeStyle_Pack.Fill) -> Swift.Bool
  }
  package struct Effect : Swift.Equatable, Swift.Sendable {
    package enum Kind : Swift.Equatable, Swift.Sendable {
      case none
      case shadow(SwiftUICore.ResolvedShadowStyle)
      package static func == (a: SwiftUICore._ShapeStyle_Pack.Effect.Kind, b: SwiftUICore._ShapeStyle_Pack.Effect.Kind) -> Swift.Bool
    }
    package var kind: SwiftUICore._ShapeStyle_Pack.Effect.Kind
    package var opacity: Swift.Float
    package var _blend: SwiftUICore.GraphicsBlendMode?
    package var blend: SwiftUICore.GraphicsBlendMode {
      get
    }
    package static func == (a: SwiftUICore._ShapeStyle_Pack.Effect, b: SwiftUICore._ShapeStyle_Pack.Effect) -> Swift.Bool
  }
  package struct Key : Swift.Comparable {
    package var name: SwiftUICore._ShapeStyle_Name
    package init(_ name: SwiftUICore._ShapeStyle_Name, _ level: Swift.Int)
    package var level: Swift.Int {
      get
      set
    }
    package static func < (lhs: SwiftUICore._ShapeStyle_Pack.Key, rhs: SwiftUICore._ShapeStyle_Pack.Key) -> Swift.Bool
    package static func == (a: SwiftUICore._ShapeStyle_Pack.Key, b: SwiftUICore._ShapeStyle_Pack.Key) -> Swift.Bool
  }
  package init()
  package static func style(_ style: SwiftUICore._ShapeStyle_Pack.Style, name: SwiftUICore._ShapeStyle_Name, level: Swift.Int = 0) -> SwiftUICore._ShapeStyle_Pack
  package static func fill(_ fill: SwiftUICore._ShapeStyle_Pack.Fill, name: SwiftUICore._ShapeStyle_Name, level: Swift.Int = 0) -> SwiftUICore._ShapeStyle_Pack
  package static func == (lhs: SwiftUICore._ShapeStyle_Pack, rhs: SwiftUICore._ShapeStyle_Pack) -> Swift.Bool
  package static let defaultValue: SwiftUICore._ShapeStyle_Pack
  package subscript(name: SwiftUICore._ShapeStyle_Name, level: Swift.Int) -> SwiftUICore._ShapeStyle_Pack.Style {
    get
    set
  }
  package subscript(name: SwiftUICore._ShapeStyle_Name) -> SwiftUICore._ShapeStyle_Pack.Slice {
    get
  }
  package struct Slice : Swift.RandomAccessCollection {
    package var startIndex: Swift.Int {
      get
    }
    package var endIndex: Swift.Int {
      get
    }
    package subscript(level: Swift.Int) -> SwiftUICore._ShapeStyle_Pack.Style {
      get
    }
    package typealias Element = SwiftUICore._ShapeStyle_Pack.Style
    package typealias Index = Swift.Int
    package typealias Indices = Swift.Range<Swift.Int>
    package typealias Iterator = Swift.IndexingIterator<SwiftUICore._ShapeStyle_Pack.Slice>
    package typealias SubSequence = Swift.Slice<SwiftUICore._ShapeStyle_Pack.Slice>
  }
  package mutating func modify(name: SwiftUICore._ShapeStyle_Name, levels: Swift.Range<Swift.Int>, _ modifier: (inout SwiftUICore._ShapeStyle_Pack.Style) -> Swift.Void)
  package mutating func adjustLevelIndices(of name: SwiftUICore._ShapeStyle_Name, by offset: Swift.Int)
  package mutating func createOpacities(count: Swift.Int, name: SwiftUICore._ShapeStyle_Name, environment: SwiftUICore.EnvironmentValues)
  package func isClear(name: SwiftUICore._ShapeStyle_Name) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(colorName: Swift.String) -> SwiftUICore.Color.Resolved? {
    get
  }
  #else
  package subscript(colorName: Swift.String) -> SwiftUICore.Color.Resolved? {
    get
  }
  #endif
}
extension SwiftUICore._ShapeStyle_Pack.Slice {
  package var allColors: Swift.Bool {
    get
  }
}
extension SwiftUICore._ShapeStyle_Pack.Style {
  package var isClear: Swift.Bool {
    get
  }
  package var ignoresBackdrop: Swift.Bool {
    get
  }
  package mutating func applyOpacity(_ opacity: Swift.Float)
  package func applyingOpacity(_ opacity: Swift.Float) -> SwiftUICore._ShapeStyle_Pack.Style
  package mutating func applyBlend(_ blend: SwiftUICore.GraphicsBlendMode)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var color: SwiftUICore.Color.Resolved? {
    get
  }
  #else
  package var color: SwiftUICore.Color.Resolved? {
    get
  }
  #endif
}
extension SwiftUICore._ShapeStyle_Pack : SwiftUICore.Animatable {
  package struct AnimatableData : SwiftUICore.VectorArithmetic {
    package typealias StyleData = SwiftUICore._ShapeStyle_Pack.Style.AnimatableData
    package typealias Element = (key: SwiftUICore._ShapeStyle_Pack.Key, data: SwiftUICore._ShapeStyle_Pack.AnimatableData.StyleData)
    package var elements: [SwiftUICore._ShapeStyle_Pack.AnimatableData.Element]
    package static func == (lhs: SwiftUICore._ShapeStyle_Pack.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.AnimatableData) -> Swift.Bool
    package static var zero: SwiftUICore._ShapeStyle_Pack.AnimatableData {
      get
    }
    package static func += (lhs: inout SwiftUICore._ShapeStyle_Pack.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.AnimatableData)
    package static func -= (lhs: inout SwiftUICore._ShapeStyle_Pack.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.AnimatableData)
    @_transparent package static func + (lhs: SwiftUICore._ShapeStyle_Pack.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.AnimatableData) -> SwiftUICore._ShapeStyle_Pack.AnimatableData
    @_transparent package static func - (lhs: SwiftUICore._ShapeStyle_Pack.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.AnimatableData) -> SwiftUICore._ShapeStyle_Pack.AnimatableData
    package mutating func scale(by rhs: Swift.Double)
    package var magnitudeSquared: Swift.Double {
      get
    }
  }
  package var animatableData: SwiftUICore._ShapeStyle_Pack.AnimatableData {
    get
    set
  }
}
extension SwiftUICore._ShapeStyle_Pack.Style : SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatableArray<SwiftUICore._ShapeStyle_Pack.Effect.AnimatableData>>>
  package var animatableData: SwiftUICore._ShapeStyle_Pack.Style.AnimatableData {
    get
    set
  }
}
extension SwiftUICore._ShapeStyle_Pack.Fill : SwiftUICore.Animatable {
  package enum AnimatableData : SwiftUICore.VectorArithmetic {
    case zero
    case color(SwiftUICore.Color.Resolved.AnimatableData)
    case vibrantColor(SwiftUICore.Color.ResolvedVibrant.AnimatableData)
    case linearGradient(SwiftUICore.LinearGradient._Paint.AnimatableData)
    case radialGradient(SwiftUICore.RadialGradient._Paint.AnimatableData)
    case ellipticalGradient(SwiftUICore.EllipticalGradient._Paint.AnimatableData)
    case angularGradient(SwiftUICore.AngularGradient._Paint.AnimatableData)
    case meshGradient(SwiftUICore.MeshGradient._Paint.AnimatableData)
    case shader(SwiftUICore.Shader.ResolvedShader.AnimatableData)
    case colorMatrix(SwiftUICore._ColorMatrix)
    package init(_ fill: SwiftUICore._ShapeStyle_Pack.Fill)
    package func set(fill: inout SwiftUICore._ShapeStyle_Pack.Fill)
    package static func += (lhs: inout SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData)
    package static func -= (lhs: inout SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData)
    @_transparent package static func + (lhs: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData) -> SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData
    @_transparent public static func - (lhs: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData) -> SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData
    package mutating func scale(by rhs: Swift.Double)
    package var magnitudeSquared: Swift.Double {
      get
    }
    package static func == (a: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData, b: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData) -> Swift.Bool
  }
  package var animatableData: SwiftUICore._ShapeStyle_Pack.Fill.AnimatableData {
    get
    set
  }
}
extension SwiftUICore._ShapeStyle_Pack.Effect : SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData>
  package var animatableData: SwiftUICore._ShapeStyle_Pack.Effect.AnimatableData {
    get
    set
  }
}
extension SwiftUICore._ShapeStyle_Pack.Effect.Kind : SwiftUICore.Animatable {
  package enum AnimatableData : SwiftUICore.VectorArithmetic {
    case zero
    case shadow(SwiftUICore.ResolvedShadowStyle.AnimatableData)
    package init(_ fill: SwiftUICore._ShapeStyle_Pack.Effect.Kind)
    package func set(effect: inout SwiftUICore._ShapeStyle_Pack.Effect.Kind)
    package static func += (lhs: inout SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData)
    package static func -= (lhs: inout SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData)
    @_transparent package static func + (lhs: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData) -> SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData
    @_transparent public static func - (lhs: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData, rhs: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData) -> SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData
    package mutating func scale(by rhs: Swift.Double)
    package var magnitudeSquared: Swift.Double {
      get
    }
    package static func == (a: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData, b: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData) -> Swift.Bool
  }
  package var animatableData: SwiftUICore._ShapeStyle_Pack.Effect.Kind.AnimatableData {
    get
    set
  }
}
extension SwiftUICore._ShapeStyle_Shape {
  package var stylePack: SwiftUICore._ShapeStyle_Pack {
    get
    _modify
  }
}
package struct ResolvedMulticolorStyle : Swift.Equatable, @unchecked Swift.Sendable {
  package var accentColor: SwiftUICore.Color.Resolved
  package var colorScheme: SwiftUICore.ColorScheme
  package var colorSchemeContrast: SwiftUICore.ColorSchemeContrast
  package var displayGamut: SwiftUICore.DisplayGamut
  package var bundle: Foundation.Bundle?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(in environment: SwiftUICore.EnvironmentValues, bundle: Foundation.Bundle?)
  #else
  package init(in environment: SwiftUICore.EnvironmentValues, bundle: Foundation.Bundle?)
  #endif
  package var environment: SwiftUICore.EnvironmentValues {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolve(name: Swift.String?, proposed: SwiftUICore.Color.Resolved) -> SwiftUICore.Color.Resolved?
  #else
  package func resolve(name: Swift.String?, proposed: SwiftUICore.Color.Resolved) -> SwiftUICore.Color.Resolved?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolve(name: Swift.String) -> SwiftUICore.Color.Resolved?
  #else
  package func resolve(name: Swift.String) -> SwiftUICore.Color.Resolved?
  #endif
  package static func == (a: SwiftUICore.ResolvedMulticolorStyle, b: SwiftUICore.ResolvedMulticolorStyle) -> Swift.Bool
}
extension SwiftUICore.ShapeStyle {
  package typealias RenderedShape = SwiftUICore._ShapeStyle_RenderedShape
  package typealias RenderedLayers = SwiftUICore._ShapeStyle_RenderedLayers
  package typealias LayerID = SwiftUICore._ShapeStyle_LayerID
  package typealias InterpolatorGroup = SwiftUICore._ShapeStyle_InterpolatorGroup
}
package struct _ShapeStyle_RenderedShape {
  package enum Shape {
    case empty
    case path(SwiftUICore.Path, SwiftUICore.FillStyle)
    case text(SwiftUICore.StyledTextContentView)
    case image(SwiftUICore.GraphicsImage)
    case alphaMask(SwiftUICore.DisplayList.Item)
  }
  package init(_ shape: SwiftUICore._ShapeStyle_RenderedShape.Shape, frame: CoreFoundation.CGRect, identity: SwiftUICore.DisplayList.Identity, version: SwiftUICore.DisplayList.Version, contentSeed: SwiftUICore.DisplayList.Seed, options: SwiftUICore.DisplayList.Options, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
  package mutating func renderItem(name: SwiftUICore._ShapeStyle_Name, styles: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>, layers: inout SwiftUICore._ShapeStyle_RenderedLayers)
  package mutating func commitItem() -> SwiftUICore.DisplayList.Item
  package mutating func background(_ other: inout SwiftUICore._ShapeStyle_RenderedShape)
}
package struct _ShapeStyle_RenderedLayers {
}
package enum _ShapeStyle_LayerID : Swift.Equatable {
  case unstyled
  case styled(SwiftUICore._ShapeStyle_Name, Swift.UInt16)
  case customStyle(Swift.UInt32)
  case named(Swift.String?)
  package static func == (a: SwiftUICore._ShapeStyle_LayerID, b: SwiftUICore._ShapeStyle_LayerID) -> Swift.Bool
}
@_inheritsConvenienceInitializers final package class _ShapeStyle_InterpolatorGroup : SwiftUICore.DisplayList.InterpolatorGroup {
  @objc deinit
}
extension SwiftUICore._ShapeStyle_Pack.Style {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(_ path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(_ path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
}
final package class StyledTextResponder : SwiftUICore.ViewResponder, SwiftUICore.AnyGestureResponder {
  package typealias Data = SwiftUICore.ShapeStyledResponderData<SwiftUICore.StyledTextContentView>
  @AttributeGraph.Attribute @_projectedValueProperty($view) final package var view: SwiftUICore.StyledTextContentView {
    get
    set
    _modify
  }
  final package var $view: AttributeGraph.Attribute<SwiftUICore.StyledTextContentView> {
    get
    set
  }
  @AttributeGraph.Attribute @_projectedValueProperty($styles) final package var styles: SwiftUICore._ShapeStyle_Pack {
    get
    set
    _modify
  }
  final package var $styles: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack> {
    get
    set
  }
  final package let inputs: SwiftUICore._ViewInputs
  final package let viewSubgraph: AttributeGraph.Subgraph
  final package var helper: SwiftUICore.ContentResponderHelper<SwiftUICore.StyledTextResponder.Data>
  final package var childSubgraph: AttributeGraph.Subgraph?
  final package var childViewSubgraph: AttributeGraph.Subgraph?
  final package var gestureGraph: SwiftUICore.GestureGraph {
    get
    set
  }
  final package var bindingBridge: any SwiftUICore.EventBindingBridge & SwiftUICore.GestureGraphDelegate {
    get
    set
  }
  final package var _gestureContainer: Swift.AnyObject?
  package init(view: AttributeGraph.Attribute<SwiftUICore.StyledTextContentView>, styles: AttributeGraph.Attribute<SwiftUICore._ShapeStyle_Pack>, inputs: SwiftUICore._ViewInputs)
  #if compiler(>=5.3) && $NoncopyableGenerics
  override final package var gestureContainer: Swift.AnyObject? {
    get
  }
  #else
  override final package var gestureContainer: Swift.AnyObject? {
    get
  }
  #endif
  final package var eventSources: [any SwiftUICore.EventBindingSource] {
    get
  }
  final package var gestureType: any Any.Type {
    get
  }
  final package var isValid: Swift.Bool {
    get
  }
  final package func detachContainer()
  final package func update()
  #if compiler(>=5.3) && $NoncopyableGenerics
  override final package func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #else
  override final package func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  override final package func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #else
  override final package func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #endif
  override final package func extendPrintTree(string: inout Swift.String)
  #if compiler(>=5.3) && $NoncopyableGenerics
  override final package func bindEvent(_ event: any SwiftUICore.EventType) -> SwiftUICore.ResponderNode?
  #else
  override final package func bindEvent(_ event: any SwiftUICore.EventType) -> SwiftUICore.ResponderNode?
  #endif
  override final package func makeGesture(inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  override final package func resetGesture()
  @objc deinit
}
extension Foundation.URL {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(urlValue: Any?)
  #else
  package init?(urlValue: Any?)
  #endif
}
@_spi(ForSwiftUIOnly) @_inheritsConvenienceInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class MultiViewResponder : SwiftUICore.ViewResponder {
  @_spi(ForSwiftUIOnly) override public init()
  @_spi(ForSwiftUIOnly) final package var children: [SwiftUICore.ViewResponder] {
    @_spi(ForSwiftUIOnly) get
    @_spi(ForSwiftUIOnly) set
  }
  @_spi(ForSwiftUIOnly) final package func updateChildren(_ data: (value: [SwiftUICore.ViewResponder], changed: Swift.Bool))
  @_spi(ForSwiftUIOnly) open func childrenDidChange()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override open func bindEvent(_ event: any SwiftUICore.EventType) -> SwiftUICore.ResponderNode?
  #else
  @_spi(ForSwiftUIOnly) override open func bindEvent(_ event: any SwiftUICore.EventType) -> SwiftUICore.ResponderNode?
  #endif
  @_spi(ForSwiftUIOnly) override open func resetGesture()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override open func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #else
  @_spi(ForSwiftUIOnly) override open func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override open func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #else
  @_spi(ForSwiftUIOnly) override open func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #endif
  @_spi(ForSwiftUIOnly) override open func addObserver(_ observer: any SwiftUICore.ContentPathObserver)
  @_spi(ForSwiftUIOnly) @discardableResult
  final override public func visit(applying visitor: (SwiftUICore.ResponderNode) -> SwiftUICore.ResponderVisitorResult) -> SwiftUICore.ResponderVisitorResult
  @_spi(ForSwiftUIOnly) final override public var childCount: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final override public func child(at index: Swift.Int) -> SwiftUICore.ViewResponder
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.MultiViewResponder : Swift.Sendable {
}
package typealias PlatformHitTestableEvent = SwiftUICore.HitTestableEvent
@_Concurrency.MainActor @preconcurrency package struct HitTestBindingModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  nonisolated package static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.HitTestBindingModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.ViewResponder {
  @_spi(ForSwiftUIOnly) package static var hitTestKey: Swift.UInt32 {
    get
  }
  @_spi(ForSwiftUIOnly) package static let minOpacityForHitTest: Swift.Double
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func hitTest(globalPoint: SwiftUICore.PlatformPoint, radius: CoreFoundation.CGFloat, options: SwiftUICore.ViewResponder.ContainsPointsOptions = .platformDefault) -> SwiftUICore.ViewResponder?
  #else
  @_spi(ForSwiftUIOnly) package func hitTest(globalPoint: SwiftUICore.PlatformPoint, radius: CoreFoundation.CGFloat, options: SwiftUICore.ViewResponder.ContainsPointsOptions = .platformDefault) -> SwiftUICore.ViewResponder?
  #endif
}
package struct DefaultLayoutResponderFilter : AttributeGraph.StatefulRule {
  @AttributeGraph.Attribute @_projectedValueProperty($children) package var children: [SwiftUICore.ViewResponder] {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $children: AttributeGraph.Attribute<[SwiftUICore.ViewResponder]> {
    get
    set
  }
  package let responder: SwiftUICore.MultiViewResponder
  package init(children: AttributeGraph.Attribute<[SwiftUICore.ViewResponder]>, responder: SwiftUICore.MultiViewResponder)
  package typealias Value = [SwiftUICore.ViewResponder]
  package mutating func updateValue()
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class DefaultLayoutViewResponder : SwiftUICore.MultiViewResponder {
  @_spi(ForSwiftUIOnly) final package let inputs: SwiftUICore._ViewInputs
  @_spi(ForSwiftUIOnly) final package let viewSubgraph: AttributeGraph.Subgraph
  @_spi(ForSwiftUIOnly) package init(inputs: SwiftUICore._ViewInputs)
  @_spi(ForSwiftUIOnly) package init(inputs: SwiftUICore._ViewInputs, viewSubgraph: AttributeGraph.Subgraph)
  @_spi(ForSwiftUIOnly) override open func makeGesture(inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  @_spi(ForSwiftUIOnly) override open func childrenDidChange()
  @_spi(ForSwiftUIOnly) override open func resetGesture()
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.DefaultLayoutViewResponder : Swift.Sendable {
}
package struct ViewRespondersKey : SwiftUICore.PreferenceKey {
  package typealias Value = [SwiftUICore.ViewResponder]
  package static var defaultValue: SwiftUICore.ViewRespondersKey.Value {
    get
  }
  package static var _includesRemovedValues: Swift.Bool {
    get
  }
  package static func reduce(value: inout SwiftUICore.ViewRespondersKey.Value, nextValue: () -> SwiftUICore.ViewRespondersKey.Value)
}
@_spi(ForSwiftUIOnly) @_inheritsConvenienceInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class ViewResponder : SwiftUICore.ResponderNode, Swift.CustomStringConvertible, SwiftUICore.CustomRecursiveStringConvertible {
  @_spi(ForSwiftUIOnly) final weak package var host: (any SwiftUICore.ViewGraphDelegate)? {
    get
  }
  @_spi(ForSwiftUIOnly) override public init()
  @_spi(ForSwiftUIOnly) final weak package var parent: SwiftUICore.ViewResponder? {
    @_spi(ForSwiftUIOnly) get
    @_spi(ForSwiftUIOnly) set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) final override public var nextResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) final override public var nextResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open var gestureContainer: Swift.AnyObject? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) open var gestureContainer: Swift.AnyObject? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  @_spi(ForSwiftUIOnly) open var opacity: Swift.Double {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open var allowsHitTesting: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) package struct ContainsPointsCache {
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) package init(key: Swift.UInt32? = nil, mask: SwiftUICore.BitVector64 = BitVector64(), priority: Swift.Double = 0.0)
    #else
    @_spi(ForSwiftUIOnly) package init(key: Swift.UInt32? = nil, mask: SwiftUICore.BitVector64 = BitVector64(), priority: Swift.Double = 0.0)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) package mutating func fetch(key: Swift.UInt32?, _ body: () -> (SwiftUICore.BitVector64, Swift.Double)) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
    #else
    @_spi(ForSwiftUIOnly) package mutating func fetch(key: Swift.UInt32?, _ body: () -> (SwiftUICore.BitVector64, Swift.Double)) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
    #endif
  }
  @_spi(ForSwiftUIOnly) package static let gestureContainmentPriority: Swift.Double
  @_spi(ForSwiftUIOnly) public struct ContainsPointsOptions : Swift.OptionSet {
    @_spi(ForSwiftUIOnly) public let rawValue: Swift.Int
    @_spi(ForSwiftUIOnly) public init(rawValue: Swift.Int)
    @_spi(ForSwiftUIOnly) package static let allowDisabledViews: SwiftUICore.ViewResponder.ContainsPointsOptions
    @_spi(ForSwiftUIOnly) package static let useZDistanceAsPriority: SwiftUICore.ViewResponder.ContainsPointsOptions
    @_spi(ForSwiftUIOnly) package static let disablePointCloudHitTesting: SwiftUICore.ViewResponder.ContainsPointsOptions
    @_spi(ForSwiftUIOnly) package static let allow3DResponders: SwiftUICore.ViewResponder.ContainsPointsOptions
    @_spi(ForSwiftUIOnly) package static let crossingServerIDBoundary: SwiftUICore.ViewResponder.ContainsPointsOptions
    @_spi(ForSwiftUIOnly) public static var platformDefault: SwiftUICore.ViewResponder.ContainsPointsOptions {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.ViewResponder.ContainsPointsOptions
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias Element = SwiftUICore.ViewResponder.ContainsPointsOptions
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias RawValue = Swift.Int
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #else
  @_spi(ForSwiftUIOnly) open func containsGlobalPoints(_ points: [SwiftUICore.PlatformPoint], cacheKey: Swift.UInt32?, options: SwiftUICore.ViewResponder.ContainsPointsOptions) -> (mask: SwiftUICore.BitVector64, priority: Swift.Double)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #else
  @_spi(ForSwiftUIOnly) open func addContentPath(to path: inout SwiftUICore.Path, kind: SwiftUICore.ContentShapeKinds, in space: SwiftUICore.CoordinateSpace, observer: (any SwiftUICore.ContentPathObserver)?)
  #endif
  @_spi(ForSwiftUIOnly) open func addObserver(_ observer: any SwiftUICore.ContentPathObserver)
  @_spi(ForSwiftUIOnly) open var childCount: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open func child(at index: Swift.Int) -> SwiftUICore.ViewResponder
  @_spi(ForSwiftUIOnly) open var descriptionName: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) public var description: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package var descriptionChildren: [any SwiftUICore.CustomRecursiveStringConvertible] {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) @inline(never) final package func printTree(depth: Swift.Int = 0)
  @_spi(ForSwiftUIOnly) open func extendPrintTree(string: inout Swift.String)
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.ViewResponder : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.ViewResponder.ContainsPointsOptions : Swift.Sendable {
}
extension SwiftUICore.ViewGraph {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var eventGraphHost: (any SwiftUICore.EventGraphHost)? {
    get
  }
  #else
  package static var eventGraphHost: (any SwiftUICore.EventGraphHost)? {
    get
  }
  #endif
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct ContentPathChanges : Swift.OptionSet {
  @_spi(ForSwiftUIOnly) public var rawValue: Swift.UInt8
  @_spi(ForSwiftUIOnly) public init(rawValue: Swift.UInt8)
  @_spi(ForSwiftUIOnly) package static let data: SwiftUICore.ContentPathChanges
  @_spi(ForSwiftUIOnly) package static let size: SwiftUICore.ContentPathChanges
  @_spi(ForSwiftUIOnly) package static let transform: SwiftUICore.ContentPathChanges
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.ContentPathChanges
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUICore.ContentPathChanges
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias RawValue = Swift.UInt8
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.ContentPathChanges : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public protocol ContentPathObserver : AnyObject {
  @_spi(ForSwiftUIOnly) func respondersDidChange(for parent: SwiftUICore.ViewResponder)
  @_spi(ForSwiftUIOnly) func contentPathDidChange(for parent: SwiftUICore.ViewResponder, changes: SwiftUICore.ContentPathChanges, transform: (old: SwiftUICore.ViewTransform, new: SwiftUICore.ViewTransform), finished: inout Swift.Bool)
}
package protocol TrivialContentPathObserver : SwiftUICore.ContentPathObserver {
  func contentPathDidChange(for parent: SwiftUICore.ViewResponder)
}
extension SwiftUICore.TrivialContentPathObserver {
  package func contentPathDidChange(for parent: SwiftUICore.ViewResponder, changes: SwiftUICore.ContentPathChanges, transform: (old: SwiftUICore.ViewTransform, new: SwiftUICore.ViewTransform), finished: inout Swift.Bool)
  package func respondersDidChange(for parent: SwiftUICore.ViewResponder)
}
package struct BlurStyle : Swift.Equatable {
  package var radius: CoreFoundation.CGFloat
  package var isOpaque: Swift.Bool
  package var dither: Swift.Bool
  package init(radius: CoreFoundation.CGFloat = 0, isOpaque: Swift.Bool = false, dither: Swift.Bool = false, hardEdges: Swift.Bool = false)
  package var isIdentity: Swift.Bool {
    get
  }
  package static func == (a: SwiftUICore.BlurStyle, b: SwiftUICore.BlurStyle) -> Swift.Bool
}
extension SwiftUICore.BlurStyle : SwiftUICore.Animatable {
  package var animatableData: CoreFoundation.CGFloat {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnimatableData = CoreFoundation.CGFloat
}
extension SwiftUICore.BlurStyle : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public enum Interpolation : Swift.Sendable {
    case none
    case low
    case medium
    case high
    public static func == (a: SwiftUICore.Image.Interpolation, b: SwiftUICore.Image.Interpolation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public func interpolation(_ interpolation: SwiftUICore.Image.Interpolation) -> SwiftUICore.Image
  public func antialiased(_ isAntialiased: Swift.Bool) -> SwiftUICore.Image
}
extension SwiftUICore.Image.Interpolation : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
package struct _ShapeStyle_ResolverMode : Swift.Equatable {
  package var bundle: Foundation.Bundle?
  package var foregroundLevels: Swift.UInt16
  package struct Options : Swift.OptionSet {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let foregroundPalette: SwiftUICore._ShapeStyle_ResolverMode.Options
    package static let background: SwiftUICore._ShapeStyle_ResolverMode.Options
    package static let multicolor: SwiftUICore._ShapeStyle_ResolverMode.Options
    package typealias ArrayLiteralElement = SwiftUICore._ShapeStyle_ResolverMode.Options
    package typealias Element = SwiftUICore._ShapeStyle_ResolverMode.Options
    package typealias RawValue = Swift.UInt8
  }
  package var options: SwiftUICore._ShapeStyle_ResolverMode.Options
  package init(foregroundLevels: Swift.UInt16 = 0, options: SwiftUICore._ShapeStyle_ResolverMode.Options = .init())
  package init(rbSymbolStyleMask mask: Swift.UInt32, location: SwiftUICore.Image.Location)
  package mutating func formUnion(_ rhs: SwiftUICore._ShapeStyle_ResolverMode)
  package static func == (a: SwiftUICore._ShapeStyle_ResolverMode, b: SwiftUICore._ShapeStyle_ResolverMode) -> Swift.Bool
}
package struct ShapeStyleResolver<Style> : AttributeGraph.StatefulRule, SwiftUICore.AsyncAttribute, AttributeGraph.ObservedAttribute where Style : SwiftUICore.ShapeStyle {
  package typealias Value = SwiftUICore._ShapeStyle_Pack
  package init(style: AttributeGraph.OptionalAttribute<Style> = .init(), mode: AttributeGraph.OptionalAttribute<SwiftUICore._ShapeStyle_ResolverMode> = .init(), environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, role: SwiftUICore.ShapeRole, animationsDisabled: Swift.Bool, helper: SwiftUICore.AnimatableAttributeHelper<SwiftUICore._ShapeStyle_Pack>)
  package mutating func updateValue()
  package mutating func destroy()
}
package struct AnyEquatable : Swift.Equatable {
  package init<T>(_ value: T) where T : Swift.Equatable
  package init(hash: SwiftUICore.StrongHash)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var hash: SwiftUICore.StrongHash? {
    get
  }
  #else
  package var hash: SwiftUICore.StrongHash? {
    get
  }
  #endif
  package static func == (lhs: SwiftUICore.AnyEquatable, rhs: SwiftUICore.AnyEquatable) -> Swift.Bool
}
package struct ProtobufEncoder {
  package enum EncodingError : Swift.Error {
    case failed
    package static func == (a: SwiftUICore.ProtobufEncoder.EncodingError, b: SwiftUICore.ProtobufEncoder.EncodingError) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package typealias Field = SwiftUICore.ProtobufFormat.Field
  package typealias WireType = SwiftUICore.ProtobufFormat.WireType
  package var userInfo: [Swift.CodingUserInfoKey : Any]
  package static func encoding(_ body: (inout SwiftUICore.ProtobufEncoder) throws -> Swift.Void) rethrows -> Foundation.Data
  package static func encoding<T>(_ value: T) throws -> Foundation.Data where T : SwiftUICore.ProtobufEncodableMessage
}
extension SwiftUICore.ProtobufEncoder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func boolField(_ tag: Swift.UInt, _ value: Swift.Bool, defaultValue: Swift.Bool? = false)
  #else
  @inline(__always) package mutating func boolField(_ tag: Swift.UInt, _ value: Swift.Bool, defaultValue: Swift.Bool? = false)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func uintField(_ tag: Swift.UInt, _ value: Swift.UInt, defaultValue: Swift.UInt? = 0)
  #else
  @inline(__always) package mutating func uintField(_ tag: Swift.UInt, _ value: Swift.UInt, defaultValue: Swift.UInt? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func enumField<T>(_ tag: Swift.UInt, _ value: T, defaultValue: T?) where T : Swift.Equatable, T : SwiftUICore.ProtobufEnum
  #else
  @inline(__always) package mutating func enumField<T>(_ tag: Swift.UInt, _ value: T, defaultValue: T?) where T : Swift.Equatable, T : SwiftUICore.ProtobufEnum
  #endif
  @inline(__always) package mutating func enumField<T>(_ tag: Swift.UInt, _ value: T) where T : SwiftUICore.ProtobufEnum
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func uint64Field(_ tag: Swift.UInt, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0)
  #else
  @inline(__always) package mutating func uint64Field(_ tag: Swift.UInt, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func intField(_ tag: Swift.UInt, _ value: Swift.Int, defaultValue: Swift.Int? = 0)
  #else
  @inline(__always) package mutating func intField(_ tag: Swift.UInt, _ value: Swift.Int, defaultValue: Swift.Int? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func int64Field(_ tag: Swift.UInt, _ value: Swift.Int64, defaultValue: Swift.Int64? = 0)
  #else
  @inline(__always) package mutating func int64Field(_ tag: Swift.UInt, _ value: Swift.Int64, defaultValue: Swift.Int64? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func fixed32Field(_ tag: Swift.UInt, _ value: Swift.UInt32, defaultValue: Swift.UInt32? = 0)
  #else
  @inline(__always) package mutating func fixed32Field(_ tag: Swift.UInt, _ value: Swift.UInt32, defaultValue: Swift.UInt32? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func fixed64Field(_ tag: Swift.UInt, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0)
  #else
  @inline(__always) package mutating func fixed64Field(_ tag: Swift.UInt, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func floatField(_ tag: Swift.UInt, _ value: Swift.Float, defaultValue: Swift.Float? = 0)
  #else
  @inline(__always) package mutating func floatField(_ tag: Swift.UInt, _ value: Swift.Float, defaultValue: Swift.Float? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func doubleField(_ tag: Swift.UInt, _ value: Swift.Double, defaultValue: Swift.Double? = 0)
  #else
  @inline(__always) package mutating func doubleField(_ tag: Swift.UInt, _ value: Swift.Double, defaultValue: Swift.Double? = 0)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func cgFloatField(_ tag: Swift.UInt, _ value: CoreFoundation.CGFloat, defaultValue: CoreFoundation.CGFloat? = 0)
  #else
  @inline(__always) package mutating func cgFloatField(_ tag: Swift.UInt, _ value: CoreFoundation.CGFloat, defaultValue: CoreFoundation.CGFloat? = 0)
  #endif
  package mutating func dataField(_ tag: Swift.UInt, _ data: Foundation.Data)
  package mutating func dataField(_ tag: Swift.UInt, _ buffer: Swift.UnsafeRawBufferPointer)
  @inline(__always) package mutating func packedField(_ tag: Swift.UInt, _ body: (inout SwiftUICore.ProtobufEncoder) -> Swift.Void)
  @inline(__always) package mutating func messageField(_ tag: Swift.UInt, _ body: (inout SwiftUICore.ProtobufEncoder) throws -> Swift.Void) rethrows
  @inline(__always) package mutating func messageField<T>(_ tag: Swift.UInt, _ value: T, defaultValue: T) throws where T : Swift.Equatable, T : SwiftUICore.ProtobufEncodableMessage
  package mutating func messageField<T>(_ tag: Swift.UInt, _ value: T) throws where T : SwiftUICore.ProtobufEncodableMessage
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func stringField(_ tag: Swift.UInt, _ value: Swift.String, defaultValue: Swift.String? = "") throws
  #else
  @inline(__always) package mutating func stringField(_ tag: Swift.UInt, _ value: Swift.String, defaultValue: Swift.String? = "") throws
  #endif
  @inline(__always) package mutating func codableField<T>(_ tag: Swift.UInt, _ value: T, defaultValue: T) throws where T : Swift.Encodable, T : Swift.Equatable
  package mutating func codableField<T>(_ tag: Swift.UInt, _ value: T) throws where T : Swift.Encodable
  package mutating func emptyField(_ tag: Swift.UInt)
}
extension SwiftUICore.ProtobufEncoder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func boolField<T>(_ tag: T, _ value: Swift.Bool, defaultValue: Swift.Bool? = false) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func boolField<T>(_ tag: T, _ value: Swift.Bool, defaultValue: Swift.Bool? = false) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func uintField<T>(_ tag: T, _ value: Swift.UInt, defaultValue: Swift.UInt? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func uintField<T>(_ tag: T, _ value: Swift.UInt, defaultValue: Swift.UInt? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func enumField<T, U>(_ tag: T, _ value: U, defaultValue: U?) where T : SwiftUICore.ProtobufTag, U : Swift.Equatable, U : SwiftUICore.ProtobufEnum
  #else
  @inline(__always) package mutating func enumField<T, U>(_ tag: T, _ value: U, defaultValue: U?) where T : SwiftUICore.ProtobufTag, U : Swift.Equatable, U : SwiftUICore.ProtobufEnum
  #endif
  @inline(__always) package mutating func enumField<T, U>(_ tag: T, _ value: U) where T : SwiftUICore.ProtobufTag, U : SwiftUICore.ProtobufEnum
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func uint64Field<T>(_ tag: T, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func uint64Field<T>(_ tag: T, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func intField<T>(_ tag: T, _ value: Swift.Int, defaultValue: Swift.Int? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func intField<T>(_ tag: T, _ value: Swift.Int, defaultValue: Swift.Int? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func int64Field<T>(_ tag: T, _ value: Swift.Int64, defaultValue: Swift.Int64? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func int64Field<T>(_ tag: T, _ value: Swift.Int64, defaultValue: Swift.Int64? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func fixed32Field<T>(_ tag: T, _ value: Swift.UInt32, defaultValue: Swift.UInt32? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func fixed32Field<T>(_ tag: T, _ value: Swift.UInt32, defaultValue: Swift.UInt32? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func fixed64Field<T>(_ tag: T, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func fixed64Field<T>(_ tag: T, _ value: Swift.UInt64, defaultValue: Swift.UInt64? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func floatField<T>(_ tag: T, _ value: Swift.Float, defaultValue: Swift.Float? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func floatField<T>(_ tag: T, _ value: Swift.Float, defaultValue: Swift.Float? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func doubleField<T>(_ tag: T, _ value: Swift.Double, defaultValue: Swift.Double? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func doubleField<T>(_ tag: T, _ value: Swift.Double, defaultValue: Swift.Double? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func cgFloatField<T>(_ tag: T, _ value: CoreFoundation.CGFloat, defaultValue: CoreFoundation.CGFloat? = 0) where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func cgFloatField<T>(_ tag: T, _ value: CoreFoundation.CGFloat, defaultValue: CoreFoundation.CGFloat? = 0) where T : SwiftUICore.ProtobufTag
  #endif
  @inline(__always) package mutating func dataField<T>(_ tag: T, _ data: Foundation.Data) where T : SwiftUICore.ProtobufTag
  @inline(__always) package mutating func dataField<T>(_ tag: T, _ buffer: Swift.UnsafeRawBufferPointer) where T : SwiftUICore.ProtobufTag
  @inline(__always) package mutating func packedField<T>(_ tag: T, _ body: (inout SwiftUICore.ProtobufEncoder) -> Swift.Void) where T : SwiftUICore.ProtobufTag
  @inline(__always) package mutating func messageField<T>(_ tag: T, _ body: (inout SwiftUICore.ProtobufEncoder) throws -> Swift.Void) rethrows where T : SwiftUICore.ProtobufTag
  @inline(__always) package mutating func messageField<T, U>(_ tag: T, _ value: U) throws where T : SwiftUICore.ProtobufTag, U : SwiftUICore.ProtobufEncodableMessage
  @inline(__always) package mutating func messageField<T, U>(_ tag: T, _ value: U, defaultValue: U) throws where T : SwiftUICore.ProtobufTag, U : Swift.Equatable, U : SwiftUICore.ProtobufEncodableMessage
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package mutating func stringField<T>(_ tag: T, _ value: Swift.String, defaultValue: Swift.String? = "") throws where T : SwiftUICore.ProtobufTag
  #else
  @inline(__always) package mutating func stringField<T>(_ tag: T, _ value: Swift.String, defaultValue: Swift.String? = "") throws where T : SwiftUICore.ProtobufTag
  #endif
  @inline(__always) package mutating func codableField<T, U>(_ tag: T, _ value: U) throws where T : SwiftUICore.ProtobufTag, U : Swift.Encodable
  @inline(__always) package mutating func codableField<T, U>(_ tag: T, _ value: U, defaultValue: U) throws where T : SwiftUICore.ProtobufTag, U : Swift.Encodable, U : Swift.Equatable
}
extension SwiftUICore.ProtobufEncoder {
  package mutating func encodeVarint(_ value: Swift.UInt)
  package mutating func encodeVarint64(_ value: Swift.UInt64)
  package mutating func encodeVarintZZ(_ value: Swift.Int)
  package mutating func encodeVarint64ZZ(_ value: Swift.Int64)
  package mutating func encodeBool(_ value: Swift.Bool)
  package mutating func encodeFixed32(_ value: Swift.UInt32)
  package mutating func encodeFixed64(_ value: Swift.UInt64)
  package mutating func encodeFloat(_ value: Swift.Float)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum _VariadicView {
  public typealias Root = SwiftUICore._VariadicView_Root
  public typealias ViewRoot = SwiftUICore._VariadicView_ViewRoot
  public typealias Children = SwiftUICore._VariadicView_Children
  public typealias UnaryViewRoot = SwiftUICore._VariadicView_UnaryViewRoot
  public typealias MultiViewRoot = SwiftUICore._VariadicView_MultiViewRoot
  package typealias AnyImplicitRoot = SwiftUICore._VariadicView_AnyImplicitRoot
  package typealias ImplicitRoot = SwiftUICore._VariadicView_ImplicitRoot
  package typealias ImplicitRootVisitor = SwiftUICore._VariadicView_ImplicitRootVisitor
  @frozen public struct Tree<Root, Content> where Root : SwiftUICore._VariadicView_Root {
    public var root: Root
    public var content: Content
    @inlinable package init(root: Root, content: Content) {
            self.root = root
            self.content = content
        }
    @inlinable public init(_ root: Root, @SwiftUICore.ViewBuilder content: () -> Content) {
            self.root = root
            self.content = content()
        }
  }
}
@available(*, unavailable)
extension SwiftUICore._VariadicView.Tree : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._VariadicView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VariadicView_Root {
  static var _viewListOptions: Swift.Int { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_Root {
  public static var _viewListOptions: Swift.Int {
    get
  }
  package static var viewListOptions: SwiftUICore._ViewListInputs.Options {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
package struct ViewListOptionsInput : SwiftUICore.ViewInput {
  package static let defaultValue: SwiftUICore._ViewListInputs.Options
  package typealias Value = SwiftUICore._ViewListInputs.Options
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VariadicView_ViewRoot : SwiftUICore._VariadicView_Root {
  static func _makeView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  static func _makeViewList(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func body(children: SwiftUICore._VariadicView.Children) -> Self.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_ViewRoot where Self.Body == Swift.Never {
  public func body(children: SwiftUICore._VariadicView.Children) -> Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VariadicView_UnaryViewRoot : SwiftUICore._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_UnaryViewRoot {
  nonisolated public static func _makeViewList(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VariadicView_MultiViewRoot : SwiftUICore._VariadicView_ViewRoot {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_MultiViewRoot {
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _VariadicView_Children {
  package var list: any SwiftUICore.ViewList
  package var contentSubgraph: AttributeGraph.Subgraph
  package init(_ list: any SwiftUICore.ViewList, contentSubgraph: AttributeGraph.Subgraph)
  package var content: SwiftUICore._ViewList_Backing {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._VariadicView_Children : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_ViewRoot {
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView.Tree : SwiftUICore.View where Root : SwiftUICore._VariadicView_ViewRoot, Content : SwiftUICore.View {
  public typealias Body = Swift.Never
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView.Tree<Root, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView.Tree<Root, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView.Tree : SwiftUICore.PrimitiveView where Root : SwiftUICore._VariadicView_ViewRoot, Content : SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView.Tree : SwiftUICore.UnaryView where Root : SwiftUICore._VariadicView_ViewRoot, Content : SwiftUICore.View {
}
package protocol _VariadicView_AnyImplicitRoot {
  static func visitType<V>(visitor: inout V) where V : SwiftUICore._VariadicView_ImplicitRootVisitor
}
package protocol _VariadicView_ImplicitRoot : SwiftUICore._VariadicView_AnyImplicitRoot, SwiftUICore._VariadicView_ViewRoot {
  static var implicitRoot: Self { get }
}
package protocol _VariadicView_ImplicitRootVisitor {
  mutating func visit<R>(type: R.Type) where R : SwiftUICore._VariadicView_ImplicitRoot
}
extension SwiftUICore._VariadicView_ImplicitRoot {
  package static func visitType<V>(visitor: inout V) where V : SwiftUICore._VariadicView_ImplicitRootVisitor
}
extension SwiftUICore._ViewInputs {
  package var implicitRootType: any SwiftUICore._VariadicView.AnyImplicitRoot.Type {
    get
    set
  }
  package var implicitRootBodyInputs: SwiftUICore._ViewListInputs {
    get
  }
}
extension SwiftUICore._ViewListInputs {
  package var implicitRootType: any SwiftUICore._VariadicView.AnyImplicitRoot.Type {
    get
    set
  }
}
extension SwiftUICore._ViewOutputs {
  package static func multiView(inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
extension SwiftUICore.View {
  nonisolated package static func makeImplicitRoot(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
extension SwiftUICore.ViewModifier {
  nonisolated package static func makeImplicitRoot(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.HierarchicalShapeStyle {
  @_alwaysEmitIntoClient public static var primary: SwiftUICore.HierarchicalShapeStyle {
    get { .primary }
  }
  @_alwaysEmitIntoClient public static var secondary: SwiftUICore.HierarchicalShapeStyle {
    get { .secondary }
  }
  @_alwaysEmitIntoClient public static var tertiary: SwiftUICore.HierarchicalShapeStyle {
    get { .tertiary }
  }
  @_alwaysEmitIntoClient public static var quaternary: SwiftUICore.HierarchicalShapeStyle {
    get { .quaternary }
  }
}
@available(iOS 16.0, macOS 12.0, macCatalyst 15.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.HierarchicalShapeStyle {
  @_alwaysEmitIntoClient public static var quinary: SwiftUICore.HierarchicalShapeStyle {
    get { .quinary }
  }
}
package enum ContentStyle {
  package enum ID : Swift.Int8 {
    case primary
    case secondary
    case tertiary
    case quaternary
    @available(iOS 16.0, macOS 12.0, macCatalyst 15.0, tvOS 17.0, watchOS 10.0, *)
    case quinary
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(rawValue: Swift.Int8)
    #else
    package init?(rawValue: Swift.Int8)
    #endif
    package typealias RawValue = Swift.Int8
    package var rawValue: Swift.Int8 {
      get
    }
  }
  package enum Primitive {
    case fill
    case stroke
    case separator
    package init(_ role: SwiftUICore.ShapeRole)
    package static func == (a: SwiftUICore.ContentStyle.Primitive, b: SwiftUICore.ContentStyle.Primitive) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct Style : Swift.Hashable {
    package var id: SwiftUICore.ContentStyle.ID
    package var primitive: SwiftUICore.ContentStyle.Primitive
    package init(id: SwiftUICore.ContentStyle.ID, primitive: SwiftUICore.ContentStyle.Primitive)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.ContentStyle.Style, b: SwiftUICore.ContentStyle.Style) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct MaterialStyle : Swift.Hashable {
    package var material: SwiftUICore.Material.ResolvedMaterial
    package var base: SwiftUICore.ContentStyle.Style
    package init(material: SwiftUICore.Material.ResolvedMaterial, base: SwiftUICore.ContentStyle.Style)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.ContentStyle.MaterialStyle, b: SwiftUICore.ContentStyle.MaterialStyle) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HierarchicalShapeStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  package var id: Swift.UInt32
  package init(id: Swift.UInt32)
  public static let primary: SwiftUICore.HierarchicalShapeStyle
  public static let secondary: SwiftUICore.HierarchicalShapeStyle
  public static let tertiary: SwiftUICore.HierarchicalShapeStyle
  public static let quaternary: SwiftUICore.HierarchicalShapeStyle
  package static let sharedPrimary: SwiftUICore.AnyShapeStyle
  package var level: Swift.Int {
    get
  }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 12.0, macCatalyst 15.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HierarchicalShapeStyle {
  public static let quinary: SwiftUICore.HierarchicalShapeStyle
}
package struct LegacyContentStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  package static let sharedPrimary: SwiftUICore.AnyShapeStyle
  package var id: SwiftUICore.ContentStyle.ID
  package var color: SwiftUICore.Color
  package func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  package typealias Resolved = Swift.Never
}
extension SwiftUICore.SystemColorType {
  package init(_ id: SwiftUICore.ContentStyle.ID)
}
extension SwiftUICore.Color {
  package init(_ id: SwiftUICore.ContentStyle.ID)
}
extension SwiftUICore.ContentStyle.ID : SwiftUICore.ColorProvider {
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  package var level: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(level: Swift.Int)
  #else
  package init?(level: Swift.Int)
  #endif
  package init(truncatingLevel level: Swift.Int)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @_alwaysEmitIntoClient public var secondary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 1)
    }
  }
  @_alwaysEmitIntoClient public var tertiary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 2)
    }
  }
  @_alwaysEmitIntoClient public var quaternary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 3)
    }
  }
  @_alwaysEmitIntoClient public var quinary: some SwiftUICore.ShapeStyle {
    get {
        HierarchicalShapeStyleModifier(base: self, level: 4)
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HierarchicalShapeStyleModifier<Base> : SwiftUICore.ShapeStyle where Base : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var base: Base
  @usableFromInline
  internal var level: Swift.Int
  @_alwaysEmitIntoClient internal init(base: Base, level: Swift.Int) {
        (self.base, self.level) = (base, level)
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol DynamicProperty {
  static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static var _propertyBehaviors: Swift.UInt32 { get }
  mutating func update()
}
package struct DynamicPropertyBehaviors : Swift.OptionSet {
  package let rawValue: Swift.UInt32
  package static let allowsAsync: SwiftUICore.DynamicPropertyBehaviors
  package static let requiresMainThread: SwiftUICore.DynamicPropertyBehaviors
  package init(rawValue: Swift.UInt32)
  package typealias ArrayLiteralElement = SwiftUICore.DynamicPropertyBehaviors
  package typealias Element = SwiftUICore.DynamicPropertyBehaviors
  package typealias RawValue = Swift.UInt32
}
package protocol DynamicPropertyBox {
  associatedtype Property : SwiftUICore.DynamicProperty
  mutating func destroy()
  mutating func reset()
  mutating func update(property: inout Self.Property, phase: SwiftUICore.ViewPhase) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  mutating func getState<S>(type: S.Type) -> SwiftUICore.Binding<S>?
  #else
  mutating func getState<S>(type: S.Type) -> SwiftUICore.Binding<S>?
  #endif
}
extension SwiftUICore.DynamicPropertyBox {
  package mutating func destroy()
  package mutating func reset()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func getState<S>(type: S.Type = S.self) -> SwiftUICore.Binding<S>?
  #else
  package mutating func getState<S>(type: S.Type = S.self) -> SwiftUICore.Binding<S>?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public mutating func update()
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
package struct DynamicPropertyCache {
  package struct Fields {
    package var behaviors: SwiftUICore.DynamicPropertyBehaviors
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func name(at offset: Swift.Int) -> Swift.String?
    #else
    package func name(at offset: Swift.Int) -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func _name(at offset: Swift.Int) -> Swift.UnsafePointer<Swift.CChar>?
    #else
    package func _name(at offset: Swift.Int) -> Swift.UnsafePointer<Swift.CChar>?
    #endif
  }
  package static func fields(of type: any Any.Type) -> SwiftUICore.DynamicPropertyCache.Fields
}
extension SwiftUICore.DynamicProperty {
  @inline(__always) package static func addTreeValue<T>(_ value: AttributeGraph.Attribute<T>, at fieldOffset: Swift.Int, in container: any Any.Type, flags: SwiftUICore.TreeValueFlags = .init())
  @inline(__always) package static func addTreeValue<T, U>(_ value: AttributeGraph.Attribute<T>, as: U.Type, at fieldOffset: Swift.Int, in container: any Any.Type, flags: SwiftUICore.TreeValueFlags = .init())
  @inline(never) package static func addTreeValueSlow<T>(_ value: AttributeGraph.AnyAttribute, as type: T.Type, in container: any Any.Type, fieldOffset: Swift.Int, flags: SwiftUICore.TreeValueFlags = .init())
}
package protocol BodyAccessor {
  associatedtype Container
  associatedtype Body
  func updateBody(of value: Self.Container, changed: Swift.Bool)
}
extension SwiftUICore.BodyAccessor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func makeBody(container: SwiftUICore._GraphValue<Self.Container>, inputs: inout SwiftUICore._GraphInputs, fields: SwiftUICore.DynamicPropertyCache.Fields) -> (SwiftUICore._GraphValue<Self.Body>, SwiftUICore._DynamicPropertyBuffer?)
  #else
  package func makeBody(container: SwiftUICore._GraphValue<Self.Container>, inputs: inout SwiftUICore._GraphInputs, fields: SwiftUICore.DynamicPropertyCache.Fields) -> (SwiftUICore._GraphValue<Self.Body>, SwiftUICore._DynamicPropertyBuffer?)
  #endif
  @inline(__always) package func setBody(_ body: () -> Self.Body)
}
package protocol BodyAccessorRule {
  static var container: any Any.Type { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func value<T>(as type: T.Type, attribute: AttributeGraph.AnyAttribute) -> T?
  #else
  static func value<T>(as type: T.Type, attribute: AttributeGraph.AnyAttribute) -> T?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func buffer<T>(as type: T.Type, attribute: AttributeGraph.AnyAttribute) -> SwiftUICore._DynamicPropertyBuffer?
  #else
  static func buffer<T>(as type: T.Type, attribute: AttributeGraph.AnyAttribute) -> SwiftUICore._DynamicPropertyBuffer?
  #endif
  static func metaProperties<T>(as type: T.Type, attribute: AttributeGraph.AnyAttribute) -> [(Swift.String, AttributeGraph.AnyAttribute)]
}
package func changedBodyProperties<Container>(of container: Container.Type) -> [Swift.String]
package func printChangedBodyProperties<Container>(of container: Container.Type)
package func logChangedBodyProperties<Container>(of container: Container.Type)
package enum Update {
  @inlinable package static var isActive: Swift.Bool {
    get
  }
  @inlinable package static var threadIsUpdating: Swift.Bool {
    get
  }
  @inlinable package static func assertIsActive()
  package static func lock()
  package static func unlock()
  package static var isOwner: Swift.Bool {
    get
  }
  package static func wait()
  package static func broadcast()
  package static func assertIsLocked()
  package static func begin()
  package static func end()
  package static func enqueueAction(_ action: @escaping () -> Swift.Void)
  @inlinable @inline(__always) package static func locked<T>(_ body: () throws -> T) rethrows -> T
  package static func syncMain(_ body: () -> Swift.Void)
  package static func ensure<T>(_ callback: () throws -> T) rethrows -> T
  package static var canDispatch: Swift.Bool {
    get
  }
  package static func dispatchActions()
  package static func dispatchImmediately<T>(_ body: () -> T) -> T
}
package struct DistanceGesture : SwiftUICore.Gesture {
  package struct StateType : SwiftUICore.GestureStateProtocol {
    package init()
  }
  package var minimumDistance: CoreFoundation.CGFloat
  package var maximumDistance: CoreFoundation.CGFloat
  package init(minimumDistance: CoreFoundation.CGFloat = 0, maximumDistance: CoreFoundation.CGFloat = .infinity)
  package var body: some SwiftUICore.Gesture<CoreFoundation.CGFloat> {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15DistanceGestureV4bodyQrvp", 0) __
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = CoreFoundation.CGFloat
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SymbolRenderingMode : Swift.Sendable {
  package enum Storage : Swift.Equatable, Swift.Sendable {
    case monochrome
    case multicolor
    case hierarchical
    case palette
    case preferred
    case hierarchicalUnlessSlashed
    case hierarchicalSlashBadge
    case paletteSlashBadge
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.SymbolRenderingMode.Storage, b: SwiftUICore.SymbolRenderingMode.Storage) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package var storage: SwiftUICore.SymbolRenderingMode.Storage
  package init(storage: SwiftUICore.SymbolRenderingMode.Storage)
  public static let monochrome: SwiftUICore.SymbolRenderingMode
  public static let multicolor: SwiftUICore.SymbolRenderingMode
  public static let hierarchical: SwiftUICore.SymbolRenderingMode
  public static let palette: SwiftUICore.SymbolRenderingMode
  package static let preferred: SwiftUICore.SymbolRenderingMode
  package static let preferredIfEnabled: SwiftUICore.SymbolRenderingMode?
}
extension SwiftUICore.SymbolRenderingMode.Storage : Swift.Codable {
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SymbolRenderingMode {
  @_spi(Private) public static let hierarchicalUnlessSlashed: SwiftUICore.SymbolRenderingMode
  @_spi(Private) public static let hierarchicalSlashBadge: SwiftUICore.SymbolRenderingMode
  @_spi(Private) public static let paletteSlashBadge: SwiftUICore.SymbolRenderingMode
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func symbolRenderingMode(_ mode: SwiftUICore.SymbolRenderingMode?) -> some SwiftUICore.View {
        return environment(\.symbolRenderingMode, mode)
    }
  
  #else
  @inlinable nonisolated public func symbolRenderingMode(_ mode: SwiftUICore.SymbolRenderingMode?) -> some SwiftUICore.View {
        return environment(\.symbolRenderingMode, mode)
    }
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func symbolRenderingMode(_ mode: SwiftUICore.SymbolRenderingMode?) -> SwiftUICore.Image
  #else
  public func symbolRenderingMode(_ mode: SwiftUICore.SymbolRenderingMode?) -> SwiftUICore.Image
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var symbolRenderingMode: SwiftUICore.SymbolRenderingMode? {
    get
    set
  }
  #else
  public var symbolRenderingMode: SwiftUICore.SymbolRenderingMode? {
    get
    set
  }
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
@dynamicMemberLookup public struct ShaderLibrary : Swift.Equatable, @unchecked Swift.Sendable {
  public static let `default`: SwiftUICore.ShaderLibrary
  public static func bundle(_ bundle: Foundation.Bundle) -> SwiftUICore.ShaderLibrary
  public init(data: Foundation.Data)
  public init(url: Foundation.URL)
  public static subscript(dynamicMember name: Swift.String) -> SwiftUICore.ShaderFunction {
    get
  }
  public subscript(dynamicMember name: Swift.String) -> SwiftUICore.ShaderFunction {
    get
  }
  public static func == (lhs: SwiftUICore.ShaderLibrary, rhs: SwiftUICore.ShaderLibrary) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
@dynamicCallable public struct ShaderFunction : Swift.Equatable, Swift.Sendable {
  public var library: SwiftUICore.ShaderLibrary
  public var name: Swift.String
  public init(library: SwiftUICore.ShaderLibrary, name: Swift.String)
  public func dynamicallyCall(withArguments args: [SwiftUICore.Shader.Argument]) -> SwiftUICore.Shader
  public static func == (a: SwiftUICore.ShaderFunction, b: SwiftUICore.ShaderFunction) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
public struct Shader : Swift.Equatable, Swift.Sendable {
  public struct Argument : Swift.Equatable, Swift.Sendable {
    @usableFromInline
    internal static func _float(_ x: Swift.Float) -> SwiftUICore.Shader.Argument
    @usableFromInline
    internal static func _float2(_ x: Swift.Float, _ y: Swift.Float) -> SwiftUICore.Shader.Argument
    @usableFromInline
    internal static func _float3(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float) -> SwiftUICore.Shader.Argument
    @usableFromInline
    internal static func _float4(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float, _ w: Swift.Float) -> SwiftUICore.Shader.Argument
    @_alwaysEmitIntoClient public static func float<T>(_ x: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float(Float(x))
        }
    @_alwaysEmitIntoClient public static func float2<T>(_ x: T, _ y: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float2(Float(x), Float(y))
        }
    @_alwaysEmitIntoClient public static func float3<T>(_ x: T, _ y: T, _ z: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float3(Float(x), Float(y), Float(z))
        }
    @_alwaysEmitIntoClient public static func float4<T>(_ x: T, _ y: T, _ z: T, _ w: T) -> SwiftUICore.Shader.Argument where T : Swift.BinaryFloatingPoint {
            return _float4(Float(x), Float(y), Float(z), Float(w))
        }
    @_alwaysEmitIntoClient public static func float2(_ point: CoreFoundation.CGPoint) -> SwiftUICore.Shader.Argument {
            return _float2(Float(point.x), Float(point.y))
        }
    @_alwaysEmitIntoClient public static func float2(_ size: CoreFoundation.CGSize) -> SwiftUICore.Shader.Argument {
            return _float2(Float(size.width), Float(size.height))
        }
    @_alwaysEmitIntoClient public static func float2(_ vector: CoreFoundation.CGVector) -> SwiftUICore.Shader.Argument {
            return _float2(Float(vector.dx), Float(vector.dy))
        }
    public static func floatArray(_ array: [Swift.Float]) -> SwiftUICore.Shader.Argument
    public static var boundingRect: SwiftUICore.Shader.Argument {
      get
    }
    public static func color(_ color: SwiftUICore.Color) -> SwiftUICore.Shader.Argument
    public static func colorArray(_ array: [SwiftUICore.Color]) -> SwiftUICore.Shader.Argument
    public static func image(_ image: SwiftUICore.Image) -> SwiftUICore.Shader.Argument
    public static func data(_ data: Foundation.Data) -> SwiftUICore.Shader.Argument
    public static func == (a: SwiftUICore.Shader.Argument, b: SwiftUICore.Shader.Argument) -> Swift.Bool
  }
  package struct Options : Swift.OptionSet {
    package let rawValue: Swift.UInt32
    package init(rawValue: Swift.UInt32)
    package static let dithersColor: SwiftUICore.Shader.Options
    package static let colorFilter: SwiftUICore.Shader.Options
    package static let distortionFilter: SwiftUICore.Shader.Options
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    package typealias ArrayLiteralElement = SwiftUICore.Shader.Options
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    package typealias Element = SwiftUICore.Shader.Options
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    package typealias RawValue = Swift.UInt32
  }
  public var function: SwiftUICore.ShaderFunction
  public var arguments: [SwiftUICore.Shader.Argument]
  package var options: SwiftUICore.Shader.Options
  public var dithersColor: Swift.Bool {
    get
    set
  }
  public init(function: SwiftUICore.ShaderFunction, arguments: [SwiftUICore.Shader.Argument])
  package struct ResolvedShader {
    package var rbShader: RenderBox.RBShader?
    package var maxSampleOffset: CoreFoundation.CGSize
    package var options: SwiftUICore.Shader.Options
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(rbShader: RenderBox.RBShader? = nil, maxSampleOffset: CoreFoundation.CGSize, options: SwiftUICore.Shader.Options)
    #else
    package init(rbShader: RenderBox.RBShader? = nil, maxSampleOffset: CoreFoundation.CGSize, options: SwiftUICore.Shader.Options)
    #endif
  }
  public static func == (a: SwiftUICore.Shader, b: SwiftUICore.Shader) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 11.0)
extension SwiftUICore.Shader {
  public func compile(as type: SwiftUICore.Shader.UsageType) async throws
  public struct UsageType : Swift.Hashable, Swift.Sendable {
    public static let shapeStyle: SwiftUICore.Shader.UsageType
    public static let colorEffect: SwiftUICore.Shader.UsageType
    public static let distortionEffect: SwiftUICore.Shader.UsageType
    public static let layerEffect: SwiftUICore.Shader.UsageType
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Shader.UsageType, b: SwiftUICore.Shader.UsageType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore.Shader {
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore.View {
  nonisolated public func colorEffect(_ shader: SwiftUICore.Shader, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func distortionEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func layerEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
@_Concurrency.MainActor @preconcurrency public struct _ShaderFilterEffect : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency package var shader: SwiftUICore.Shader
  @_Concurrency.MainActor @preconcurrency package var maxSampleOffset: CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package var enabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package init(shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, enabled: Swift.Bool)
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ShaderFilterEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
  @_spi_available(watchOS, introduced: 10.0)
  public typealias Body = Swift.Never
}
extension SwiftUICore.Shader.ResolvedShader : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.Shader.ResolvedShader : SwiftUICore.ResolvedPaint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in context: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in context: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isCALayerCompatible: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #else
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #endif
  package var rbFillFlags: RenderBox.RBShaderFillFlags {
    get
  }
  package static func == (a: SwiftUICore.Shader.ResolvedShader, b: SwiftUICore.Shader.ResolvedShader) -> Swift.Bool
}
extension SwiftUICore.Shader.ResolvedShader : SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.ShaderVectorData
  package var animatableData: SwiftUICore.Shader.ResolvedShader.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.Shader.ResolvedShader : SwiftUICore.RendererEffect {
  package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
  @_spi_available(watchOS, introduced: 10.0)
  package typealias Body = Swift.Never
}
package struct ShaderVectorData : SwiftUICore.VectorArithmetic {
  package static var zero: SwiftUICore.ShaderVectorData {
    get
  }
  package static func += (lhs: inout SwiftUICore.ShaderVectorData, rhs: SwiftUICore.ShaderVectorData)
  package static func -= (lhs: inout SwiftUICore.ShaderVectorData, rhs: SwiftUICore.ShaderVectorData)
  package static func + (lhs: SwiftUICore.ShaderVectorData, rhs: SwiftUICore.ShaderVectorData) -> SwiftUICore.ShaderVectorData
  package static func - (lhs: SwiftUICore.ShaderVectorData, rhs: SwiftUICore.ShaderVectorData) -> SwiftUICore.ShaderVectorData
  package mutating func scale(by rhs: Swift.Double)
  package var magnitudeSquared: Swift.Double {
    get
  }
  package static func == (a: SwiftUICore.ShaderVectorData, b: SwiftUICore.ShaderVectorData) -> Swift.Bool
}
package struct GraphicsImage : Swift.Equatable, Swift.Sendable {
  package enum Contents : Swift.Equatable, @unchecked Swift.Sendable {
    case cgImage(CoreGraphics.CGImage)
    case ioSurface(IOSurface.IOSurfaceRef)
    indirect case vectorGlyph(SwiftUICore.ResolvedVectorGlyph)
    indirect case vectorLayer(SwiftUICore.VectorImageLayer)
    indirect case color(SwiftUICore.Color.Resolved)
    indirect case named(SwiftUICore.NamedImage.Key)
  }
  package var contents: SwiftUICore.GraphicsImage.Contents?
  package var scale: CoreFoundation.CGFloat
  package var unrotatedPixelSize: CoreFoundation.CGSize
  package var orientation: SwiftUICore.Image.Orientation
  package var maskColor: SwiftUICore.Color.Resolved?
  package var resizingInfo: SwiftUICore.Image.ResizingInfo?
  package var isAntialiased: Swift.Bool
  package var interpolation: SwiftUICore.Image.Interpolation
  package var allowedDynamicRange: SwiftUICore.Image.DynamicRange?
  package var isTemplate: Swift.Bool {
    get
  }
  package var size: CoreFoundation.CGSize {
    get
  }
  package var pixelSize: CoreFoundation.CGSize {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(contents: SwiftUICore.GraphicsImage.Contents?, scale: CoreFoundation.CGFloat, unrotatedPixelSize: CoreFoundation.CGSize, orientation: SwiftUICore.Image.Orientation, isTemplate: Swift.Bool, resizingInfo: SwiftUICore.Image.ResizingInfo? = nil, antialiased: Swift.Bool = true, interpolation: SwiftUICore.Image.Interpolation = .low)
  #else
  package init(contents: SwiftUICore.GraphicsImage.Contents?, scale: CoreFoundation.CGFloat, unrotatedPixelSize: CoreFoundation.CGSize, orientation: SwiftUICore.Image.Orientation, isTemplate: Swift.Bool, resizingInfo: SwiftUICore.Image.ResizingInfo? = nil, antialiased: Swift.Bool = true, interpolation: SwiftUICore.Image.Interpolation = .low)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func slicesAndTiles(at extent: CoreFoundation.CGSize? = nil) -> SwiftUICore.Image.ResizingInfo?
  #else
  package func slicesAndTiles(at extent: CoreFoundation.CGSize? = nil) -> SwiftUICore.Image.ResizingInfo?
  #endif
  package var styleResolverMode: SwiftUICore._ShapeStyle_ResolverMode {
    get
  }
  package var headroom: SwiftUICore.Image.Headroom {
    get
  }
  package static func == (a: SwiftUICore.GraphicsImage, b: SwiftUICore.GraphicsImage) -> Swift.Bool
}
extension SwiftUICore.GraphicsImage : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.GraphicsImage.Contents {
  package static func == (lhs: SwiftUICore.GraphicsImage.Contents, rhs: SwiftUICore.GraphicsImage.Contents) -> Swift.Bool
}
package struct ResolvedVectorGlyph : Swift.Equatable {
  package let animator: RenderBox.RBSymbolAnimator
  package let layoutDirection: SwiftUICore.LayoutDirection
  package let location: SwiftUICore.Image.Location
  package var animatorVersion: Swift.UInt32
  package var allowsContentTransitions: Swift.Bool
  package var preservesVectorRepresentation: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(glyph: RenderBox.CUINamedVectorGlyph, value: Swift.Float?, flipsRightToLeft: Swift.Bool, in context: SwiftUICore.ImageResolutionContext, at location: SwiftUICore.Image.Location)
  #else
  package init(glyph: RenderBox.CUINamedVectorGlyph, value: Swift.Float?, flipsRightToLeft: Swift.Bool, in context: SwiftUICore.ImageResolutionContext, at location: SwiftUICore.Image.Location)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var glyph: RenderBox.CUINamedVectorGlyph? {
    get
  }
  #else
  package var glyph: RenderBox.CUINamedVectorGlyph? {
    get
  }
  #endif
  package var flipsRightToLeft: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var value: Swift.Float? {
    get
  }
  #else
  package var value: Swift.Float? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var renderingMode: SwiftUICore.SymbolRenderingMode.Storage? {
    get
  }
  #else
  package var renderingMode: SwiftUICore.SymbolRenderingMode.Storage? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedRenderingMode: SwiftUICore.SymbolRenderingMode.Storage? {
    get
  }
  #else
  package var resolvedRenderingMode: SwiftUICore.SymbolRenderingMode.Storage? {
    get
  }
  #endif
  package var styleResolverMode: SwiftUICore._ShapeStyle_ResolverMode {
    get
  }
  package func isClear(styles: SwiftUICore._ShapeStyle_Pack) -> Swift.Bool
  package var alignmentRect: CoreFoundation.CGRect {
    get
  }
  package static func == (lhs: SwiftUICore.ResolvedVectorGlyph, rhs: SwiftUICore.ResolvedVectorGlyph) -> Swift.Bool
}
extension SwiftUICore.GraphicsImage {
  package var bitmapOrientation: SwiftUICore.Image.Orientation {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func render(at targetSize: CoreFoundation.CGSize, prefersMask: Swift.Bool = false) -> CoreGraphics.CGImage?
  #else
  package func render(at targetSize: CoreFoundation.CGSize, prefersMask: Swift.Bool = false) -> CoreGraphics.CGImage?
  #endif
}
package enum PathDrawingStyle {
  case fill(SwiftUICore.FillStyle)
  case stroke(SwiftUICore.StrokeStyle)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct GraphicsContext {
  @_hasMissingDesignatedInitializers @usableFromInline
  final internal class Storage {
    @objc deinit
  }
  internal var storage: SwiftUICore.GraphicsContext.Storage
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public init(displayList: RenderBox.RBDisplayList, environment: SwiftUICore.EnvironmentValues)
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public init(drawingState: RenderBox.RBDrawingState, environment: SwiftUICore.EnvironmentValues)
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public var displayList: RenderBox.RBDisplayList {
    get
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public var drawingState: RenderBox.RBDrawingState {
    mutating get
  }
  @frozen public struct BlendMode : Swift.RawRepresentable, Swift.Equatable {
    public let rawValue: Swift.Int32
    @inlinable public init(rawValue: Swift.Int32) { self.rawValue = rawValue }
    @inlinable public static var normal: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.normal.rawValue)
        }
    }
    @inlinable public static var multiply: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.multiply.rawValue)
        }
    }
    @inlinable public static var screen: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.screen.rawValue)
        }
    }
    @inlinable public static var overlay: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.overlay.rawValue)
        }
    }
    @inlinable public static var darken: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.darken.rawValue)
        }
    }
    @inlinable public static var lighten: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.lighten.rawValue)
        }
    }
    @inlinable public static var colorDodge: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.colorDodge.rawValue)
        }
    }
    @inlinable public static var colorBurn: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.colorBurn.rawValue)
        }
    }
    @inlinable public static var softLight: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.softLight.rawValue)
        }
    }
    @inlinable public static var hardLight: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.hardLight.rawValue)
        }
    }
    @inlinable public static var difference: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.difference.rawValue)
        }
    }
    @inlinable public static var exclusion: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.exclusion.rawValue)
        }
    }
    @inlinable public static var hue: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.hue.rawValue)
        }
    }
    @inlinable public static var saturation: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.saturation.rawValue)
        }
    }
    @inlinable public static var color: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.color.rawValue)
        }
    }
    @inlinable public static var luminosity: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.luminosity.rawValue)
        }
    }
    @inlinable public static var clear: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.clear.rawValue)
        }
    }
    @inlinable public static var copy: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.copy.rawValue)
        }
    }
    @inlinable public static var sourceIn: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceIn.rawValue)
        }
    }
    @inlinable public static var sourceOut: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceOut.rawValue)
        }
    }
    @inlinable public static var sourceAtop: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.sourceAtop.rawValue)
        }
    }
    @inlinable public static var destinationOver: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationOver.rawValue)
        }
    }
    @inlinable public static var destinationIn: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationIn.rawValue)
        }
    }
    @inlinable public static var destinationOut: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationOut.rawValue)
        }
    }
    @inlinable public static var destinationAtop: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.destinationAtop.rawValue)
        }
    }
    @inlinable public static var xor: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.xor.rawValue)
        }
    }
    @inlinable public static var plusDarker: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.plusDarker.rawValue)
        }
    }
    @inlinable public static var plusLighter: SwiftUICore.GraphicsContext.BlendMode {
      get {
            self.init(rawValue: CGBlendMode.plusLighter.rawValue)
        }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.Int32
  }
  public var opacity: Swift.Double {
    get
    set
  }
  public var blendMode: SwiftUICore.GraphicsContext.BlendMode {
    get
    set
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var identifier: Swift.UInt32 {
    get
    set
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var namespace: Foundation.UUID {
    get
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public mutating func setIdentifier(_ identifier: Swift.UInt32, in uuid: Foundation.UUID)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public mutating func setTransition(_ transition: SwiftUICore.ContentTransition?)
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public mutating func setTransition(_ transition: SwiftUICore.ContentTransition?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public mutating func addAnimation(_ animation: SwiftUICore.Animation?, id: Foundation.UUID)
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public mutating func addAnimation(_ animation: SwiftUICore.Animation?, id: Foundation.UUID)
  #endif
  public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  public var transform: CoreFoundation.CGAffineTransform {
    get
    set
  }
  public mutating func scaleBy(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  public mutating func translateBy(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  public mutating func rotate(by angle: SwiftUICore.Angle)
  public mutating func concatenate(_ matrix: CoreFoundation.CGAffineTransform)
  @frozen public struct ClipOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var inverse: SwiftUICore.GraphicsContext.ClipOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.ClipOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.ClipOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  public var clipBoundingRect: CoreFoundation.CGRect {
    get
  }
  public mutating func clip(to path: SwiftUICore.Path, style: SwiftUICore.FillStyle = FillStyle(), options: SwiftUICore.GraphicsContext.ClipOptions = ClipOptions())
  public mutating func clipToLayer(opacity: Swift.Double = 1, options: SwiftUICore.GraphicsContext.ClipOptions = ClipOptions(), content: (inout SwiftUICore.GraphicsContext) throws -> Swift.Void) rethrows
  public struct Filter : Swift.Sendable {
    public static func projectionTransform(_ matrix: SwiftUICore.ProjectionTransform) -> SwiftUICore.GraphicsContext.Filter
    public static func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0, blendMode: SwiftUICore.GraphicsContext.BlendMode = .normal, options: SwiftUICore.GraphicsContext.ShadowOptions = ShadowOptions()) -> SwiftUICore.GraphicsContext.Filter
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public static func pathProjection(startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, path: SwiftUICore.Path) -> SwiftUICore.GraphicsContext.Filter
    public static func colorMultiply(_ color: SwiftUICore.Color) -> SwiftUICore.GraphicsContext.Filter
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public static func alphaMultiply(_ color: SwiftUICore.Color) -> SwiftUICore.GraphicsContext.Filter
    public static func colorMatrix(_ matrix: SwiftUICore.ColorMatrix) -> SwiftUICore.GraphicsContext.Filter
    public static func hueRotation(_ angle: SwiftUICore.Angle) -> SwiftUICore.GraphicsContext.Filter
    public static func saturation(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static func brightness(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static func contrast(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static func colorInvert(_ amount: Swift.Double = 1) -> SwiftUICore.GraphicsContext.Filter
    public static func grayscale(_ amount: Swift.Double) -> SwiftUICore.GraphicsContext.Filter
    public static var luminanceToAlpha: SwiftUICore.GraphicsContext.Filter {
      get
    }
    public static func blur(radius: CoreFoundation.CGFloat, options: SwiftUICore.GraphicsContext.BlurOptions = BlurOptions()) -> SwiftUICore.GraphicsContext.Filter
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public static func variableBlur(maxRadius: CoreFoundation.CGFloat, mask: SwiftUICore.GraphicsContext.Shading, options: SwiftUICore.GraphicsContext.BlurOptions = BlurOptions()) -> SwiftUICore.GraphicsContext.Filter
    public static func alphaThreshold(min: Swift.Double, max: Swift.Double = 1, color: SwiftUICore.Color = Color.black) -> SwiftUICore.GraphicsContext.Filter
    @_spi(Private) public static func alphaGradient(_ gradient: SwiftUICore.Gradient) -> SwiftUICore.GraphicsContext.Filter
    @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public static func alphaGradient(_ gradient: SwiftUICore.AnyGradient) -> SwiftUICore.GraphicsContext.Filter
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    public static func colorShader(_ shader: SwiftUICore.Shader) -> SwiftUICore.GraphicsContext.Filter
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    public static func distortionShader(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize) -> SwiftUICore.GraphicsContext.Filter
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    public static func layerShader(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize) -> SwiftUICore.GraphicsContext.Filter
  }
  @frozen public struct ShadowOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var shadowAbove: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var shadowOnly: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @inlinable public static var invertsAlpha: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 2) }
    }
    @inlinable public static var disablesGroup: SwiftUICore.GraphicsContext.ShadowOptions {
      get { Self(rawValue: 1 << 3) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.ShadowOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.ShadowOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  @frozen public struct BlurOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var opaque: SwiftUICore.GraphicsContext.BlurOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var dithersResult: SwiftUICore.GraphicsContext.BlurOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.BlurOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.BlurOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  @frozen public struct FilterOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) {
            self.rawValue = rawValue
        }
    @inlinable public static var linearColor: SwiftUICore.GraphicsContext.FilterOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.FilterOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.FilterOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  public mutating func addFilter(_ filter: SwiftUICore.GraphicsContext.Filter, options: SwiftUICore.GraphicsContext.FilterOptions = FilterOptions())
  public struct Shading : Swift.Sendable {
    package enum Storage : Swift.Sendable {
      case backdrop(SwiftUICore.Color.Resolved)
      case color(SwiftUICore.Color)
      case sRGBColor(RenderBox.RBColor)
      case shader(SwiftUICore.Shader, CoreFoundation.CGRect)
      case foreground
      case style(SwiftUICore.AnyShapeStyle)
      case gradient(SwiftUICore.EitherGradient, geometry: SwiftUICore.GraphicsContext.GradientGeometry, options: SwiftUICore.GraphicsContext.GradientOptions)
      case meshGradient(SwiftUICore.MeshGradient)
      case tiledImage(SwiftUICore.Image, origin: CoreFoundation.CGPoint = .zero, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1)
      case levels([SwiftUICore.GraphicsContext.Shading])
      indirect case resolved(SwiftUICore.GraphicsContext.ResolvedShading)
    }
    package var storage: SwiftUICore.GraphicsContext.Shading.Storage
    public static var backdrop: SwiftUICore.GraphicsContext.Shading {
      get
    }
    public static var foreground: SwiftUICore.GraphicsContext.Shading {
      get
    }
    public static func palette(_ array: [SwiftUICore.GraphicsContext.Shading]) -> SwiftUICore.GraphicsContext.Shading
    public static func color(_ color: SwiftUICore.Color) -> SwiftUICore.GraphicsContext.Shading
    public static func color(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, red: Swift.Double, green: Swift.Double, blue: Swift.Double, opacity: Swift.Double = 1) -> SwiftUICore.GraphicsContext.Shading
    public static func color(_ colorSpace: SwiftUICore.Color.RGBColorSpace = .sRGB, white: Swift.Double, opacity: Swift.Double = 1) -> SwiftUICore.GraphicsContext.Shading
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    public static func shader(_ shader: SwiftUICore.Shader, bounds: CoreFoundation.CGRect = .zero) -> SwiftUICore.GraphicsContext.Shading
    @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public static func meshGradient(_ mesh: SwiftUICore.MeshGradient) -> SwiftUICore.GraphicsContext.Shading
    public static func style<S>(_ style: S) -> SwiftUICore.GraphicsContext.Shading where S : SwiftUICore.ShapeStyle
    public static func linearGradient(_ gradient: SwiftUICore.Gradient, startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    public static func radialGradient(_ gradient: SwiftUICore.Gradient, center: CoreFoundation.CGPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    public static func conicGradient(_ gradient: SwiftUICore.Gradient, center: CoreFoundation.CGPoint, angle: SwiftUICore.Angle = Angle(), options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    package static func angularGradient(_ gradient: SwiftUICore.Gradient, center: CoreFoundation.CGPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public static func linearGradient(_ gradient: SwiftUICore.AnyGradient, startPoint: CoreFoundation.CGPoint, endPoint: CoreFoundation.CGPoint, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public static func radialGradient(_ gradient: SwiftUICore.AnyGradient, center: CoreFoundation.CGPoint, startRadius: CoreFoundation.CGFloat, endRadius: CoreFoundation.CGFloat, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public static func conicGradient(_ gradient: SwiftUICore.AnyGradient, center: CoreFoundation.CGPoint, angle: SwiftUICore.Angle = Angle(), options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    package static func angularGradient(_ gradient: SwiftUICore.AnyGradient, center: CoreFoundation.CGPoint, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle, options: SwiftUICore.GraphicsContext.GradientOptions = GradientOptions()) -> SwiftUICore.GraphicsContext.Shading
    public static func tiledImage(_ image: SwiftUICore.Image, origin: CoreFoundation.CGPoint = .zero, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1) -> SwiftUICore.GraphicsContext.Shading
  }
  package enum GradientGeometry {
    case axial(CoreFoundation.CGPoint, CoreFoundation.CGPoint)
    case radial(CoreFoundation.CGPoint, CoreFoundation.CGFloat, CoreFoundation.CGFloat)
    case elliptical(CoreFoundation.CGRect, CoreFoundation.CGFloat, CoreFoundation.CGFloat)
    case conic(CoreFoundation.CGPoint, SwiftUICore.Angle)
    case angular(CoreFoundation.CGPoint, SwiftUICore.Angle, SwiftUICore.Angle)
  }
  package enum ResolvedShading : Swift.Sendable {
    case backdrop(SwiftUICore.Color.Resolved)
    case color(SwiftUICore.Color.Resolved)
    case sRGBColor(RenderBox.RBColor)
    case shader(SwiftUICore.Shader.ResolvedShader, CoreFoundation.CGRect)
    case style(SwiftUICore._ShapeStyle_Pack.Style)
    case gradient(SwiftUICore.ResolvedGradient, SwiftUICore.GraphicsContext.GradientGeometry, _: SwiftUICore.GraphicsContext.GradientOptions = .init())
    case meshGradient(SwiftUICore.MeshGradient._Paint, CoreFoundation.CGRect)
    case tiledImage(SwiftUICore.GraphicsImage, origin: CoreFoundation.CGPoint = .zero, sourceRect: CoreFoundation.CGRect = CGRect(x: 0, y: 0, width: 1, height: 1), scale: CoreFoundation.CGFloat = 1)
    case levels([SwiftUICore.GraphicsContext.ResolvedShading])
  }
  @frozen public struct GradientOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @inlinable public static var `repeat`: SwiftUICore.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 0) }
    }
    @inlinable public static var mirror: SwiftUICore.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 1) }
    }
    @inlinable public static var linearColor: SwiftUICore.GraphicsContext.GradientOptions {
      get { Self(rawValue: 1 << 2) }
    }
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.GraphicsContext.GradientOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = SwiftUICore.GraphicsContext.GradientOptions
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.UInt32
  }
  public func resolve(_ shading: SwiftUICore.GraphicsContext.Shading) -> SwiftUICore.GraphicsContext.Shading
  public func drawLayer(content: (inout SwiftUICore.GraphicsContext) throws -> Swift.Void) rethrows
  package func drawLayer(flags: RenderBox.RBLayerFlags, content: (inout SwiftUICore.GraphicsContext) throws -> Swift.Void) rethrows
  public func fill(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.Shading, style: SwiftUICore.FillStyle = FillStyle())
  public func stroke(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.Shading, style: SwiftUICore.StrokeStyle)
  public func stroke(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.Shading, lineWidth: CoreFoundation.CGFloat = 1)
  package func draw(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.Shading, style: SwiftUICore.PathDrawingStyle)
  public struct ResolvedImage {
    public var size: CoreFoundation.CGSize {
      get
    }
    public let baseline: CoreFoundation.CGFloat
    public var shading: SwiftUICore.GraphicsContext.Shading?
  }
  public func resolve(_ image: SwiftUICore.Image) -> SwiftUICore.GraphicsContext.ResolvedImage
  public func draw(_ image: SwiftUICore.GraphicsContext.ResolvedImage, in rect: CoreFoundation.CGRect, style: SwiftUICore.FillStyle = FillStyle())
  public func draw(_ image: SwiftUICore.GraphicsContext.ResolvedImage, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public func draw(_ image: SwiftUICore.Image, in rect: CoreFoundation.CGRect, style: SwiftUICore.FillStyle = FillStyle())
  public func draw(_ image: SwiftUICore.Image, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public struct ResolvedText {
    public var shading: SwiftUICore.GraphicsContext.Shading
    public func measure(in size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
    public func firstBaseline(in size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
    public func lastBaseline(in size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  }
  public func resolve(_ text: SwiftUICore.Text) -> SwiftUICore.GraphicsContext.ResolvedText
  @_spi(Private) public func resolve(_ text: SwiftUICore.Text, layoutProperties: SwiftUICore.TextLayoutProperties) -> SwiftUICore.GraphicsContext.ResolvedText
  public func draw(_ text: SwiftUICore.GraphicsContext.ResolvedText, in rect: CoreFoundation.CGRect)
  public func draw(_ text: SwiftUICore.GraphicsContext.ResolvedText, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public func draw(_ text: SwiftUICore.Text, in rect: CoreFoundation.CGRect)
  public func draw(_ text: SwiftUICore.Text, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
  public struct ResolvedSymbol {
    package var list: any RenderBox.RBDisplayListContents
    public var size: CoreFoundation.CGSize {
      get
    }
    package init(list: any RenderBox.RBDisplayListContents, size: CoreFoundation.CGSize)
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func resolveSymbol<ID>(id: ID) -> SwiftUICore.GraphicsContext.ResolvedSymbol? where ID : Swift.Hashable
  #else
  public func resolveSymbol<ID>(id: ID) -> SwiftUICore.GraphicsContext.ResolvedSymbol? where ID : Swift.Hashable
  #endif
  public func draw(_ symbol: SwiftUICore.GraphicsContext.ResolvedSymbol, in rect: CoreFoundation.CGRect)
  public func draw(_ symbol: SwiftUICore.GraphicsContext.ResolvedSymbol, at point: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .center)
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.ResolvedImage : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.ResolvedText : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.ResolvedSymbol : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext {
  public func withCGContext(content: (CoreGraphics.CGContext) throws -> Swift.Void) rethrows
  @_spi(Private) public func withPlatformContext(content: () throws -> Swift.Void) rethrows
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.GraphicsContext.Storage : Swift.Sendable {
}
extension SwiftUICore.GraphicsContext.BlendMode : SwiftUICore.ProtobufEnum {
}
package class GraphicsContextSymbols {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func symbol<ID>(for id: ID) -> SwiftUICore.GraphicsContext.ResolvedSymbol? where ID : Swift.Hashable
  #else
  package func symbol<ID>(for id: ID) -> SwiftUICore.GraphicsContext.ResolvedSymbol? where ID : Swift.Hashable
  #endif
  @objc deinit
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext {
  @_spi(Private) @available(*, deprecated, renamed: "init(displayList:environment:)")
  public init(rbDisplayList: Swift.AnyObject, environment: SwiftUICore.EnvironmentValues)
  @_spi(Private) @available(*, deprecated, renamed: "drawingState")
  public var rbDrawingState: Swift.UnsafeRawPointer {
    @_spi(Private) mutating get
  }
  @_spi(Private) @available(*, deprecated, renamed: "draw(displayList:)")
  public func draw(rbDisplayList list: Swift.AnyObject)
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public func draw(displayList list: any RenderBox.RBDisplayListContents)
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.BlendMode {
  @_spi(Private) @_alwaysEmitIntoClient public static var linearDodge: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1000)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var linearBurn: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1001)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var linearLight: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1002)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var pinLight: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1003)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var subtract: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1004)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var divide: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1005)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var maximum: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1006)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var darkenSourceOver: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1010)  
    }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var lightenSourceOver: SwiftUICore.GraphicsContext.BlendMode {
    @_spi(Private) get {
        self.init(rawValue: 1011)  
    }
  }
}
extension SwiftUICore.GraphicsContext {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func renderingTo(cgContext ctx: CoreGraphics.CGContext, environment: SwiftUICore.EnvironmentValues = .init(), deviceScale: CoreFoundation.CGFloat? = nil, content: (inout SwiftUICore.GraphicsContext) -> Swift.Void)
  #else
  package static func renderingTo(cgContext ctx: CoreGraphics.CGContext, environment: SwiftUICore.EnvironmentValues = .init(), deviceScale: CoreFoundation.CGFloat? = nil, content: (inout SwiftUICore.GraphicsContext) -> Swift.Void)
  #endif
}
extension SwiftUICore.GraphicsContext {
  package func fill(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.ResolvedShading, style: SwiftUICore.FillStyle = FillStyle())
  package func draw(_ path: SwiftUICore.Path, with shading: SwiftUICore.GraphicsContext.ResolvedShading, style: SwiftUICore.PathDrawingStyle)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(_ image: SwiftUICore.GraphicsImage, in rect: CoreFoundation.CGRect, style: SwiftUICore.FillStyle = FillStyle(), shading: SwiftUICore.GraphicsContext.Shading? = nil)
  #else
  package func draw(_ image: SwiftUICore.GraphicsImage, in rect: CoreFoundation.CGRect, style: SwiftUICore.FillStyle = FillStyle(), shading: SwiftUICore.GraphicsContext.Shading? = nil)
  #endif
  package func draw(_ text: SwiftUICore.ResolvedStyledText, in rect: CoreFoundation.CGRect)
  package func draw(_ text: SwiftUICore.ResolvedStyledText, in rect: CoreFoundation.CGRect, shading: SwiftUICore.GraphicsContext.ResolvedShading)
  package func draw(contentsOf list: any RenderBox.RBDisplayListContents)
}
extension SwiftUICore.GraphicsContext {
  package mutating func addFilter(_ filter: SwiftUICore.GraphicsFilter, in rect: CoreFoundation.CGRect)
  package mutating func addShaderFilter(_ s: SwiftUICore.Shader.ResolvedShader, size: CoreFoundation.CGSize)
  package mutating func addVariableBlurFilter(radius: CoreFoundation.CGFloat, mask: SwiftUICore.GraphicsContext.Shading, flags: RenderBox.RBBlurFlags)
  package mutating func addVariableBlurFilter(radius: CoreFoundation.CGFloat, mask: SwiftUICore.GraphicsContext.ResolvedShading, flags: RenderBox.RBBlurFlags)
}
extension SwiftUICore.GraphicsImage {
  package func withRBImage(image imageBody: (RenderBox.RBImage) -> Swift.Void, color colorBody: (SwiftUICore.Color.Resolved) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum ContentMode : Swift.Hashable, Swift.CaseIterable {
  case fit
  case fill
  public static func == (a: SwiftUICore.ContentMode, b: SwiftUICore.ContentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.ContentMode]
  public static var allCases: [SwiftUICore.ContentMode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AspectRatioLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency public var aspectRatio: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency public var contentMode: SwiftUICore.ContentMode
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(aspectRatio: CoreFoundation.CGFloat? = nil, contentMode: SwiftUICore.ContentMode) {
        self.aspectRatio = aspectRatio
        self.contentMode = contentMode
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(aspectRatio: CoreFoundation.CGFloat? = nil, contentMode: SwiftUICore.ContentMode) {
        self.aspectRatio = aspectRatio
        self.contentMode = contentMode
    }
  #endif
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
extension CoreFoundation.CGSize {
  package func scaleThatFits(_ target: SwiftUICore._ProposedSize) -> CoreFoundation.CGFloat
  package func scaleThatFills(_ target: SwiftUICore._ProposedSize) -> CoreFoundation.CGFloat
  package func scaledToFit(_ target: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  package func scaledToFill(_ target: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  package func centeredIn(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGRect
  package func centeredIn(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
}
extension SwiftUICore.BlendMode {
  package init(_ blendMode: CoreGraphics.CGBlendMode)
}
extension QuartzCore.CAFrameRateRange {
  package init(interval: Swift.Double)
}
extension SwiftUICore.DisplayList : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.DisplayList.Item : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.DisplayList.Content.Value : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.DisplayList.Effect : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct CodableEffectAnimation : SwiftUICore.ProtobufMessage {
  package struct Tag : SwiftUICore.ProtobufTag {
    package let rawValue: Swift.UInt
    package init(rawValue: Swift.UInt)
    package static func == (a: SwiftUICore.CodableEffectAnimation.Tag, b: SwiftUICore.CodableEffectAnimation.Tag) -> Swift.Bool
  }
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.DisplayList.InterpolatorAnimation : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package enum GraphicsFilter {
  case blur(SwiftUICore.BlurStyle)
  case variableBlur(SwiftUICore.VariableBlurStyle)
  case averageColor
  case shadow(SwiftUICore.ResolvedShadowStyle)
  case projection(SwiftUICore.ProjectionTransform)
  case colorMatrix(SwiftUICore._ColorMatrix, premultiplied: Swift.Bool)
  case colorMultiply(SwiftUICore.Color.Resolved)
  case hueRotation(SwiftUICore.Angle)
  case saturation(Swift.Double)
  case brightness(Swift.Double)
  case contrast(Swift.Double)
  case luminanceToAlpha
  case colorInvert
  case grayscale(Swift.Double)
  case colorMonochrome(SwiftUICore.GraphicsFilter.ColorMonochrome)
  case vibrantColorMatrix(SwiftUICore._ColorMatrix)
  case luminanceCurve(SwiftUICore.GraphicsFilter.LuminanceCurve)
  case colorCurves(SwiftUICore.GraphicsFilter.ColorCurves)
  case shader(SwiftUICore.GraphicsFilter.ShaderFilter)
  package struct ColorMonochrome : Swift.Equatable {
    package var color: SwiftUICore.Color.Resolved
    package var amount: Swift.Float
    package var bias: Swift.Float
    package init(color: SwiftUICore.Color.Resolved, amount: Swift.Float, bias: Swift.Float)
    package static func == (a: SwiftUICore.GraphicsFilter.ColorMonochrome, b: SwiftUICore.GraphicsFilter.ColorMonochrome) -> Swift.Bool
  }
  package struct Curve : Swift.Equatable {
    package var values: (Swift.Float, Swift.Float, Swift.Float, Swift.Float)
    package init(_ values: (Swift.Float, Swift.Float, Swift.Float, Swift.Float))
    package static func == (lhs: SwiftUICore.GraphicsFilter.Curve, rhs: SwiftUICore.GraphicsFilter.Curve) -> Swift.Bool
  }
  package struct LuminanceCurve : Swift.Equatable {
    package var curve: SwiftUICore.GraphicsFilter.Curve
    package var amount: Swift.Float
    package init(curve: SwiftUICore.GraphicsFilter.Curve, amount: Swift.Float)
    package static func == (a: SwiftUICore.GraphicsFilter.LuminanceCurve, b: SwiftUICore.GraphicsFilter.LuminanceCurve) -> Swift.Bool
  }
  package struct ColorCurves : Swift.Equatable {
    package var redCurve: SwiftUICore.GraphicsFilter.Curve
    package var greenCurve: SwiftUICore.GraphicsFilter.Curve
    package var blueCurve: SwiftUICore.GraphicsFilter.Curve
    package var opacityCurve: SwiftUICore.GraphicsFilter.Curve
    package init(redCurve: SwiftUICore.GraphicsFilter.Curve, greenCurve: SwiftUICore.GraphicsFilter.Curve, blueCurve: SwiftUICore.GraphicsFilter.Curve, opacityCurve: SwiftUICore.GraphicsFilter.Curve)
    package static func == (a: SwiftUICore.GraphicsFilter.ColorCurves, b: SwiftUICore.GraphicsFilter.ColorCurves) -> Swift.Bool
  }
  package struct ShaderFilter {
    package var shader: SwiftUICore.Shader.ResolvedShader
    package var size: CoreFoundation.CGSize
    package init(shader: SwiftUICore.Shader.ResolvedShader, size: CoreFoundation.CGSize)
  }
}
package enum GraphicsBlendMode : Swift.Equatable {
  case blendMode(SwiftUICore.GraphicsContext.BlendMode)
  case caFilter(Swift.AnyObject)
  package init(_ mode: SwiftUICore.BlendMode)
  package static let normal: SwiftUICore.GraphicsBlendMode
  package static func == (lhs: SwiftUICore.GraphicsBlendMode, rhs: SwiftUICore.GraphicsBlendMode) -> Swift.Bool
}
extension SwiftUICore.GraphicsFilter {
  package var isIdentity: Swift.Bool {
    get
  }
  package func domainOfDefinition(for src: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  package var changesDOD: Swift.Bool {
    get
  }
}
extension SwiftUICore.GraphicsFilter : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.GraphicsFilter.ColorMonochrome : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.GraphicsFilter.LuminanceCurve : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.GraphicsFilter.ColorCurves : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.GraphicsFilter.ShaderFilter : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(accessibilityName color: SwiftUICore.Color)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : Foundation.ReferenceConvertible
  public init<Subject>(_ subject: Subject, formatter: Foundation.Formatter) where Subject : ObjectiveC.NSObject
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public init<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Text {
  public init<F>(_ input: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Foundation.AttributedString
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_ image: SwiftUICore.Image)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ image: SwiftUICore.Image)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct DateStyle : Swift.Sendable {
    public static let time: SwiftUICore.Text.DateStyle
    public static let date: SwiftUICore.Text.DateStyle
    public static let relative: SwiftUICore.Text.DateStyle
    public static let offset: SwiftUICore.Text.DateStyle
    public static let timer: SwiftUICore.Text.DateStyle
    @_spi(Private) public static func relative(unitConfiguration: SwiftUICore.Text.DateStyle.UnitsConfiguration) -> SwiftUICore.Text.DateStyle
    @_spi(Private) public static func timer(units: Foundation.NSCalendar.Unit) -> SwiftUICore.Text.DateStyle
    @_spi(Private) public struct UnitsConfiguration : Swift.Equatable, Swift.Codable, Swift.Sendable {
      @_spi(Private) public enum Style : Swift.Int, Swift.Equatable, Swift.Codable, Swift.Sendable {
        @_spi(Private) case short
        @_spi(Private) case brief
        @_spi(Private) case full
        #if compiler(>=5.3) && $NoncopyableGenerics
        @_spi(Private) public init?(rawValue: Swift.Int)
        #else
        @_spi(Private) public init?(rawValue: Swift.Int)
        #endif
        @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
        public typealias RawValue = Swift.Int
        @_spi(Private) public var rawValue: Swift.Int {
          @_spi(Private) get
        }
      }
      @_spi(Private) @SwiftUICore.CodableRawRepresentable package var units: Foundation.NSCalendar.Unit {
        @_spi(Private) get
        @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
        set
        @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
        _modify
      }
      @_spi(Private) package var style: SwiftUICore.Text.DateStyle.UnitsConfiguration.Style
      @_spi(Private) public init(units: Foundation.NSCalendar.Unit, style: SwiftUICore.Text.DateStyle.UnitsConfiguration.Style)
      @_spi(Private) public static func == (a: SwiftUICore.Text.DateStyle.UnitsConfiguration, b: SwiftUICore.Text.DateStyle.UnitsConfiguration) -> Swift.Bool
      @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
      @_spi(Private) public init(from decoder: any Swift.Decoder) throws
    }
    package var unitConfiguration: SwiftUICore.Text.DateStyle.UnitsConfiguration?
    @_spi(Private) public var units: Foundation.NSCalendar.Unit {
      get
    }
  }
  public init(_ date: Foundation.Date, style: SwiftUICore.Text.DateStyle)
  public init(_ dates: Swift.ClosedRange<Foundation.Date>)
  public init(_ interval: Foundation.DateInterval)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(dateFormat: Swift.String, timeZone: Foundation.TimeZone? = nil)
  #else
  @_spi(Private) public init(dateFormat: Swift.String, timeZone: Foundation.TimeZone? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(dateFormatTemplate: Swift.String, timeZone: Foundation.TimeZone? = nil)
  #else
  @_spi(Private) public init(dateFormatTemplate: Swift.String, timeZone: Foundation.TimeZone? = nil)
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(timerInterval: Swift.ClosedRange<Foundation.Date>, pauseTime: Foundation.Date? = nil, countsDown: Swift.Bool = true, showsHours: Swift.Bool = true)
  #else
  public init(timerInterval: Swift.ClosedRange<Foundation.Date>, pauseTime: Foundation.Date? = nil, countsDown: Swift.Bool = true, showsHours: Swift.Bool = true)
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "init(timerInterval:pauseTime:countsDown:showsHours:)")
  public init(interval: Swift.ClosedRange<Foundation.Date>, pauseAt: Foundation.TimeInterval? = nil, countdown: Swift.Bool = true, units: Foundation.NSCalendar.Unit? = nil)
  #else
  @_spi(Private) @available(*, deprecated, renamed: "init(timerInterval:pauseTime:countsDown:showsHours:)")
  public init(interval: Swift.ClosedRange<Foundation.Date>, pauseAt: Foundation.TimeInterval? = nil, countdown: Swift.Bool = true, units: Foundation.NSCalendar.Unit? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "init(timerInterval:pauseTime:countsDown:showsHours:)")
  public init(interval: Foundation.DateInterval, pauseAt: Foundation.TimeInterval? = nil, countdown: Swift.Bool = true, units: Foundation.NSCalendar.Unit? = nil)
  #else
  @_spi(Private) @available(*, deprecated, renamed: "init(timerInterval:pauseTime:countsDown:showsHours:)")
  public init(interval: Foundation.DateInterval, pauseAt: Foundation.TimeInterval? = nil, countdown: Swift.Bool = true, units: Foundation.NSCalendar.Unit? = nil)
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ date: Foundation.Date, style: SwiftUICore.Text.DateStyle)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ dates: Swift.ClosedRange<Foundation.Date>)
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(_ interval: Foundation.DateInterval)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "appendInterpolation(timerInterval:pauseTime:countsDown:showsHours:)")
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(interval: Swift.ClosedRange<Foundation.Date>, pauseAt: Foundation.TimeInterval?, countdown: Swift.Bool = false, units: Foundation.NSCalendar.Unit? = nil)
  #else
  @_spi(Private) @available(*, deprecated, renamed: "appendInterpolation(timerInterval:pauseTime:countsDown:showsHours:)")
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(interval: Swift.ClosedRange<Foundation.Date>, pauseAt: Foundation.TimeInterval?, countdown: Swift.Bool = false, units: Foundation.NSCalendar.Unit? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "appendInterpolation(timerInterval:pauseTime:countsDown:showsHours:)")
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(interval: Foundation.DateInterval, pauseAt: Foundation.TimeInterval?, countdown: Swift.Bool = false, units: Foundation.NSCalendar.Unit? = nil)
  #else
  @_spi(Private) @available(*, deprecated, renamed: "appendInterpolation(timerInterval:pauseTime:countsDown:showsHours:)")
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(interval: Foundation.DateInterval, pauseAt: Foundation.TimeInterval?, countdown: Swift.Bool = false, units: Foundation.NSCalendar.Unit? = nil)
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(timerInterval: Swift.ClosedRange<Foundation.Date>, pauseTime: Foundation.Date? = nil, countsDown: Swift.Bool = true, showsHours: Swift.Bool = true)
  #else
  @_semantics("swiftui.localized.appendInterpolation_@_specifier") public mutating func appendInterpolation(timerInterval: Swift.ClosedRange<Foundation.Date>, pauseTime: Foundation.Date? = nil, countsDown: Swift.Bool = true, showsHours: Swift.Bool = true)
  #endif
}
extension SwiftUICore.Text {
  package init(progressInterval: Swift.ClosedRange<Foundation.Date>, countsDown: Swift.Bool = false)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func referenceDate(_ date: Foundation.Date?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func referenceDate(_ date: Foundation.Date?) -> some SwiftUICore.View
  
  #endif
}
package struct ReferenceDateInput : SwiftUICore.ViewInput {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var defaultValue: AttributeGraph.WeakAttribute<Foundation.Date?> {
    get
  }
  #else
  package static var defaultValue: AttributeGraph.WeakAttribute<Foundation.Date?> {
    get
  }
  #endif
  package typealias Value = AttributeGraph.WeakAttribute<Foundation.Date?>
}
@_Concurrency.MainActor @preconcurrency package struct ReferenceDateModifier : SwiftUICore.PrimitiveViewModifier, SwiftUICore.ViewInputsModifier {
  @_Concurrency.MainActor @preconcurrency package var date: Foundation.Date?
  nonisolated package static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore.ReferenceDateModifier>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Text.DateStyle : Swift.Equatable {
  public static func == (a: SwiftUICore.Text.DateStyle, b: SwiftUICore.Text.DateStyle) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.DateStyle : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public static let red: SwiftUICore.Color
  public static let orange: SwiftUICore.Color
  public static let yellow: SwiftUICore.Color
  public static let green: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let mint: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let teal: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let cyan: SwiftUICore.Color
  public static let blue: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let indigo: SwiftUICore.Color
  public static let purple: SwiftUICore.Color
  public static let pink: SwiftUICore.Color
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let brown: SwiftUICore.Color
  public static let white: SwiftUICore.Color
  public static let gray: SwiftUICore.Color
  public static let black: SwiftUICore.Color
  public static let clear: SwiftUICore.Color
  public static let primary: SwiftUICore.Color
  public static let secondary: SwiftUICore.Color
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.Color {
  @_alwaysEmitIntoClient public static var red: SwiftUICore.Color {
    get { .red }
  }
  @_alwaysEmitIntoClient public static var orange: SwiftUICore.Color {
    get { .orange }
  }
  @_alwaysEmitIntoClient public static var yellow: SwiftUICore.Color {
    get { .yellow }
  }
  @_alwaysEmitIntoClient public static var green: SwiftUICore.Color {
    get { .green }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var mint: SwiftUICore.Color {
    get { .mint }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var teal: SwiftUICore.Color {
    get { .teal }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var cyan: SwiftUICore.Color {
    get { .cyan }
  }
  @_alwaysEmitIntoClient public static var blue: SwiftUICore.Color {
    get { .blue }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var indigo: SwiftUICore.Color {
    get { .indigo }
  }
  @_alwaysEmitIntoClient public static var purple: SwiftUICore.Color {
    get { .purple }
  }
  @_alwaysEmitIntoClient public static var pink: SwiftUICore.Color {
    get { .pink }
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public static var brown: SwiftUICore.Color {
    get { .brown }
  }
  @_alwaysEmitIntoClient public static var white: SwiftUICore.Color {
    get { .white }
  }
  @_alwaysEmitIntoClient public static var gray: SwiftUICore.Color {
    get { .gray }
  }
  @_alwaysEmitIntoClient public static var black: SwiftUICore.Color {
    get { .black }
  }
  @_alwaysEmitIntoClient public static var clear: SwiftUICore.Color {
    get { .clear }
  }
}
extension SwiftUICore.Color {
  package static let primarySystemFill: SwiftUICore.Color
  package static let secondarySystemFill: SwiftUICore.Color
  package static let tertiarySystemFill: SwiftUICore.Color
  package static let quaternarySystemFill: SwiftUICore.Color
}
extension SwiftUICore.Color {
  package static let tertiary: SwiftUICore.Color
  package static let quaternary: SwiftUICore.Color
  @available(iOS 16.0, macCatalyst 15.0, macOS 12.0, tvOS 17.0, watchOS 10.0, *)
  package static let quinary: SwiftUICore.Color
}
package enum SystemColorType : SwiftUICore.ColorProvider {
  case red
  case orange
  case yellow
  case green
  case teal
  case mint
  case cyan
  case blue
  case indigo
  case purple
  case pink
  case brown
  case gray
  case primary
  case secondary
  case tertiary
  case quaternary
  @available(macCatalyst 15.0, iOS 16.0, tvOS 17.0, watchOS 10.0, *)
  case quinary
  case primaryFill, secondaryFill, tertiaryFill, quaternaryFill
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  package func apply(color: SwiftUICore.Color, to shape: inout SwiftUICore._ShapeStyle_Shape)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var kitColor: Swift.AnyObject? {
    get
  }
  #else
  package var kitColor: Swift.AnyObject? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.SystemColorType, b: SwiftUICore.SystemColorType) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package protocol SystemColorDefinition {
  static func value(for type: SwiftUICore.SystemColorType, environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  static func opacity(at level: Swift.Int, environment: SwiftUICore.EnvironmentValues) -> Swift.Float
}
extension SwiftUICore.SystemColorDefinition {
  package static func systemRGB(_ r: Swift.Float, _ g: Swift.Float, _ b: Swift.Float, _ a: Swift.Float = 100) -> SwiftUICore.Color.Resolved
  package static func opacity(at level: Swift.Int, environment: SwiftUICore.EnvironmentValues) -> Swift.Float
}
package struct SystemColorsStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  package init()
  package func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  package typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_disfavoredOverload public init(_ attributedContent: Foundation.AttributedString)
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public var swiftUI: Foundation.AttributeScopes.SwiftUIAttributes.Type {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public struct SwiftUIAttributes : Foundation.AttributeScope {
    public let font: Foundation.AttributeScopes.SwiftUIAttributes.FontAttribute
    public let foregroundColor: Foundation.AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute
    public let backgroundColor: Foundation.AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute
    @_spi(_) @available(*, deprecated, message: "Use strikethroughStyle attribute")
    public let strikethroughColor: Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute
    public let strikethroughStyle: Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute
    public let underlineStyle: Foundation.AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute
    @_spi(_) @available(*, deprecated, message: "Use underlineStyle attribute")
    public let underlineColor: Foundation.AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute
    @_spi(Private) @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
    public let encapsulation: Foundation.AttributeScopes.SwiftUIAttributes.EncapsulationAttribute
    public let kern: Foundation.AttributeScopes.SwiftUIAttributes.KerningAttribute
    public let tracking: Foundation.AttributeScopes.SwiftUIAttributes.TrackingAttribute
    public let baselineOffset: Foundation.AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute
    @_spi(Private) @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
    public let glyphInfo: Foundation.AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public let textScale: Foundation.AttributeScopes.SwiftUIAttributes.TextScaleAttribute
    package let superscript: Foundation.AttributeScopes.SwiftUIAttributes.SuperscriptAttribute
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public let customAttributes: Foundation.AttributeScopes.SwiftUIAttributes.CustomContainerAttribute
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
    public let emojiTextAttachment: Foundation.AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute
    public let accessibility: Foundation.AttributeScopes.AccessibilityAttributes
    public let foundation: Foundation.AttributeScopes.FoundationAttributes
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias DecodingConfiguration = Foundation.AttributeScopeCodableConfiguration
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias EncodingConfiguration = Foundation.AttributeScopeCodableConfiguration
  }
}
@available(*, unavailable)
extension Foundation.AttributeScopes.SwiftUIAttributes : Swift.Sendable {
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum FontAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Font
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum ForegroundColorAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Color
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum BackgroundColorAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Color
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum StrikethroughStyleAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Text.LineStyle
    public static let name: Swift.String
  }
  @_spi(_) @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @available(*, deprecated, message: "Use StrikethroughStyleAttribute")
  @frozen public enum StrikethroughColorAttribute : Foundation.AttributedStringKey {
    @_spi(_) public typealias Value = SwiftUICore.Color
    @_spi(_) public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum UnderlineStyleAttribute : Foundation.AttributedStringKey {
    public typealias Value = SwiftUICore.Text.LineStyle
    public static let name: Swift.String
  }
  @_spi(_) @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @available(*, deprecated, message: "Use UnderlineStyleAttribute")
  @frozen public enum UnderlineColorAttribute : Foundation.AttributedStringKey {
    @_spi(_) public typealias Value = SwiftUICore.Color
    @_spi(_) public static let name: Swift.String
  }
  @_spi(Private) @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @frozen public enum EncapsulationAttribute : Foundation.AttributedStringKey {
    @_spi(Private) public typealias Value = SwiftUICore.Text.Encapsulation
    @_spi(Private) public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum KerningAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreFoundation.CGFloat
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum TrackingAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreFoundation.CGFloat
    public static let name: Swift.String
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @frozen public enum BaselineOffsetAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = CoreFoundation.CGFloat
    public static let name: Swift.String
  }
  @_spi(Private) @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  public enum GlyphInfoAttribute : Foundation.AttributedStringKey {
    @_spi(Private) public typealias Value = CoreText.CTGlyphInfo
    @_spi(Private) public static let name: Swift.String
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @frozen public enum TextScaleAttribute : Foundation.AttributedStringKey {
    @_spi(Private) public typealias Value = SwiftUICore.Text.Scale
    @_spi(Private) public static let name: Swift.String
  }
  package enum SuperscriptAttribute : Foundation.AttributedStringKey {
    package typealias Value = SwiftUICore.Text.Superscript
    package static let name: Swift.String
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @frozen public enum CustomContainerAttribute : Foundation.AttributedStringKey {
    @_spi(Private) public typealias Value = SwiftUICore.Text.CustomAttributes
    @_spi(Private) public static let name: Swift.String
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
  public enum EmojiTextAttachmentAttribute : Foundation.AttributedStringKey, @unchecked Swift.Sendable {
    @_spi(Private) public static let name: Swift.String
    @_spi(Private) public typealias Value = UIFoundation_Private.NSEmojiImageTextAttachment
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public static var runBoundaries: Foundation.AttributedString.AttributeRunBoundaries? {
      @_spi(Private) get
    }
    #else
    @_spi(Private) public static var runBoundaries: Foundation.AttributedString.AttributeRunBoundaries? {
      @_spi(Private) get
    }
    #endif
  }
}
@_spi(Private) @available(*, unavailable)
extension Foundation.AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute : Swift.Sendable {
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeDynamicLookup {
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<Foundation.AttributeScopes.SwiftUIAttributes, T>) -> T where T : Foundation.AttributedStringKey {
    get
  }
}
package typealias NSAttributedStringAttributes = [Foundation.NSAttributedString.Key : Any]
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension Foundation.AttributedString {
  @_spi(Private) public func nsAttributedString(in environment: SwiftUICore.EnvironmentValues = .init()) -> Foundation.NSAttributedString
}
package protocol DynamicContainerItem {
  var count: Swift.Int { get }
  var needsTransitions: Swift.Bool { get }
  var zIndex: Swift.Double { get }
  func matchesIdentity(of other: Self) -> Swift.Bool
  static var supportsReuse: Swift.Bool { get }
  func canBeReused(by other: Self) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? { get }
  #else
  var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var viewID: SwiftUICore._ViewList_ID? { get }
  #else
  var viewID: SwiftUICore._ViewList_ID? { get }
  #endif
}
extension SwiftUICore.DynamicContainerItem {
  package var needsTransitions: Swift.Bool {
    get
  }
  package var zIndex: Swift.Double {
    get
  }
  package static var supportsReuse: Swift.Bool {
    get
  }
  package func canBeReused(by other: Self) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? {
    get
  }
  #else
  package var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var viewID: SwiftUICore._ViewList_ID? {
    get
  }
  #else
  package var viewID: SwiftUICore._ViewList_ID? {
    get
  }
  #endif
}
package struct DynamicContainerID : Swift.Hashable, Swift.Comparable {
  package var uniqueId: Swift.UInt32
  package var viewIndex: Swift.Int32
  package init(uniqueId: Swift.UInt32, viewIndex: Swift.Int32)
  package static func < (lhs: SwiftUICore.DynamicContainerID, rhs: SwiftUICore.DynamicContainerID) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.DynamicContainerID, b: SwiftUICore.DynamicContainerID) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package struct DynamicContainer {
  package struct Info : Swift.Equatable {
    package var items: [SwiftUICore.DynamicContainer.ItemInfo] {
      get
    }
    package var indexMap: [Swift.UInt32 : Swift.Int] {
      get
    }
    package static func == (lhs: SwiftUICore.DynamicContainer.Info, rhs: SwiftUICore.DynamicContainer.Info) -> Swift.Bool
  }
  package class ItemInfo {
    final package let uniqueId: Swift.UInt32
    final package var phase: SwiftUICore.TransitionPhase? {
      get
    }
    final package func `for`<A>(_ type: A.Type) -> SwiftUICore.DynamicContainer._ItemInfo<A> where A : SwiftUICore.DynamicContainerAdaptor
    package init(subgraph: AttributeGraph.Subgraph, uniqueId: Swift.UInt32, viewCount: Swift.Int32, phase: SwiftUICore.TransitionPhase, needsTransitions: Swift.Bool, outputs: SwiftUICore._ViewOutputs)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? {
      get
    }
    #else
    package var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package var id: SwiftUICore._ViewList_ID? {
      get
    }
    #else
    package var id: SwiftUICore._ViewList_ID? {
      get
    }
    #endif
    @objc deinit
  }
  final package class _ItemInfo<Adaptor> : SwiftUICore.DynamicContainer.ItemInfo where Adaptor : SwiftUICore.DynamicContainerAdaptor {
    final package var item: Adaptor.Item {
      get
    }
    final package let itemLayout: Adaptor.ItemLayout
    #if compiler(>=5.3) && $NoncopyableGenerics
    final package var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? {
      get
    }
    #else
    final package var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    final package var id: SwiftUICore._ViewList_ID? {
      get
    }
    #else
    final package var id: SwiftUICore._ViewList_ID? {
      get
    }
    #endif
    @objc deinit
  }
  package static func makeContainer<Adaptor>(adaptor: Adaptor, inputs: SwiftUICore._ViewInputs) -> (AttributeGraph.Attribute<SwiftUICore.DynamicContainer.Info>, SwiftUICore._ViewOutputs) where Adaptor : SwiftUICore.DynamicContainerAdaptor
}
@available(iOS 17.0, macOS 10.15, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.SeparatorShapeStyle {
  @_alwaysEmitIntoClient public static var separator: SwiftUICore.SeparatorShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 10.15, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SeparatorShapeStyle : SwiftUICore.ShapeStyle {
  public init()
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.SeparatorShapeStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 17.0, macOS 12.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SeparatorShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
extension SwiftUICore.EnvironmentValues {
  package var defaultSeparatorShapeStyle: SwiftUICore.HierarchicalShapeStyle {
    get
    set
  }
}
extension SwiftUICore.UnaryLayout where Self.PlacementContextType == SwiftUICore._PositionAwarePlacementContext {
  package static func makeViewImpl(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
extension SwiftUICore.UnaryLayout where Self.PlacementContextType == SwiftUICore.PlacementContext {
  package static func makeViewImpl(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
package struct LayoutPositionQuery : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  package init(parentPosition: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, localPosition: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>)
  package var value: SwiftUICore.ViewOrigin {
    get
  }
  package typealias Value = SwiftUICore.ViewOrigin
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct GeometryReader<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var content: (SwiftUICore.GeometryProxy) -> Content
  @inlinable nonisolated public init(@SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.GeometryProxy) -> Content) {
        self.content = content
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.GeometryReader<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.GeometryReader : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct GeometryProxy {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(owner: AttributeGraph.AnyAttribute, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.Attribute<SwiftUICore.SafeAreaInsets>?, seed: Swift.UInt32)
  #else
  package init(owner: AttributeGraph.AnyAttribute, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.Attribute<SwiftUICore.SafeAreaInsets>?, seed: Swift.UInt32)
  #endif
  package var context: AttributeGraph.AnyRuleContext {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var placementContext: SwiftUICore._PositionAwarePlacementContext? {
    get
  }
  #else
  package var placementContext: SwiftUICore._PositionAwarePlacementContext? {
    get
  }
  #endif
  public subscript<T>(anchor: SwiftUICore.Anchor<T>) -> T {
    get
  }
  public var safeAreaInsets: SwiftUICore.EdgeInsets {
    get
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload public func frame(in coordinateSpace: SwiftUICore.CoordinateSpace) -> CoreFoundation.CGRect
  @_spi(Private) public func frameClippedToScrollViews(in space: SwiftUICore.CoordinateSpace) -> (frame: CoreFoundation.CGRect, exact: Swift.Bool)
  package func rect(_ r: CoreFoundation.CGRect, in coordinateSpace: SwiftUICore.CoordinateSpace) -> CoreFoundation.CGRect
  package var transform: SwiftUICore.ViewTransform {
    get
  }
  package var environment: SwiftUICore.EnvironmentValues {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var current: SwiftUICore.GeometryProxy? {
    get
  }
  #else
  package static var current: SwiftUICore.GeometryProxy? {
    get
  }
  #endif
  package func asCurrent<Result>(do body: () throws -> Result) rethrows -> Result
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GeometryProxy {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func bounds(of coordinateSpace: SwiftUICore.NamedCoordinateSpace) -> CoreFoundation.CGRect?
  #else
  public func bounds(of coordinateSpace: SwiftUICore.NamedCoordinateSpace) -> CoreFoundation.CGRect?
  #endif
  public func frame(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGRect
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.GeometryProxy {
  package func convert(globalPoint: CoreFoundation.CGPoint, to coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint
}
@available(*, unavailable)
extension SwiftUICore.GeometryProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  public var isContinuous: Swift.Bool {
    get
    set
  }
  package var fromScrollView: Swift.Bool {
    get
    set
  }
}
package protocol DynamicContainerAdaptor {
  associatedtype Item : SwiftUICore.DynamicContainerItem
  associatedtype Items
  static var maxUnusedItems: Swift.Int { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  mutating func updatedItems() -> Self.Items?
  #else
  mutating func updatedItems() -> Self.Items?
  #endif
  func foreachItem(items: Self.Items, _ body: (Self.Item) -> Swift.Void)
  static func containsItem(_ items: Self.Items, _ item: Self.Item) -> Swift.Bool
  associatedtype ItemLayout
  func makeItemLayout(item: Self.Item, uniqueId: Swift.UInt32, inputs: SwiftUICore._ViewInputs, containerInfo: AttributeGraph.Attribute<SwiftUICore.DynamicContainer.Info>, containerInputs: (inout SwiftUICore._ViewInputs) -> Swift.Void) -> (SwiftUICore._ViewOutputs, Self.ItemLayout)
  func removeItemLayout(uniqueId: Swift.UInt32, itemLayout: Self.ItemLayout)
}
extension SwiftUICore.DynamicContainerAdaptor where Self.Item == Self.Items {
  @inline(__always) package func foreachItem(items: Self.Items, _ body: (Self.Item) -> Swift.Void)
  @inline(__always) package static func containsItem(_ items: Self.Items, _ item: Self.Item) -> Swift.Bool
}
extension SwiftUICore.DynamicContainerAdaptor where Self.Item == Self.Items.Element, Self.Items : Swift.Collection {
  @inline(__always) package func foreachItem(items: Self.Items, _ body: (Self.Item) -> Swift.Void)
  @inline(__always) package static func containsItem(_ items: Self.Items, _ item: Self.Item) -> Swift.Bool
}
extension SwiftUICore.DynamicContainerAdaptor {
  package static var maxUnusedItems: Swift.Int {
    get
  }
}
package protocol UnaryLayout : SwiftUICore.Animatable, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  associatedtype PlacementContextType = SwiftUICore.PlacementContext
  func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  func placement(of child: SwiftUICore.LayoutProxy, in context: Self.PlacementContextType) -> SwiftUICore._Placement
  func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  func layoutPriority(child: SwiftUICore.LayoutProxy) -> Swift.Double
  func ignoresAutomaticPadding(child: SwiftUICore.LayoutProxy) -> Swift.Bool
  static func makeViewImpl(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnaryLayout {
  package func layoutPriority(child: SwiftUICore.LayoutProxy) -> Swift.Double
  package func ignoresAutomaticPadding(child: SwiftUICore.LayoutProxy) -> Swift.Bool
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
}
package protocol DerivedLayout : SwiftUICore.Layout {
  associatedtype Base : SwiftUICore.Layout where Self.Cache == Self.Base.Cache
  var base: Self.Base { get }
}
extension SwiftUICore.DerivedLayout {
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func makeCache(subviews: Self.Subviews) -> Self.Base.Cache
  public func updateCache(_ cache: inout Self.Base.Cache, subviews: Self.Subviews)
  public func spacing(subviews: Self.Subviews, cache: inout Self.Base.Cache) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Base.Cache) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Base.Cache)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Base.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Base.Cache) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Base.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Base.Cache) -> CoreFoundation.CGFloat?
  #endif
}
extension SwiftUICore.Layout {
  package static func makeStaticView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, properties: SwiftUICore.LayoutProperties, list: any SwiftUICore._ViewList_Elements) -> SwiftUICore._ViewOutputs
}
package struct LayoutChildGeometries : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  package init(parentSize: AttributeGraph.Attribute<SwiftUICore.ViewSize>, parentPosition: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, layoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>)
  package var value: [SwiftUICore.ViewGeometry] {
    get
  }
  package typealias Value = [SwiftUICore.ViewGeometry]
}
extension AttributeGraph.StatefulRule where Self.Value == SwiftUICore.LayoutComputer {
  package mutating func updateLayoutComputer<L>(layout: L, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, attributes: [SwiftUICore.LayoutProxyAttributes]) where L : SwiftUICore.Layout
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func overlayPreferenceValue<K, V>(_ key: K.Type, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        return modifier(_OverlayPreferenceModifier<K, V>(
            alignment: alignment, transform: transform))
    }
  
  @inlinable nonisolated public func backgroundPreferenceValue<K, V>(_ key: K.Type, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        return modifier(_BackgroundPreferenceModifier<K, V>(
            alignment: alignment, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func overlayPreferenceValue<K, V>(_v0: Swift.Void = (), _ key: K.Type, alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        K._delay { self.overlay($0._force(transform), alignment: alignment) }
    }
  
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func backgroundPreferenceValue<K, V>(_v0: Swift.Void = (), _ key: K.Type, alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder _ transform: @escaping (K.Value) -> V) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, V : SwiftUICore.View {
        K._delay { self.background($0._force(transform), alignment: alignment) }
    }
  
  @inlinable @_disfavoredOverload nonisolated public func overlayPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUICore.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUICore.View where Key : SwiftUICore.PreferenceKey, T : SwiftUICore.View {
        return Key._delay { self.overlay($0._force(transform)) }
    }
  
  @inlinable @_disfavoredOverload nonisolated public func backgroundPreferenceValue<Key, T>(_ key: Key.Type = Key.self, @SwiftUICore.ViewBuilder _ transform: @escaping (Key.Value) -> T) -> some SwiftUICore.View where Key : SwiftUICore.PreferenceKey, T : SwiftUICore.View {
        return Key._delay { self.background($0._force(transform)) }
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _OverlayPreferenceModifier<Key, Overlay> : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey, Overlay : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var transform: (Key.Value) -> Overlay
  @_Concurrency.MainActor @preconcurrency public var alignment: SwiftUICore.Alignment
  @inlinable @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder transform: @escaping (Key.Value) -> Overlay) {
        self.transform = transform
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._OverlayPreferenceModifier<Key, Overlay>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._OverlayPreferenceModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundPreferenceModifier<Key, Overlay> : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey, Overlay : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var transform: (Key.Value) -> Overlay
  @_Concurrency.MainActor @preconcurrency public var alignment: SwiftUICore.Alignment
  @inlinable @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment, @SwiftUICore.ViewBuilder transform: @escaping (Key.Value) -> Overlay) {
        self.transform = transform
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundPreferenceModifier<Key, Overlay>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackgroundPreferenceModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyLayout : SwiftUICore.Layout {
  internal var storage: SwiftUICore.AnyLayoutBox
  public init<L>(_ layout: L) where L : SwiftUICore.Layout
  public struct Cache {
  }
  public typealias AnimatableData = SwiftUICore._AnyAnimatableData
  public func makeCache(subviews: SwiftUICore.AnyLayout.Subviews) -> SwiftUICore.AnyLayout.Cache
  public func updateCache(_ cache: inout SwiftUICore.AnyLayout.Cache, subviews: SwiftUICore.AnyLayout.Subviews)
  public func spacing(subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUICore.AnyLayout.Subviews, cache: inout SwiftUICore.AnyLayout.Cache) -> CoreFoundation.CGFloat?
  #endif
  public var animatableData: SwiftUICore.AnyLayout.AnimatableData {
    get
    set
  }
}
@available(*, unavailable)
extension SwiftUICore.AnyLayout.Cache : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.AnyLayout : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@usableFromInline
internal class AnyLayoutBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyLayoutBox : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "AnyLayout")
public typealias AnyViewLayout = SwiftUICore.AnyLayout
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func logicallyComplete(after duration: Foundation.TimeInterval) -> SwiftUICore.Animation
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func zIndex(_ value: Swift.Double) -> some SwiftUICore.View {
        return _trait(ZIndexTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
package struct ZIndexTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Double
}
@available(*, unavailable)
extension SwiftUICore.ZIndexTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var zIndex: Swift.Double {
    get
    set
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Layout : SwiftUICore.Animatable {
  static var layoutProperties: SwiftUICore.LayoutProperties { get }
  associatedtype Cache = Swift.Void
  typealias Subviews = SwiftUICore.LayoutSubviews
  func makeCache(subviews: Self.Subviews) -> Self.Cache
  func updateCache(_ cache: inout Self.Cache, subviews: Self.Subviews)
  func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> SwiftUICore.ViewSpacing
  func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGSize
  func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #else
  func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #else
  func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #endif
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static func _makeLayoutView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Layout {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func _makeLayoutView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Layout {
  package static func makeLayoutView(root: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Layout {
  package func updateLayoutComputer<R>(rule: inout R, layoutContext ctx: SwiftUICore.SizeAndSpacingContext, children: SwiftUICore.LayoutProxyCollection) where R : AttributeGraph.StatefulRule, R.Value == SwiftUICore.LayoutComputer
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func updateCache(_ cache: inout Self.Cache, subviews: Self.Subviews)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CoreFoundation.CGFloat?
  #endif
  public func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> SwiftUICore.ViewSpacing
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Layout where Self.Cache == () {
  public func makeCache(subviews: Self.Subviews) -> Self.Cache
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LayoutProperties : Swift.Sendable {
  public init()
  public var stackOrientation: SwiftUICore.Axis?
  package var isDefaultEmptyLayout: Swift.Bool
  package var isIdentityUnaryLayout: Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ProposedViewSize : Swift.Equatable {
  public var width: CoreFoundation.CGFloat?
  public var height: CoreFoundation.CGFloat?
  public static let zero: SwiftUICore.ProposedViewSize
  public static let unspecified: SwiftUICore.ProposedViewSize
  public static let infinity: SwiftUICore.ProposedViewSize
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?) {
        (self.width, self.height) = (width, height)
    }
  #else
  @inlinable public init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?) {
        (self.width, self.height) = (width, height)
    }
  #endif
  package init(_ proposal: SwiftUICore._ProposedSize)
  @inlinable public init(_ size: CoreFoundation.CGSize) {
        self.init(width: size.width, height: size.height)
    }
  @inlinable public func replacingUnspecifiedDimensions(by size: CoreFoundation.CGSize = CGSize(width: 10, height: 10)) -> CoreFoundation.CGSize {
        return CGSize(width: width ?? size.width,
            height: height ?? size.height)
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ major: CoreFoundation.CGFloat?, in axis: SwiftUICore.Axis, by minor: CoreFoundation.CGFloat?)
  #else
  package init(_ major: CoreFoundation.CGFloat?, in axis: SwiftUICore.Axis, by minor: CoreFoundation.CGFloat?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  package subscript(axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
  public static func == (a: SwiftUICore.ProposedViewSize, b: SwiftUICore.ProposedViewSize) -> Swift.Bool
}
extension SwiftUICore._ProposedSize {
  package init(_ p: SwiftUICore.ProposedViewSize)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ViewSpacing : Swift.Sendable {
  package var spacing: SwiftUICore.Spacing
  package init(_ spacing: SwiftUICore.Spacing)
  package init(_ spacing: SwiftUICore.Spacing, layoutDirection: SwiftUICore.LayoutDirection)
  public static let zero: SwiftUICore.ViewSpacing
  public init()
  public mutating func formUnion(_ other: SwiftUICore.ViewSpacing, edges: SwiftUICore.Edge.Set = .all)
  public func union(_ other: SwiftUICore.ViewSpacing, edges: SwiftUICore.Edge.Set = .all) -> SwiftUICore.ViewSpacing
  public func distance(to next: SwiftUICore.ViewSpacing, along axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.ViewSpacing : Swift.CustomStringConvertible {
  @_spi(ForSwiftUIOnly) public var description: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LayoutSubviews : Swift.Equatable, Swift.RandomAccessCollection, Swift.Sendable {
  public typealias SubSequence = SwiftUICore.LayoutSubviews
  public typealias Element = SwiftUICore.LayoutSubview
  public typealias Index = Swift.Int
  public var layoutDirection: SwiftUICore.LayoutDirection
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUICore.LayoutSubviews.Element {
    get
  }
  public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.LayoutSubviews {
    get
  }
  public subscript<S>(indices: S) -> SwiftUICore.LayoutSubviews where S : Swift.Sequence, S.Element == Swift.Int {
    get
  }
  public static func == (lhs: SwiftUICore.LayoutSubviews, rhs: SwiftUICore.LayoutSubviews) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Indices = Swift.Range<SwiftUICore.LayoutSubviews.Index>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.LayoutSubviews>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LayoutSubview : Swift.Equatable {
  package let proxy: SwiftUICore.LayoutProxy
  public func _trait<K>(key: K.Type) -> K.Value where K : SwiftUICore._ViewTraitKey
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.LayoutValueKey {
    get
  }
  public var priority: Swift.Double {
    get
  }
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  package func lengthThatFits(_ proposal: SwiftUICore.ProposedViewSize, in axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat
  public func dimensions(in proposal: SwiftUICore.ProposedViewSize) -> SwiftUICore.ViewDimensions
  public var spacing: SwiftUICore.ViewSpacing {
    get
  }
  public func place(at position: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .topLeading, proposal: SwiftUICore.ProposedViewSize)
  package func place(at position: CoreFoundation.CGPoint, anchor: SwiftUICore.UnitPoint = .topLeading, dimensions: SwiftUICore.ViewDimensions)
  package func place(in geometry: SwiftUICore.ViewGeometry, layoutDirection: SwiftUICore.LayoutDirection = .leftToRight)
  public static func == (a: SwiftUICore.LayoutSubview, b: SwiftUICore.LayoutSubview) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.LayoutSubview : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol LayoutValueKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func layoutValue<K>(key: K.Type, value: K.Value) -> some SwiftUICore.View where K : SwiftUICore.LayoutValueKey {
        return _trait(_LayoutTrait<K>.self, value)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _LayoutTrait<K> : SwiftUICore._ViewTraitKey where K : SwiftUICore.LayoutValueKey {
  public static var defaultValue: K.Value {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Value = K.Value
}
@available(*, unavailable)
extension SwiftUICore._LayoutTrait : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Layout {
  @_alwaysEmitIntoClient @_disfavoredOverload public func callAsFunction<V>(@SwiftUICore.ViewBuilder _ content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        return _VariadicView.Tree(_LayoutRoot(self)) { content() }
    }
  
  @_spi(_) @available(*, deprecated, message: "replaced by implicit function call")
  @_alwaysEmitIntoClient public func content<V>(@SwiftUICore.ViewBuilder _ content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        return callAsFunction(content)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _LayoutRoot<L> : SwiftUICore._VariadicView.UnaryViewRoot where L : SwiftUICore.Layout {
  @usableFromInline
  internal var layout: L
  @inlinable package init(_ layout: L) { self.layout = layout }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUICore._LayoutRoot<L>>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._LayoutRoot : Swift.Sendable {
}
package struct AnyLayoutProperties : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var value: SwiftUICore.Axis? {
    get
  }
  #else
  package var value: SwiftUICore.Axis? {
    get
  }
  #endif
  package init(layout: AttributeGraph.Attribute<SwiftUICore.AnyLayout>)
  package typealias Value = SwiftUICore.Axis?
}
package struct ViewSizeCache {
  package init(cache: SwiftUICore.Cache3<SwiftUICore.ProposedViewSize, CoreFoundation.CGSize> = .init())
  @inline(__always) package mutating func get(_ k: SwiftUICore._ProposedSize, makeValue: () -> CoreFoundation.CGSize) -> CoreFoundation.CGSize
}
extension SwiftUICore._GraphInputs {
  package var needsDynamicLayout: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var needsDynamicLayout: Swift.Bool {
    get
    set
  }
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "Layout")
public typealias ViewLayout = SwiftUICore.Layout
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "LayoutSubview")
public typealias ViewLayoutSubview = SwiftUICore.LayoutSubview
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "LayoutSubviews")
public typealias ViewLayoutSubviews = SwiftUICore.LayoutSubviews
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "LayoutProperties")
public typealias ViewLayoutProperties = SwiftUICore.LayoutProperties
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "LayoutValueKey")
public typealias ViewLayoutKey = SwiftUICore.LayoutValueKey
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "_LayoutRoot")
public typealias _ViewLayoutRoot<L> = SwiftUICore._LayoutRoot<L> where L : SwiftUICore.Layout
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _IdentifiedViewProxy {
  public var identifier: Swift.AnyHashable
  package var size: CoreFoundation.CGSize
  package var position: CoreFoundation.CGPoint
  package var transform: SwiftUICore.ViewTransform
  package var adjustment: ((inout CoreFoundation.CGRect) -> Swift.Void)?
  package var accessibilityNodeStorage: Any?
  package var platform: SwiftUICore._IdentifiedViewProxy.Platform
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(identifier: Swift.AnyHashable, size: CoreFoundation.CGSize, position: CoreFoundation.CGPoint, transform: SwiftUICore.ViewTransform, accessibilityNode: Any?, platform: SwiftUICore._IdentifiedViewProxy.Platform)
  #else
  package init(identifier: Swift.AnyHashable, size: CoreFoundation.CGSize, position: CoreFoundation.CGPoint, transform: SwiftUICore.ViewTransform, accessibilityNode: Any?, platform: SwiftUICore._IdentifiedViewProxy.Platform)
  #endif
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._IdentifiedViewProxy : Swift.Sendable {
}
package struct IdentifiedViewPlatformInputs {
  package init(inputs: SwiftUICore._ViewInputs, outputs: SwiftUICore._ViewOutputs)
}
extension SwiftUICore._IdentifiedViewProxy {
  package struct Platform {
    package init(_ inputs: SwiftUICore.IdentifiedViewPlatformInputs)
  }
}
package protocol IdentifierProvider {
  func matchesIdentifier<I>(_ identifier: I) -> Swift.Bool where I : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BenchmarkHost {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func viewForIdentifier<I, V>(_ identifier: I, _ type: V.Type) -> V? where I : Swift.Hashable, V : SwiftUICore.View
  #else
  public func viewForIdentifier<I, V>(_ identifier: I, _ type: V.Type) -> V? where I : Swift.Hashable, V : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func stateForIdentifier<I, S, V>(_ id: I, type stateType: S.Type, in viewType: V.Type) -> SwiftUICore.Binding<S>? where I : Swift.Hashable, V : SwiftUICore.View
  #else
  public func stateForIdentifier<I, S, V>(_ id: I, type stateType: S.Type, in viewType: V.Type) -> SwiftUICore.Binding<S>? where I : Swift.Hashable, V : SwiftUICore.View
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  package init(_ lhs: SwiftUICore.Text, _ rhs: SwiftUICore.Text)
  public static func + (lhs: SwiftUICore.Text, rhs: SwiftUICore.Text) -> SwiftUICore.Text
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(Private) public struct Encapsulation : Swift.Hashable, Swift.Sendable {
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) @_disfavoredOverload public init(scale: SwiftUICore.Text.Encapsulation.Scale? = nil, shape: SwiftUICore.Text.Encapsulation.Shape? = nil, style: SwiftUICore.Text.Encapsulation.Style? = nil, lineWeight: CoreFoundation.CGFloat? = nil, color: SwiftUICore.Color? = nil, minimumWidth: CoreFoundation.CGFloat? = nil)
    #else
    @_spi(Private) @_disfavoredOverload public init(scale: SwiftUICore.Text.Encapsulation.Scale? = nil, shape: SwiftUICore.Text.Encapsulation.Shape? = nil, style: SwiftUICore.Text.Encapsulation.Style? = nil, lineWeight: CoreFoundation.CGFloat? = nil, color: SwiftUICore.Color? = nil, minimumWidth: CoreFoundation.CGFloat? = nil)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public init(scale: SwiftUICore.Text.Encapsulation.Scale? = nil, shape: SwiftUICore.Text.Encapsulation.Shape? = nil, style: SwiftUICore.Text.Encapsulation.Style? = nil, platterSize: SwiftUICore.Text.Encapsulation.PlatterSize? = nil, lineWeight: CoreFoundation.CGFloat? = nil, color: SwiftUICore.Color? = nil, minimumWidth: CoreFoundation.CGFloat? = nil)
    #else
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public init(scale: SwiftUICore.Text.Encapsulation.Scale? = nil, shape: SwiftUICore.Text.Encapsulation.Shape? = nil, style: SwiftUICore.Text.Encapsulation.Style? = nil, platterSize: SwiftUICore.Text.Encapsulation.PlatterSize? = nil, lineWeight: CoreFoundation.CGFloat? = nil, color: SwiftUICore.Color? = nil, minimumWidth: CoreFoundation.CGFloat? = nil)
    #endif
    @_spi(Private) public struct Scale : Swift.Hashable, Swift.Sendable {
      @_spi(Private) public static let small: SwiftUICore.Text.Encapsulation.Scale
      @_spi(Private) public static let medium: SwiftUICore.Text.Encapsulation.Scale
      @_spi(Private) public static let large: SwiftUICore.Text.Encapsulation.Scale
      @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) public static func == (a: SwiftUICore.Text.Encapsulation.Scale, b: SwiftUICore.Text.Encapsulation.Scale) -> Swift.Bool
      @_spi(Private) public var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) public struct Shape : Swift.Hashable, Swift.Sendable {
      @_spi(Private) public static let rectangle: SwiftUICore.Text.Encapsulation.Shape
      @_spi(Private) public static let roundedRectangle: SwiftUICore.Text.Encapsulation.Shape
      @_spi(Private) public static let capsule: SwiftUICore.Text.Encapsulation.Shape
      @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) public static func == (a: SwiftUICore.Text.Encapsulation.Shape, b: SwiftUICore.Text.Encapsulation.Shape) -> Swift.Bool
      @_spi(Private) public var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) public struct Style : Swift.Hashable, Swift.Sendable {
      @_spi(Private) public static let outline: SwiftUICore.Text.Encapsulation.Style
      @_spi(Private) public static let fill: SwiftUICore.Text.Encapsulation.Style
      @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) public static func == (a: SwiftUICore.Text.Encapsulation.Style, b: SwiftUICore.Text.Encapsulation.Style) -> Swift.Bool
      @_spi(Private) public var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public struct PlatterSize : Swift.Hashable, Swift.Sendable {
      @_spi(Private) public static let regular: SwiftUICore.Text.Encapsulation.PlatterSize
      @_spi(Private) public static let large: SwiftUICore.Text.Encapsulation.PlatterSize
      @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) public static func == (a: SwiftUICore.Text.Encapsulation.PlatterSize, b: SwiftUICore.Text.Encapsulation.PlatterSize) -> Swift.Bool
      @_spi(Private) public var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.Text.Encapsulation, b: SwiftUICore.Text.Encapsulation) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(Private) public struct Sizing : Swift.Sendable, Swift.Equatable {
    @_spi(Private) package enum Storage : Swift.UInt8, Swift.Equatable {
      @_spi(Private) case standard
      @_spi(Private) case uniformLineHeight
      @_spi(Private) case adjustsForOversizedCharacters
      #if compiler(>=5.3) && $NoncopyableGenerics
      @_spi(Private) package init?(rawValue: Swift.UInt8)
      #else
      @_spi(Private) package init?(rawValue: Swift.UInt8)
      #endif
      @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, visionOS 1.0, *)
      package typealias RawValue = Swift.UInt8
      @_spi(Private) package var rawValue: Swift.UInt8 {
        @_spi(Private) get
      }
    }
    @_spi(Private) package var storage: SwiftUICore.Text.Sizing.Storage
    @_spi(Private) package init(_ storage: SwiftUICore.Text.Sizing.Storage)
    @_spi(Private) public static let standard: SwiftUICore.Text.Sizing
    @_spi(Private) public static let uniformLineHeight: SwiftUICore.Text.Sizing
    @_spi(Private) public static let adjustsForOversizedCharacters: SwiftUICore.Text.Sizing
    @_spi(Private) public static func == (a: SwiftUICore.Text.Sizing, b: SwiftUICore.Text.Sizing) -> Swift.Bool
  }
}
extension SwiftUICore.EnvironmentValues {
  package var textSizing: SwiftUICore.Text.Sizing {
    get
    set
  }
}
package struct PreferTextLayoutManagerInput : SwiftUICore.ViewInput {
  package static var defaultValue: Swift.Bool {
    get
  }
  package typealias Value = Swift.Bool
}
package struct ResolvableAbsoluteDate {
  package var date: Foundation.Date
  package let style: SwiftUICore.Text.DateStyle
  package let calendar: Foundation.Calendar
  package let locale: Foundation.Locale
  package let timeZone: Foundation.TimeZone
  package init(_ date: Foundation.Date, style: SwiftUICore.Text.DateStyle, in environment: SwiftUICore.EnvironmentValues)
}
extension SwiftUICore.ResolvableAbsoluteDate : SwiftUICore.ConfigurationBasedResolvableStringAttributeRepresentation {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #else
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #endif
  package static var attribute: Foundation.NSAttributedString.Key
  package var invalidationConfiguration: SwiftUICore.ResolvableAttributeConfiguration {
    get
  }
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.ResolvableAbsoluteDate : Swift.Equatable {
  package static func == (a: SwiftUICore.ResolvableAbsoluteDate, b: SwiftUICore.ResolvableAbsoluteDate) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct WritingMode : Swift.Sendable, Swift.Hashable {
    @_spi(Private) package enum Storage {
      @_spi(Private) case horizontalTopToBottom
      @_spi(Private) case verticalRightToLeft
      @_spi(Private) package static func == (a: SwiftUICore.Text.WritingMode.Storage, b: SwiftUICore.Text.WritingMode.Storage) -> Swift.Bool
      @_spi(Private) package func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) package var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) package var storage: SwiftUICore.Text.WritingMode.Storage
    @_spi(Private) public static let horizontalTopToBottom: SwiftUICore.Text.WritingMode
    @_spi(Private) public static let verticalRightToLeft: SwiftUICore.Text.WritingMode
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.Text.WritingMode, b: SwiftUICore.Text.WritingMode) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
}
extension SwiftUICore.EnvironmentValues {
  package var writingMode: SwiftUICore.Text.WritingMode {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func writingMode(_ mode: SwiftUICore.Text.WritingMode) -> some SwiftUICore.View
  
}
@_spi(Private) extension SwiftUICore.Text.WritingMode : SwiftUICore.ProtobufEnum {
  @_spi(Private) package var protobufValue: Swift.UInt {
    @_spi(Private) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) package init?(protobufValue value: Swift.UInt)
  #else
  @_spi(Private) package init?(protobufValue value: Swift.UInt)
  #endif
}
extension UIFoundation_Private.NSTextHorizontalAlignment {
  package init(_ alignment: SwiftUICore.TextAlignment, layoutDirection: SwiftUICore.LayoutDirection, writingMode: SwiftUICore.Text.WritingMode)
  package init(in environment: SwiftUICore.EnvironmentValues)
}
extension UIFoundation.NSWritingDirection {
  package init(_ layoutDirection: SwiftUICore.LayoutDirection)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public enum TruncationMode : Swift.Sendable {
    case head
    case tail
    case middle
    public static func == (a: SwiftUICore.Text.TruncationMode, b: SwiftUICore.Text.TruncationMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Case : Swift.Sendable {
    case uppercase
    case lowercase
    public static func == (a: SwiftUICore.Text.Case, b: SwiftUICore.Text.Case) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftUICore.Text.TruncationMode : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
package enum CodableTextCase : Swift.Codable {
  case uppercase
  case lowercase
  package init(_ textCase: SwiftUICore.Text.Case)
  package var textCase: SwiftUICore.Text.Case {
    get
  }
  package static func == (a: SwiftUICore.CodableTextCase, b: SwiftUICore.CodableTextCase) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.Text.Case : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUICore.CodableTextCase {
    get
  }
  package static func unwrap(codingProxy: SwiftUICore.CodableTextCase) -> SwiftUICore.Text.Case
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  package typealias CodingProxy = SwiftUICore.CodableTextCase
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var multilineTextAlignment: SwiftUICore.TextAlignment {
    get
    set
  }
  public var truncationMode: SwiftUICore.Text.TruncationMode {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var explicitTruncationMode: SwiftUICore.Text.TruncationMode? {
    get
    set
  }
  #else
  package var explicitTruncationMode: SwiftUICore.Text.TruncationMode? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultTextFieldTruncationMode: SwiftUICore.Text.TruncationMode? {
    get
    set
  }
  #else
  package var defaultTextFieldTruncationMode: SwiftUICore.Text.TruncationMode? {
    get
    set
  }
  #endif
  public var lineSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var _lineHeightMultiple: CoreFoundation.CGFloat {
    get
    set
  }
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var lineHeightMultiple: CoreFoundation.CGFloat {
    get
    set
  }
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var maximumLineHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var minimumLineHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var hyphenationFactor: CoreFoundation.CGFloat {
    get
    set
  }
  public var allowsTightening: Swift.Bool {
    get
    set
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var avoidsOrphans: Swift.Bool {
    get
    set
  }
  public var minimumScaleFactor: CoreFoundation.CGFloat {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var textCase: SwiftUICore.Text.Case? {
    get
    set
  }
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var textCase: SwiftUICore.Text.Case? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func multilineTextAlignment(_ alignment: SwiftUICore.TextAlignment) -> some SwiftUICore.View {
        return environment(\.multilineTextAlignment, alignment)
    }
  
  @inlinable nonisolated public func truncationMode(_ mode: SwiftUICore.Text.TruncationMode) -> some SwiftUICore.View {
        return environment(\.truncationMode, mode)
    }
  
  @inlinable nonisolated public func lineSpacing(_ lineSpacing: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return environment(\.lineSpacing, lineSpacing)
    }
  
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @usableFromInline
  @available(*, deprecated, renamed: "lineHeightMultiple")
  @_Concurrency.MainActor @preconcurrency internal func _lineHeightMultiple(_ multiple: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func lineHeightMultiple(_ multiple: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func maximumLineHeight(_ lineHeight: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func minimumLineHeight(_ lineHeight: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func hyphenationFactor(_ factor: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @inlinable nonisolated public func allowsTightening(_ flag: Swift.Bool) -> some SwiftUICore.View {
        return environment(\.allowsTightening, flag)
    }
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func avoidsOrphans(_ flag: Swift.Bool) -> some SwiftUICore.View
  
  @inlinable nonisolated public func minimumScaleFactor(_ factor: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return environment(\.minimumScaleFactor, factor)
    }
  
  @_spi(Private) nonisolated public func bodyHeadOutdent(_ amount: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable nonisolated public func textCase(_ textCase: SwiftUICore.Text.Case?) -> some SwiftUICore.View {
        environment(\.textCase, textCase)
    }
  
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable nonisolated public func textCase(_ textCase: SwiftUICore.Text.Case?) -> some SwiftUICore.View {
        environment(\.textCase, textCase)
    }
  
  #endif
}
package struct MaximumLineHeightKey : SwiftUICore.EnvironmentKey {
  package static let defaultValue: CoreFoundation.CGFloat
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = CoreFoundation.CGFloat
}
package struct MinimumLineHeightKey : SwiftUICore.EnvironmentKey {
  package static let defaultValue: CoreFoundation.CGFloat
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = CoreFoundation.CGFloat
}
package struct MinimumScaleFactorKey : SwiftUICore.EnvironmentKey {
  package static let defaultValue: CoreFoundation.CGFloat
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = CoreFoundation.CGFloat
}
extension Swift.String {
  package func caseConvertedIfNeeded(_ environment: SwiftUICore.EnvironmentValues) -> Swift.String
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct CustomHoverEffectMatchGroupBehavior : Swift.Hashable, Swift.Equatable, Swift.Sendable {
  @_spi(CustomHoverEffects) public static let activatesGroup: SwiftUICore.CustomHoverEffectMatchGroupBehavior
  @_spi(CustomHoverEffects) public static let followsGroup: SwiftUICore.CustomHoverEffectMatchGroupBehavior
  @_spi(CustomHoverEffects) public static let ignoresGroup: SwiftUICore.CustomHoverEffectMatchGroupBehavior
  @_spi(CustomHoverEffects) public func hash(into hasher: inout Swift.Hasher)
  @_spi(CustomHoverEffects) public static func == (a: SwiftUICore.CustomHoverEffectMatchGroupBehavior, b: SwiftUICore.CustomHoverEffectMatchGroupBehavior) -> Swift.Bool
  @_spi(CustomHoverEffects) public var hashValue: Swift.Int {
    @_spi(CustomHoverEffects) get
  }
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func matchedEffect(named name: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUICore.CustomHoverEffectMatchGroupBehavior = .activatesGroup) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func matchedEffect(named name: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUICore.CustomHoverEffectMatchGroupBehavior = .activatesGroup) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public init(_ cgImage: CoreGraphics.CGImage, scale: CoreFoundation.CGFloat, orientation: SwiftUICore.Image.Orientation = .up, label: SwiftUICore.Text)
  public init(decorative cgImage: CoreGraphics.CGImage, scale: CoreFoundation.CGFloat, orientation: SwiftUICore.Image.Orientation = .up)
}
extension CoreGraphics.CGImage {
  package var size: CoreFoundation.CGSize {
    get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func _fillMask<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return modifier(_FillMaskEffect(style: style))
    }
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _FillMaskEffect<Style> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Style : SwiftUICore.ShapeStyle {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var style: Style
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(style: Style) { self.style = style }
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._FillMaskEffect<Style>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ShadowStyle : Swift.Equatable, Swift.Sendable {
  package struct Kind : Swift.OptionSet {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let drop: SwiftUICore.ShadowStyle.Kind
    package static let inner: SwiftUICore.ShadowStyle.Kind
    package static let only: SwiftUICore.ShadowStyle.Kind
    package static let nonOpaque: SwiftUICore.ShadowStyle.Kind
    package static let ignoresFill: SwiftUICore.ShadowStyle.Kind
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    package typealias ArrayLiteralElement = SwiftUICore.ShadowStyle.Kind
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    package typealias Element = SwiftUICore.ShadowStyle.Kind
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    package typealias RawValue = Swift.UInt8
  }
  @_spi(Private) public static let drop: SwiftUICore.ShadowStyle
  @_spi(Private) public static let inner: SwiftUICore.ShadowStyle
  public static func drop(color: SwiftUICore.Color = .init(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.ShadowStyle
  public static func inner(color: SwiftUICore.Color = .init(.sRGBLinear, white: 0, opacity: 0.55), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.ShadowStyle
  public static func == (a: SwiftUICore.ShadowStyle, b: SwiftUICore.ShadowStyle) -> Swift.Bool
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ShadowStyle {
  @_spi(Private) public func ignoresFill(_ enabled: Swift.Bool = true) -> SwiftUICore.ShadowStyle
  @_spi(Private) public func midpoint(_ value: Swift.Double) -> SwiftUICore.ShadowStyle
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @inlinable public func shadow(_ style: SwiftUICore.ShadowStyle) -> some SwiftUICore.ShapeStyle {
        return _ShadowShapeStyle(style: self, shadowStyle: style)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.AnyShapeStyle {
  @_alwaysEmitIntoClient public static func shadow(_ style: SwiftUICore.ShadowStyle) -> some SwiftUICore.ShapeStyle {
        return _ShadowShapeStyle(
            style: _ImplicitShapeStyle(), shadowStyle: style)
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ShadowShapeStyle<Style> : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle where Style : SwiftUICore.ShapeStyle {
  @usableFromInline
  internal var style: Style
  @usableFromInline
  internal var shadowStyle: SwiftUICore.ShadowStyle
  @inlinable internal init(style: Style, shadowStyle: SwiftUICore.ShadowStyle) {
        self.style = style
        self.shadowStyle = shadowStyle
    }
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
package struct ResolvedShadowStyle : Swift.Equatable, Swift.Sendable {
  package var color: SwiftUICore.Color.Resolved
  package var radius: CoreFoundation.CGFloat
  package var offset: CoreFoundation.CGSize
  package var midpoint: Swift.Float
  package var kind: SwiftUICore.ShadowStyle.Kind
  package init(color: SwiftUICore.Color.Resolved, radius: CoreFoundation.CGFloat, offset: CoreFoundation.CGSize, midpoint: Swift.Float = 0.5, kind: SwiftUICore.ShadowStyle.Kind = .drop)
  package var insets: SwiftUICore.EdgeInsets {
    get
  }
  package static func == (a: SwiftUICore.ResolvedShadowStyle, b: SwiftUICore.ResolvedShadowStyle) -> Swift.Bool
}
extension SwiftUICore.ResolvedShadowStyle : SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.Color.Resolved.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGSize.AnimatableData>>
  package var animatableData: SwiftUICore.ResolvedShadowStyle.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.ResolvedShadowStyle : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _AnchoredShapeStyle<S> : SwiftUICore.ShapeStyle where S : SwiftUICore.ShapeStyle {
  public var style: S
  public var bounds: CoreFoundation.CGRect
  @inlinable internal init(style: S, bounds: CoreFoundation.CGRect) {
        self.style = style
        self.bounds = bounds
    }
  nonisolated public static func _makeView<T>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<T, SwiftUICore._AnchoredShapeStyle<S>>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where T : SwiftUICore.Shape
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AnchoredShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
package struct AnchoredResolvedPaint<P> : SwiftUICore.ResolvedPaint where P : SwiftUICore.ResolvedPaint {
  package var paint: P
  package var bounds: CoreFoundation.CGRect
  package init(_ paint: P, bounds: CoreFoundation.CGRect)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds outerBounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in ctx: SwiftUICore.GraphicsContext, bounds outerBounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  package var isCALayerCompatible: Swift.Bool {
    get
  }
  package typealias AnimatableData = SwiftUICore.AnimatablePair<P.AnimatableData, CoreFoundation.CGRect.AnimatableData>
  package var animatableData: SwiftUICore.AnchoredResolvedPaint<P>.AnimatableData {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #else
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.AnchoredResolvedPaint<P>, b: SwiftUICore.AnchoredResolvedPaint<P>) -> Swift.Bool
}
extension SwiftUICore.AnchoredResolvedPaint : SwiftUICore.ProtobufEncodableMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  @inlinable public func `in`(_ rect: CoreFoundation.CGRect) -> some SwiftUICore.ShapeStyle {
        return _AnchoredShapeStyle(style: self, bounds: rect)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct StrokeStyle : Swift.Equatable {
  public var lineWidth: CoreFoundation.CGFloat
  public var lineCap: CoreGraphics.CGLineCap
  public var lineJoin: CoreGraphics.CGLineJoin
  public var miterLimit: CoreFoundation.CGFloat
  public var dash: [CoreFoundation.CGFloat]
  public var dashPhase: CoreFoundation.CGFloat
  public init(lineWidth: CoreFoundation.CGFloat = 1, lineCap: CoreGraphics.CGLineCap = .butt, lineJoin: CoreGraphics.CGLineJoin = .miter, miterLimit: CoreFoundation.CGFloat = 10, dash: [CoreFoundation.CGFloat] = [CGFloat](), dashPhase: CoreFoundation.CGFloat = 0)
  public static func == (a: SwiftUICore.StrokeStyle, b: SwiftUICore.StrokeStyle) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.StrokeStyle : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  public var animatableData: SwiftUICore.StrokeStyle.AnimatableData {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func renderingMode(_ renderingMode: SwiftUICore.Image.TemplateRenderingMode?) -> SwiftUICore.Image
  #else
  public func renderingMode(_ renderingMode: SwiftUICore.Image.TemplateRenderingMode?) -> SwiftUICore.Image
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TypesettingLanguage : Swift.Sendable, Swift.Equatable {
  package struct Flags : Swift.OptionSet {
    package var rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let modifyFont: SwiftUICore.TypesettingLanguage.Flags
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    package typealias ArrayLiteralElement = SwiftUICore.TypesettingLanguage.Flags
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    package typealias Element = SwiftUICore.TypesettingLanguage.Flags
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    package typealias RawValue = Swift.UInt8
  }
  package enum Storage : Swift.Equatable {
    case automatic
    case contentAware
    case explicit(Foundation.Locale.Language, SwiftUICore.TypesettingLanguage.Flags)
    package static func == (a: SwiftUICore.TypesettingLanguage.Storage, b: SwiftUICore.TypesettingLanguage.Storage) -> Swift.Bool
  }
  package var storage: SwiftUICore.TypesettingLanguage.Storage
  public static let automatic: SwiftUICore.TypesettingLanguage
  public static func explicit(_ language: Foundation.Locale.Language) -> SwiftUICore.TypesettingLanguage
  public static func == (a: SwiftUICore.TypesettingLanguage, b: SwiftUICore.TypesettingLanguage) -> Swift.Bool
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TypesettingLanguage {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let contentAware: SwiftUICore.TypesettingLanguage
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func typesettingLanguage(_ language: Foundation.Locale.Language, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func typesettingLanguage(_ language: SwiftUICore.TypesettingLanguage, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func typesettingLanguage(_ language: Foundation.Locale.Language, isEnabled: Swift.Bool = true) -> SwiftUICore.Text
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func typesettingLanguage(_ language: SwiftUICore.TypesettingLanguage, isEnabled: Swift.Bool = true) -> SwiftUICore.Text
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var scrollTargetAnchor: SwiftUICore.UnitPoint? {
    get
    set
  }
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var scrollTargetAnchor: SwiftUICore.UnitPoint? {
    get
    set
  }
  #endif
  package var _disablesPageScrollAnimations: Swift.Bool {
    get
    set
  }
  package var isPageScrollAnimated: Swift.Bool {
    get
  }
}
extension Foundation.NSAttributedString {
  package var range: Foundation.NSRange {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstAttribute<T>(_ type: T.Type, name: Foundation.NSAttributedString.Key) -> T?
  #else
  package func firstAttribute<T>(_ type: T.Type, name: Foundation.NSAttributedString.Key) -> T?
  #endif
}
extension Foundation.NSAttributedString {
  package func replacingLineBreakModes(_ newMode: UIFoundation.NSLineBreakMode) -> Foundation.NSAttributedString
}
extension Foundation.NSMutableAttributedString {
  package func addUniformAttribute(_ name: Foundation.NSAttributedString.Key, value: Any)
  package func addUniformAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any])
}
extension Foundation.NSMutableAttributedString {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func mergeAttributes(_ attrs: [Foundation.NSAttributedString.Key : Any], in range: Foundation.NSRange? = nil)
  #else
  package func mergeAttributes(_ attrs: [Foundation.NSAttributedString.Key : Any], in range: Foundation.NSRange? = nil)
  #endif
}
extension Foundation.NSAttributedString {
  package typealias Runs = [(range: Foundation.NSRange, attributes: SwiftUICore.NSAttributedStringAttributes)]
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func runs(in range: Foundation.NSRange? = nil) -> Foundation.NSAttributedString.Runs
  #else
  package func runs(in range: Foundation.NSRange? = nil) -> Foundation.NSAttributedString.Runs
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @inlinable nonisolated public func lineLimit(_ number: Swift.Int?) -> some SwiftUICore.View {
        environment(\.lineLimit, number)
    }
  
  #else
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @inlinable nonisolated public func lineLimit(_ number: Swift.Int?) -> some SwiftUICore.View {
        environment(\.lineLimit, number)
    }
  
  #endif
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.PartialRangeFrom<Swift.Int>) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.PartialRangeThrough<Swift.Int>) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.ClosedRange<Swift.Int>) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func lineLimit(_ limit: Swift.Int, reservesSpace: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public var lineLimit: Swift.Int? {
    get
    set
  }
  #else
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public var lineLimit: Swift.Int? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var lowerLineLimit: Swift.Int? {
    get
    set
  }
  #else
  package var lowerLineLimit: Swift.Int? {
    get
    set
  }
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.NSAttributedString {
  @usableFromInline
  internal struct Metrics : Swift.Equatable {
    @usableFromInline
    internal static func == (a: Foundation.NSAttributedString.Metrics, b: Foundation.NSAttributedString.Metrics) -> Swift.Bool
  }
}
@available(*, unavailable)
extension Foundation.NSAttributedString.Metrics : Swift.Sendable {
}
extension SwiftUICore.ResolvedStyledText {
  @_inheritsConvenienceInitializers final package class StringDrawing : SwiftUICore.ResolvedStyledText {
    final package var drawingMargins: SwiftUICore.EdgeInsets {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(storage: Foundation.NSAttributedString?, layoutProperties: SwiftUICore.TextLayoutProperties, layoutMargins: SwiftUICore.EdgeInsets?, stylePadding: SwiftUICore.EdgeInsets, archiveOptions: SwiftUICore.ArchivedViewInput.Value, isCollapsible: Swift.Bool, features: SwiftUICore.Text.ResolvedProperties.Features, suffix: SwiftUICore.ResolvedTextSuffix, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments, styles: [SwiftUICore._ShapeStyle_Pack.Style], transitions: [SwiftUICore.Text.ResolvedProperties.Transition], scaleFactorOverride: CoreFoundation.CGFloat?)
    #else
    package init(storage: Foundation.NSAttributedString?, layoutProperties: SwiftUICore.TextLayoutProperties, layoutMargins: SwiftUICore.EdgeInsets?, stylePadding: SwiftUICore.EdgeInsets, archiveOptions: SwiftUICore.ArchivedViewInput.Value, isCollapsible: Swift.Bool, features: SwiftUICore.Text.ResolvedProperties.Features, suffix: SwiftUICore.ResolvedTextSuffix, attachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments, styles: [SwiftUICore._ShapeStyle_Pack.Style], transitions: [SwiftUICore.Text.ResolvedProperties.Transition], scaleFactorOverride: CoreFoundation.CGFloat?)
    #endif
    final package func sizeThatFits(_ proposal: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
    final package func resetCache()
    final package var majorAxis: SwiftUICore.Axis {
      get
    }
    final package func drawingScale(size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
    final package func spacing() -> SwiftUICore.Spacing
    final package func size(in request: CoreFoundation.CGSize) -> CoreFoundation.CGSize
    final package func size(in request: CoreFoundation.CGSize, context: SwiftUICore.TextDrawingContext) -> CoreFoundation.CGSize
    #if compiler(>=5.3) && $NoncopyableGenerics
    final package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
    #else
    final package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    final package func draw(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool, containsResolvable: Swift.Bool, context: SwiftUICore.TextDrawingContext, renderer: SwiftUICore.TextRendererBoxBase?)
    #else
    final package func draw(in drawingArea: CoreFoundation.CGRect, with measuredSize: CoreFoundation.CGSize, applyingMarginOffsets: Swift.Bool, containsResolvable: Swift.Bool, context: SwiftUICore.TextDrawingContext, renderer: SwiftUICore.TextRendererBoxBase?)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    final package func linkURL(at point: CoreFoundation.CGPoint, in size: CoreFoundation.CGSize) -> Foundation.URL?
    #else
    final package func linkURL(at point: CoreFoundation.CGPoint, in size: CoreFoundation.CGSize) -> Foundation.URL?
    #endif
    @objc deinit
  }
}
extension Foundation.NSAttributedString.Key {
  package static let resolvableTextSegment: Foundation.NSAttributedString.Key
}
package enum ResolvableTextSegmentAttribute : Foundation.CodableAttributedStringKey {
  package struct Value : Swift.Codable, Swift.Hashable {
    package func isAttributeRequiredForResolution(_ attribute: Foundation.NSAttributedString.Key, includeNonFunctionalAttributes: Swift.Bool) -> Swift.Bool
    package static func == (lhs: SwiftUICore.ResolvableTextSegmentAttribute.Value, rhs: SwiftUICore.ResolvableTextSegmentAttribute.Value) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
  package static let name: Swift.String
}
extension SwiftUICore.ResolvableTextSegmentAttribute {
  package static func legacySegment(resolvableAttributeKey: Foundation.NSAttributedString.Key, length: Swift.Int) -> SwiftUICore.ResolvableTextSegmentAttribute.Value
  package static func toggleAttributes(in string: Foundation.NSMutableAttributedString)
  package static func update(_ string: Foundation.NSMutableAttributedString, in context: SwiftUICore.ResolvableStringResolutionContext)
}
package struct PlatformAttributeResolver {
}
package struct TypesettingConfiguration : Swift.Equatable {
  package var language: SwiftUICore.TypesettingLanguage
  package var languageAwareLineHeightRatio: SwiftUICore.TypesettingLanguageAwareLineHeightRatio
  package init(language: SwiftUICore.TypesettingLanguage = .automatic, languageAwareLineHeightRatio: SwiftUICore.TypesettingLanguageAwareLineHeightRatio = .automatic)
  package static func == (a: SwiftUICore.TypesettingConfiguration, b: SwiftUICore.TypesettingConfiguration) -> Swift.Bool
}
package struct TypesettingConfigurationKey : SwiftUICore.EnvironmentKey {
  package static let defaultValue: SwiftUICore.TypesettingConfiguration
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = SwiftUICore.TypesettingConfiguration
}
extension SwiftUICore.EnvironmentValues {
  package var typesettingConfiguration: SwiftUICore.TypesettingConfiguration {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct BackgroundProminence : Swift.Hashable, Swift.Sendable {
  public static let standard: SwiftUICore.BackgroundProminence
  public static let increased: SwiftUICore.BackgroundProminence
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.BackgroundProminence, b: SwiftUICore.BackgroundProminence) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var backgroundProminence: SwiftUICore.BackgroundProminence {
    get
    set
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TypesettingLanguageAwareLineHeightRatio : Swift.Sendable, Swift.Equatable {
  @_spi(Private) public static let automatic: SwiftUICore.TypesettingLanguageAwareLineHeightRatio
  @_spi(Private) public static let disable: SwiftUICore.TypesettingLanguageAwareLineHeightRatio
  @_spi(Private) public static let legacy: SwiftUICore.TypesettingLanguageAwareLineHeightRatio
  @_spi(Private) public static func custom(_ ratio: Swift.Double) -> SwiftUICore.TypesettingLanguageAwareLineHeightRatio
  @_spi(Private) public static func == (a: SwiftUICore.TypesettingLanguageAwareLineHeightRatio, b: SwiftUICore.TypesettingLanguageAwareLineHeightRatio) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func typesettingLanguageAwareLineHeightRatio(_ ratio: SwiftUICore.TypesettingLanguageAwareLineHeightRatio, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func typesettingLanguageAwareLineHeightRatio(_ ratio: SwiftUICore.TypesettingLanguageAwareLineHeightRatio, isEnabled: Swift.Bool = true) -> SwiftUICore.Text
}
package enum NamedImage {
  package struct VectorKey : Swift.Hashable {
    package var catalogKey: SwiftUICore.CatalogKey
    package var name: Swift.String
    package var scale: CoreFoundation.CGFloat
    package var layoutDirection: SwiftUICore.LayoutDirection
    package var locale: Foundation.Locale
    package var weight: SwiftUICore.Font.Weight
    package var imageScale: SwiftUICore.Image.HashableScale
    package var pointSize: CoreFoundation.CGFloat
    package var location: SwiftUICore.Image.Location
    package var idiom: Swift.Int
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(name: Swift.String, location: SwiftUICore.Image.Location, in env: SwiftUICore.EnvironmentValues, textStyle: SwiftUICore.Text.Style?, idiom: Swift.Int)
    #else
    package init(name: Swift.String, location: SwiftUICore.Image.Location, in env: SwiftUICore.EnvironmentValues, textStyle: SwiftUICore.Text.Style?, idiom: Swift.Int)
    #endif
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.NamedImage.VectorKey, b: SwiftUICore.NamedImage.VectorKey) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct VectorInfo {
    package var glyph: RenderBox.CUINamedVectorGlyph
    package var flipsRightToLeft: Swift.Bool
    package var layoutMetrics: SwiftUICore.Image.LayoutMetrics
  }
  package struct BitmapKey : Swift.Hashable {
    package var catalogKey: SwiftUICore.CatalogKey
    package var name: Swift.String
    package var scale: CoreFoundation.CGFloat
    package var location: SwiftUICore.Image.Location
    package var layoutDirection: SwiftUICore.LayoutDirection
    package var locale: Foundation.Locale
    package var gamut: SwiftUICore.DisplayGamut
    package var idiom: Swift.Int
    package var subtype: Swift.Int
    package var horizontalSizeClass: Swift.Int8
    package var verticalSizeClass: Swift.Int8
    package init(name: Swift.String, location: SwiftUICore.Image.Location, in env: SwiftUICore.EnvironmentValues)
    package init(catalogKey: SwiftUICore.CatalogKey, name: Swift.String, scale: CoreFoundation.CGFloat, location: SwiftUICore.Image.Location, layoutDirection: SwiftUICore.LayoutDirection, locale: Foundation.Locale, gamut: SwiftUICore.DisplayGamut, idiom: Swift.Int, subtype: Swift.Int, horizontalSizeClass: Swift.Int8 = 0, verticalSizeClass: Swift.Int8 = 0)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.NamedImage.BitmapKey, b: SwiftUICore.NamedImage.BitmapKey) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct BitmapInfo {
    package var contents: SwiftUICore.GraphicsImage.Contents
    package var scale: CoreFoundation.CGFloat
    package var orientation: SwiftUICore.Image.Orientation
    package var unrotatedPixelSize: CoreFoundation.CGSize
    package var renderingMode: SwiftUICore.Image.TemplateRenderingMode?
    package var resizingInfo: SwiftUICore.Image.ResizingInfo?
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(contents: SwiftUICore.GraphicsImage.Contents, scale: CoreFoundation.CGFloat, orientation: SwiftUICore.Image.Orientation, unrotatedPixelSize: CoreFoundation.CGSize, renderingMode: SwiftUICore.Image.TemplateRenderingMode? = nil, resizingInfo: SwiftUICore.Image.ResizingInfo? = nil)
    #else
    package init(contents: SwiftUICore.GraphicsImage.Contents, scale: CoreFoundation.CGFloat, orientation: SwiftUICore.Image.Orientation, unrotatedPixelSize: CoreFoundation.CGSize, renderingMode: SwiftUICore.Image.TemplateRenderingMode? = nil, resizingInfo: SwiftUICore.Image.ResizingInfo? = nil)
    #endif
  }
  package struct DecodedInfo {
    package var contents: SwiftUICore.GraphicsImage.Contents
    package var scale: CoreFoundation.CGFloat
    package var unrotatedPixelSize: CoreFoundation.CGSize
    package var orientation: SwiftUICore.Image.Orientation
  }
  package enum Key : Swift.Equatable {
    case bitmap(SwiftUICore.NamedImage.BitmapKey)
    case uuid(Foundation.UUID)
    package static func == (a: SwiftUICore.NamedImage.Key, b: SwiftUICore.NamedImage.Key) -> Swift.Bool
  }
  package enum Errors : Swift.Error {
    case missingCatalogImage
    case missingUUIDImage
    package static func == (a: SwiftUICore.NamedImage.Errors, b: SwiftUICore.NamedImage.Errors) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct Cache {
    package var archiveDelegate: SwiftUICore.AnyArchivedViewDelegate?
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(archiveDelegate: SwiftUICore.AnyArchivedViewDelegate? = nil)
    #else
    package init(archiveDelegate: SwiftUICore.AnyArchivedViewDelegate? = nil)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package subscript(key: SwiftUICore.NamedImage.VectorKey, catalog: CoreUI.CUICatalog) -> SwiftUICore.NamedImage.VectorInfo? {
      get
    }
    #else
    package subscript(key: SwiftUICore.NamedImage.VectorKey, catalog: CoreUI.CUICatalog) -> SwiftUICore.NamedImage.VectorInfo? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package subscript(key: SwiftUICore.NamedImage.BitmapKey, location: SwiftUICore.Image.Location) -> SwiftUICore.NamedImage.BitmapInfo? {
      get
    }
    #else
    package subscript(key: SwiftUICore.NamedImage.BitmapKey, location: SwiftUICore.Image.Location) -> SwiftUICore.NamedImage.BitmapInfo? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package subscript(bundle: Foundation.Bundle) -> (CoreUI.CUICatalog, retain: Swift.Bool)? {
      get
    }
    #else
    package subscript(bundle: Foundation.Bundle) -> (CoreUI.CUICatalog, retain: Swift.Bool)? {
      get
    }
    #endif
    package func decode(_ key: SwiftUICore.NamedImage.Key) throws -> SwiftUICore.NamedImage.DecodedInfo
  }
  package static var sharedCache: SwiftUICore.NamedImage.Cache
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public static var _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  package enum Location : Swift.Equatable, Swift.Hashable {
    case bundle(Foundation.Bundle)
    case system
    case privateSystem
    package var supportsNonVectorImages: Swift.Bool {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    package var catalog: CoreUI.CUICatalog? {
      get
    }
    #else
    package var catalog: CoreUI.CUICatalog? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package var bundle: Foundation.Bundle? {
      get
    }
    #else
    package var bundle: Foundation.Bundle? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func fillVariant(_ variants: SwiftUICore.SymbolVariants, name: Swift.String) -> Swift.String?
    #else
    package func fillVariant(_ variants: SwiftUICore.SymbolVariants, name: Swift.String) -> Swift.String?
    #endif
    package func mayContainSymbol(_ name: Swift.String) -> Swift.Bool
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func findShapeAndFillVariantName<T>(_ variants: SwiftUICore.SymbolVariants, base: Swift.String, body: (Swift.String) -> T?) -> T?
    #else
    package func findShapeAndFillVariantName<T>(_ variants: SwiftUICore.SymbolVariants, base: Swift.String, body: (Swift.String) -> T?) -> T?
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func findName<T>(_ variants: SwiftUICore.SymbolVariants, base: Swift.String, body: (Swift.String) -> T?) -> T?
    #else
    package func findName<T>(_ variants: SwiftUICore.SymbolVariants, base: Swift.String, body: (Swift.String) -> T?) -> T?
    #endif
    package static let systemAssetManager: SwiftUICore.Image.Location.SystemAssetManager
    package static let privateSystemAssetManager: SwiftUICore.Image.Location.SystemAssetManager
    package struct SystemAssetManager {
    }
    package static func == (a: SwiftUICore.Image.Location, b: SwiftUICore.Image.Location) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  #else
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil, label: SwiftUICore.Text)
  #else
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil, label: SwiftUICore.Text)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(decorative name: Swift.String, bundle: Foundation.Bundle? = nil)
  #else
  public init(decorative name: Swift.String, bundle: Foundation.Bundle? = nil)
  #endif
  @available(macOS 11.0, *)
  public init(systemName: Swift.String)
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_internalSystemName systemName: Swift.String)
  package struct NamedImageProvider : SwiftUICore.ImageProvider {
    package var name: Swift.String
    package var value: Swift.Float?
    package var location: SwiftUICore.Image.Location
    package var backupLocation: SwiftUICore.Image.Location?
    package var label: SwiftUICore.AccessibilityImageLabel?
    package var decorative: Swift.Bool
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(name: Swift.String, value: Swift.Float? = nil, location: SwiftUICore.Image.Location, label: SwiftUICore.AccessibilityImageLabel?, decorative: Swift.Bool, backupLocation: SwiftUICore.Image.Location? = nil)
    #else
    package init(name: Swift.String, value: Swift.Float? = nil, location: SwiftUICore.Image.Location, label: SwiftUICore.AccessibilityImageLabel?, decorative: Swift.Bool, backupLocation: SwiftUICore.Image.Location? = nil)
    #endif
    package func resolve(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.Resolved
    package func resolveError(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Image.Resolved
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
    #else
    package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
    #endif
    package static func == (a: SwiftUICore.Image.NamedImageProvider, b: SwiftUICore.Image.NamedImageProvider) -> Swift.Bool
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(systemName: Swift.String, variableValue: Swift.Double?)
  #else
  public init(systemName: Swift.String, variableValue: Swift.Double?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_internalSystemName systemName: Swift.String, variableValue: Swift.Double?)
  #else
  public init(_internalSystemName systemName: Swift.String, variableValue: Swift.Double?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil)
  #else
  public init(_ name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil, label: SwiftUICore.Text)
  #else
  public init(_ name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil, label: SwiftUICore.Text)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(decorative name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil)
  #else
  public init(decorative name: Swift.String, variableValue: Swift.Double?, bundle: Foundation.Bundle? = nil)
  #endif
}
extension SwiftUICore.Image.Location : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.Image {
  package enum HashableScale : Swift.Hashable {
    case small, medium, large
    case ccSmall, ccMedium, ccLarge
    package init(_ scale: SwiftUICore.Image.Scale)
    package static func == (a: SwiftUICore.Image.HashableScale, b: SwiftUICore.Image.HashableScale) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(uuid: Foundation.UUID, size: CoreFoundation.CGSize, label: SwiftUICore.Text?)
  #else
  @_spi(Private) public init(uuid: Foundation.UUID, size: CoreFoundation.CGSize, label: SwiftUICore.Text?)
  #endif
  @_spi(Private) public struct ResolvedUUID {
    @_spi(Private) public init(cgImage: CoreGraphics.CGImage, scale: CoreFoundation.CGFloat, orientation: SwiftUICore.Image.Orientation = .up)
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.Image.ResolvedUUID : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_systemName systemName: Swift.String, colorPalette: [SwiftUICore.Color]? = nil)
  #else
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_systemName systemName: Swift.String, colorPalette: [SwiftUICore.Color]? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_internalSystemName systemName: Swift.String, colorPalette: [SwiftUICore.Color]? = nil)
  #else
  @available(*, deprecated, message: "Use .renderingMode(.original)")
  public init(_internalSystemName systemName: Swift.String, colorPalette: [SwiftUICore.Color]? = nil)
  #endif
}
extension SwiftUICore.NamedImage.Key : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.NamedImage.BitmapKey : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public init(_ resource: DeveloperToolsSupport.ImageResource)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol VectorArithmetic : Swift.AdditiveArithmetic {
  mutating func scale(by rhs: Swift.Double)
  var magnitudeSquared: Swift.Double { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.VectorArithmetic {
  @_alwaysEmitIntoClient public func scaled(by rhs: Swift.Double) -> Self {
        var result = self
        result.scale(by: rhs)
        return result
    }
  @_alwaysEmitIntoClient public mutating func interpolate(towards other: Self, amount: Swift.Double) {
         
        var result = other
        result -= self
        result.scale(by: amount)
        result += self
        self = result
    }
  @_alwaysEmitIntoClient public func interpolated(towards other: Self, amount: Swift.Double) -> Self {
        var result = self
        result.interpolate(towards: other, amount: amount)
        return result
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Float : SwiftUICore.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= Float(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Double : SwiftUICore.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= rhs }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return self * self }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGFloat : SwiftUICore.VectorArithmetic {
  @_transparent public mutating func scale(by rhs: Swift.Double) { self *= CGFloat(rhs) }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get { return Double(self * self) }
  }
}
package func mix<T>(_ lhs: T, _ rhs: T, by t: Swift.Double) -> T where T : SwiftUICore.VectorArithmetic
extension SwiftUICore.VectorArithmetic {
  package static var unitScale: Swift.Double {
    get
  }
  package static var inverseUnitScale: Swift.Double {
    get
  }
  package mutating func applyUnitScale()
  package mutating func unapplyUnitScale()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewListInputs {
  package var base: SwiftUICore._GraphInputs
  package var implicitID: Swift.Int
  package struct Options : Swift.OptionSet {
    package let rawValue: Swift.Int
    package init(rawValue: Swift.Int)
    package static let canTransition: SwiftUICore._ViewListInputs.Options
    package static let disableTransitions: SwiftUICore._ViewListInputs.Options
    package static let requiresDepthAndSections: SwiftUICore._ViewListInputs.Options
    package static let requiresNonEmptyGroupParent: SwiftUICore._ViewListInputs.Options
    package static let isNonEmptyParent: SwiftUICore._ViewListInputs.Options
    package static let resetHeaderStyleContext: SwiftUICore._ViewListInputs.Options
    package static let resetFooterStyleContext: SwiftUICore._ViewListInputs.Options
    package static let layoutPriorityIsTrait: SwiftUICore._ViewListInputs.Options
    package static let requiresSections: SwiftUICore._ViewListInputs.Options
    package static let tupleViewCreatesUnaryElements: SwiftUICore._ViewListInputs.Options
    package static let previewContext: SwiftUICore._ViewListInputs.Options
    package static let needsDynamicTraits: SwiftUICore._ViewListInputs.Options
    package static let allowsNestedSections: SwiftUICore._ViewListInputs.Options
    package static let sectionsConcatenateFooter: SwiftUICore._ViewListInputs.Options
    package static let needsArchivedAnimationTraits: SwiftUICore._ViewListInputs.Options
    package static let sectionsAreHierarchical: SwiftUICore._ViewListInputs.Options
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias ArrayLiteralElement = SwiftUICore._ViewListInputs.Options
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Element = SwiftUICore._ViewListInputs.Options
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias RawValue = Swift.Int
  }
  package var options: SwiftUICore._ViewListInputs.Options
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var traits: AttributeGraph.Attribute<SwiftUICore.ViewTraitCollection>? {
    get
    set
  }
  #else
  package var traits: AttributeGraph.Attribute<SwiftUICore.ViewTraitCollection>? {
    get
    set
  }
  #endif
  package var traitKeys: SwiftUICore.ViewTraitKeys?
  package init(_ base: SwiftUICore._GraphInputs, implicitID: Swift.Int = 0, options: SwiftUICore._ViewListInputs.Options = .init())
  package init(_ base: SwiftUICore._GraphInputs, implicitID: Swift.Int)
  package init(_ base: SwiftUICore._GraphInputs, options: SwiftUICore._ViewListInputs.Options)
  package init(_ base: SwiftUICore._GraphInputs)
  package subscript<T>(input: T.Type) -> T.Value where T : SwiftUICore.ViewInput {
    get
    set
  }
  package subscript<T>(input: T.Type) -> T.Value where T : SwiftUICore.ViewInput, T.Value : SwiftUICore.GraphReusable {
    get
    set
  }
  package var canTransition: Swift.Bool {
    get
  }
  package mutating func addTraitKey<K>(_ key: K.Type) where K : SwiftUICore._ViewTraitKey
}
@available(*, unavailable)
extension SwiftUICore._ViewListInputs : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewListCountInputs {
  package var customInputs: SwiftUICore.PropertyList
  package var options: SwiftUICore._ViewListInputs.Options
  package var baseOptions: SwiftUICore._GraphInputs.Options
  package var customModifierTypes: [Swift.ObjectIdentifier]
  package init(_ inputs: SwiftUICore._ViewListInputs)
  package subscript<T>(input: T.Type) -> T.Value where T : SwiftUICore.GraphInput {
    get
    set
  }
  package mutating func append<T, U>(_ newValue: U, to _: T.Type) where T : SwiftUICore.GraphInput, T.Value == SwiftUICore.Stack<U>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func popLast<T, U>(_ key: T.Type) -> U? where T : SwiftUICore.GraphInput, T.Value == SwiftUICore.Stack<U>
  #else
  package mutating func popLast<T, U>(_ key: T.Type) -> U? where T : SwiftUICore.GraphInput, T.Value == SwiftUICore.Stack<U>
  #endif
  package var base: SwiftUICore._GraphInputs {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._ViewListCountInputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewListOutputs {
  package enum Views {
    case staticList(any SwiftUICore._ViewList_Elements)
    case dynamicList(AttributeGraph.Attribute<any SwiftUICore.ViewList>, SwiftUICore._ViewListOutputs.ListModifier?)
  }
  package var views: SwiftUICore._ViewListOutputs.Views
  package var nextImplicitID: Swift.Int
  package var staticCount: Swift.Int?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ views: SwiftUICore._ViewListOutputs.Views, nextImplicitID: Swift.Int, staticCount: Swift.Int?)
  #else
  package init(_ views: SwiftUICore._ViewListOutputs.Views, nextImplicitID: Swift.Int, staticCount: Swift.Int?)
  #endif
  package init(_ views: SwiftUICore._ViewListOutputs.Views, nextImplicitID: Swift.Int)
  package class ListModifier {
    package func apply(to list: inout any SwiftUICore.ViewList)
    @objc deinit
  }
}
@available(*, unavailable)
extension SwiftUICore._ViewListOutputs : Swift.Sendable {
}
package protocol ViewList {
  typealias ID = SwiftUICore._ViewList_ID
  typealias Elements = SwiftUICore._ViewList_Elements
  typealias Traits = SwiftUICore.ViewTraitCollection
  typealias Node = SwiftUICore._ViewList_Node
  typealias Group = SwiftUICore._ViewList_Group
  typealias IteratorStyle = SwiftUICore._ViewList_IteratorStyle
  typealias Section = SwiftUICore._ViewList_Section
  typealias Sublist = SwiftUICore._ViewList_Sublist
  typealias SublistTransform = SwiftUICore._ViewList_SublistTransform
  typealias Subgraph = SwiftUICore._ViewList_Subgraph
  typealias Edit = SwiftUICore._ViewList_Edit
  func count(style: Self.IteratorStyle) -> Swift.Int
  func estimatedCount(style: Self.IteratorStyle) -> Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  var traitKeys: SwiftUICore.ViewTraitKeys? { get }
  #else
  var traitKeys: SwiftUICore.ViewTraitKeys? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var viewIDs: Self.ID.Views? { get }
  #else
  var viewIDs: Self.ID.Views? { get }
  #endif
  var traits: Self.Traits { get }
  typealias ApplyBody = (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, Self.Node, inout Self.SublistTransform) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  func applyNodes(from start: inout Swift.Int, style: Self.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout Self.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, Self.Node, inout Self.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #else
  @discardableResult
  func applyNodes(from start: inout Swift.Int, style: Self.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout Self.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, Self.Node, inout Self.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func edit(forID id: Self.ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #else
  func edit(forID id: Self.ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func firstOffset<OtherID>(forID id: OtherID, style: Self.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #else
  func firstOffset<OtherID>(forID id: OtherID, style: Self.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #endif
}
package struct _ViewList_IteratorStyle : Swift.Equatable {
  package var applyGranularity: Swift.Bool {
    get
    set
  }
  package var granularity: Swift.Int {
    get
    set
  }
  package init(granularity: Swift.Int)
  package init()
  package func applyGranularity(to count: Swift.Int) -> Swift.Int
  package func alignToPreviousGranularityMultiple(_ value: inout Swift.Int)
  package func alignToNextGranularityMultiple(_ value: inout Swift.Int)
  package static func == (a: SwiftUICore._ViewList_IteratorStyle, b: SwiftUICore._ViewList_IteratorStyle) -> Swift.Bool
}
package enum _ViewList_Edit {
  case inserted
  case removed
  package static func == (a: SwiftUICore._ViewList_Edit, b: SwiftUICore._ViewList_Edit) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package struct _ViewList_Sublist {
  package var start: Swift.Int
  package var count: Swift.Int
  package var id: SwiftUICore._ViewList_ID
  package var elements: any SwiftUICore._ViewList_Elements
  package var traits: SwiftUICore.ViewTraitCollection
  package var list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(start: Swift.Int, count: Swift.Int, id: SwiftUICore._ViewList_ID, elements: any SwiftUICore._ViewList_Elements, traits: SwiftUICore.ViewTraitCollection, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?)
  #else
  package init(start: Swift.Int, count: Swift.Int, id: SwiftUICore._ViewList_ID, elements: any SwiftUICore._ViewList_Elements, traits: SwiftUICore.ViewTraitCollection, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?)
  #endif
}
package struct _ViewList_SublistTransform {
  package typealias Item = SwiftUICore._ViewList_SublistTransform_Item
  package var items: [any SwiftUICore._ViewList_SublistTransform_Item]
  package init()
  package var isEmpty: Swift.Bool {
    get
  }
  package mutating func push<T>(_ item: T) where T : SwiftUICore._ViewList_SublistTransform_Item
  package mutating func pop()
  package func apply(sublist: inout SwiftUICore._ViewList_Sublist)
  package func bindID(_ id: inout SwiftUICore._ViewList_ID)
}
package protocol _ViewList_SublistTransform_Item {
  func apply(sublist: inout SwiftUICore._ViewList_Sublist)
  func bindID(_ id: inout SwiftUICore._ViewList_ID)
}
package enum _ViewList_Node {
  case list(any SwiftUICore.ViewList, AttributeGraph.Attribute<any SwiftUICore.ViewList>?)
  case sublist(SwiftUICore._ViewList_Sublist)
  case group(SwiftUICore._ViewList_Group)
  case section(SwiftUICore._ViewList_Section)
  package func count(style: SwiftUICore._ViewList_IteratorStyle) -> Swift.Int
  package func estimatedCount(style: SwiftUICore._ViewList_IteratorStyle) -> Swift.Int
  @discardableResult
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore._ViewList_IteratorStyle, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Node, inout SwiftUICore._ViewList_SublistTransform) -> Swift.Bool) -> Swift.Bool
  @discardableResult
  package func applyNodes(from start: inout Swift.Int, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Node, inout SwiftUICore._ViewList_SublistTransform) -> Swift.Bool) -> Swift.Bool
  @discardableResult
  package func applySublists(from start: inout Swift.Int, style: SwiftUICore._ViewList_IteratorStyle, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (SwiftUICore._ViewList_Sublist) -> Swift.Bool) -> Swift.Bool
  @discardableResult
  package func applySublists(from start: inout Swift.Int, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (SwiftUICore._ViewList_Sublist) -> Swift.Bool) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore._ViewList_IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #else
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore._ViewList_IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #endif
}
extension SwiftUICore.ViewList {
  package var isEmpty: Swift.Bool {
    get
  }
  package var count: Swift.Int {
    get
  }
  package var estimatedCount: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  package func applySublists(from start: inout Swift.Int, style: Self.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #else
  @discardableResult
  package func applySublists(from start: inout Swift.Int, style: Self.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  package func applySublists(from start: inout Swift.Int, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #else
  @discardableResult
  package func applySublists(from start: inout Swift.Int, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  package func applySublists(from start: inout Swift.Int, style: Self.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #else
  @discardableResult
  package func applySublists(from start: inout Swift.Int, style: Self.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  package func applySublists(from start: inout Swift.Int, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #else
  @discardableResult
  package func applySublists(from start: inout Swift.Int, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  #endif
  @discardableResult
  package func applySublists(from start: inout Swift.Int, style: Self.IteratorStyle, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  @discardableResult
  package func applySublists(from start: inout Swift.Int, to body: (Self.Sublist) -> Swift.Bool) -> Swift.Bool
  package var allViewIDs: SwiftUICore._ViewList_ID.Views {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func applyIDs(from start: inout Swift.Int, style: Self.IteratorStyle, listAttribute: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (SwiftUICore._ViewList_ID) -> Swift.Bool) -> Swift.Bool
  #else
  package func applyIDs(from start: inout Swift.Int, style: Self.IteratorStyle, listAttribute: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_SublistTransform, to body: (SwiftUICore._ViewList_ID) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func applyIDs(from start: inout Swift.Int, listAttribute: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform t: SwiftUICore._ViewList_SublistTransform, to body: (SwiftUICore._ViewList_ID) -> Swift.Bool) -> Swift.Bool
  #else
  package func applyIDs(from start: inout Swift.Int, listAttribute: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform t: SwiftUICore._ViewList_SublistTransform, to body: (SwiftUICore._ViewList_ID) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func applyIDs(from start: inout Swift.Int, listAttribute: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, to body: (SwiftUICore._ViewList_ID) -> Swift.Bool) -> Swift.Bool
  #else
  package func applyIDs(from start: inout Swift.Int, listAttribute: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, to body: (SwiftUICore._ViewList_ID) -> Swift.Bool) -> Swift.Bool
  #endif
  package func applyIDs(from start: inout Swift.Int, transform t: SwiftUICore._ViewList_SublistTransform, to body: (SwiftUICore._ViewList_ID) -> Swift.Bool) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstOffset(of id: SwiftUICore._ViewList_ID.Canonical, style: Self.IteratorStyle) -> Swift.Int?
  #else
  package func firstOffset(of id: SwiftUICore._ViewList_ID.Canonical, style: Self.IteratorStyle) -> Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstOffset(of id: SwiftUICore._ViewList_ID.Canonical) -> Swift.Int?
  #else
  package func firstOffset(of id: SwiftUICore._ViewList_ID.Canonical) -> Swift.Int?
  #endif
}
package protocol _ViewList_Elements {
  typealias Body = (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> (SwiftUICore._ViewOutputs?, Swift.Bool)
  typealias MakeElement = (SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  typealias Release = SwiftUICore._ViewList_ReleaseElements
  var count: Swift.Int { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func makeElements(from start: inout Swift.Int, inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> (SwiftUICore._ViewOutputs?, Swift.Bool)) -> (SwiftUICore._ViewOutputs?, Swift.Bool)
  #else
  func makeElements(from start: inout Swift.Int, inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> (SwiftUICore._ViewOutputs?, Swift.Bool)) -> (SwiftUICore._ViewOutputs?, Swift.Bool)
  #endif
  func tryToReuseElement(at index: Swift.Int, by other: any SwiftUICore._ViewList_Elements, at otherIndex: Swift.Int, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  func retain() -> Self.Release?
  #else
  func retain() -> Self.Release?
  #endif
}
extension SwiftUICore._ViewList_Elements {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package func makeAllElements(inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #else
  @inline(__always) package func makeAllElements(inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package func makeAllElements(inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #else
  @inline(__always) package func makeAllElements(inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package func makeOneElement(at index: Swift.Int, inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #else
  @inline(__always) package func makeOneElement(at index: Swift.Int, inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package func makeOneElement(at index: Swift.Int, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #else
  @inline(__always) package func makeOneElement(at index: Swift.Int, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._ViewInputs, @escaping Self.MakeElement) -> SwiftUICore._ViewOutputs?) -> SwiftUICore._ViewOutputs?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func retain() -> Self.Release?
  #else
  package func retain() -> Self.Release?
  #endif
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct _ViewList_ID : Swift.Hashable {
  @_spi(ForSwiftUIOnly) package typealias Views = SwiftUICore._ViewList_ID_Views
  @_spi(ForSwiftUIOnly) package var index: Swift.Int {
    @_spi(ForSwiftUIOnly) get
    @_spi(ForSwiftUIOnly) set
  }
  @_spi(ForSwiftUIOnly) package init(implicitID: Swift.Int)
  @_spi(ForSwiftUIOnly) package init()
  @_spi(ForSwiftUIOnly) package static func explicit<ID>(_ id: ID, owner: AttributeGraph.AnyAttribute) -> SwiftUICore._ViewList_ID where ID : Swift.Hashable
  @_spi(ForSwiftUIOnly) package static func explicit<ID>(_ id: ID) -> SwiftUICore._ViewList_ID where ID : Swift.Hashable
  @_spi(ForSwiftUIOnly) package func elementID(at index: Swift.Int) -> SwiftUICore._ViewList_ID
  @_spi(ForSwiftUIOnly) package struct Canonical : Swift.Hashable, Swift.CustomStringConvertible {
    @_spi(ForSwiftUIOnly) package var index: Swift.Int {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) set
    }
    @_spi(ForSwiftUIOnly) package var explicitID: SwiftUICore.AnyHashable2?
    @_spi(ForSwiftUIOnly) package var requiresImplicitID: Swift.Bool {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) package var description: Swift.String {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) package func hash(into hasher: inout Swift.Hasher)
    @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore._ViewList_ID.Canonical, b: SwiftUICore._ViewList_ID.Canonical) -> Swift.Bool
    @_spi(ForSwiftUIOnly) package var hashValue: Swift.Int {
      @_spi(ForSwiftUIOnly) get
    }
  }
  @_spi(ForSwiftUIOnly) package var canonicalID: SwiftUICore._ViewList_ID.Canonical {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) package struct ElementCollection : Swift.RandomAccessCollection, Swift.Equatable {
    @_spi(ForSwiftUIOnly) package var id: SwiftUICore._ViewList_ID
    @_spi(ForSwiftUIOnly) package var count: Swift.Int
    @_spi(ForSwiftUIOnly) package init(id: SwiftUICore._ViewList_ID, count: Swift.Int)
    @_spi(ForSwiftUIOnly) package var startIndex: Swift.Int {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) package var endIndex: Swift.Int {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) package subscript(index: Swift.Int) -> SwiftUICore._ViewList_ID {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore._ViewList_ID.ElementCollection, b: SwiftUICore._ViewList_ID.ElementCollection) -> Swift.Bool
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Element = SwiftUICore._ViewList_ID
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Index = Swift.Int
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Indices = Swift.Range<Swift.Int>
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Iterator = Swift.IndexingIterator<SwiftUICore._ViewList_ID.ElementCollection>
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias SubSequence = Swift.Slice<SwiftUICore._ViewList_ID.ElementCollection>
  }
  @_spi(ForSwiftUIOnly) package func elementIDs(count: Swift.Int) -> SwiftUICore._ViewList_ID.ElementCollection
  @_spi(ForSwiftUIOnly) package mutating func bind<ID>(explicitID: ID, owner: AttributeGraph.AnyAttribute, isUnary: Swift.Bool, reuseID: Swift.Int) where ID : Swift.Hashable
  @_spi(ForSwiftUIOnly) package mutating func bind<ID>(explicitID: ID, owner: AttributeGraph.AnyAttribute, reuseID: Swift.Int) where ID : Swift.Hashable
  @_spi(ForSwiftUIOnly) package mutating func bind<ID>(explicitID: ID, owner: AttributeGraph.AnyAttribute, isUnary: Swift.Bool) where ID : Swift.Hashable
  @_spi(ForSwiftUIOnly) package mutating func bind<ID>(explicitID: ID, owner: AttributeGraph.AnyAttribute) where ID : Swift.Hashable
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package var primaryExplicitID: SwiftUICore.AnyHashable2? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) package var primaryExplicitID: SwiftUICore.AnyHashable2? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  @_spi(ForSwiftUIOnly) package var allExplicitIDs: [SwiftUICore.AnyHashable2] {
    @_spi(ForSwiftUIOnly) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func explicitID<ID>(owner: AttributeGraph.AnyAttribute) -> ID? where ID : Swift.Hashable
  #else
  @_spi(ForSwiftUIOnly) package func explicitID<ID>(owner: AttributeGraph.AnyAttribute) -> ID? where ID : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func explicitID<ID>(for idType: ID.Type) -> ID? where ID : Swift.Hashable
  #else
  @_spi(ForSwiftUIOnly) package func explicitID<ID>(for idType: ID.Type) -> ID? where ID : Swift.Hashable
  #endif
  @_spi(ForSwiftUIOnly) package func containsID<ID>(_ id: ID) -> Swift.Bool where ID : Swift.Hashable
  @_spi(ForSwiftUIOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForSwiftUIOnly) package var reuseIdentifier: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package class _Views<Base> : SwiftUICore._ViewList_ID.Views where Base : Swift.Equatable, Base : Swift.RandomAccessCollection, Base.Element == SwiftUICore._ViewList_ID, Base.Index == Swift.Int {
    @_spi(ForSwiftUIOnly) final package let base: Base
    @_spi(ForSwiftUIOnly) package init(_ base: Base, isDataDependent: Swift.Bool)
    @_spi(ForSwiftUIOnly) override final package var endIndex: Swift.Int {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) override final package subscript(index: Swift.Int) -> SwiftUICore._ViewList_ID {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) override final package func isEqual(to other: SwiftUICore._ViewList_ID.Views) -> Swift.Bool
    @_spi(ForSwiftUIOnly) @objc deinit
  }
  @_spi(ForSwiftUIOnly) final package class JoinedViews : SwiftUICore._ViewList_ID.Views {
    @_spi(ForSwiftUIOnly) final package let views: [(views: SwiftUICore._ViewList_ID.Views, endOffset: Swift.Int)]
    @_spi(ForSwiftUIOnly) final package let count: Swift.Int
    @_spi(ForSwiftUIOnly) package init(_ views: [SwiftUICore._ViewList_ID.Views], isDataDependent: Swift.Bool)
    @_spi(ForSwiftUIOnly) override final package var endIndex: Swift.Int {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) override final package subscript(index: Swift.Int) -> SwiftUICore._ViewList_ID {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) override final package func isEqual(to other: SwiftUICore._ViewList_ID.Views) -> Swift.Bool
    @_spi(ForSwiftUIOnly) @objc deinit
  }
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore._ViewList_ID, b: SwiftUICore._ViewList_ID) -> Swift.Bool
  @_spi(ForSwiftUIOnly) public var hashValue: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore._ViewList_ID : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
open class _ViewList_ID_Views : Swift.RandomAccessCollection, Swift.Equatable {
  @_spi(ForSwiftUIOnly) final public let isDataDependent: Swift.Bool
  @_spi(ForSwiftUIOnly) final public var startIndex: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open var endIndex: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open subscript(index: Swift.Int) -> SwiftUICore._ViewList_ID {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open func isEqual(to other: SwiftUICore._ViewList_ID_Views) -> Swift.Bool
  @_spi(ForSwiftUIOnly) package init(isDataDependent: Swift.Bool)
  @_spi(ForSwiftUIOnly) package func withDataDependency() -> SwiftUICore._ViewList_ID_Views
  @_spi(ForSwiftUIOnly) public static func == (lhs: SwiftUICore._ViewList_ID_Views, rhs: SwiftUICore._ViewList_ID_Views) -> Swift.Bool
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Element = SwiftUICore._ViewList_ID
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Index = Swift.Int
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore._ViewList_ID_Views>
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUICore._ViewList_ID_Views>
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore._ViewList_ID_Views : Swift.Sendable {
}
extension SwiftUICore._ViewListOutputs {
  package static func unaryViewList<V>(view: SwiftUICore._GraphValue<V>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where V : SwiftUICore.View
  package static func unaryViewList<T>(viewType: T.Type = T.self, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewListOutputs
  package static func emptyViewList(inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  package func makeAttribute(inputs: SwiftUICore._ViewListInputs) -> AttributeGraph.Attribute<any SwiftUICore.ViewList>
  package func makeAttribute(viewInputs: SwiftUICore._ViewInputs) -> AttributeGraph.Attribute<any SwiftUICore.ViewList>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func makeModifiedList(list: AttributeGraph.Attribute<any SwiftUICore.ViewList>, modifier: SwiftUICore._ViewListOutputs.ListModifier?) -> AttributeGraph.Attribute<any SwiftUICore.ViewList>
  #else
  package static func makeModifiedList(list: AttributeGraph.Attribute<any SwiftUICore.ViewList>, modifier: SwiftUICore._ViewListOutputs.ListModifier?) -> AttributeGraph.Attribute<any SwiftUICore.ViewList>
  #endif
  package mutating func multiModifier<T>(_ modifier: SwiftUICore._GraphValue<T>, inputs: SwiftUICore._ViewListInputs) where T : SwiftUICore.ViewModifier
  package static func concat(_ outputs: [SwiftUICore._ViewListOutputs], inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
package struct EmptyViewList : SwiftUICore.ViewList {
  package init()
  package func count(style: SwiftUICore.EmptyViewList.IteratorStyle) -> Swift.Int
  package func estimatedCount(style: SwiftUICore.EmptyViewList.IteratorStyle) -> Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #else
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #endif
  package var traits: SwiftUICore.EmptyViewList.Traits {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var viewIDs: SwiftUICore.EmptyViewList.ID.Views? {
    get
  }
  #else
  package var viewIDs: SwiftUICore.EmptyViewList.ID.Views? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore.EmptyViewList.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore.EmptyViewList.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore.EmptyViewList.Node, inout SwiftUICore.EmptyViewList.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #else
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore.EmptyViewList.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore.EmptyViewList.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore.EmptyViewList.Node, inout SwiftUICore.EmptyViewList.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #else
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore.EmptyViewList.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #else
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore.EmptyViewList.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #endif
}
package struct EmptyViewListElements : SwiftUICore._ViewList_Elements {
  package init()
  package var count: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func makeElements(from start: inout Swift.Int, inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping SwiftUICore.EmptyViewListElements.MakeElement) -> (SwiftUICore._ViewOutputs?, Swift.Bool)) -> (SwiftUICore._ViewOutputs?, Swift.Bool)
  #else
  package func makeElements(from start: inout Swift.Int, inputs: SwiftUICore._ViewInputs, indirectMap: SwiftUICore.IndirectAttributeMap?, body: (SwiftUICore._ViewInputs, @escaping SwiftUICore.EmptyViewListElements.MakeElement) -> (SwiftUICore._ViewOutputs?, Swift.Bool)) -> (SwiftUICore._ViewOutputs?, Swift.Bool)
  #endif
  package func tryToReuseElement(at index: Swift.Int, by other: any SwiftUICore._ViewList_Elements, at otherIndex: Swift.Int, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
package struct ViewListSlice : SwiftUICore.ViewList {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #else
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #endif
  package var traits: SwiftUICore.ViewListSlice.Traits {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var viewIDs: SwiftUICore.ViewListSlice.ID.Views? {
    get
  }
  #else
  package var viewIDs: SwiftUICore.ViewListSlice.ID.Views? {
    get
  }
  #endif
  package init(base: any SwiftUICore.ViewList, bounds: Swift.Range<Swift.Int>)
  package func count(style: SwiftUICore.ViewListSlice.IteratorStyle) -> Swift.Int
  package func estimatedCount(style: SwiftUICore.ViewListSlice.IteratorStyle) -> Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore.ViewListSlice.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore.ViewListSlice.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore.ViewListSlice.Node, inout SwiftUICore.ViewListSlice.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #else
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore.ViewListSlice.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore.ViewListSlice.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore.ViewListSlice.Node, inout SwiftUICore.ViewListSlice.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #else
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore.ViewListSlice.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #else
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore.ViewListSlice.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #endif
}
package struct _ViewList_Group : SwiftUICore.ViewList {
  package typealias AttributedList = (list: any SwiftUICore.ViewList, attribute: AttributeGraph.Attribute<any SwiftUICore.ViewList>)
  package var lists: [SwiftUICore._ViewList_Group.AttributedList]
  package func count(style: SwiftUICore._ViewList_Group.IteratorStyle) -> Swift.Int
  package func estimatedCount(style: SwiftUICore._ViewList_Group.IteratorStyle) -> Swift.Int
  package var traits: SwiftUICore._ViewList_Group.Traits {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #else
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var viewIDs: SwiftUICore._ViewList_Group.ID.Views? {
    get
  }
  #else
  package var viewIDs: SwiftUICore._ViewList_Group.ID.Views? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore._ViewList_Group.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_Group.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Group.Node, inout SwiftUICore._ViewList_Group.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #else
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore._ViewList_Group.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_Group.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Group.Node, inout SwiftUICore._ViewList_Group.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #endif
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore._ViewList_IteratorStyle, transform: inout SwiftUICore._ViewList_Group.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Group.Node, inout SwiftUICore._ViewList_Group.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #else
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore._ViewList_Group.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #else
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore._ViewList_Group.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #endif
  package struct Init : AttributeGraph.Rule, SwiftUICore.AsyncAttribute, Swift.CustomStringConvertible {
    package var value: any SwiftUICore.ViewList {
      get
    }
    package var description: Swift.String {
      get
    }
    package typealias Value = any SwiftUICore.ViewList
  }
}
package struct _ViewList_Section : SwiftUICore.ViewList {
  package var id: Swift.UInt32
  package var base: SwiftUICore._ViewList_Group
  package var traits: SwiftUICore.ViewTraitCollection
  package var isHierarchical: Swift.Bool
  package var header: SwiftUICore._ViewList_Group.AttributedList {
    get
  }
  package var content: SwiftUICore._ViewList_Group.AttributedList {
    get
  }
  package var footer: SwiftUICore._ViewList_Group.AttributedList {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #else
  package var traitKeys: SwiftUICore.ViewTraitKeys? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var viewIDs: SwiftUICore._ViewList_Section.ID.Views? {
    get
  }
  #else
  package var viewIDs: SwiftUICore._ViewList_Section.ID.Views? {
    get
  }
  #endif
  package func count(style: SwiftUICore._ViewList_Section.IteratorStyle) -> Swift.Int
  package func estimatedCount(style: SwiftUICore._ViewList_Section.IteratorStyle) -> Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore._ViewList_Section.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_Section.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Section.Node, inout SwiftUICore._ViewList_Section.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #else
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore._ViewList_Section.IteratorStyle, list: AttributeGraph.Attribute<any SwiftUICore.ViewList>?, transform: inout SwiftUICore._ViewList_Section.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Section.Node, inout SwiftUICore._ViewList_Section.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #endif
  package struct Info {
    package var id: Swift.UInt32
    package var isHeader: Swift.Bool
    package var isFooter: Swift.Bool
  }
  package func applyNodes(from start: inout Swift.Int, style: SwiftUICore._ViewList_IteratorStyle, transform: inout SwiftUICore._ViewList_Section.SublistTransform, to body: (inout Swift.Int, SwiftUICore._ViewList_IteratorStyle, SwiftUICore._ViewList_Section.Node, SwiftUICore._ViewList_Section.Info, inout SwiftUICore._ViewList_Section.SublistTransform) -> Swift.Bool) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #else
  package func edit(forID id: SwiftUICore._ViewList_ID, since transaction: SwiftUICore.TransactionID) -> SwiftUICore._ViewList_Edit?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore._ViewList_Section.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #else
  package func firstOffset<OtherID>(forID id: OtherID, style: SwiftUICore._ViewList_Section.IteratorStyle) -> Swift.Int? where OtherID : Swift.Hashable
  #endif
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
open class _ViewList_Subgraph {
  @_spi(ForSwiftUIOnly) final package let subgraph: AttributeGraph.Subgraph
  @_spi(ForSwiftUIOnly) final package var refcount: Swift.UInt32 {
    get
  }
  @_spi(ForSwiftUIOnly) package init(subgraph: AttributeGraph.Subgraph)
  @_spi(ForSwiftUIOnly) final package func wrapping(_ base: any SwiftUICore._ViewList_Elements) -> any SwiftUICore._ViewList_Elements
  @_spi(ForSwiftUIOnly) final package func wrapping(_ list: any SwiftUICore.ViewList) -> any SwiftUICore.ViewList
  @_spi(ForSwiftUIOnly) open func invalidate()
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore._ViewList_Subgraph : Swift.Sendable {
}
final package class _ViewList_ReleaseElements : Swift.Equatable {
  @objc deinit
  package static func == (lhs: SwiftUICore._ViewList_ReleaseElements, rhs: SwiftUICore._ViewList_ReleaseElements) -> Swift.Bool
}
extension Swift.FloatingPoint {
  package func isAlmostEqual(to other: Self, tolerance: Self) -> Swift.Bool
  package func isAlmostEqual(to other: Self) -> Swift.Bool
  package func isAlmostZero(absoluteTolerance tolerance: Self) -> Swift.Bool
  package func isAlmostZero() -> Swift.Bool
  package func rescaledAlmostEqual(to other: Self, tolerance: Self) -> Swift.Bool
}
extension SwiftUICore.TimeDataFormatting.Resolvable : SwiftUICore.TimelineSchedule {
  package func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimeDataFormatting.Resolvable<Source, Format>.Mode) -> Swift.AnySequence<Foundation.Date>
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias Entries = Swift.AnySequence<Foundation.Date>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  package static var _background: SwiftUICore.Color {
    get
  }
  package static func systemBackgroundColor(info: SwiftUICore.BackgroundInfo, context: SwiftUICore.BackgroundContext, scheme: SwiftUICore.ColorScheme) -> SwiftUICore.Color.Resolved
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.BackgroundStyle {
  @_alwaysEmitIntoClient public static var background: SwiftUICore.BackgroundStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct BackgroundStyle : SwiftUICore.ShapeStyle {
  @inlinable public init() {}
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.BackgroundStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _addingBackgroundGroup() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _addingBackgroundLayer() -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @inlinable nonisolated public func backgroundStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return modifier(_EnvironmentBackgroundStyleModifier(style: style))
    }
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var backgroundStyle: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #else
  public var backgroundStyle: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var currentBackgroundStyle: SwiftUICore.AnyShapeStyle? {
    get
  }
  #else
  package var currentBackgroundStyle: SwiftUICore.AnyShapeStyle? {
    get
  }
  #endif
  package var effectiveBackgroundStyle: SwiftUICore.AnyShapeStyle {
    get
  }
  package var backgroundContext: SwiftUICore.BackgroundContext {
    get
    set
  }
  package var backgroundInfo: SwiftUICore.BackgroundInfo {
    get
    set
  }
}
package enum BackgroundContext : Swift.Int, Swift.CaseIterable {
  case normal
  case grouped
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.Int)
  #else
  package init?(rawValue: Swift.Int)
  #endif
  package typealias AllCases = [SwiftUICore.BackgroundContext]
  package typealias RawValue = Swift.Int
  package static var allCases: [SwiftUICore.BackgroundContext] {
    get
  }
  package var rawValue: Swift.Int {
    get
  }
}
package struct BackgroundInfo : Swift.Equatable {
  package var layer: Swift.Int
  package var groupCount: Swift.Int
  package init(layer: Swift.Int, groupCount: Swift.Int)
  package static func == (a: SwiftUICore.BackgroundInfo, b: SwiftUICore.BackgroundInfo) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _EnvironmentBackgroundStyleModifier<S> : SwiftUICore.ViewInputsModifier, SwiftUICore.PrimitiveViewModifier where S : SwiftUICore.ShapeStyle {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var style: S
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(style: S) { self.style = style }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentBackgroundStyleModifier<S>>, inputs: inout SwiftUICore._ViewInputs)
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentBackgroundStyleModifier<S>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._EnvironmentBackgroundStyleModifier : Swift.Sendable {
}
package struct InterpolatedShapeStyle<From, To> : SwiftUICore.ShapeStyle where From : SwiftUICore.ShapeStyle, To : SwiftUICore.ShapeStyle {
  package var from: From
  package var to: To
  package var progress: Swift.Float
  package init(from: From, to: To, progress: Swift.Float)
  package func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  package typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func foregroundStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_ForegroundStyleModifier(style: style))
    }
  
  @inlinable nonisolated public func foregroundStyle<S1, S2>(_ primary: S1, _ secondary: S2) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle {
        modifier(_ForegroundStyleModifier2(
            primary: primary, secondary: secondary))
    }
  
  @available(iOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:)")
  @available(macOS, introduced: 12.0, deprecated: 12.0, renamed: "foregroundStyle(_:_:)")
  @available(tvOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:)")
  @available(watchOS, introduced: 8.0, deprecated: 8.0, renamed: "foregroundStyle(_:_:)")
  @_Concurrency.MainActor @preconcurrency package func _foregroundStyle<S1, S2>(primary: S1, secondary: S2) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle
  
  @inlinable nonisolated public func foregroundStyle<S1, S2, S3>(_ primary: S1, _ secondary: S2, _ tertiary: S3) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle, S3 : SwiftUICore.ShapeStyle {
        modifier(_ForegroundStyleModifier3(
            primary: primary, secondary: secondary, tertiary: tertiary))
    }
  
  @available(iOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:_:)")
  @available(macOS, introduced: 12.0, deprecated: 12.0, renamed: "foregroundStyle(_:_:_:)")
  @available(tvOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:_:)")
  @available(watchOS, introduced: 8.0, deprecated: 8.0, renamed: "foregroundStyle(_:_:_:)")
  @_Concurrency.MainActor @preconcurrency package func _foregroundStyle<S1, S2, S3>(primary: S1, secondary: S2, tertiary: S3) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle, S3 : SwiftUICore.ShapeStyle
  
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var foregroundStyle: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #else
  package var foregroundStyle: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultForegroundStyle: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #else
  package var defaultForegroundStyle: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var currentForegroundStyle: SwiftUICore.AnyShapeStyle? {
    get
  }
  #else
  package var currentForegroundStyle: SwiftUICore.AnyShapeStyle? {
    get
  }
  #endif
  package var _effectiveForegroundStyle: SwiftUICore.AnyShapeStyle {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundStyleModifier<Style> : SwiftUICore.PrimitiveViewModifier, SwiftUICore.ViewInputsModifier where Style : SwiftUICore.ShapeStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency public var style: Style
  @inlinable @_Concurrency.MainActor @preconcurrency public init(style: Style) {
        self.style = style
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundStyleModifier<Style>>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundStyleModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundStyleModifier2<S1, S2> : SwiftUICore.PrimitiveViewModifier, SwiftUICore.ViewInputsModifier where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency public var primary: S1
  @_Concurrency.MainActor @preconcurrency public var secondary: S2
  @inlinable @_Concurrency.MainActor @preconcurrency public init(primary: S1, secondary: S2) {
        self.primary = primary
        self.secondary = secondary
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundStyleModifier2<S1, S2>>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundStyleModifier2 : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ForegroundStyleModifier3<S1, S2, S3> : SwiftUICore.PrimitiveViewModifier, SwiftUICore.ViewInputsModifier where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle, S3 : SwiftUICore.ShapeStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency public var primary: S1
  @_Concurrency.MainActor @preconcurrency public var secondary: S2
  @_Concurrency.MainActor @preconcurrency public var tertiary: S3
  @inlinable @_Concurrency.MainActor @preconcurrency public init(primary: S1, secondary: S2, tertiary: S3) {
        self.primary = primary
        self.secondary = secondary
        self.tertiary = tertiary
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ForegroundStyleModifier3<S1, S2, S3>>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ForegroundStyleModifier3 : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.ForegroundStyle {
  @_alwaysEmitIntoClient public static var foreground: SwiftUICore.ForegroundStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ForegroundStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  @inlinable public init() {}
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUICore.ForegroundStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForegroundStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ImplicitShapeStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  @inlinable internal init() {}
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol ShapeStyle : Swift.Sendable {
  @available(*, deprecated, message: "obsolete")
  static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, Self>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  #if compiler(>=5.3) && $AssociatedTypeAvailability
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_weakLinked associatedtype Resolved : SwiftUICore.ShapeStyle = Swift.Never
  #else
  @_weakLinked associatedtype Resolved : SwiftUICore.ShapeStyle = Swift.Never
  #endif
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  func resolve(in environment: SwiftUICore.EnvironmentValues) -> Self.Resolved
}
package protocol PrimitiveShapeStyle : SwiftUICore.ShapeStyle where Self.Resolved == Swift.Never {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Never : SwiftUICore.ShapeStyle {
  public typealias Resolved = Swift.Never
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, Swift.Never>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self.Resolved == Swift.Never {
  public func resolve(in environment: SwiftUICore.EnvironmentValues) -> Swift.Never
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  package typealias Name = SwiftUICore._ShapeStyle_Name
  package typealias Pack = SwiftUICore._ShapeStyle_Pack
  package typealias ResolverMode = SwiftUICore._ShapeStyle_ResolverMode
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, Self>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func fallbackColor(in environment: SwiftUICore.EnvironmentValues, level: Swift.Int = 0) -> SwiftUICore.Color?
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func fallbackColor(in environment: SwiftUICore.EnvironmentValues, level: Swift.Int = 0) -> SwiftUICore.Color?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveBackgroundMaterial(in environment: SwiftUICore.EnvironmentValues, level: Swift.Int = 0) -> SwiftUICore.Material.ResolvedMaterial?
  #else
  package func resolveBackgroundMaterial(in environment: SwiftUICore.EnvironmentValues, level: Swift.Int = 0) -> SwiftUICore.Material.ResolvedMaterial?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveGradient(in environment: SwiftUICore.EnvironmentValues, level: Swift.Int = 0) -> SwiftUICore.ResolvedGradient?
  #else
  package func resolveGradient(in environment: SwiftUICore.EnvironmentValues, level: Swift.Int = 0) -> SwiftUICore.ResolvedGradient?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func copyStyle(name: Self.Name = .foreground, in env: SwiftUICore.EnvironmentValues, foregroundStyle: SwiftUICore.AnyShapeStyle? = nil) -> SwiftUICore.AnyShapeStyle
  #else
  package func copyStyle(name: Self.Name = .foreground, in env: SwiftUICore.EnvironmentValues, foregroundStyle: SwiftUICore.AnyShapeStyle? = nil) -> SwiftUICore.AnyShapeStyle
  #endif
  package func mapCopiedStyle<S>(in shape: inout SwiftUICore._ShapeStyle_Shape, body: (SwiftUICore.AnyShapeStyle) -> S) where S : SwiftUICore.ShapeStyle
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func primaryStyle(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.AnyShapeStyle?
  #else
  package func primaryStyle(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.AnyShapeStyle?
  #endif
  package func isMultiLevel(in env: SwiftUICore.EnvironmentValues) -> Swift.Bool
}
package enum _ShapeStyle_Name : Swift.UInt8, Swift.Equatable, Swift.Comparable {
  case foreground
  case background
  case multicolor
  package static func < (lhs: SwiftUICore._ShapeStyle_Name, rhs: SwiftUICore._ShapeStyle_Name) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.UInt8)
  #else
  package init?(rawValue: Swift.UInt8)
  #endif
  package typealias RawValue = Swift.UInt8
  package var rawValue: Swift.UInt8 {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ShapeStyle_Shape {
  package enum Operation {
    case prepareText(level: Swift.Int)
    case resolveStyle(name: SwiftUICore._ShapeStyle_Name, levels: Swift.Range<Swift.Int>)
    case multiLevel
    case fallbackColor(level: Swift.Int)
    case copyStyle(name: SwiftUICore._ShapeStyle_Name)
    case primaryStyle
    case modifyBackground(level: Swift.Int)
  }
  package enum Result {
    case none
    case preparedText(SwiftUICore._ShapeStyle_Shape.PreparedTextResult)
    case pack(SwiftUICore._ShapeStyle_Pack)
    case style(SwiftUICore.AnyShapeStyle)
    case color(SwiftUICore.Color)
    case bool(Swift.Bool)
  }
  package enum PreparedTextResult {
    case foregroundKeyColor
    case foregroundColor(SwiftUICore.Color)
  }
  package var operation: SwiftUICore._ShapeStyle_Shape.Operation
  package var result: SwiftUICore._ShapeStyle_Shape.Result
  package var environment: SwiftUICore.EnvironmentValues
  package var foregroundStyle: SwiftUICore.AnyShapeStyle?
  package var bounds: CoreFoundation.CGRect?
  package var role: SwiftUICore.ShapeRole
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(operation: SwiftUICore._ShapeStyle_Shape.Operation, result: SwiftUICore._ShapeStyle_Shape.Result = .none, environment: SwiftUICore.EnvironmentValues = .init(), foregroundStyle: SwiftUICore.AnyShapeStyle? = nil, bounds: CoreFoundation.CGRect? = nil, role: SwiftUICore.ShapeRole = .fill)
  #else
  package init(operation: SwiftUICore._ShapeStyle_Shape.Operation, result: SwiftUICore._ShapeStyle_Shape.Result = .none, environment: SwiftUICore.EnvironmentValues = .init(), foregroundStyle: SwiftUICore.AnyShapeStyle? = nil, bounds: CoreFoundation.CGRect? = nil, role: SwiftUICore.ShapeRole = .fill)
  #endif
  package struct RecursiveStyles : Swift.OptionSet {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let content: SwiftUICore._ShapeStyle_Shape.RecursiveStyles
    package static let foreground: SwiftUICore._ShapeStyle_Shape.RecursiveStyles
    package static let background: SwiftUICore._ShapeStyle_Shape.RecursiveStyles
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    package typealias ArrayLiteralElement = SwiftUICore._ShapeStyle_Shape.RecursiveStyles
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    package typealias Element = SwiftUICore._ShapeStyle_Shape.RecursiveStyles
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    package typealias RawValue = Swift.UInt8
  }
  package var activeRecursiveStyles: SwiftUICore._ShapeStyle_Shape.RecursiveStyles
  package func opacity(at level: Swift.Int) -> Swift.Float
  package func opacity(for color: SwiftUICore.Color, at level: Swift.Int) -> Swift.Float
  package func applyingOpacity(at level: Swift.Int, to color: SwiftUICore.Color) -> SwiftUICore.Color
  package func applyingOpacity(at level: Swift.Int, to color: SwiftUICore.Color.Resolved) -> SwiftUICore.Color.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var currentForegroundStyle: SwiftUICore.AnyShapeStyle? {
    get
  }
  #else
  package var currentForegroundStyle: SwiftUICore.AnyShapeStyle? {
    get
  }
  #endif
  package var effectiveForegroundStyle: SwiftUICore.AnyShapeStyle {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._ShapeStyle_Shape : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ShapeStyle_ShapeType {
  package enum Operation {
    case modifiesBackground
    package static func == (a: SwiftUICore._ShapeStyle_ShapeType.Operation, b: SwiftUICore._ShapeStyle_ShapeType.Operation) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package enum Result {
    case none
    case bool(Swift.Bool)
  }
  package var operation: SwiftUICore._ShapeStyle_ShapeType.Operation
  package var result: SwiftUICore._ShapeStyle_ShapeType.Result
}
@available(*, unavailable)
extension SwiftUICore._ShapeStyle_ShapeType : Swift.Sendable {
}
package struct OffsetShapeStyle<Base> : SwiftUICore.ShapeStyle where Base : SwiftUICore.ShapeStyle {
  package var base: Base
  package var offset: Swift.Int
  package func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  package static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  package typealias Resolved = Swift.Never
}
extension SwiftUICore.ShapeStyle {
  package func offset(by levels: Swift.Int) -> SwiftUICore.OffsetShapeStyle<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Shape : Swift.Sendable, SwiftUICore.Animatable, SwiftUICore.View {
  nonisolated func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated static var role: SwiftUICore.ShapeRole { get }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior { get }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ShapeRole : Swift.Sendable {
  case fill
  case stroke
  case separator
  public static func == (a: SwiftUICore.ShapeRole, b: SwiftUICore.ShapeRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var role: SwiftUICore.ShapeRole {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  package func effectivePath(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _StrokedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: S
  @_Concurrency.MainActor @preconcurrency public var style: SwiftUICore.StrokeStyle
  @inlinable nonisolated public init(shape: S, style: SwiftUICore.StrokeStyle) {
        self.shape = shape
        self.style = style
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<S.AnimatableData, SwiftUICore.StrokeStyle.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._StrokedShape<S>.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore._StrokedShape<S>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @inlinable public func stroke(style: SwiftUICore.StrokeStyle) -> some SwiftUICore.Shape {
        return _StrokedShape(shape: self, style: style)
    }
  
  @inlinable public func stroke(lineWidth: CoreFoundation.CGFloat = 1) -> some SwiftUICore.Shape {
        return stroke(style: StrokeStyle(lineWidth: lineWidth))
    }
  
}
package protocol Location : Swift.Equatable {
  associatedtype Value
  var wasRead: Swift.Bool { get set }
  func get() -> Self.Value
  func set(_ value: Self.Value, transaction: SwiftUICore.Transaction)
  func update() -> (Self.Value, Swift.Bool)
}
extension SwiftUICore.Location {
  package func update() -> (Self.Value, Swift.Bool)
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_documentation(visibility: private) open class AnyLocationBase {
  @objc deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyLocationBase : Swift.Sendable {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_documentation(visibility: private) open class AnyLocation<Value> : SwiftUICore.AnyLocationBase, @unchecked Swift.Sendable {
  @_spi(ForSwiftUIOnly) open var wasRead: Swift.Bool {
    get
    set
  }
  @_spi(ForSwiftUIOnly) open func get() -> Value
  @_spi(ForSwiftUIOnly) open func set(_ newValue: Value, transaction: SwiftUICore.Transaction)
  @_spi(ForSwiftUIOnly) open func projecting<P>(_ projection: P) -> SwiftUICore.AnyLocation<P.Projected> where Value == P.Base, P : SwiftUICore.Projection
  @_spi(ForSwiftUIOnly) open func update() -> (Value, Swift.Bool)
  @_spi(ForSwiftUIOnly) open func isEqual(to other: SwiftUICore.AnyLocation<Value>) -> Swift.Bool
  package init()
  @objc deinit
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyLocation : Swift.Equatable {
  public static func == (lhs: SwiftUICore.AnyLocation<Value>, rhs: SwiftUICore.AnyLocation<Value>) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.AnyLocation : Swift.Sendable {
}
final package class LocationBox<L> : SwiftUICore.AnyLocation<L.Value>, SwiftUICore.Location, @unchecked Swift.Sendable where L : SwiftUICore.Location {
  final package var location: L {
    get
  }
  package init(_ location: L)
  override final package var wasRead: Swift.Bool {
    get
    set
  }
  override final package func get() -> L.Value
  override final package func set(_ newValue: L.Value, transaction: SwiftUICore.Transaction)
  override final package func projecting<P>(_ projection: P) -> SwiftUICore.AnyLocation<P.Projected> where P : SwiftUICore.Projection, L.Value == P.Base
  override final package func update() -> (L.Value, Swift.Bool)
  override final package func isEqual(to other: SwiftUICore.AnyLocation<L.Value>) -> Swift.Bool
  package typealias Value = L.Value
  @objc deinit
}
package struct LocationProjectionCache {
  package mutating func reference<P, L>(for projection: P, on location: L) -> SwiftUICore.AnyLocation<P.Projected> where P : SwiftUICore.Projection, L : SwiftUICore.Location, P.Base == L.Value
  package mutating func reset()
  package init()
}
package struct FlattenedCollectionLocation<Value, Base> : SwiftUICore.Location where Base : Swift.Collection, Base : Swift.Equatable, Base.Element : SwiftUICore.AnyLocation<Value> {
  package typealias Value = Value
  package let base: Base
  package init(base: [SwiftUICore.AnyLocation<Value>])
  package var wasRead: Swift.Bool {
    get
    set
  }
  package func get() -> Value
  package func set(_ newValue: Value, transaction: SwiftUICore.Transaction)
  package func update() -> (Value, Swift.Bool)
  package static func == (lhs: SwiftUICore.FlattenedCollectionLocation<Value, Base>, rhs: SwiftUICore.FlattenedCollectionLocation<Value, Base>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct UnitPoint : Swift.Hashable {
  public var x: CoreFoundation.CGFloat
  public var y: CoreFoundation.CGFloat
  @inlinable public init() {
        self.init(x: 0, y: 0)
    }
  @inlinable public init(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat) {
        self.x = x
        self.y = y
    }
  package init(_ point: CoreFoundation.CGPoint, in rect: CoreFoundation.CGRect)
  package init(edge: SwiftUICore.Edge)
  package func `in`(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint
  package func `in`(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGPoint
  public static let zero: SwiftUICore.UnitPoint
  public static let center: SwiftUICore.UnitPoint
  public static let leading: SwiftUICore.UnitPoint
  public static let trailing: SwiftUICore.UnitPoint
  public static let top: SwiftUICore.UnitPoint
  public static let bottom: SwiftUICore.UnitPoint
  public static let topLeading: SwiftUICore.UnitPoint
  public static let topTrailing: SwiftUICore.UnitPoint
  public static let bottomLeading: SwiftUICore.UnitPoint
  public static let bottomTrailing: SwiftUICore.UnitPoint
  package static let infinity: SwiftUICore.UnitPoint
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.UnitPoint, b: SwiftUICore.UnitPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.UnitPoint {
  package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get
    set
  }
  package init(_ l1: CoreFoundation.CGFloat, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitPoint : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>
  public var animatableData: SwiftUICore.UnitPoint.AnimatableData {
    get
    set
  }
}
extension SwiftUICore.UnitPoint : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUICore.CodableUnitPoint {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = SwiftUICore.CodableUnitPoint
}
package struct CodableUnitPoint : SwiftUICore.CodableProxy {
  package var base: SwiftUICore.UnitPoint
  package init(_ base: SwiftUICore.UnitPoint)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package typealias Base = SwiftUICore.UnitPoint
}
extension SwiftUICore.UnitPoint : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceTransformModifier<Key> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey {
  @_Concurrency.MainActor @preconcurrency public var transform: (inout Key.Value) -> Swift.Void
  public typealias Body = Swift.Never
  @inlinable nonisolated public init(key _: Key.Type = Key.self, transform: @escaping (inout Key.Value) -> Swift.Void) {
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@available(*, unavailable)
extension SwiftUICore._PreferenceTransformModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_PreferenceTransformModifier<K>(transform: callback))
    }
  
}
extension SwiftUICore.PreferencesOutputs {
  package mutating func makePreferenceTransformer<K>(inputs: SwiftUICore.PreferencesInputs, key _: K.Type, transform: @autoclosure () -> AttributeGraph.Attribute<(inout K.Value) -> Swift.Void>) where K : SwiftUICore.PreferenceKey
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public protocol Projection : Swift.Hashable {
  associatedtype Base
  associatedtype Projected
  @_spi(ForSwiftUIOnly) func get(base: Self.Base) -> Self.Projected
  @_spi(ForSwiftUIOnly) func set(base: inout Self.Base, newValue: Self.Projected)
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.Projection {
  @_spi(ForSwiftUIOnly) package func composed<Tail>(with tail: Tail) -> SwiftUICore.ComposedProjection<Self, Tail> where Tail : SwiftUICore.Projection, Self.Projected == Tail.Base
}
package struct ComposedProjection<Left, Right> : SwiftUICore.Projection where Left : SwiftUICore.Projection, Right : SwiftUICore.Projection, Left.Projected == Right.Base {
  package func get(base: Left.Base) -> Right.Projected
  package func set(base: inout Left.Base, newValue: Right.Projected)
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.ComposedProjection<Left, Right>, b: SwiftUICore.ComposedProjection<Left, Right>) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  package typealias Base = Left.Base
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  package typealias Projected = Right.Projected
  package var hashValue: Swift.Int {
    get
  }
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension Swift.WritableKeyPath : SwiftUICore.Projection {
  @_spi(ForSwiftUIOnly) public func get(base: Root) -> Value
  @_spi(ForSwiftUIOnly) public func set(base: inout Root, newValue: Value)
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Base = Root
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Projected = Value
}
package struct ScrapeableID : Swift.Hashable {
  package static let none: SwiftUICore.ScrapeableID
  package init()
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.ScrapeableID, b: SwiftUICore.ScrapeableID) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore._ViewInputs {
  package var isScrapeable: Swift.Bool {
    get
    set
  }
  package var scrapeableParentID: SwiftUICore.ScrapeableID {
    get
    set
  }
}
package protocol ScrapeableAttribute : AttributeGraph._AttributeBody {
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func scrapeContent(from ident: AttributeGraph.AnyAttribute) -> SwiftUICore.ScrapeableContent.Item?
  #else
  static func scrapeContent(from ident: AttributeGraph.AnyAttribute) -> SwiftUICore.ScrapeableContent.Item?
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func scrapeableAttachment(_ content: SwiftUICore.ScrapeableContent.Content?) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency package func scrapeableAttachment(_ content: SwiftUICore.ScrapeableContent.Content?) -> some SwiftUICore.View
  
  #endif
}
package struct ScrapeableContent {
  indirect package enum Content {
    case text(SwiftUICore.Text, SwiftUICore.ResolvedStyledText, SwiftUICore.EnvironmentValues)
    case image(SwiftUICore.Image, SwiftUICore.EnvironmentValues)
    case platformView(Swift.AnyObject)
    case appEntityIdentifier(Swift.String)
    case appIntentIdentifier(Swift.String)
    case accessibilityProperties(SwiftUICore.AccessibilityProperties, SwiftUICore.EnvironmentValues, SwiftUICore.AnyInterfaceIdiom)
    case intelligenceProvider(Any)
  }
  package struct Item {
    package var content: SwiftUICore.ScrapeableContent.Content
    package var size: CoreFoundation.CGSize
    package var transform: SwiftUICore.ViewTransform
    package init(_ content: SwiftUICore.ScrapeableContent.Content, ids localID: SwiftUICore.ScrapeableID, _ parentID: SwiftUICore.ScrapeableID, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>)
  }
  final package class Node {
    final package let item: SwiftUICore.ScrapeableContent.Item
    final package var children: [SwiftUICore.ScrapeableContent.Node] {
      get
    }
    @objc deinit
  }
  package var nodes: [SwiftUICore.ScrapeableContent.Node]
  package var children: [SwiftUICore.ScrapeableContent]
  package var isEmpty: Swift.Bool {
    get
  }
}
extension AttributeGraph.Subgraph {
  package func scrapeContent() -> SwiftUICore.ScrapeableContent
}
extension SwiftUICore.ViewGraph {
  final package func scrapeContent() -> SwiftUICore.ScrapeableContent
}
extension SwiftUICore.ViewRendererHost {
  package func scrapeContent() -> SwiftUICore.ScrapeableContent
}
extension SwiftUICore.ScrapeableContent : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
extension SwiftUICore.ScrapeableContent.Node : Swift.CustomStringConvertible {
  final package var description: Swift.String {
    get
  }
}
extension SwiftUICore.ScrapeableContent.Item : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public enum GesturePhase<Wrapped> {
  @_spi(ForSwiftUIOnly) case possible(Wrapped?)
  @_spi(ForSwiftUIOnly) case active(Wrapped)
  @_spi(ForSwiftUIOnly) case ended(Wrapped)
  @_spi(ForSwiftUIOnly) case failed
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.GesturePhase : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GesturePhase : Swift.Equatable where Wrapped : Swift.Equatable {
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.GesturePhase<Wrapped>, b: SwiftUICore.GesturePhase<Wrapped>) -> Swift.Bool
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GesturePhase {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package var unwrapped: Wrapped? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) package var unwrapped: Wrapped? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  @_spi(ForSwiftUIOnly) package func map<T>(_ body: (Wrapped) -> T) -> SwiftUICore.GesturePhase<T>
  @_spi(ForSwiftUIOnly) package func withValue<T>(_ value: @autoclosure () -> T) -> SwiftUICore.GesturePhase<T>
  @_spi(ForSwiftUIOnly) package var isPossible: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) package var isActive: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) package var isTerminal: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) package var isEnded: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) package var isFailed: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GesturePhase : SwiftUICore.Defaultable {
  @_spi(ForSwiftUIOnly) package static var defaultValue: SwiftUICore.GesturePhase<Wrapped> {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  package typealias Value = SwiftUICore.GesturePhase<Wrapped>
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GestureCategory : SwiftUICore.Defaultable {
  @_spi(ForSwiftUIOnly) package static var defaultValue: SwiftUICore.GestureCategory {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  package typealias Value = SwiftUICore.GestureCategory
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ViewOutputs {
  package var preferences: SwiftUICore.PreferencesOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var layoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #else
  package var layoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #endif
  package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(anyKey key: any SwiftUICore.AnyPreferenceKey.Type) -> AttributeGraph.AnyAttribute? {
    get
    set
  }
  #else
  package subscript(anyKey key: any SwiftUICore.AnyPreferenceKey.Type) -> AttributeGraph.AnyAttribute? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript<K>(key: K.Type) -> AttributeGraph.Attribute<K.Value>? where K : SwiftUICore.PreferenceKey {
    get
    set
  }
  #else
  package subscript<K>(key: K.Type) -> AttributeGraph.Attribute<K.Value>? where K : SwiftUICore.PreferenceKey {
    get
    set
  }
  #endif
  package mutating func appendPreference<K>(key: K.Type, value: AttributeGraph.Attribute<K.Value>) where K : SwiftUICore.PreferenceKey
  package func forEachPreference(_ body: (any SwiftUICore.AnyPreferenceKey.Type, AttributeGraph.AnyAttribute) -> Swift.Void)
}
@available(*, unavailable)
extension SwiftUICore._ViewOutputs : Swift.Sendable {
}
extension SwiftUICore._ViewOutputs {
  package func viewResponders() -> AttributeGraph.Attribute<[SwiftUICore.ViewResponder]>
}
package protocol SpatialEventType : SwiftUICore.EventType {
  var globalLocation: CoreFoundation.CGPoint { get set }
  var location: CoreFoundation.CGPoint { get set }
  var radius: CoreFoundation.CGFloat { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var kind: SwiftUICore.SpatialEvent.Kind? { get }
  #else
  var kind: SwiftUICore.SpatialEvent.Kind? { get }
  #endif
}
extension SwiftUICore.SpatialEventType {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var kind: SwiftUICore.SpatialEvent.Kind? {
    get
  }
  #else
  package var kind: SwiftUICore.SpatialEvent.Kind? {
    get
  }
  #endif
}
package struct SpatialEvent : SwiftUICore.SpatialEventType, Swift.Equatable {
  package enum Kind : Swift.Equatable {
    case touch
    case mouse
    case pan
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.SpatialEvent.Kind, b: SwiftUICore.SpatialEvent.Kind) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package var phase: SwiftUICore.EventPhase
  package var timestamp: SwiftUICore.Time
  package var binding: SwiftUICore.EventBinding?
  package var kind: SwiftUICore.SpatialEvent.Kind?
  package var globalLocation: CoreFoundation.CGPoint
  package var location: CoreFoundation.CGPoint
  package var radius: CoreFoundation.CGFloat
  package init<T>(_ event: T) where T : SwiftUICore.SpatialEventType
  package init(_ event: any SwiftUICore.SpatialEventType)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ event: any SwiftUICore.EventType)
  #else
  package init?(_ event: any SwiftUICore.EventType)
  #endif
  package static func == (a: SwiftUICore.SpatialEvent, b: SwiftUICore.SpatialEvent) -> Swift.Bool
}
package func defaultConvertEventLocations<E>(_ events: inout [SwiftUICore.EventID : E], converter: (inout [CoreFoundation.CGPoint]) -> Swift.Void)
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceWritingModifier<Key> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey {
  @_Concurrency.MainActor @preconcurrency public var value: Key.Value
  public typealias Body = Swift.Never
  @inlinable nonisolated public init(key: Key.Type = Key.self, value: Key.Value) {
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(*, unavailable)
extension SwiftUICore._PreferenceWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PreferenceWritingModifier : Swift.Equatable where Key.Value : Swift.Equatable {
  nonisolated public static func == (a: SwiftUICore._PreferenceWritingModifier<Key>, b: SwiftUICore._PreferenceWritingModifier<Key>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func preference<K>(key: K.Type = K.self, value: K.Value) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_PreferenceWritingModifier<K>(value: value))
    }
  
}
extension SwiftUICore.PreferencesOutputs {
  package mutating func makePreferenceWriter<K>(inputs: SwiftUICore.PreferencesInputs, key _: K.Type, value: @autoclosure () -> AttributeGraph.Attribute<K.Value>) where K : SwiftUICore.PreferenceKey
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func truePreference<K>(_ key: K.Type = K.self) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, K.Value == Swift.Bool
  
}
extension SwiftUICore.Gesture {
  package func truePreference<K>(_ key: K.Type = K.self) -> some SwiftUICore.Gesture<Self.Value> where K : SwiftUICore.PreferenceKey, K.Value == Swift.Bool
  
}
package protocol ConfigurationBasedResolvableStringAttribute : SwiftUICore.ConfigurationBasedResolvableStringAttributeRepresentation, SwiftUICore.ResolvableStringAttribute {
}
package protocol ConfigurationBasedResolvableStringAttributeRepresentation : Swift.Decodable, Swift.Encodable, SwiftUICore.ResolvableStringAttributeFamily, SwiftUICore.ResolvableStringAttributeRepresentation {
  var invalidationConfiguration: SwiftUICore.ResolvableAttributeConfiguration { get }
}
extension SwiftUICore.ConfigurationBasedResolvableStringAttributeRepresentation {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var schedule: SwiftUICore.ResolvableAttributeConfiguration.Schedule? {
    get
  }
  #else
  package var schedule: SwiftUICore.ResolvableAttributeConfiguration.Schedule? {
    get
  }
  #endif
}
package enum ResolvableAttributeConfiguration : Swift.Equatable {
  case none
  case interval(delay: Swift.Double? = nil)
  case timer(end: Foundation.Date)
  case timerInterval(interval: Foundation.DateInterval, countdown: Swift.Bool)
  case wallClock(alignment: Foundation.NSCalendar.Unit)
  package var isDynamic: Swift.Bool {
    get
  }
  package static func == (a: SwiftUICore.ResolvableAttributeConfiguration, b: SwiftUICore.ResolvableAttributeConfiguration) -> Swift.Bool
}
extension SwiftUICore.ResolvableAttributeConfiguration {
  package struct Schedule : SwiftUICore.TimelineSchedule {
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(config: SwiftUICore.ResolvableAttributeConfiguration)
    #else
    package init?(config: SwiftUICore.ResolvableAttributeConfiguration)
    #endif
    package func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> Swift.AnySequence<Foundation.Date>
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    package typealias Entries = Swift.AnySequence<Foundation.Date>
  }
}
extension SwiftUICore.ResolvableAttributeConfiguration : Swift.Codable {
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct PreviewColorSchemeTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable package static var defaultValue: SwiftUICore.ColorScheme? {
    get { nil }
  }
  #else
  @inlinable package static var defaultValue: SwiftUICore.ColorScheme? {
    get { nil }
  }
  #endif
  @available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
  @usableFromInline
  package typealias Value = SwiftUICore.ColorScheme?
}
@available(*, unavailable)
extension SwiftUICore.PreviewColorSchemeTraitKey : Swift.Sendable {
}
package struct ScrollAnchorStorage : Swift.Equatable {
  package enum Role : Swift.CaseIterable {
    case initialOffset
    case sizeChanges
    case alignment
    package static func == (a: SwiftUICore.ScrollAnchorStorage.Role, b: SwiftUICore.ScrollAnchorStorage.Role) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package typealias AllCases = [SwiftUICore.ScrollAnchorStorage.Role]
    package static var allCases: [SwiftUICore.ScrollAnchorStorage.Role] {
      get
    }
    package var hashValue: Swift.Int {
      get
    }
  }
  package var anchors: [SwiftUICore.ScrollAnchorStorage.Role : SwiftUICore.UnitPoint]
  package var defaultValue: SwiftUICore.UnitPoint?
  package init()
  package var isEmpty: Swift.Bool {
    get
  }
  package var initialOffset: SwiftUICore.UnitPoint {
    get
    set
  }
  package var sizeChanges: SwiftUICore.UnitPoint {
    get
    set
  }
  package var alignment: SwiftUICore.UnitPoint {
    get
    set
  }
  package mutating func updateRole(_ role: SwiftUICore.ScrollAnchorStorage.Role, anchor: SwiftUICore.UnitPoint)
  package func anchor(role: SwiftUICore.ScrollAnchorStorage.Role) -> SwiftUICore.UnitPoint
  package func adjustedAnchor(role: SwiftUICore.ScrollAnchorStorage.Role, layoutDirection: SwiftUICore.LayoutDirection) -> SwiftUICore.UnitPoint
  package mutating func reset()
  package static func == (a: SwiftUICore.ScrollAnchorStorage, b: SwiftUICore.ScrollAnchorStorage) -> Swift.Bool
}
extension SwiftUICore.EnvironmentValues {
  package var scrollAnchors: SwiftUICore.ScrollAnchorStorage {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var initialOffsetScrollAnchor: SwiftUICore.UnitPoint? {
    get
  }
  #else
  package var initialOffsetScrollAnchor: SwiftUICore.UnitPoint? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var sizeChangesScrollAnchor: SwiftUICore.UnitPoint? {
    get
  }
  #else
  package var sizeChangesScrollAnchor: SwiftUICore.UnitPoint? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var alignmentScrollAnchor: SwiftUICore.UnitPoint? {
    get
  }
  #else
  package var alignmentScrollAnchor: SwiftUICore.UnitPoint? {
    get
  }
  #endif
}
package protocol InterfaceIdiomDependentFormatStyle : Foundation.FormatStyle {
  func interfaceIdiom(_ idiom: SwiftUICore.AnyInterfaceIdiom) -> Self
}
extension CoreFoundation.CGAffineTransform {
  package init(rotation: SwiftUICore.Angle)
  package var isTranslation: Swift.Bool {
    get
  }
  package var isRectilinear: Swift.Bool {
    get
  }
  package var isUniform: Swift.Bool {
    get
  }
  package func rotated(by angle: SwiftUICore.Angle) -> CoreFoundation.CGAffineTransform
  package var scale: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGAffineTransform : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_silgen_name("_IntelligenceSupportMakeSummarySymbol")
public func _IntelligenceSupportMakeSummarySymbol(isOn: Swift.Bool, font: CoreText.CTFont, foregroundColor: CoreGraphics.CGColor) -> Swift.AnyObject
@_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public enum _IntelligenceSupport : Swift.Sendable {
}
@_spi(_) extension SwiftUICore._IntelligenceSupport {
  @_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public struct AnimatingText : SwiftUICore.View, Swift.Sendable {
    @_spi(_) public struct Context : Swift.Sendable {
      #if compiler(>=5.3) && $NoncopyableGenerics
      @_spi(_) public func summarySymbol(isOn: Swift.Bool, foregroundColor: SwiftUICore.Color? = nil) -> SwiftUICore.Text
      #else
      @_spi(_) public func summarySymbol(isOn: Swift.Bool, foregroundColor: SwiftUICore.Color? = nil) -> SwiftUICore.Text
      #endif
    }
    @_spi(_) nonisolated public init(foregroundColor: SwiftUICore.Color = .primary, body: (SwiftUICore._IntelligenceSupport.AnimatingText.Context) -> SwiftUICore.Text)
    @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      @_spi(_) get
    }
    @_spi(_) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_IntelligenceSupportO13AnimatingTextV4bodyQrvp", 0) __
  }
  @_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public struct AnimatingSummarySymbol : SwiftUICore.View {
    @_spi(_) @_Concurrency.MainActor @preconcurrency package var isOn: Swift.Bool
    @_spi(_) @_Concurrency.MainActor @preconcurrency package var font: CoreText.CTFont
    @_spi(_) @_Concurrency.MainActor @preconcurrency package var color: CoreGraphics.CGColor
    @_spi(_) nonisolated public init(isOn: Swift.Bool, font: CoreText.CTFont, foregroundColor: CoreGraphics.CGColor)
    @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      @_spi(_) get
    }
    @_spi(_) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_IntelligenceSupportO22AnimatingSummarySymbolV4bodyQrvp", 0) __
  }
}
@_spi(_) @available(*, unavailable)
extension SwiftUICore._IntelligenceSupport.AnimatingSummarySymbol : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _LuminanceToAlphaEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._LuminanceToAlphaEffect, b: SwiftUICore._LuminanceToAlphaEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func luminanceToAlpha() -> some SwiftUICore.View {
        return modifier(_LuminanceToAlphaEffect())
    }
  
}
package enum CoreTesting {
  package static var isRunning: Swift.Bool
}
package struct EventFilter<Value> : SwiftUICore.GestureModifier {
  package var predicate: (any SwiftUICore.EventType) -> Swift.Bool
  package init(predicate: @escaping (any SwiftUICore.EventType) -> Swift.Bool)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.EventFilter<Value>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>) -> SwiftUICore._GestureOutputs<Value>
  package typealias BodyValue = Value
}
extension SwiftUICore.Gesture {
  package func eventFilter(_ predicate: @escaping (any SwiftUICore.EventType) -> Swift.Bool) -> SwiftUICore.ModifierGesture<SwiftUICore.EventFilter<Self.Value>, Self>
  package func eventFilter(allowedTypes: [any SwiftUICore.EventType.Type]) -> SwiftUICore.ModifierGesture<SwiftUICore.EventFilter<Self.Value>, Self>
  package func eventFilter(allowedTypes: any SwiftUICore.EventType.Type...) -> SwiftUICore.ModifierGesture<SwiftUICore.EventFilter<Self.Value>, Self>
  package func eventFilter(allowedType: any SwiftUICore.EventType.Type) -> SwiftUICore.ModifierGesture<SwiftUICore.EventFilter<Self.Value>, Self>
  package func eventFilter(excludedType: any SwiftUICore.EventType.Type) -> SwiftUICore.ModifierGesture<SwiftUICore.EventFilter<Self.Value>, Self>
  package func eventFilter<FilteredEventType>(forType filteredType: FilteredEventType.Type, _ predicate: @escaping (FilteredEventType) -> Swift.Bool) -> SwiftUICore.ModifierGesture<SwiftUICore.EventFilter<Self.Value>, Self> where FilteredEventType : SwiftUICore.EventType
  package func eventFilter<FilteredEventType>(allowedType filteredType: FilteredEventType.Type, _ predicate: @escaping (FilteredEventType) -> Swift.Bool) -> SwiftUICore.ModifierGesture<SwiftUICore.EventFilter<Self.Value>, Self> where FilteredEventType : SwiftUICore.EventType
}
extension SwiftUICore.DisplayList {
  final package class ViewUpdater {
    @objc deinit
  }
}
package protocol AnyViewFactory {
  var viewType: any Any.Type { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func encoding() -> (id: Swift.String, data: any Swift.Decodable & Swift.Encodable)?
  #else
  func encoding() -> (id: Swift.String, data: any Swift.Decodable & Swift.Encodable)?
  #endif
}
extension SwiftUICore.AnyViewFactory {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func encoding() -> (id: Swift.String, data: any Swift.Decodable & Swift.Encodable)?
  #else
  package func encoding() -> (id: Swift.String, data: any Swift.Decodable & Swift.Encodable)?
  #endif
}
extension SwiftUICore.AnyViewFactory where Self : SwiftUICore.View {
  package var viewType: any Any.Type {
    get
  }
}
package protocol PlatformLayerFactory : SwiftUICore.AnyViewFactory {
  var platformLayerType: QuartzCore.CALayer.Type { get }
  func updatePlatformLayer(_ layer: QuartzCore.CALayer)
  func renderPlatformLayer(in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
}
extension SwiftUICore.PlatformLayerFactory {
  package func renderPlatformLayer(in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
}
package protocol PlatformViewFactory : SwiftUICore.AnyViewFactory {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func makePlatformView() -> Swift.AnyObject?
  #else
  func makePlatformView() -> Swift.AnyObject?
  #endif
  func updatePlatformView(_ view: inout Swift.AnyObject)
  func renderPlatformView(in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
  var features: SwiftUICore.DisplayList.Features { get }
}
extension SwiftUICore.PlatformViewFactory {
  package func renderPlatformView(in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
  package var features: SwiftUICore.DisplayList.Features {
    get
  }
}
extension SwiftUICore.RendererLeafView where Self : SwiftUICore.PlatformViewFactory {
  package func content() -> SwiftUICore.DisplayList.Content.Value
}
package protocol PlatformGroupFactory : SwiftUICore.AnyViewFactory {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func makePlatformGroup() -> Swift.AnyObject?
  #else
  func makePlatformGroup() -> Swift.AnyObject?
  #endif
  func needsUpdateFor(newValue: any SwiftUICore.PlatformGroupFactory) -> Swift.Bool
  func updatePlatformGroup(_ view: inout Swift.AnyObject)
  func platformGroupContainer(_ view: Swift.AnyObject) -> Swift.AnyObject
  func renderPlatformGroup(_ list: SwiftUICore.DisplayList, in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
  var features: SwiftUICore.DisplayList.Features { get }
}
extension SwiftUICore.PlatformGroupFactory {
  package func renderPlatformGroup(_ list: SwiftUICore.DisplayList, in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
  package var features: SwiftUICore.DisplayList.Features {
    get
  }
}
package protocol _DisplayList_ViewFactory : SwiftUICore.AnyViewFactory {
  func makeView() -> SwiftUICore.AnyView
  var identity: SwiftUICore.DisplayList.Identity { get }
}
extension SwiftUICore._DisplayList_ViewFactory {
  package var identity: SwiftUICore.DisplayList.Identity {
    get
  }
}
extension SwiftUICore.RendererLeafView where Self : SwiftUICore._DisplayList_ViewFactory {
  package func content() -> SwiftUICore.DisplayList.Content.Value
}
package struct ViewDecoders {
  package typealias DecodableViewFactory = Swift.Decodable & SwiftUICore.AnyViewFactory
  package static func registerDecodableFactoryType<T, U>(_ factoryType: T.Type, forType type: U.Type) where T : Swift.Decodable, T : SwiftUICore.AnyViewFactory
  package static func registerDecodableFactoryType<T>(_ factoryType: T.Type, forID id: Swift.String) where T : Swift.Decodable, T : SwiftUICore.AnyViewFactory
  package static func registerStandard(_ body: () -> Swift.Void)
}
package struct EmptyViewFactory : SwiftUICore.AnyViewFactory {
  package var viewType: any Any.Type {
    get
  }
  package init()
}
extension SwiftUICore.EmptyViewFactory : SwiftUICore.PlatformLayerFactory {
  package var platformLayerType: QuartzCore.CALayer.Type {
    get
  }
  package func updatePlatformLayer(_ view: QuartzCore.CALayer)
  package func renderPlatformLayer(in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
}
extension SwiftUICore.EmptyViewFactory : SwiftUICore.PlatformViewFactory {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func makePlatformView() -> Swift.AnyObject?
  #else
  package func makePlatformView() -> Swift.AnyObject?
  #endif
  package func updatePlatformView(_ view: inout Swift.AnyObject)
  package var features: SwiftUICore.DisplayList.Features {
    get
  }
  package func renderPlatformView(in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
}
extension SwiftUICore.EmptyViewFactory : SwiftUICore.PlatformGroupFactory {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func makePlatformGroup() -> Swift.AnyObject?
  #else
  package func makePlatformGroup() -> Swift.AnyObject?
  #endif
  package func needsUpdateFor(newValue: any SwiftUICore.PlatformGroupFactory) -> Swift.Bool
  package func updatePlatformGroup(_ view: inout Swift.AnyObject)
  package func platformGroupContainer(_ view: Swift.AnyObject) -> Swift.AnyObject
  package func renderPlatformGroup(_ list: SwiftUICore.DisplayList, in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, renderer: SwiftUICore.DisplayList.GraphicsRenderer)
}
extension SwiftUICore.EmptyViewFactory : SwiftUICore.DisplayList.ViewFactory {
  package func makeView() -> SwiftUICore.AnyView
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct AnyShape : SwiftUICore.Shape, @unchecked Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUICore.AnyShapeBox
  nonisolated public init<S>(_ shape: S) where S : SwiftUICore.Shape
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore._AnyAnimatableData
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore.AnyShape.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.AnyShape, SwiftUICore.ForegroundStyle>
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyShapeBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyShapeBox : Swift.Sendable {
}
package struct MapGesture<From, To> : SwiftUICore.GestureModifier {
  package var body: (SwiftUICore.GesturePhase<From>) -> SwiftUICore.GesturePhase<To>
  package init(_ body: @escaping (SwiftUICore.GesturePhase<From>) -> SwiftUICore.GesturePhase<To>)
  package init(_ body: @escaping (From) -> To)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.MapGesture<From, To>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<From>) -> SwiftUICore._GestureOutputs<To>
  package typealias BodyValue = From
  package typealias Value = To
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture {
  package func mapPhase<T>(_ body: @escaping (SwiftUICore.GesturePhase<Self.Value>) -> SwiftUICore.GesturePhase<T>) -> SwiftUICore.ModifierGesture<SwiftUICore.MapGesture<Self.Value, T>, Self>
  public func map<T>(_ body: @escaping (Self.Value) -> T) -> SwiftUICore._MapGesture<Self, T>
  package func discrete(_ enabled: Swift.Bool = true) -> SwiftUICore.ModifierGesture<SwiftUICore.MapGesture<Self.Value, Self.Value>, Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _MapGesture<Content, Value> : SwiftUICore.PrimitiveGesture where Content : SwiftUICore.Gesture {
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore._MapGesture<Content, Value>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._MapGesture : Swift.Sendable {
}
extension SwiftUICore.Gesture {
  package func repeatCount(_ count: Swift.Int, maximumDelay: Swift.Double = 0.35) -> SwiftUICore.ModifierGesture<SwiftUICore.RepeatGesture<Self.Value>, Self>
}
package struct RepeatGesture<Value> : SwiftUICore.GestureModifier {
  package var count: Swift.Int
  package var maximumDelay: Swift.Double
  package init(count: Swift.Int, maximumDelay: Swift.Double = 0.35)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.RepeatGesture<Value>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>) -> SwiftUICore._GestureOutputs<Value>
  package typealias BodyValue = Value
}
package struct EmptyGesture<Value> : SwiftUICore.PrimitiveGesture {
  package init()
  package static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.EmptyGesture<Value>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
extension Foundation.FormatStyle {
  package func exactSizeVariant(_ sizeVariant: SwiftUICore.TextSizeVariant) -> (style: Self, exact: Swift.Bool)
  package func sizeVariant(_ sizeVariant: SwiftUICore.TextSizeVariant) -> Self
}
extension SwiftUICore.TextSizeVariant {
  @discardableResult
  package mutating func adjust() -> Swift.Bool
}
package struct _RangeSet<Bound> : Swift.Equatable where Bound : Swift.Comparable {
  package init()
  package init(_ range: Swift.Range<Bound>)
  package func overlaps(_ range: Swift.Range<Bound>) -> Swift.Bool
  package func overlaps(_ other: SwiftUICore._RangeSet<Bound>) -> Swift.Bool
  package func contains(_ range: Swift.Range<Bound>) -> Swift.Bool
  package func contains(_ other: SwiftUICore._RangeSet<Bound>) -> Swift.Bool
  package var isEmpty: Swift.Bool {
    get
  }
  package var ranges: [Swift.Range<Bound>] {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var lowerBound: Bound? {
    get
  }
  #else
  package var lowerBound: Bound? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var upperBound: Bound? {
    get
  }
  #else
  package var upperBound: Bound? {
    get
  }
  #endif
  package mutating func insert(_ range: Swift.Range<Bound>)
  package mutating func insert(_ ranges: SwiftUICore._RangeSet<Bound>)
  package static func == (a: SwiftUICore._RangeSet<Bound>, b: SwiftUICore._RangeSet<Bound>) -> Swift.Bool
}
extension SwiftUICore._RangeSet : Swift.Sequence where Bound : Swift.Strideable, Bound.Stride : Swift.SignedInteger {
  package mutating func insert(_ bound: Bound)
  package struct Iterator : Swift.IteratorProtocol {
    #if compiler(>=5.3) && $NoncopyableGenerics
    package mutating func next() -> Bound?
    #else
    package mutating func next() -> Bound?
    #endif
    package typealias Element = Bound
  }
  package func makeIterator() -> SwiftUICore._RangeSet<Bound>.Iterator
  package var count: Swift.Int {
    get
  }
  package typealias Element = Bound
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyGesture<Value> : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture {
  fileprivate var storage: SwiftUICore.AnyGestureStorageBase<Value>
  public init<T>(_ gesture: T) where Value == T.Value, T : SwiftUICore.Gesture
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.AnyGesture<Value>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.AnyGesture : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyGestureStorageBase<Value> {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyGestureStorageBase : Swift.Sendable {
}
extension SwiftUICore.Gesture {
  package func combined<G, T>(with other: G, body: @escaping (SwiftUICore.GesturePhase<Self.Value>, SwiftUICore.GesturePhase<G.Value>) -> SwiftUICore.GesturePhase<T>) -> some SwiftUICore.Gesture<T> where G : SwiftUICore.Gesture
  
  package func zip<G>(with other: G) -> some SwiftUICore.Gesture<(Self.Value, G.Value)> where G : SwiftUICore.Gesture
  
  package func gated(by other: some Gesture) -> some SwiftUICore.Gesture<Self.Value>
  
  package func enabled(by other: some Gesture) -> some SwiftUICore.Gesture<Self.Value>
  
  package func ended(by other: some Gesture) -> some SwiftUICore.Gesture<Self.Value>
  
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GesturePhase {
  @_spi(ForSwiftUIOnly) package func and<Other, Result>(_ phase: SwiftUICore.GesturePhase<Other>, value: (Wrapped, Other) -> Result) -> SwiftUICore.GesturePhase<Result>
  @_spi(ForSwiftUIOnly) package func and<Other>(_ phase: SwiftUICore.GesturePhase<Other>) -> SwiftUICore.GesturePhase<(Wrapped, Other)>
  @_spi(ForSwiftUIOnly) package func and<Other>(_ phase: SwiftUICore.GesturePhase<Other>) -> SwiftUICore.GesturePhase<Swift.Void>
}
extension SwiftUICore.Gesture {
  package func duration(minimum: Swift.Double = 0, maximum: Swift.Double = .infinity) -> SwiftUICore.ModifierGesture<SwiftUICore.DurationGesture<Self.Value>, Self>
}
package struct DurationGesture<BodyValue> : SwiftUICore.GestureModifier {
  package var minimumDuration: Swift.Double
  package var maximumDuration: Swift.Double
  package init(minimumDuration: Swift.Double = 0, maximumDuration: Swift.Double = .infinity)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.DurationGesture<BodyValue>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<BodyValue>) -> SwiftUICore._GestureOutputs<Swift.Double>
  package typealias Value = Swift.Double
}
extension SwiftUICore.Gesture {
  package func category(_ category: SwiftUICore.GestureCategory, includeChildren: Swift.Bool = true) -> SwiftUICore.ModifierGesture<SwiftUICore.CategoryGesture<Self.Value>, Self>
  package func categoryReader(_ callback: @escaping (SwiftUICore.GestureCategory) -> Swift.Void) -> SwiftUICore.ModifierGesture<SwiftUICore.GestureCategoryReader<Self.Value>, Self>
}
package struct CategoryGesture<Value> : SwiftUICore.GestureModifier {
  package var category: SwiftUICore.GestureCategory
  package var includeChildren: Swift.Bool
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.CategoryGesture<Value>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>) -> SwiftUICore._GestureOutputs<Value>
  package typealias BodyValue = Value
}
package struct GestureCategoryReader<Value> : SwiftUICore.GestureModifier {
  package var callback: (SwiftUICore.GestureCategory) -> Swift.Void
  package init(callback: @escaping (SwiftUICore.GestureCategory) -> Swift.Void)
  package static func _makeGesture(modifier: SwiftUICore._GraphValue<SwiftUICore.GestureCategoryReader<Value>>, inputs: SwiftUICore._GestureInputs, body: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Value>) -> SwiftUICore._GestureOutputs<Value>
  package typealias BodyValue = Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Path : Swift.Equatable, Swift.LosslessStringConvertible, @unchecked Swift.Sendable {
  @_hasMissingDesignatedInitializers @usableFromInline
  final package class PathBox : Swift.Equatable {
    package init(takingPath path: RenderBox.RBPath)
    @objc @usableFromInline
    deinit
    @usableFromInline
    package static func == (lhs: SwiftUICore.Path.PathBox, rhs: SwiftUICore.Path.PathBox) -> Swift.Bool
  }
  @usableFromInline
  @frozen package enum Storage : Swift.Equatable {
    case empty
    case rect(CoreFoundation.CGRect)
    case ellipse(CoreFoundation.CGRect)
    indirect case roundedRect(SwiftUICore.FixedRoundedRect)
    @available(*, deprecated, message: "obsolete")
    indirect case stroked(SwiftUICore.StrokedPath)
    @available(*, deprecated, message: "obsolete")
    indirect case trimmed(SwiftUICore.TrimmedPath)
    case path(SwiftUICore.Path.PathBox)
    @usableFromInline
    package static func == (a: SwiftUICore.Path.Storage, b: SwiftUICore.Path.Storage) -> Swift.Bool
  }
  package var storage: SwiftUICore.Path.Storage
  package init(storage: SwiftUICore.Path.Storage)
  package init(box: SwiftUICore.Path.PathBox)
  public init()
  public init(_ path: CoreGraphics.CGPath)
  public init(_ path: CoreGraphics.CGMutablePath)
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public init(_ path: RenderBox.RBPath)
  public init(_ rect: CoreFoundation.CGRect)
  public init(roundedRect rect: CoreFoundation.CGRect, cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous)
  public init(roundedRect rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle = .continuous)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init(roundedRect rect: CoreFoundation.CGRect, cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous)
  public init(ellipseIn rect: CoreFoundation.CGRect)
  public init(_ callback: (inout SwiftUICore.Path) -> ())
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ string: Swift.String)
  #else
  public init?(_ string: Swift.String)
  #endif
  public var description: Swift.String {
    get
  }
  public var cgPath: CoreGraphics.CGPath {
    get
  }
  package func retainRBPath() -> RenderBox.RBPath
  package mutating func withMutableBuffer(do body: (Swift.UnsafeMutableRawPointer) -> Swift.Void)
  public var isEmpty: Swift.Bool {
    get
  }
  public var boundingRect: CoreFoundation.CGRect {
    get
  }
  public func contains(_ p: CoreFoundation.CGPoint, eoFill: Swift.Bool = false) -> Swift.Bool
  package func contains(points: [CoreFoundation.CGPoint], eoFill: Swift.Bool = false, origin: CoreFoundation.CGPoint = .zero) -> SwiftUICore.BitVector64
  @frozen public enum Element : Swift.Equatable {
    case move(to: CoreFoundation.CGPoint)
    case line(to: CoreFoundation.CGPoint)
    case quadCurve(to: CoreFoundation.CGPoint, control: CoreFoundation.CGPoint)
    case curve(to: CoreFoundation.CGPoint, control1: CoreFoundation.CGPoint, control2: CoreFoundation.CGPoint)
    case closeSubpath
    public static func == (a: SwiftUICore.Path.Element, b: SwiftUICore.Path.Element) -> Swift.Bool
  }
  public func forEach(_ body: (SwiftUICore.Path.Element) -> Swift.Void)
  public func strokedPath(_ style: SwiftUICore.StrokeStyle) -> SwiftUICore.Path
  public func trimmedPath(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat) -> SwiftUICore.Path
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func rect() -> CoreFoundation.CGRect?
  #else
  package func rect() -> CoreFoundation.CGRect?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func roundedRect() -> SwiftUICore.FixedRoundedRect?
  #else
  package func roundedRect() -> SwiftUICore.FixedRoundedRect?
  #endif
  public static func == (a: SwiftUICore.Path, b: SwiftUICore.Path) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.Path.Storage : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Path.PathBox : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Path : SwiftUICore.Shape {
  nonisolated public func path(in _: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Path, SwiftUICore.ForegroundStyle>
}
extension SwiftUICore.Path : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "obsolete")
@usableFromInline
package struct StrokedPath : Swift.Equatable {
  public init(path: SwiftUICore.Path, style: SwiftUICore.StrokeStyle)
  @usableFromInline
  package static func == (a: SwiftUICore.StrokedPath, b: SwiftUICore.StrokedPath) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.StrokedPath : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "obsolete")
@usableFromInline
package struct TrimmedPath : Swift.Equatable {
  @usableFromInline
  package static func == (a: SwiftUICore.TrimmedPath, b: SwiftUICore.TrimmedPath) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.TrimmedPath : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Path {
  public mutating func move(to end: CoreFoundation.CGPoint)
  public mutating func addLine(to end: CoreFoundation.CGPoint)
  public mutating func addQuadCurve(to end: CoreFoundation.CGPoint, control: CoreFoundation.CGPoint)
  public mutating func addCurve(to end: CoreFoundation.CGPoint, control1: CoreFoundation.CGPoint, control2: CoreFoundation.CGPoint)
  public mutating func closeSubpath()
  public mutating func addRect(_ rect: CoreFoundation.CGRect, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addRoundedRect(in rect: CoreFoundation.CGRect, cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous, transform: CoreFoundation.CGAffineTransform = .identity)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public mutating func addRoundedRect(in rect: CoreFoundation.CGRect, cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addEllipse(in rect: CoreFoundation.CGRect, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addRects(_ rects: [CoreFoundation.CGRect], transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addLines(_ lines: [CoreFoundation.CGPoint])
  public mutating func addRelativeArc(center: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, startAngle: SwiftUICore.Angle, delta: SwiftUICore.Angle, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addArc(center: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, startAngle: SwiftUICore.Angle, endAngle: SwiftUICore.Angle, clockwise: Swift.Bool, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addArc(tangent1End: CoreFoundation.CGPoint, tangent2End: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, transform: CoreFoundation.CGAffineTransform = .identity)
  public mutating func addPath(_ path: SwiftUICore.Path, transform: CoreFoundation.CGAffineTransform = .identity)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var currentPoint: CoreFoundation.CGPoint? {
    get
  }
  #else
  public var currentPoint: CoreFoundation.CGPoint? {
    get
  }
  #endif
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func normalized(eoFill: Swift.Bool = true) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func intersection(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func union(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func subtracting(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func symmetricDifference(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func lineIntersection(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func lineSubtraction(_ other: SwiftUICore.Path, eoFill: Swift.Bool = false) -> SwiftUICore.Path
  package mutating func formTrivialUnion(_ path: SwiftUICore.Path)
  public func applying(_ transform: CoreFoundation.CGAffineTransform) -> SwiftUICore.Path
  public func offsetBy(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat) -> SwiftUICore.Path
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Rectangle {
  @_alwaysEmitIntoClient public static var rect: SwiftUICore.Rectangle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct Rectangle : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @inlinable nonisolated public init() {}
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.RoundedRectangle {
  @_alwaysEmitIntoClient public static func rect(cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self { .init(cornerSize: cornerSize, style: style) }
  @_alwaysEmitIntoClient public static func rect(cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self { .init(cornerRadius: cornerRadius, style: style) }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct RoundedRectangle : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var cornerSize: CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public var style: SwiftUICore.RoundedCornerStyle
  @inlinable nonisolated public init(cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.cornerSize = cornerSize
        self.style = style
    }
  @inlinable nonisolated public init(cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        let cornerSize = CGSize(width: cornerRadius, height: cornerRadius)
        self.init(cornerSize: cornerSize, style: style)
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var animatableData: CoreFoundation.CGSize.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = CoreFoundation.CGSize.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.RoundedRectangle, SwiftUICore.ForegroundStyle>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.UnevenRoundedRectangle {
  @_alwaysEmitIntoClient public static func rect(cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self { .init(cornerRadii: cornerRadii, style: style) }
  @_alwaysEmitIntoClient public static func rect(topLeadingRadius: CoreFoundation.CGFloat = 0, bottomLeadingRadius: CoreFoundation.CGFloat = 0, bottomTrailingRadius: CoreFoundation.CGFloat = 0, topTrailingRadius: CoreFoundation.CGFloat = 0, style: SwiftUICore.RoundedCornerStyle = .continuous) -> Self {
        .init(
            topLeadingRadius: topLeadingRadius,
            bottomLeadingRadius: bottomLeadingRadius,
            bottomTrailingRadius: bottomTrailingRadius,
            topTrailingRadius: topTrailingRadius, style: style)
    }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct UnevenRoundedRectangle : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var cornerRadii: SwiftUICore.RectangleCornerRadii
  @_Concurrency.MainActor @preconcurrency public var style: SwiftUICore.RoundedCornerStyle
  @inlinable nonisolated public init(cornerRadii: SwiftUICore.RectangleCornerRadii, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.cornerRadii = cornerRadii
        self.style = style
    }
  @_alwaysEmitIntoClient nonisolated public init(topLeadingRadius: CoreFoundation.CGFloat = 0, bottomLeadingRadius: CoreFoundation.CGFloat = 0, bottomTrailingRadius: CoreFoundation.CGFloat = 0, topTrailingRadius: CoreFoundation.CGFloat = 0, style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.init(
            cornerRadii: .init(
                topLeading: topLeadingRadius,
                bottomLeading: bottomLeadingRadius,
                bottomTrailing: bottomTrailingRadius,
                topTrailing: topTrailingRadius),
            style: style)
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore.RectangleCornerRadii.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.RectangleCornerRadii.AnimatableData
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.UnevenRoundedRectangle, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Capsule {
  @_alwaysEmitIntoClient public static var capsule: SwiftUICore.Capsule {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func capsule(style: SwiftUICore.RoundedCornerStyle) -> Self {
        .init(style: style)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct Capsule : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var style: SwiftUICore.RoundedCornerStyle
  @inlinable nonisolated public init(style: SwiftUICore.RoundedCornerStyle = .continuous) {
        self.style = style
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Capsule, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Ellipse {
  @_alwaysEmitIntoClient public static var ellipse: SwiftUICore.Ellipse {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct Ellipse : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @inlinable nonisolated public init() {}
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Ellipse, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.Circle {
  @_alwaysEmitIntoClient public static var circle: SwiftUICore.Circle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct Circle : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @inlinable nonisolated public init() {}
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Circle, SwiftUICore.ForegroundStyle>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Circle {
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.DisplayList {
  @_spi(ForSwiftUIOnly) final public class ViewRenderer {
    @_spi(ForSwiftUIOnly) package struct Environment : Swift.Equatable {
      @_spi(ForSwiftUIOnly) package var contentsScale: CoreFoundation.CGFloat
      @_spi(ForSwiftUIOnly) package static let invalid: SwiftUICore.DisplayList.ViewRenderer.Environment
      @_spi(ForSwiftUIOnly) package init(contentsScale: CoreFoundation.CGFloat)
      @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore.DisplayList.ViewRenderer.Environment, b: SwiftUICore.DisplayList.ViewRenderer.Environment) -> Swift.Bool
    }
    @_spi(ForSwiftUIOnly) final package var configuration: SwiftUICore._RendererConfiguration {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) set
    }
    @_spi(ForSwiftUIOnly) weak final package var host: (any SwiftUICore.ViewRendererHost)? {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) set
    }
    @_spi(ForSwiftUIOnly) package init(platform: SwiftUICore.DisplayList.ViewUpdater.Platform)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) final package func exportedObject(rootView: Swift.AnyObject) -> Swift.AnyObject?
    #else
    @_spi(ForSwiftUIOnly) final package func exportedObject(rootView: Swift.AnyObject) -> Swift.AnyObject?
    #endif
    @_spi(ForSwiftUIOnly) final package func render(rootView: Swift.AnyObject, from list: SwiftUICore.DisplayList, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version, environment: SwiftUICore.DisplayList.ViewRenderer.Environment) -> SwiftUICore.Time
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) final package func renderAsync(to list: SwiftUICore.DisplayList, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time?
    #else
    @_spi(ForSwiftUIOnly) final package func renderAsync(to list: SwiftUICore.DisplayList, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time?
    #endif
    @_spi(ForSwiftUIOnly) final package var viewCacheIsEmpty: Swift.Bool {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) @objc deinit
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol InsettableShape : SwiftUICore.Shape {
  associatedtype InsetShape : SwiftUICore.InsettableShape
  func inset(by amount: CoreFoundation.CGFloat) -> Self.InsetShape
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.InsettableShape {
  @inlinable @_disfavoredOverload public func strokeBorder<S>(_ content: S, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return inset(by: style.lineWidth * 0.5)
             .stroke(style: style)
             .fill(content, style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable @_disfavoredOverload public func strokeBorder(style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> some SwiftUICore.View {
        return inset(by: style.lineWidth * 0.5)
             .stroke(style: style)
             .fill(style: FillStyle(antialiased: antialiased))
    }
  
  @inlinable @_disfavoredOverload public func strokeBorder<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
                     antialiased: antialiased)
    }
  
  @inlinable @_disfavoredOverload public func strokeBorder(lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> some SwiftUICore.View {
        return strokeBorder(style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Rectangle : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Rectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Rectangle._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI9RectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RoundedRectangle : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(base: self, amount: amount)
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var base: SwiftUICore.RoundedRectangle
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(base: SwiftUICore.RoundedRectangle, amount: CoreFoundation.CGFloat) {
            (self.base, self.amount) = (base, amount)
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: SwiftUICore.AnimatablePair<SwiftUICore.RoundedRectangle.AnimatableData, CoreFoundation.CGFloat> {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.RoundedRectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.RoundedRectangle.AnimatableData, CoreFoundation.CGFloat>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.RoundedRectangle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.RoundedRectangle._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI16RoundedRectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnevenRoundedRectangle : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(base: self, amount: amount)
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var base: SwiftUICore.UnevenRoundedRectangle
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(base: SwiftUICore.UnevenRoundedRectangle, amount: CoreFoundation.CGFloat) {
            (self.base, self.amount) = (base, amount)
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: SwiftUICore.AnimatablePair<SwiftUICore.UnevenRoundedRectangle.AnimatableData, CoreFoundation.CGFloat> {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.UnevenRoundedRectangle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    @usableFromInline
    internal typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.UnevenRoundedRectangle.AnimatableData, CoreFoundation.CGFloat>
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.UnevenRoundedRectangle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.UnevenRoundedRectangle._Inset
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI22UnevenRoundedRectangleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Capsule : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: _Inset._makeInset(amount, style: style))
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Capsule._Inset {
            let (inset, style) = Self._extractInset(self.amount)
            return Self(amount: Self._makeInset(inset + amount, style: style))
        }
    @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal static func _makeInset(_ inset: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle) -> CoreFoundation.CGFloat {
            var u = unsafeBitCast(inset, to: UInt.self)
            u = (u & ~1) | (style == .circular ? 0 : 1)
            return unsafeBitCast(u, to: CGFloat.self)
        }
    @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal static func _extractInset(_ inset: CoreFoundation.CGFloat) -> (CoreFoundation.CGFloat, SwiftUICore.RoundedCornerStyle) {
            let u = unsafeBitCast(inset, to: UInt.self)
            return (unsafeBitCast(u & ~1, to: CGFloat.self),
                (u & 1) == 0 ? .circular : .continuous)
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Capsule._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Capsule._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7CapsuleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Ellipse : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Ellipse._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Ellipse._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Ellipse._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI7EllipseV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Circle : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.Circle._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.Circle._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.Circle._Inset
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI6CircleV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
extension SwiftUICore.Rectangle {
  @_Concurrency.MainActor @preconcurrency package func outset(by insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.Shape
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum _VAlignment {
  case top
  case center
  case bottom
  package var value: CoreFoundation.CGFloat {
    get
  }
  public static func == (a: SwiftUICore._VAlignment, b: SwiftUICore._VAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AlignmentLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency public var horizontal: SwiftUICore.TextAlignment?
  @_Concurrency.MainActor @preconcurrency public var vertical: SwiftUICore._VAlignment?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(horizontal: SwiftUICore.TextAlignment? = nil, vertical: SwiftUICore._VAlignment? = nil) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(horizontal: SwiftUICore.TextAlignment? = nil, vertical: SwiftUICore._VAlignment? = nil) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  #endif
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
package protocol CustomRecursiveStringConvertible {
  var descriptionName: Swift.String { get }
  var descriptionAttributes: [(name: Swift.String, value: Swift.String)] { get }
  var defaultDescriptionAttributes: Swift.Set<SwiftUICore.DefaultDescriptionAttribute> { get }
  var descriptionChildren: [any SwiftUICore.CustomRecursiveStringConvertible] { get }
  var hideFromDescription: Swift.Bool { get }
}
extension SwiftUICore.CustomRecursiveStringConvertible {
  package var defaultDescriptionAttributes: Swift.Set<SwiftUICore.DefaultDescriptionAttribute> {
    get
  }
  package var descriptionChildren: [any SwiftUICore.CustomRecursiveStringConvertible] {
    get
  }
  package var hideFromDescription: Swift.Bool {
    get
  }
}
extension SwiftUICore.CustomRecursiveStringConvertible {
  package var descriptionName: Swift.String {
    get
  }
  package var descriptionAttributes: [(name: Swift.String, value: Swift.String)] {
    get
  }
  package var recursiveDescription: Swift.String {
    get
  }
  package var roundedRecursiveDescription: Swift.String {
    get
  }
  package func _recursiveDescription(indent: Swift.Int, rounded: Swift.Bool) -> Swift.String
  package var topLevelAttributes: [(name: Swift.String, value: Swift.String)] {
    get
  }
}
package protocol BridgeStringConvertible {
  var bridgeDescriptionChildren: [any SwiftUICore.CustomRecursiveStringConvertible] { get }
}
extension SwiftUICore.BridgeStringConvertible {
  package var bridgeDescriptionChildren: [any SwiftUICore.CustomRecursiveStringConvertible] {
    get
  }
}
package func recursiveDescriptionName(_ type: any Any.Type) -> Swift.String
extension Swift.String {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func tupleOfDoubles() -> [(label: Swift.String, value: Swift.Double)]?
  #else
  package func tupleOfDoubles() -> [(label: Swift.String, value: Swift.Double)]?
  #endif
}
extension Swift.Sequence where Self.Element == (name: Swift.String, value: Swift.String) {
  package func roundedAttributes() -> [(name: Swift.String, value: Swift.String)]
}
extension SwiftUICore.Color.Resolved {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var name: Swift.String? {
    get
  }
  #else
  package var name: Swift.String? {
    get
  }
  #endif
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol EventBindingSource : AnyObject {
  @_spi(ForSwiftUIOnly) func attach(to eventBridge: SwiftUICore.EventBindingBridge)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) func `as`<T>(_ type: T.Type) -> T?
  #else
  @_spi(ForSwiftUIOnly) func `as`<T>(_ type: T.Type) -> T?
  #endif
  @_spi(ForSwiftUIOnly) func didUpdate(phase: SwiftUICore.GesturePhase<Swift.Void>, in eventBridge: SwiftUICore.EventBindingBridge)
  @_spi(ForSwiftUIOnly) func didUpdate(gestureCategory: SwiftUICore.GestureCategory, in eventBridge: SwiftUICore.EventBindingBridge)
  @_spi(ForSwiftUIOnly) func didBind(to newBinding: SwiftUICore.EventBinding, id: SwiftUICore.EventID, in eventBridge: SwiftUICore.EventBindingBridge)
  @_spi(ForSwiftUIOnly) func didRequestHoverUpdate(in eventBridge: SwiftUICore.EventBindingBridge)
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EventBindingSource {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) public func `as`<T>(_ type: T.Type) -> T?
  #else
  @_spi(ForSwiftUIOnly) public func `as`<T>(_ type: T.Type) -> T?
  #endif
  @_spi(ForSwiftUIOnly) public func didUpdate(phase: SwiftUICore.GesturePhase<Swift.Void>, in eventBridge: SwiftUICore.EventBindingBridge)
  @_spi(ForSwiftUIOnly) public func didUpdate(gestureCategory: SwiftUICore.GestureCategory, in eventBridge: SwiftUICore.EventBindingBridge)
  @_spi(ForSwiftUIOnly) public func didBind(to newBinding: SwiftUICore.EventBinding, id: SwiftUICore.EventID, in eventBridge: SwiftUICore.EventBindingBridge)
  @_spi(ForSwiftUIOnly) public func didRequestHoverUpdate(in eventBridge: SwiftUICore.EventBindingBridge)
}
package protocol EventBindingBridgeFactory {
  static func makeEventBindingBridge(bindingManager: SwiftUICore.EventBindingManager, responder: any SwiftUICore.AnyGestureResponder) -> any SwiftUICore.EventBindingBridge & SwiftUICore.GestureGraphDelegate
}
package struct EventBindingBridgeFactoryInput : SwiftUICore.ViewInput {
  package static let defaultValue: (any SwiftUICore.EventBindingBridgeFactory.Type)?
  package typealias Value = (any SwiftUICore.EventBindingBridgeFactory.Type)?
}
extension SwiftUICore._ViewInputs {
  package func makeEventBindingBridge(bindingManager: SwiftUICore.EventBindingManager, responder: any SwiftUICore.AnyGestureResponder) -> any SwiftUICore.EventBindingBridge & SwiftUICore.GestureGraphDelegate
}
extension Foundation.FormatStyle {
  package func calendar(_ calendar: Foundation.Calendar) -> Self
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ProjectionTransform {
  public var m11: CoreFoundation.CGFloat = 1.0, m12: CoreFoundation.CGFloat = 0.0, m13: CoreFoundation.CGFloat = 0.0
  public var m21: CoreFoundation.CGFloat = 0.0, m22: CoreFoundation.CGFloat = 1.0, m23: CoreFoundation.CGFloat = 0.0
  public var m31: CoreFoundation.CGFloat = 0.0, m32: CoreFoundation.CGFloat = 0.0, m33: CoreFoundation.CGFloat = 1.0
  @inlinable public init() {}
  @inlinable public init(_ m: CoreFoundation.CGAffineTransform) {
        m11 = m.a
        m12 = m.b
        m21 = m.c
        m22 = m.d
        m31 = m.tx
        m32 = m.ty
    }
  @inlinable public init(_ m: QuartzCore.CATransform3D) {
        m11 = m.m11
        m12 = m.m12
        m13 = m.m14
        m21 = m.m21
        m22 = m.m22
        m23 = m.m24
        m31 = m.m41
        m32 = m.m42
        m33 = m.m44
    }
  @inlinable public var isIdentity: Swift.Bool {
    get {
        return self == ProjectionTransform()
    }
  }
  @inlinable public var isAffine: Swift.Bool {
    get {
        return m13 == 0 && m23 == 0 && m33 == 1
    }
  }
  package var determinant: CoreFoundation.CGFloat {
    get
  }
  package var isInvertible: Swift.Bool {
    get
  }
  public mutating func invert() -> Swift.Bool
  public func inverted() -> SwiftUICore.ProjectionTransform
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProjectionTransform : Swift.Equatable {
  public static func == (a: SwiftUICore.ProjectionTransform, b: SwiftUICore.ProjectionTransform) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProjectionTransform {
  @inline(__always) @inlinable package func dot(_ a: (CoreFoundation.CGFloat, CoreFoundation.CGFloat, CoreFoundation.CGFloat), _ b: (CoreFoundation.CGFloat, CoreFoundation.CGFloat, CoreFoundation.CGFloat)) -> CoreFoundation.CGFloat {
        return a.0 * b.0 + a.1 * b.1 + a.2 * b.2
    }
  @inlinable public func concatenating(_ rhs: SwiftUICore.ProjectionTransform) -> SwiftUICore.ProjectionTransform {
        var m = ProjectionTransform()
        m.m11 = dot((m11, m12, m13), (rhs.m11, rhs.m21, rhs.m31))
        m.m12 = dot((m11, m12, m13), (rhs.m12, rhs.m22, rhs.m32))
        m.m13 = dot((m11, m12, m13), (rhs.m13, rhs.m23, rhs.m33))
        m.m21 = dot((m21, m22, m23), (rhs.m11, rhs.m21, rhs.m31))
        m.m22 = dot((m21, m22, m23), (rhs.m12, rhs.m22, rhs.m32))
        m.m23 = dot((m21, m22, m23), (rhs.m13, rhs.m23, rhs.m33))
        m.m31 = dot((m31, m32, m33), (rhs.m11, rhs.m21, rhs.m31))
        m.m32 = dot((m31, m32, m33), (rhs.m12, rhs.m22, rhs.m32))
        m.m33 = dot((m31, m32, m33), (rhs.m13, rhs.m23, rhs.m33))
        return m
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGPoint {
  public func applying(_ m: SwiftUICore.ProjectionTransform) -> CoreFoundation.CGPoint
}
extension CoreFoundation.CGPoint {
  package func unapplying(_ m: SwiftUICore.ProjectionTransform) -> CoreFoundation.CGPoint
}
extension CoreFoundation.CGAffineTransform {
  package init(_ m: SwiftUICore.ProjectionTransform)
}
extension QuartzCore.CATransform3D {
  package init(_ m: SwiftUICore.ProjectionTransform)
}
extension SwiftUICore.ProjectionTransform : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct LuminanceCurveEffect : SwiftUICore.RendererEffect {
  @_spi(Private) public struct Curve : Swift.Equatable {
    @_spi(Private) public init(_ values: (Swift.Float, Swift.Float, Swift.Float, Swift.Float))
    @_spi(Private) public static func == (lhs: SwiftUICore.LuminanceCurveEffect.Curve, rhs: SwiftUICore.LuminanceCurveEffect.Curve) -> Swift.Bool
  }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var curve: SwiftUICore.LuminanceCurveEffect.Curve
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var amount: Swift.Float
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(curve: SwiftUICore.LuminanceCurveEffect.Curve, amount: Swift.Float)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.LuminanceCurveEffect : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.LuminanceCurveEffect.Curve : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func luminanceCurve(_ curve: (Swift.Float, Swift.Float, Swift.Float, Swift.Float), amount: Swift.Float) -> some SwiftUICore.View
  
}
package struct SpringAnimation : SwiftUICore.InternalCustomAnimation {
  package var mass: Swift.Double
  package var stiffness: Swift.Double
  package var damping: Swift.Double
  package var initialVelocity: SwiftUICore._Velocity<Swift.Double>
  package init(mass: Swift.Double, stiffness: Swift.Double, damping: Swift.Double, initialVelocity: SwiftUICore._Velocity<Swift.Double>)
  package init(mass: Swift.Double, stiffness: Swift.Double, damping: Swift.Double)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  package var function: SwiftUICore.Animation.Function {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.SpringAnimation, b: SwiftUICore.SpringAnimation) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static func interpolatingSpring(mass: Swift.Double = 1.0, stiffness: Swift.Double, damping: Swift.Double, initialVelocity: Swift.Double = 0.0) -> SwiftUICore.Animation
  @_alwaysEmitIntoClient public static func interpolatingSpring(duration: Foundation.TimeInterval = 0.5, bounce: Swift.Double = 0.0, initialVelocity: Swift.Double = 0.0) -> SwiftUICore.Animation {
        let stiffness = springStiffness(response: duration)
        let fraction = springDampingFraction(bounce: bounce)
        let damping = springDamping(fraction: fraction, stiffness: stiffness)
        return interpolatingSpring(
            stiffness: stiffness, damping: damping,
            initialVelocity: initialVelocity)
    }
  @_alwaysEmitIntoClient public static var interpolatingSpring: SwiftUICore.Animation {
    get { .interpolatingSpring() }
  }
}
extension SwiftUICore.SpringAnimation : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EdgeInsets : Swift.Equatable {
  public var top: CoreFoundation.CGFloat
  public var leading: CoreFoundation.CGFloat
  public var bottom: CoreFoundation.CGFloat
  public var trailing: CoreFoundation.CGFloat
  @inlinable public init(top: CoreFoundation.CGFloat, leading: CoreFoundation.CGFloat, bottom: CoreFoundation.CGFloat, trailing: CoreFoundation.CGFloat) {
        self.top = top
        self.leading = leading
        self.bottom = bottom
        self.trailing = trailing
    }
  @inlinable public init() {
        self.init(top: 0, leading: 0, bottom: 0, trailing: 0)
    }
  package static var zero: SwiftUICore.EdgeInsets {
    get
  }
  public static func == (a: SwiftUICore.EdgeInsets, b: SwiftUICore.EdgeInsets) -> Swift.Bool
}
package struct OptionalEdgeInsets : Swift.Hashable {
  package static var none: SwiftUICore.OptionalEdgeInsets {
    get
  }
  package static var zero: SwiftUICore.OptionalEdgeInsets {
    get
  }
  package var top: CoreFoundation.CGFloat?
  package var leading: CoreFoundation.CGFloat?
  package var bottom: CoreFoundation.CGFloat?
  package var trailing: CoreFoundation.CGFloat?
  package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(top: CoreFoundation.CGFloat? = nil, leading: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil)
  #else
  package init(top: CoreFoundation.CGFloat? = nil, leading: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ value: CoreFoundation.CGFloat?, edges: SwiftUICore.Edge.Set)
  #else
  package init(_ value: CoreFoundation.CGFloat?, edges: SwiftUICore.Edge.Set)
  #endif
  package init(_ value: SwiftUICore.EdgeInsets, edges: SwiftUICore.Edge.Set)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(edge: SwiftUICore.Edge) -> CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  package subscript(edge: SwiftUICore.Edge) -> CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
  package func adding(_ other: SwiftUICore.OptionalEdgeInsets) -> SwiftUICore.OptionalEdgeInsets
  package func `in`(axes: SwiftUICore.Axis.Set) -> SwiftUICore.OptionalEdgeInsets
  package func `in`(edges: SwiftUICore.Edge.Set) -> SwiftUICore.OptionalEdgeInsets
  package func `in`(axes: SwiftUICore.Axis.Set) -> SwiftUICore.EdgeInsets
  package func `in`(edges: SwiftUICore.Edge.Set) -> SwiftUICore.EdgeInsets
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.OptionalEdgeInsets, b: SwiftUICore.OptionalEdgeInsets) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.EdgeInsets {
  package init(_ value: CoreFoundation.CGFloat, edges: SwiftUICore.Edge.Set)
  package init(horizontal: CoreFoundation.CGFloat, vertical: CoreFoundation.CGFloat)
  package func subtracting(_ other: SwiftUICore.EdgeInsets) -> SwiftUICore.EdgeInsets
  package var isEmpty: Swift.Bool {
    get
  }
  package var vertical: CoreFoundation.CGFloat {
    get
  }
  package var horizontal: CoreFoundation.CGFloat {
    get
  }
  package subscript(edge: SwiftUICore.Edge) -> CoreFoundation.CGFloat {
    get
    set
  }
  package func `in`(_ edges: SwiftUICore.Edge.Set) -> SwiftUICore.EdgeInsets
  package func scaled(by scalar: CoreFoundation.CGFloat) -> SwiftUICore.EdgeInsets
  package func adding(_ other: SwiftUICore.EdgeInsets) -> SwiftUICore.EdgeInsets
  package func adding(_ other: SwiftUICore.OptionalEdgeInsets) -> SwiftUICore.EdgeInsets
  package func merge(_ other: SwiftUICore.OptionalEdgeInsets) -> SwiftUICore.EdgeInsets
  package var negatedInsets: SwiftUICore.EdgeInsets {
    get
  }
  package var originOffset: CoreFoundation.CGSize {
    get
  }
  package mutating func formPointwiseMin(_ other: SwiftUICore.EdgeInsets)
  package mutating func formPointwiseMax(_ other: SwiftUICore.EdgeInsets)
  @inline(__always) package mutating func xFlipIfRightToLeft(layoutDirection: () -> SwiftUICore.LayoutDirection)
}
extension SwiftUICore.EdgeInsets {
  package func hash(into hasher: inout Swift.Hasher)
}
extension CoreFoundation.CGRect {
  package func inset(by insets: SwiftUICore.EdgeInsets, layoutDirection: @autoclosure () -> SwiftUICore.LayoutDirection) -> CoreFoundation.CGRect
  package func inset(by insets: SwiftUICore.EdgeInsets) -> CoreFoundation.CGRect
  package func outset(by insets: SwiftUICore.EdgeInsets, layoutDirection: @autoclosure () -> SwiftUICore.LayoutDirection = .leftToRight) -> CoreFoundation.CGRect
  package func outset(by insets: SwiftUICore.EdgeInsets) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGSize {
  package func inset(by insets: SwiftUICore.EdgeInsets) -> CoreFoundation.CGSize
  package func outset(by insets: SwiftUICore.EdgeInsets) -> CoreFoundation.CGSize
}
extension CoreFoundation.CGPoint {
  package func offset(by insets: SwiftUICore.EdgeInsets) -> CoreFoundation.CGPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EdgeInsets : SwiftUICore.Animatable, SwiftUICore._VectorMath {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>>
  public var animatableData: SwiftUICore.EdgeInsets.AnimatableData {
    @inlinable get {
            return .init(top, .init(leading, .init(bottom, trailing)))
        }
    @inlinable set {
            let top = newValue.first
            let leading = newValue.second.first
            let bottom = newValue.second.second.first
            let trailing = newValue.second.second.second
            self = .init(
                top: top, leading: leading, bottom: bottom, trailing: trailing)
        }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EdgeInsets {
  @usableFromInline
  package init(_all: CoreFoundation.CGFloat)
}
extension SwiftUICore.EdgeInsets : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package let defaultSpacingValue: CoreFoundation.CGSize
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct Spacing : Swift.Equatable, Swift.Sendable {
  @_spi(ForSwiftUIOnly) package struct Category : Swift.Hashable {
    @_spi(ForSwiftUIOnly) package init(_ t: any Any.Type)
    @_spi(ForSwiftUIOnly) package func hash(into hasher: inout Swift.Hasher)
    @_spi(ForSwiftUIOnly) package static func == (lhs: SwiftUICore.Spacing.Category, rhs: SwiftUICore.Spacing.Category) -> Swift.Bool
    @_spi(ForSwiftUIOnly) package var hashValue: Swift.Int {
      @_spi(ForSwiftUIOnly) get
    }
  }
  @_spi(ForSwiftUIOnly) package struct Key : Swift.Hashable {
    @_spi(ForSwiftUIOnly) package var category: SwiftUICore.Spacing.Category?
    @_spi(ForSwiftUIOnly) package var edge: SwiftUICore.AbsoluteEdge
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) package init(category: SwiftUICore.Spacing.Category?, edge: SwiftUICore.AbsoluteEdge)
    #else
    @_spi(ForSwiftUIOnly) package init(category: SwiftUICore.Spacing.Category?, edge: SwiftUICore.AbsoluteEdge)
    #endif
    @_spi(ForSwiftUIOnly) package func hash(into hasher: inout Swift.Hasher)
    @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore.Spacing.Key, b: SwiftUICore.Spacing.Key) -> Swift.Bool
    @_spi(ForSwiftUIOnly) package var hashValue: Swift.Int {
      @_spi(ForSwiftUIOnly) get
    }
  }
  @_spi(ForSwiftUIOnly) package struct TextMetrics : Swift.Comparable {
    @_spi(ForSwiftUIOnly) package var ascend: CoreFoundation.CGFloat, descend: CoreFoundation.CGFloat, leading: CoreFoundation.CGFloat
    @_spi(ForSwiftUIOnly) package var pixelLength: CoreFoundation.CGFloat
    @_spi(ForSwiftUIOnly) package init(ascend: CoreFoundation.CGFloat, descend: CoreFoundation.CGFloat, leading: CoreFoundation.CGFloat, pixelLength: CoreFoundation.CGFloat)
    @_spi(ForSwiftUIOnly) package var lineSpacing: CoreFoundation.CGFloat {
      @_spi(ForSwiftUIOnly) get
    }
    @_spi(ForSwiftUIOnly) package static func < (lhs: SwiftUICore.Spacing.TextMetrics, rhs: SwiftUICore.Spacing.TextMetrics) -> Swift.Bool
    @_spi(ForSwiftUIOnly) package func isAlmostEqual(to other: SwiftUICore.Spacing.TextMetrics) -> Swift.Bool
    @_spi(ForSwiftUIOnly) package static func spacing(top: SwiftUICore.Spacing.TextMetrics, bottom: SwiftUICore.Spacing.TextMetrics) -> CoreFoundation.CGFloat
    @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore.Spacing.TextMetrics, b: SwiftUICore.Spacing.TextMetrics) -> Swift.Bool
  }
  @_spi(ForSwiftUIOnly) package enum Value : Swift.Comparable {
    @_spi(ForSwiftUIOnly) case distance(CoreFoundation.CGFloat)
    @_spi(ForSwiftUIOnly) case topTextMetrics(SwiftUICore.Spacing.TextMetrics)
    @_spi(ForSwiftUIOnly) case bottomTextMetrics(SwiftUICore.Spacing.TextMetrics)
    @_spi(ForSwiftUIOnly) @inlinable package init(_ value: CoreFoundation.CGFloat)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) package var value: CoreFoundation.CGFloat? {
      @_spi(ForSwiftUIOnly) get
    }
    #else
    @_spi(ForSwiftUIOnly) package var value: CoreFoundation.CGFloat? {
      @_spi(ForSwiftUIOnly) get
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) package func distance(to other: SwiftUICore.Spacing.Value) -> CoreFoundation.CGFloat?
    #else
    @_spi(ForSwiftUIOnly) package func distance(to other: SwiftUICore.Spacing.Value) -> CoreFoundation.CGFloat?
    #endif
    @_spi(ForSwiftUIOnly) package static func < (a: SwiftUICore.Spacing.Value, b: SwiftUICore.Spacing.Value) -> Swift.Bool
    @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore.Spacing.Value, b: SwiftUICore.Spacing.Value) -> Swift.Bool
  }
  @_spi(ForSwiftUIOnly) package mutating func incorporate(_ edges: SwiftUICore.AbsoluteEdge.Set, of other: SwiftUICore.Spacing)
  @_spi(ForSwiftUIOnly) package mutating func clear(_ edges: SwiftUICore.Edge.Set, layoutDirection: SwiftUICore.LayoutDirection)
  @_spi(ForSwiftUIOnly) package mutating func clear(_ edges: SwiftUICore.AbsoluteEdge.Set)
  @_spi(ForSwiftUIOnly) package mutating func reset(_ edges: SwiftUICore.Edge.Set, layoutDirection: SwiftUICore.LayoutDirection)
  @_spi(ForSwiftUIOnly) package mutating func reset(_ edges: SwiftUICore.AbsoluteEdge.Set)
  @_spi(ForSwiftUIOnly) package var minima: [SwiftUICore.Spacing.Key : SwiftUICore.Spacing.Value]
  @_spi(ForSwiftUIOnly) package init()
  @_spi(ForSwiftUIOnly) package init(minima: [SwiftUICore.Spacing.Key : SwiftUICore.Spacing.Value])
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func distanceToSuccessorView(along axis: SwiftUICore.Axis, layoutDirection: SwiftUICore.LayoutDirection, preferring nextPreference: SwiftUICore.Spacing) -> CoreFoundation.CGFloat?
  #else
  @_spi(ForSwiftUIOnly) package func distanceToSuccessorView(along axis: SwiftUICore.Axis, layoutDirection: SwiftUICore.LayoutDirection, preferring nextPreference: SwiftUICore.Spacing) -> CoreFoundation.CGFloat?
  #endif
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.Spacing, b: SwiftUICore.Spacing) -> Swift.Bool
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Spacing : Swift.CustomStringConvertible {
  @_spi(ForSwiftUIOnly) public var description: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.Spacing {
  @_spi(ForSwiftUIOnly) package var isLayoutDirectionSymmetric: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.Spacing {
  @_spi(ForSwiftUIOnly) package static let zero: SwiftUICore.Spacing
  @_spi(ForSwiftUIOnly) package static func all(_ value: CoreFoundation.CGFloat) -> SwiftUICore.Spacing
  @_spi(ForSwiftUIOnly) package static func horizontal(_ value: CoreFoundation.CGFloat) -> SwiftUICore.Spacing
  @_spi(ForSwiftUIOnly) package static func vertical(_ value: CoreFoundation.CGFloat) -> SwiftUICore.Spacing
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.Spacing.Category {
  @_spi(ForSwiftUIOnly) package static var textToText: SwiftUICore.Spacing.Category
  @_spi(ForSwiftUIOnly) package static var edgeAboveText: SwiftUICore.Spacing.Category
  @_spi(ForSwiftUIOnly) package static var edgeBelowText: SwiftUICore.Spacing.Category
  @_spi(ForSwiftUIOnly) package static var textBaseline: SwiftUICore.Spacing.Category
  @_spi(ForSwiftUIOnly) package static var edgeLeftText: SwiftUICore.Spacing.Category
  @_spi(ForSwiftUIOnly) package static var edgeRightText: SwiftUICore.Spacing.Category
  @_spi(ForSwiftUIOnly) package static var leftTextBaseline: SwiftUICore.Spacing.Category
  @_spi(ForSwiftUIOnly) package static var rightTextBaseline: SwiftUICore.Spacing.Category
}
@_spi(DisplayList_ViewSystem) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol PlatformDrawable : AnyObject {
  @_spi(DisplayList_ViewSystem) var options: SwiftUICore.PlatformDrawableOptions { get set }
  @_spi(DisplayList_ViewSystem) static var allowsContentsMultiplyColor: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DisplayList_ViewSystem) func update(content: SwiftUICore.PlatformDrawableContent?, required: Swift.Bool) -> Swift.Bool
  #else
  @_spi(DisplayList_ViewSystem) func update(content: SwiftUICore.PlatformDrawableContent?, required: Swift.Bool) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DisplayList_ViewSystem) func makeAsyncUpdate(content: SwiftUICore.PlatformDrawableContent, required: Swift.Bool, layer: QuartzCore.CALayer, bounds: CoreFoundation.CGRect) -> (() -> Swift.Void)?
  #else
  @_spi(DisplayList_ViewSystem) func makeAsyncUpdate(content: SwiftUICore.PlatformDrawableContent, required: Swift.Bool, layer: QuartzCore.CALayer, bounds: CoreFoundation.CGRect) -> (() -> Swift.Void)?
  #endif
  @_spi(DisplayList_ViewSystem) func setContentsScale(_ scale: CoreFoundation.CGFloat)
}
@_spi(DisplayList_ViewSystem) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PlatformDrawableContent : @unchecked Swift.Sendable {
  @_spi(DisplayList_ViewSystem) public struct State {
    @_spi(DisplayList_ViewSystem) package var mode: SwiftUICore.DisplayList.GraphicsRenderer.PlatformViewMode
    @_spi(DisplayList_ViewSystem) package var _renderer: SwiftUICore.DisplayList.GraphicsRenderer?
    @_spi(DisplayList_ViewSystem) package init()
    @_spi(DisplayList_ViewSystem) package init(platformViewMode: SwiftUICore.DisplayList.GraphicsRenderer.PlatformViewMode)
    @_spi(DisplayList_ViewSystem) package mutating func renderer() -> SwiftUICore.DisplayList.GraphicsRenderer
  }
  @_spi(DisplayList_ViewSystem) public init()
  @_spi(DisplayList_ViewSystem) public func draw(in ctx: CoreGraphics.CGContext, size: CoreFoundation.CGSize, contentsScale: CoreFoundation.CGFloat, state: inout SwiftUICore.PlatformDrawableContent.State)
  @_spi(DisplayList_ViewSystem) public func draw(in list: RenderBox.RBDisplayList, size: CoreFoundation.CGSize, state: inout SwiftUICore.PlatformDrawableContent.State)
}
@_spi(DisplayList_ViewSystem) @available(*, unavailable)
extension SwiftUICore.PlatformDrawableContent.State : Swift.Sendable {
}
@_spi(DisplayList_ViewSystem) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct PlatformDrawableOptions : Swift.Equatable, Swift.Sendable {
  @_spi(DisplayList_ViewSystem) public var isAccelerated: Swift.Bool {
    @_spi(DisplayList_ViewSystem) get
  }
  @_spi(DisplayList_ViewSystem) public var isOpaque: Swift.Bool {
    @_spi(DisplayList_ViewSystem) get
  }
  @_spi(DisplayList_ViewSystem) public var rendersAsynchronously: Swift.Bool {
    @_spi(DisplayList_ViewSystem) get
  }
  @_spi(DisplayList_ViewSystem) public var rendersFirstFrameAsynchronously: Swift.Bool {
    @_spi(DisplayList_ViewSystem) get
  }
  @_spi(DisplayList_ViewSystem) public var caLayerContentsFormat: QuartzCore.CALayerContentsFormat {
    @_spi(DisplayList_ViewSystem) get
  }
  @_spi(DisplayList_ViewSystem) public func update(rbLayer: Swift.AnyObject)
  @_spi(DisplayList_ViewSystem) public static func == (a: SwiftUICore.PlatformDrawableOptions, b: SwiftUICore.PlatformDrawableOptions) -> Swift.Bool
}
extension SwiftUICore.DisplayList {
  package mutating func insertLayerFilters(matrices: [SwiftUICore._ForegroundLayerLevel : SwiftUICore._ColorMatrix], version: SwiftUICore.DisplayList.Version, premultiplied: Swift.Bool)
  package mutating func applyViewGraphTransform(time: AttributeGraph.Attribute<SwiftUICore.Time>, version: SwiftUICore.DisplayList.Version)
}
package protocol EnvironmentalView : SwiftUICore.PrimitiveView, SwiftUICore.UnaryView {
  associatedtype EnvironmentBody : SwiftUICore.View
  func body(environment: SwiftUICore.EnvironmentValues) -> Self.EnvironmentBody
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentalView {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@_Concurrency.MainActor @preconcurrency package struct EnvironmentReader<Content> : SwiftUICore.EnvironmentalView where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package init(@SwiftUICore.ViewBuilder _ content: @escaping (SwiftUICore.EnvironmentValues) -> Content)
  @_Concurrency.MainActor @preconcurrency package func body(environment: SwiftUICore.EnvironmentValues) -> Content
  nonisolated package static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.EnvironmentReader<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated package static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  nonisolated package static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  package typealias EnvironmentBody = Content
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AppearanceActionModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var appear: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var disappear: (() -> Swift.Void)?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public init(appear: (() -> Swift.Void)? = nil, disappear: (() -> Swift.Void)? = nil) {
        self.appear = appear
        self.disappear = disappear
    }
  #else
  @inlinable nonisolated public init(appear: (() -> Swift.Void)? = nil, disappear: (() -> Swift.Void)? = nil) {
        self.appear = appear
        self.disappear = disappear
    }
  #endif
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._AppearanceActionModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._AppearanceActionModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AppearanceActionModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func onAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View {
        return modifier(
            _AppearanceActionModifier(appear: action, disappear: nil))
    }
  
  #else
  @inlinable nonisolated public func onAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View {
        return modifier(
            _AppearanceActionModifier(appear: action, disappear: nil))
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func onDisappear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View {
        return modifier(
            _AppearanceActionModifier(appear: nil, disappear: action))
    }
  
  #else
  @inlinable nonisolated public func onDisappear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View {
        return modifier(
            _AppearanceActionModifier(appear: nil, disappear: action))
    }
  
  #endif
}
package struct AppearanceEffect : AttributeGraph.StatefulRule, SwiftUICore.RemovableAttribute {
  package init(modifier: AttributeGraph.Attribute<SwiftUICore._AppearanceActionModifier>, phase: AttributeGraph.Attribute<SwiftUICore.ViewPhase>)
  package typealias Value = Swift.Void
  package mutating func updateValue()
  package static func willRemove(attribute: AttributeGraph.AnyAttribute)
  package static func didReinsert(attribute: AttributeGraph.AnyAttribute)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _PreferenceValue<Key> where Key : SwiftUICore.PreferenceKey {
  package var attribute: AttributeGraph.WeakAttribute<Key.Value>
  package init(_ attribute: AttributeGraph.WeakAttribute<Key.Value>)
  package var wrappedValue: Key.Value {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._PreferenceValue : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _DelayedPreferenceView<Key, Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Key : SwiftUICore.PreferenceKey, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var transform: (SwiftUICore._PreferenceValue<Key>) -> Content
  @inlinable nonisolated public init(transform: @escaping (SwiftUICore._PreferenceValue<Key>) -> Content) {
        self.transform = transform
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._DelayedPreferenceView<Key, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DelayedPreferenceView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PreferenceKey {
  @inlinable public static func _delay<T>(_ transform: @escaping (SwiftUICore._PreferenceValue<Self>) -> T) -> some SwiftUICore.View where T : SwiftUICore.View {
        return _DelayedPreferenceView(transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func preferenceValue<Key, T>(_ key: Key.Type = Key.self, _ transform: @escaping (Key.Value, SwiftUICore._DetachedPlaceholder<SwiftUICore._DetachedKey<Key>>) -> T) -> some SwiftUICore.View where Key : SwiftUICore.PreferenceKey, T : SwiftUICore.View
  
}
package struct PreferenceValueAttribute<Key> : AttributeGraph.Rule, SwiftUICore.AsyncAttribute, Swift.CustomStringConvertible where Key : SwiftUICore.PreferenceKey {
  package var source: AttributeGraph.WeakAttribute<Key.Value>?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(source: AttributeGraph.WeakAttribute<Key.Value>? = nil)
  #else
  package init(source: AttributeGraph.WeakAttribute<Key.Value>? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var initialValue: Key.Value? {
    get
  }
  #else
  package static var initialValue: Key.Value? {
    get
  }
  #endif
  package var value: Key.Value {
    get
  }
  package var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func setSource(_ src: AttributeGraph.Attribute<Key.Value>?, of dst: AttributeGraph.Attribute<SwiftUICore.PreferenceValueAttribute<Key>.Value>)
  #else
  package static func setSource(_ src: AttributeGraph.Attribute<Key.Value>?, of dst: AttributeGraph.Attribute<SwiftUICore.PreferenceValueAttribute<Key>.Value>)
  #endif
  package typealias Value = Key.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _EnvironmentKeyTransformModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>
  @_Concurrency.MainActor @preconcurrency public var transform: (inout Value) -> Swift.Void
  @inlinable nonisolated public init(keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Value>, transform: @escaping (inout Value) -> Swift.Void) {
        self.keyPath = keyPath
        self.transform = transform
    }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._EnvironmentKeyTransformModifier<Value>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._EnvironmentKeyTransformModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformEnvironment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, transform: @escaping (inout V) -> Swift.Void) -> some SwiftUICore.View {
        return modifier(_EnvironmentKeyTransformModifier(
            keyPath: keyPath, transform: transform))
    }
  
}
package protocol EnvironmentModifier : SwiftUICore._GraphInputsModifier {
  static func makeEnvironment(modifier: AttributeGraph.Attribute<Self>, environment: inout SwiftUICore.EnvironmentValues)
}
extension SwiftUICore.EnvironmentModifier {
  package static func _makeInputs(modifier: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _Detachable {
  static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  static var detachedProperties: SwiftUICore._DetachableProperties { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DetachableProperties : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let position: SwiftUICore._DetachableProperties
  public static let dimensions: SwiftUICore._DetachableProperties
  public static let environment: SwiftUICore._DetachableProperties
  public static let transaction: SwiftUICore._DetachableProperties
  public static let layout: SwiftUICore._DetachableProperties
  public static let all: SwiftUICore._DetachableProperties
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore._DetachableProperties
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore._DetachableProperties
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.UInt32
}
@available(*, unavailable)
extension SwiftUICore._DetachableProperties : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Detachable {
  public static var detachedProperties: SwiftUICore._DetachableProperties {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _DetachedView<Detached, Content, Child> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Detached : SwiftUICore._Detachable, Content : SwiftUICore.View, Child : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var content: Content
  @_Concurrency.MainActor @preconcurrency public var transform: (SwiftUICore._DetachedPlaceholder<Detached>) -> Child
  @inlinable nonisolated public init(content: Content, transform: @escaping (SwiftUICore._DetachedPlaceholder<Detached>) -> Child) {
        self.content = content
        self.transform = transform
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._DetachedView<Detached, Content, Child>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DetachedView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _detached<T, U>(with _: T.Type = T.self, _ transform: @escaping (SwiftUICore._DetachedPlaceholder<T>) -> U) -> some SwiftUICore.View where T : SwiftUICore._Detachable, U : SwiftUICore.View {
        return _DetachedView(content: self, transform: transform)
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func _detached<T>(_ transform: @escaping (SwiftUICore._DetachedPlaceholder<SwiftUICore._EmptyDetached>) -> T) -> some SwiftUICore.View where T : SwiftUICore.View {
        return _DetachedView(content: self, transform: transform)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _DetachedKey<Key> : SwiftUICore._Detachable where Key : SwiftUICore.PreferenceKey {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
}
@available(*, unavailable)
extension SwiftUICore._DetachedKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _EmptyDetached : SwiftUICore._Detachable {
  public static func matches<K>(key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  public static var detachedProperties: SwiftUICore._DetachableProperties {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._EmptyDetached : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct _DetachedPlaceholder<Detached> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Detached : SwiftUICore._Detachable {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._DetachedPlaceholder<Detached>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._DetachedPlaceholder : Swift.Sendable {
}
extension SwiftUICore.Text {
  package struct Superscript : Swift.Sendable, Swift.Hashable {
    package static let `default`: SwiftUICore.Text.Superscript
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Text.Superscript, b: SwiftUICore.Text.Superscript) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
}
@_spi(DisplayList_ViewSystem) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class PlatformViewDefinition : @unchecked Swift.Sendable {
  @_spi(DisplayList_ViewSystem) public struct System : Swift.Hashable, Swift.Sendable {
    @_spi(DisplayList_ViewSystem) public static let uiView: SwiftUICore.PlatformViewDefinition.System
    @_spi(DisplayList_ViewSystem) public static let nsView: SwiftUICore.PlatformViewDefinition.System
    @_spi(DisplayList_ViewSystem) public func hash(into hasher: inout Swift.Hasher)
    @_spi(DisplayList_ViewSystem) public static func == (a: SwiftUICore.PlatformViewDefinition.System, b: SwiftUICore.PlatformViewDefinition.System) -> Swift.Bool
    @_spi(DisplayList_ViewSystem) public var hashValue: Swift.Int {
      @_spi(DisplayList_ViewSystem) get
    }
  }
  @_spi(DisplayList_ViewSystem) public enum ViewKind : Swift.Sendable {
    @_spi(DisplayList_ViewSystem) case inherited
    @_spi(DisplayList_ViewSystem) case color
    @_spi(DisplayList_ViewSystem) case image
    @_spi(DisplayList_ViewSystem) case shape
    @_spi(DisplayList_ViewSystem) case shadow
    @_spi(DisplayList_ViewSystem) case backdrop
    @_spi(DisplayList_ViewSystem) case chameleonColor
    @_spi(DisplayList_ViewSystem) case drawing
    @_spi(DisplayList_ViewSystem) case compositing
    @_spi(DisplayList_ViewSystem) case geometry
    @_spi(DisplayList_ViewSystem) case projection
    @_spi(DisplayList_ViewSystem) case affine3D
    @_spi(DisplayList_ViewSystem) case mask
    @_spi(DisplayList_ViewSystem) case platformView
    @_spi(DisplayList_ViewSystem) case platformGroup
    @_spi(DisplayList_ViewSystem) case platformLayer
    @_spi(DisplayList_ViewSystem) case platformEffect
    @_spi(DisplayList_ViewSystem) public var isContainer: Swift.Bool {
      @_spi(DisplayList_ViewSystem) get
    }
    @_spi(DisplayList_ViewSystem) public static func == (a: SwiftUICore.PlatformViewDefinition.ViewKind, b: SwiftUICore.PlatformViewDefinition.ViewKind) -> Swift.Bool
    @_spi(DisplayList_ViewSystem) public func hash(into hasher: inout Swift.Hasher)
    @_spi(DisplayList_ViewSystem) public var hashValue: Swift.Int {
      @_spi(DisplayList_ViewSystem) get
    }
  }
  @_spi(DisplayList_ViewSystem) open class var system: SwiftUICore.PlatformViewDefinition.System {
    @_spi(DisplayList_ViewSystem) get
  }
  @_spi(DisplayList_ViewSystem) open class func makeView(kind: SwiftUICore.PlatformViewDefinition.ViewKind) -> Swift.AnyObject
  @_spi(DisplayList_ViewSystem) open class func makeLayerView(type: QuartzCore.CALayer.Type, kind: SwiftUICore.PlatformViewDefinition.ViewKind) -> Swift.AnyObject
  @_spi(DisplayList_ViewSystem) open class func makePlatformView(view: Swift.AnyObject, kind: SwiftUICore.PlatformViewDefinition.ViewKind)
  @_spi(DisplayList_ViewSystem) open class func makeDrawingView(options: SwiftUICore.PlatformDrawableOptions) -> any SwiftUICore.PlatformDrawable
  @_spi(DisplayList_ViewSystem) open class func setPath(_ path: SwiftUICore.Path, shapeView: Swift.AnyObject)
  @_spi(DisplayList_ViewSystem) open class func setProjectionTransform(_ transform: SwiftUICore.ProjectionTransform, projectionView: Swift.AnyObject)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DisplayList_ViewSystem) open class func getRBLayer(drawingView: Swift.AnyObject) -> Swift.AnyObject?
  #else
  @_spi(DisplayList_ViewSystem) open class func getRBLayer(drawingView: Swift.AnyObject) -> Swift.AnyObject?
  #endif
  @_spi(DisplayList_ViewSystem) open class func setIgnoresEvents(_ state: Swift.Bool, of view: Swift.AnyObject)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DisplayList_ViewSystem) open class func setAllowsWindowActivationEvents(_ value: Swift.Bool?, for view: Swift.AnyObject)
  #else
  @_spi(DisplayList_ViewSystem) open class func setAllowsWindowActivationEvents(_ value: Swift.Bool?, for view: Swift.AnyObject)
  #endif
  @_spi(DisplayList_ViewSystem) open class func setHitTestsAsOpaque(_ value: Swift.Bool, for view: Swift.AnyObject)
  @_spi(DisplayList_ViewSystem) @objc deinit
}
extension SwiftUICore.DisplayList.ViewUpdater {
  package struct Platform {
  }
}
extension SwiftUICore.DisplayList.ViewUpdater.Platform {
  package init(definition: SwiftUICore.PlatformViewDefinition.Type)
}
extension SwiftUICore.DisplayList.GraphicsRenderer {
  final package func drawPlatformLayer(_ layer: QuartzCore.CALayer, in ctx: SwiftUICore.GraphicsContext, size: CoreFoundation.CGSize, update: Swift.Bool)
}
package enum AnyAccessibilityValueType : Swift.UInt, Swift.Codable {
  case int
  case double
  case bool
  case string
  case disclosure
  case toggle
  case slider
  case stepper
  case progress
  case boundedNumber
  case number
  case empty
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.UInt)
  #else
  package init?(rawValue: Swift.UInt)
  #endif
  package typealias RawValue = Swift.UInt
  package var rawValue: Swift.UInt {
    get
  }
}
package protocol AccessibilityValue : Swift.Equatable {
  associatedtype PlatformValue : SwiftUICore.AccessibilityPlatformSafe = Self
  #if compiler(>=5.3) && $NoncopyableGenerics
  var localizedDescription: Swift.String? { get }
  #else
  var localizedDescription: Swift.String? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var displayDescription: Swift.String? { get }
  #else
  var displayDescription: Swift.String? { get }
  #endif
  var value: Self.PlatformValue { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var minValue: Self.PlatformValue? { get }
  #else
  var minValue: Self.PlatformValue? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var maxValue: Self.PlatformValue? { get }
  #else
  var maxValue: Self.PlatformValue? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var step: Self.PlatformValue? { get }
  #else
  var step: Self.PlatformValue? { get }
  #endif
  static var type: SwiftUICore.AnyAccessibilityValueType { get }
}
extension SwiftUICore.AccessibilityValue {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var minValue: Self.PlatformValue? {
    get
  }
  #else
  package var minValue: Self.PlatformValue? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var maxValue: Self.PlatformValue? {
    get
  }
  #else
  package var maxValue: Self.PlatformValue? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var step: Self.PlatformValue? {
    get
  }
  #else
  package var step: Self.PlatformValue? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
}
extension SwiftUICore.AccessibilityValue where Self.PlatformValue : Swift.CustomStringConvertible {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
}
extension SwiftUICore.AccessibilityValue where Self.PlatformValue : Swift.CustomStringConvertible {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
}
extension SwiftUICore.AccessibilityValue where Self == Self.PlatformValue {
  package var value: Self {
    get
  }
}
extension SwiftUICore.AccessibilityValue where Self : Swift.RawRepresentable {
  package var value: Self.RawValue {
    get
  }
}
extension SwiftUICore.AccessibilityValue where Self.PlatformValue == Foundation.NSNumber {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedNumericDescription: Swift.String? {
    get
  }
  #else
  package var localizedNumericDescription: Swift.String? {
    get
  }
  #endif
}
package protocol AccessibilityValueByProxy : SwiftUICore.AccessibilityValue {
  associatedtype Base : SwiftUICore.AccessibilityValue
  var base: Self.Base { get }
}
extension SwiftUICore.AccessibilityValueByProxy {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  package var value: Self.Base.PlatformValue {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var minValue: Self.Base.PlatformValue? {
    get
  }
  #else
  package var minValue: Self.Base.PlatformValue? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var maxValue: Self.Base.PlatformValue? {
    get
  }
  #else
  package var maxValue: Self.Base.PlatformValue? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var step: Self.Base.PlatformValue? {
    get
  }
  #else
  package var step: Self.Base.PlatformValue? {
    get
  }
  #endif
}
extension Swift.Int : SwiftUICore.AccessibilityValue {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package typealias PlatformValue = Swift.Int
}
extension Swift.Double : SwiftUICore.AccessibilityValue {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package typealias PlatformValue = Swift.Double
}
extension Swift.Bool : SwiftUICore.AccessibilityValue {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package typealias PlatformValue = Swift.Bool
}
extension Swift.String : SwiftUICore.AccessibilityValue {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package typealias PlatformValue = Swift.String
}
package struct AccessibilityEmptyValue : SwiftUICore.AccessibilityValue, Swift.Codable {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var value: Swift.Never? {
    get
  }
  #else
  package var value: Swift.Never? {
    get
  }
  #endif
  package init()
  package static func == (a: SwiftUICore.AccessibilityEmptyValue, b: SwiftUICore.AccessibilityEmptyValue) -> Swift.Bool
  package typealias PlatformValue = Swift.Never?
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package struct AccessibilityBoundedNumber : SwiftUICore.AccessibilityValue, Swift.Codable {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package var number: SwiftUICore.AccessibilityNumber
  package var lowerBound: SwiftUICore.AccessibilityNumber?
  package var upperBound: SwiftUICore.AccessibilityNumber?
  package var stride: SwiftUICore.AccessibilityNumber?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(value: SwiftUICore.AccessibilityNumber, minValue: SwiftUICore.AccessibilityNumber? = nil, maxValue: SwiftUICore.AccessibilityNumber? = nil, step: SwiftUICore.AccessibilityNumber? = nil)
  #else
  package init(value: SwiftUICore.AccessibilityNumber, minValue: SwiftUICore.AccessibilityNumber? = nil, maxValue: SwiftUICore.AccessibilityNumber? = nil, step: SwiftUICore.AccessibilityNumber? = nil)
  #endif
  package var value: Foundation.NSNumber {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var minValue: Foundation.NSNumber? {
    get
  }
  #else
  package var minValue: Foundation.NSNumber? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var maxValue: Foundation.NSNumber? {
    get
  }
  #else
  package var maxValue: Foundation.NSNumber? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var step: Foundation.NSNumber? {
    get
  }
  #else
  package var step: Foundation.NSNumber? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.AccessibilityBoundedNumber, b: SwiftUICore.AccessibilityBoundedNumber) -> Swift.Bool
  package typealias PlatformValue = Foundation.NSNumber
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.AccessibilityBoundedNumber {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?<T>(for value: T, in range: Swift.ClosedRange<T>? = nil, by step: T.Stride? = nil) where T : Swift.Strideable
  #else
  package init?<T>(for value: T, in range: Swift.ClosedRange<T>? = nil, by step: T.Stride? = nil) where T : Swift.Strideable
  #endif
}
package enum AccessibilityDisclosureValue : Swift.UInt8, SwiftUICore.AccessibilityValue {
  case collapsed
  case expanded
  package init(_ isDisclosed: Swift.Bool)
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var value: Swift.Bool? {
    get
  }
  #else
  package var value: Swift.Bool? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var uiKitValue: Swift.Bool? {
    get
  }
  #else
  package var uiKitValue: Swift.Bool? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var appKitValue: Swift.Bool? {
    get
  }
  #else
  package var appKitValue: Swift.Bool? {
    get
  }
  #endif
  package var platformDisclosureValue: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.UInt8)
  #else
  package init?(rawValue: Swift.UInt8)
  #endif
  package typealias PlatformValue = Swift.Bool?
  package typealias RawValue = Swift.UInt8
  package var rawValue: Swift.UInt8 {
    get
  }
}
package struct AccessibilityToggleValue : SwiftUICore.AccessibilityValue, Swift.Codable {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package enum State : Swift.UInt8, Swift.Codable {
    case off
    case on
    case mixed
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(rawValue: Swift.UInt8)
    #else
    package init?(rawValue: Swift.UInt8)
    #endif
    package typealias RawValue = Swift.UInt8
    package var rawValue: Swift.UInt8 {
      get
    }
  }
  package var state: SwiftUICore.AccessibilityToggleValue.State
  package init(_ isOn: SwiftUICore.ToggleState)
  package var value: Swift.Int {
    get
  }
  package var uiKitValue: Swift.Int {
    get
  }
  package var appKitValue: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.AccessibilityToggleValue, b: SwiftUICore.AccessibilityToggleValue) -> Swift.Bool
  package typealias PlatformValue = Swift.Int
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package struct AccessibilityStepperValue : SwiftUICore.AccessibilityValueByProxy, Swift.Codable {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package var base: SwiftUICore.AccessibilityBoundedNumber
  package init(_ base: SwiftUICore.AccessibilityBoundedNumber)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(value: SwiftUICore.AccessibilityNumber, minValue: SwiftUICore.AccessibilityNumber? = nil, maxValue: SwiftUICore.AccessibilityNumber? = nil)
  #else
  package init(value: SwiftUICore.AccessibilityNumber, minValue: SwiftUICore.AccessibilityNumber? = nil, maxValue: SwiftUICore.AccessibilityNumber? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.AccessibilityStepperValue, b: SwiftUICore.AccessibilityStepperValue) -> Swift.Bool
  package typealias Base = SwiftUICore.AccessibilityBoundedNumber
  package typealias PlatformValue = Foundation.NSNumber
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package struct AccessibilitySliderValue : SwiftUICore.AccessibilityValueByProxy, Swift.Codable {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package var base: SwiftUICore.AccessibilityBoundedNumber
  package init(_ base: SwiftUICore.AccessibilityBoundedNumber)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(value: SwiftUICore.AccessibilityNumber, minValue: SwiftUICore.AccessibilityNumber? = nil, maxValue: SwiftUICore.AccessibilityNumber? = nil)
  #else
  package init(value: SwiftUICore.AccessibilityNumber, minValue: SwiftUICore.AccessibilityNumber? = nil, maxValue: SwiftUICore.AccessibilityNumber? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init<V>(value: V, minValue: V? = nil, maxValue: V? = nil) where V : Swift.BinaryFloatingPoint
  #else
  package init<V>(value: V, minValue: V? = nil, maxValue: V? = nil) where V : Swift.BinaryFloatingPoint
  #endif
  package static func == (a: SwiftUICore.AccessibilitySliderValue, b: SwiftUICore.AccessibilitySliderValue) -> Swift.Bool
  package typealias Base = SwiftUICore.AccessibilityBoundedNumber
  package typealias PlatformValue = Foundation.NSNumber
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package struct AccessibilityProgressValue : SwiftUICore.AccessibilityValue, Swift.Codable {
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package var percent: Swift.Double?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(percent: Swift.Double?)
  #else
  package init(percent: Swift.Double?)
  #endif
  package var value: Foundation.NSNumber {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var minValue: Foundation.NSNumber? {
    get
  }
  #else
  package var minValue: Foundation.NSNumber? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var maxValue: Foundation.NSNumber? {
    get
  }
  #else
  package var maxValue: Foundation.NSNumber? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.AccessibilityProgressValue, b: SwiftUICore.AccessibilityProgressValue) -> Swift.Bool
  package typealias PlatformValue = Foundation.NSNumber
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package struct AccessibilityNumber : SwiftUICore.AccessibilityValue, Swift.Codable {
  package enum AccessibilityNumberArchiveError : Swift.Error {
    case unarchiveFailed
    package static func == (a: SwiftUICore.AccessibilityNumber.AccessibilityNumberArchiveError, b: SwiftUICore.AccessibilityNumber.AccessibilityNumberArchiveError) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package init(_ base: Foundation.NSNumber)
  package var value: Foundation.NSNumber {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
  package static func == (a: SwiftUICore.AccessibilityNumber, b: SwiftUICore.AccessibilityNumber) -> Swift.Bool
  package typealias PlatformValue = Foundation.NSNumber
}
extension SwiftUICore.AccessibilityNumber : Swift.ExpressibleByIntegerLiteral {
  package typealias IntegerLiteralType = Foundation.NSNumber.IntegerLiteralType
  package init(integerLiteral value: SwiftUICore.AccessibilityNumber.IntegerLiteralType)
}
extension SwiftUICore.AccessibilityNumber : Swift.ExpressibleByFloatLiteral {
  package typealias FloatLiteralType = Foundation.NSNumber.FloatLiteralType
  package init(floatLiteral value: SwiftUICore.AccessibilityNumber.FloatLiteralType)
  package init<V>(floatingPoint value: V) where V : Swift.BinaryFloatingPoint
}
extension SwiftUICore.ProxyCodable : SwiftUICore.AccessibilityValue where Value : SwiftUICore.AccessibilityValue {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  package var value: Value.PlatformValue {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var minValue: Value.PlatformValue? {
    get
  }
  #else
  package var minValue: Value.PlatformValue? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var maxValue: Value.PlatformValue? {
    get
  }
  #else
  package var maxValue: Value.PlatformValue? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var step: Value.PlatformValue? {
    get
  }
  #else
  package var step: Value.PlatformValue? {
    get
  }
  #endif
  package static var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  package typealias PlatformValue = Value.PlatformValue
}
package struct AnyAccessibilityValue : Swift.Equatable {
  package init<V>(_ value: V) where V : Swift.Decodable, V : Swift.Encodable, V : SwiftUICore.AccessibilityValue
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var displayDescription: Swift.String? {
    get
  }
  #else
  package var displayDescription: Swift.String? {
    get
  }
  #endif
  package var value: Any {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var minValue: Any? {
    get
  }
  #else
  package var minValue: Any? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var maxValue: Any? {
    get
  }
  #else
  package var maxValue: Any? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var step: Any? {
    get
  }
  #else
  package var step: Any? {
    get
  }
  #endif
  package var type: SwiftUICore.AnyAccessibilityValueType {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func `as`<T>(_ type: T.Type) -> T? where T : SwiftUICore.AccessibilityValue
  #else
  package func `as`<T>(_ type: T.Type) -> T? where T : SwiftUICore.AccessibilityValue
  #endif
  package static func == (lhs: SwiftUICore.AnyAccessibilityValue, rhs: SwiftUICore.AnyAccessibilityValue) -> Swift.Bool
}
package struct AccessibilityValueStorage : Swift.Equatable {
  package var value: SwiftUICore.AnyAccessibilityValue? {
    get
  }
  package var description: [SwiftUICore.Text] {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init<V>(_ value: V? = nil, description: SwiftUICore.Text? = nil) where V : SwiftUICore.AccessibilityValue, V : SwiftUICore.CodableByProxy
  #else
  package init<V>(_ value: V? = nil, description: SwiftUICore.Text? = nil) where V : SwiftUICore.AccessibilityValue, V : SwiftUICore.CodableByProxy
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init<V>(_ value: V? = nil, description: SwiftUICore.Text? = nil) where V : Swift.Decodable, V : Swift.Encodable, V : SwiftUICore.AccessibilityValue
  #else
  package init<V>(_ value: V? = nil, description: SwiftUICore.Text? = nil) where V : Swift.Decodable, V : Swift.Encodable, V : SwiftUICore.AccessibilityValue
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(description: SwiftUICore.Text? = nil)
  #else
  package init(description: SwiftUICore.Text? = nil)
  #endif
  package init(descriptions: [SwiftUICore.Text])
  package var valueDescription: [SwiftUICore.Text] {
    get
    set
  }
  package static func == (a: SwiftUICore.AccessibilityValueStorage, b: SwiftUICore.AccessibilityValueStorage) -> Swift.Bool
}
extension SwiftUICore.AccessibilityValueStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var platformMinValue: Any? {
    get
  }
  #else
  package var platformMinValue: Any? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var platformMaxValue: Any? {
    get
  }
  #else
  package var platformMaxValue: Any? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var platformNumberValue: Foundation.NSNumber? {
    get
  }
  #else
  package var platformNumberValue: Foundation.NSNumber? {
    get
  }
  #endif
  package var isBounded: Swift.Bool {
    get
  }
  package var hasAllowedValues: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var platformAllowedValues: [Foundation.NSNumber]? {
    get
  }
  #else
  package var platformAllowedValues: [Foundation.NSNumber]? {
    get
  }
  #endif
}
extension SwiftUICore.AccessibilityValueStorage : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityValueStorage) -> Swift.Bool
}
extension SwiftUICore.AccessibilityDisclosureValue : Swift.Codable {
}
extension SwiftUICore.AnyAccessibilityValue : Swift.Codable {
  package init(from decoder: any Swift.Decoder) throws
  package func encode(to encoder: any Swift.Encoder) throws
}
package struct CodableAccessibilityValueStorage : Swift.Codable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(_ storage: SwiftUICore.AccessibilityValueStorage, in environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom? = nil)
  #else
  package init(_ storage: SwiftUICore.AccessibilityValueStorage, in environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom? = nil)
  #endif
  package var accessibilityValue: SwiftUICore.AccessibilityValueStorage {
    get
  }
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package protocol AccessibilityPlatformSafe {
}
extension Swift.String : SwiftUICore.AccessibilityPlatformSafe {
}
extension Swift.Double : SwiftUICore.AccessibilityPlatformSafe {
}
extension Swift.Int : SwiftUICore.AccessibilityPlatformSafe {
}
extension Swift.UInt : SwiftUICore.AccessibilityPlatformSafe {
}
extension Swift.UInt8 : SwiftUICore.AccessibilityPlatformSafe {
}
extension Swift.Bool : SwiftUICore.AccessibilityPlatformSafe {
}
extension Foundation.NSNumber : SwiftUICore.AccessibilityPlatformSafe {
}
extension Swift.Never : SwiftUICore.AccessibilityPlatformSafe {
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : SwiftUICore.AccessibilityPlatformSafe where Wrapped : SwiftUICore.AccessibilityPlatformSafe {
}
#else
extension Swift.Optional : SwiftUICore.AccessibilityPlatformSafe where Wrapped : SwiftUICore.AccessibilityPlatformSafe {
}
#endif
package struct BloomFilter : Swift.Equatable {
  package var value: Swift.UInt
  @inlinable package init()
  @inlinable package init<T>(value: T) where T : Swift.Hashable
  @inlinable package init(type: any Any.Type)
  @inlinable package mutating func formUnion(_ other: SwiftUICore.BloomFilter)
  @inlinable package func union(_ other: SwiftUICore.BloomFilter) -> SwiftUICore.BloomFilter
  @inlinable package func mayContain(_ other: SwiftUICore.BloomFilter) -> Swift.Bool
  @inlinable package var isEmpty: Swift.Bool {
    get
  }
  package static func == (a: SwiftUICore.BloomFilter, b: SwiftUICore.BloomFilter) -> Swift.Bool
}
package protocol Interpolatable {
  mutating func interpolate(with other: Self, by amount: Swift.Double)
}
extension SwiftUICore.Interpolatable where Self : SwiftUICore.Animatable, Self == Self.AnimatableData.Base, Self.AnimatableData : SwiftUICore.InterpolatedVector {
  package var interpolatableData: Self.AnimatableData {
    get
    set
  }
}
package protocol InterpolatedVector : SwiftUICore.VectorArithmetic {
  associatedtype Base : Swift.Equatable, SwiftUICore.Interpolatable
  init()
  init(elements: SwiftUICore.ArrayWith2Inline<SwiftUICore.InterpolatedVectorElement<Self.Base>>)
  var elements: SwiftUICore.ArrayWith2Inline<SwiftUICore.InterpolatedVectorElement<Self.Base>> { get set }
}
extension SwiftUICore.InterpolatedVector {
  public static var zero: Self {
    get
  }
  public mutating func scale(by rhs: Swift.Double)
  public var magnitudeSquared: Swift.Double {
    get
  }
  public static func += (lhs: inout Self, rhs: Self)
  public static func -= (lhs: inout Self, rhs: Self)
  @_transparent public static func + (lhs: Self, rhs: Self) -> Self
  @_transparent public static func - (lhs: Self, rhs: Self) -> Self
}
package struct InterpolatedVectorElement<Base> : Swift.Equatable where Base : Swift.Equatable, Base : SwiftUICore.Interpolatable {
  package var key: Base
  package var amount: Swift.Double
  package init(key: Base, amount: Swift.Double)
  package static func == (a: SwiftUICore.InterpolatedVectorElement<Base>, b: SwiftUICore.InterpolatedVectorElement<Base>) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
package struct AppearsActiveKey : SwiftUICore.EnvironmentKey {
  @usableFromInline
  package static var defaultValue: Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.AppearsActiveKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 10.15, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EnvironmentValues {
  @available(iOS 18.0, macOS 10.15, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @backDeployed(before: macOS 15.0)
  public var appearsActive: Swift.Bool {
    get
    set
  }
}
package enum WindowEnvironmentKeys {
  package struct AppearsFocused : SwiftUICore.EnvironmentKey {
    package static var defaultValue: Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Value = Swift.Bool
  }
  package struct AppearsMain : SwiftUICore.EnvironmentKey {
    package static var defaultValue: Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Value = Swift.Bool
  }
  package struct AppearsActive : SwiftUICore.EnvironmentKey {
    package static var defaultValue: Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Value = Swift.Bool
  }
  package struct IsFocused : SwiftUICore.EnvironmentKey {
    package static var defaultValue: Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Value = Swift.Bool
  }
  package struct IsMain : SwiftUICore.EnvironmentKey {
    package static var defaultValue: Swift.Bool
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Value = Swift.Bool
  }
}
@_spi(ForSwiftUIOnly) @_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EnvironmentValues {
  @_spi(ForSwiftUIOnly) @_spi(DoNotImport) public var windowAppearsFocused: Swift.Bool {
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) get
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) set
  }
  @_spi(ForSwiftUIOnly) @_spi(DoNotImport) public var windowAppearsMain: Swift.Bool {
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) get
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) set
  }
  @_spi(ForSwiftUIOnly) @_spi(DoNotImport) public var windowAppearsActive: Swift.Bool {
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) get
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) set
  }
  @_spi(ForSwiftUIOnly) @_spi(DoNotImport) public var windowIsFocused: Swift.Bool {
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) get
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) set
  }
  @_spi(ForSwiftUIOnly) @_spi(DoNotImport) public var windowIsMain: Swift.Bool {
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) get
    @_spi(ForSwiftUIOnly) @_spi(DoNotImport) set
  }
}
package protocol NonGestureEventType : SwiftUICore.EventType {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol AlignmentID {
  static func defaultValue(in context: SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
  #else
  static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AlignmentID {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
  #else
  public static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
  #else
  package static func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct HorizontalAlignment : SwiftUICore.AlignmentGuide, Swift.Equatable {
  public init(_ id: any SwiftUICore.AlignmentID.Type)
  @_documentation(visibility: private) public let key: SwiftUICore.AlignmentKey
  public static func == (a: SwiftUICore.HorizontalAlignment, b: SwiftUICore.HorizontalAlignment) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalAlignment {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
  #else
  public func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct VerticalAlignment : SwiftUICore.AlignmentGuide, Swift.Equatable {
  public init(_ id: any SwiftUICore.AlignmentID.Type)
  @_documentation(visibility: private) public let key: SwiftUICore.AlignmentKey
  public static func == (a: SwiftUICore.VerticalAlignment, b: SwiftUICore.VerticalAlignment) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalAlignment {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
  #else
  public func combineExplicit<S>(_ values: S) -> CoreFoundation.CGFloat? where S : Swift.Sequence, S.Element == CoreFoundation.CGFloat?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Alignment : Swift.Equatable {
  public var horizontal: SwiftUICore.HorizontalAlignment
  public var vertical: SwiftUICore.VerticalAlignment
  @inlinable public init(horizontal: SwiftUICore.HorizontalAlignment, vertical: SwiftUICore.VerticalAlignment) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  public static func == (a: SwiftUICore.Alignment, b: SwiftUICore.Alignment) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalAlignment {
  public static let leading: SwiftUICore.HorizontalAlignment
  public static let center: SwiftUICore.HorizontalAlignment
  public static let trailing: SwiftUICore.HorizontalAlignment
  package static let leadingText: SwiftUICore.HorizontalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalAlignment {
  public static let top: SwiftUICore.VerticalAlignment
  public static let center: SwiftUICore.VerticalAlignment
  public static let bottom: SwiftUICore.VerticalAlignment
  public static let firstTextBaseline: SwiftUICore.VerticalAlignment
  public static let lastTextBaseline: SwiftUICore.VerticalAlignment
  package static let _firstTextLineCenter: SwiftUICore.VerticalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Alignment {
  public static let center: SwiftUICore.Alignment
  public static let leading: SwiftUICore.Alignment
  public static let trailing: SwiftUICore.Alignment
  public static let top: SwiftUICore.Alignment
  public static let bottom: SwiftUICore.Alignment
  public static let topLeading: SwiftUICore.Alignment
  public static let topTrailing: SwiftUICore.Alignment
  public static let bottomLeading: SwiftUICore.Alignment
  public static let bottomTrailing: SwiftUICore.Alignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Alignment {
  @_alwaysEmitIntoClient public static var centerFirstTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .center, vertical: .firstTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var centerLastTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .center, vertical: .lastTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var leadingFirstTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .leading, vertical: .firstTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var leadingLastTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .leading, vertical: .lastTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var trailingFirstTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .trailing, vertical: .firstTextBaseline) }
  }
  @_alwaysEmitIntoClient public static var trailingLastTextBaseline: SwiftUICore.Alignment {
    get {
        .init(horizontal: .trailing, vertical: .lastTextBaseline) }
  }
}
package protocol FrameAlignment : SwiftUICore.AlignmentID {
}
extension SwiftUICore.FrameAlignment {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
  #else
  package static func _combineExplicit(childValue: CoreFoundation.CGFloat, _ n: Swift.Int, into parentValue: inout CoreFoundation.CGFloat?)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_documentation(visibility: private) @frozen public struct AlignmentKey : Swift.Hashable, Swift.Comparable {
  private let bits: Swift.UInt
  package var id: any SwiftUICore.AlignmentID.Type {
    get
  }
  package var axis: SwiftUICore.Axis {
    get
  }
  package init(id: any SwiftUICore.AlignmentID.Type, axis: SwiftUICore.Axis)
  package init()
  public static func < (lhs: SwiftUICore.AlignmentKey, rhs: SwiftUICore.AlignmentKey) -> Swift.Bool
  package var fraction: CoreFoundation.CGFloat {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.AlignmentKey, b: SwiftUICore.AlignmentKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
package protocol AlignmentGuide : Swift.Equatable {
  var key: SwiftUICore.AlignmentKey { get }
}
extension SwiftUICore.AlignmentGuide {
  package var fraction: CoreFoundation.CGFloat {
    get
  }
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public protocol GraphDelegate : AnyObject {
  @_spi(ForSwiftUIOnly) func updateGraph<T>(body: (SwiftUICore.GraphHost) -> T) -> T
  @_spi(ForSwiftUIOnly) func graphDidChange()
  @_spi(ForSwiftUIOnly) func preferencesDidChange()
  @_spi(ForSwiftUIOnly) func beginTransaction()
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.GraphDelegate {
  @_spi(ForSwiftUIOnly) public func beginTransaction()
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
open class GraphHost : Swift.CustomReflectable {
  @_spi(ForSwiftUIOnly) package struct Data {
    @_spi(ForSwiftUIOnly) package var graph: AttributeGraph.Graph?
    @_spi(ForSwiftUIOnly) package var globalSubgraph: AttributeGraph.Subgraph
    @_spi(ForSwiftUIOnly) package var rootSubgraph: AttributeGraph.Subgraph
    @_spi(ForSwiftUIOnly) package var isRemoved: Swift.Bool
    @_spi(ForSwiftUIOnly) package var isHiddenForReuse: Swift.Bool
    @_spi(ForSwiftUIOnly) @AttributeGraph.Attribute @_projectedValueProperty($time) package var time: SwiftUICore.Time {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating set
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating _modify
    }
    @_spi(ForSwiftUIOnly) package var $time: AttributeGraph.Attribute<SwiftUICore.Time> {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      set
    }
    @_spi(ForSwiftUIOnly) @AttributeGraph.Attribute @_projectedValueProperty($environment) package var environment: SwiftUICore.EnvironmentValues {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating set
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating _modify
    }
    @_spi(ForSwiftUIOnly) package var $environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues> {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      set
    }
    @_spi(ForSwiftUIOnly) @AttributeGraph.Attribute @_projectedValueProperty($phase) package var phase: SwiftUICore._GraphInputs.Phase {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating set
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating _modify
    }
    @_spi(ForSwiftUIOnly) package var $phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase> {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      set
    }
    @_spi(ForSwiftUIOnly) @AttributeGraph.Attribute @_projectedValueProperty($hostPreferenceKeys) package var hostPreferenceKeys: SwiftUICore.PreferenceKeys {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating set
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating _modify
    }
    @_spi(ForSwiftUIOnly) package var $hostPreferenceKeys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys> {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      set
    }
    @_spi(ForSwiftUIOnly) @AttributeGraph.Attribute @_projectedValueProperty($transaction) package var transaction: SwiftUICore.Transaction {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating set
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating _modify
    }
    @_spi(ForSwiftUIOnly) package var $transaction: AttributeGraph.Attribute<SwiftUICore.Transaction> {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      set
    }
    @_spi(ForSwiftUIOnly) @AttributeGraph.Attribute @_projectedValueProperty($updateSeed) package var updateSeed: Swift.UInt32 {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating set
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating _modify
    }
    @_spi(ForSwiftUIOnly) package var $updateSeed: AttributeGraph.Attribute<Swift.UInt32> {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      set
    }
    @_spi(ForSwiftUIOnly) @AttributeGraph.Attribute @_projectedValueProperty($transactionSeed) package var transactionSeed: Swift.UInt32 {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating set
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      nonmutating _modify
    }
    @_spi(ForSwiftUIOnly) package var $transactionSeed: AttributeGraph.Attribute<Swift.UInt32> {
      @_spi(ForSwiftUIOnly) get
      @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
      set
    }
    @_spi(ForSwiftUIOnly) package var inputs: SwiftUICore._GraphInputs
    @_spi(ForSwiftUIOnly) package init()
    @_spi(ForSwiftUIOnly) package mutating func invalidate()
  }
  @_spi(ForSwiftUIOnly) final package var data: SwiftUICore.GraphHost.Data
  @_spi(ForSwiftUIOnly) final package var isValid: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package var graph: AttributeGraph.Graph {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package var graphInputs: SwiftUICore._GraphInputs {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package var globalSubgraph: AttributeGraph.Subgraph {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package var rootSubgraph: AttributeGraph.Subgraph {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package var isInstantiated: Swift.Bool {
    get
  }
  @_spi(ForSwiftUIOnly) final package var hostPreferenceValues: AttributeGraph.WeakAttribute<SwiftUICore.PreferenceList>
  @_spi(ForSwiftUIOnly) final package var lastHostPreferencesSeed: SwiftUICore.VersionSeed
  @_spi(ForSwiftUIOnly) final package var mayDeferUpdate: Swift.Bool {
    get
  }
  @_spi(ForSwiftUIOnly) package struct RemovedState : Swift.OptionSet {
    @_spi(ForSwiftUIOnly) package let rawValue: Swift.UInt8
    @_spi(ForSwiftUIOnly) package init(rawValue: Swift.UInt8)
    @_spi(ForSwiftUIOnly) package static let unattached: SwiftUICore.GraphHost.RemovedState
    @_spi(ForSwiftUIOnly) package static let hiddenForReuse: SwiftUICore.GraphHost.RemovedState
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias ArrayLiteralElement = SwiftUICore.GraphHost.RemovedState
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Element = SwiftUICore.GraphHost.RemovedState
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias RawValue = Swift.UInt8
  }
  @_spi(ForSwiftUIOnly) final package var removedState: SwiftUICore.GraphHost.RemovedState {
    @_spi(ForSwiftUIOnly) get
    @_spi(ForSwiftUIOnly) set
  }
  @_spi(ForSwiftUIOnly) package static var currentHost: SwiftUICore.GraphHost {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) package init(data: SwiftUICore.GraphHost.Data)
  @_spi(ForSwiftUIOnly) @objc deinit
  @_spi(ForSwiftUIOnly) final package func invalidate()
  @_spi(ForSwiftUIOnly) package static var isUpdating: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package var isUpdating: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package func setNeedsUpdate(mayDeferUpdate: Swift.Bool)
  @_spi(ForSwiftUIOnly) package enum ConstantID : Swift.Int8, Swift.Hashable {
    @_spi(ForSwiftUIOnly) case defaultValue
    @_spi(ForSwiftUIOnly) case implicitViewRoot
    @_spi(ForSwiftUIOnly) case trueValue
    @_spi(ForSwiftUIOnly) case defaultValue3D
    @_spi(ForSwiftUIOnly) case failedValue
    @_spi(ForSwiftUIOnly) case placeholder
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) package init?(rawValue: Swift.Int8)
    #else
    @_spi(ForSwiftUIOnly) package init?(rawValue: Swift.Int8)
    #endif
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias RawValue = Swift.Int8
    @_spi(ForSwiftUIOnly) package var rawValue: Swift.Int8 {
      @_spi(ForSwiftUIOnly) get
    }
  }
  @_spi(ForSwiftUIOnly) final package func intern<T>(_ value: T, id: SwiftUICore.GraphHost.ConstantID) -> AttributeGraph.Attribute<T>
  @_spi(ForSwiftUIOnly) final public var customMirror: Swift.Mirror {
    @_spi(ForSwiftUIOnly) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open var graphDelegate: (any SwiftUICore.GraphDelegate)? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) open var graphDelegate: (any SwiftUICore.GraphDelegate)? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open var parentHost: SwiftUICore.GraphHost? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) open var parentHost: SwiftUICore.GraphHost? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  @_spi(ForSwiftUIOnly) open func instantiateOutputs()
  @_spi(ForSwiftUIOnly) open func uninstantiateOutputs()
  @_spi(ForSwiftUIOnly) open func timeDidChange()
  @_spi(ForSwiftUIOnly) open func isHiddenForReuseDidChange()
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.GraphHost : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GraphHost {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) final package func graphInvalidation(from src: AttributeGraph.AnyAttribute?)
  #else
  @_spi(ForSwiftUIOnly) final package func graphInvalidation(from src: AttributeGraph.AnyAttribute?)
  #endif
  @_spi(ForSwiftUIOnly) final package func instantiate()
  @_spi(ForSwiftUIOnly) final package func uninstantiate(immediately: Swift.Bool)
  @_spi(ForSwiftUIOnly) final package func uninstantiate()
  @_spi(ForSwiftUIOnly) final package func instantiateIfNeeded()
  @_spi(ForSwiftUIOnly) final package func setTime(_ time: SwiftUICore.Time)
  @_spi(ForSwiftUIOnly) final package var environment: SwiftUICore.EnvironmentValues {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package func setEnvironment(_ environment: SwiftUICore.EnvironmentValues)
  @_spi(ForSwiftUIOnly) final package func setPhase(_ phase: SwiftUICore._GraphInputs.Phase)
  @_spi(ForSwiftUIOnly) final package func incrementPhase()
  @_spi(ForSwiftUIOnly) final package func updateRemovedState()
  @_spi(ForSwiftUIOnly) final package func asyncTransaction<T>(_ transaction: SwiftUICore.Transaction = .init(), id transactionID: SwiftUICore.Transaction.ID = Transaction.id, mutation: T, style: SwiftUICore._GraphMutation_Style = .deferred, mayDeferUpdate: Swift.Bool = true) where T : SwiftUICore.GraphMutation
  @_spi(ForSwiftUIOnly) final package func asyncTransaction(_ transaction: SwiftUICore.Transaction = .init(), id: SwiftUICore.Transaction.ID = Transaction.id, _ body: @escaping () -> Swift.Void)
  @_spi(ForSwiftUIOnly) final package func asyncTransaction<T>(_ transaction: SwiftUICore.Transaction = .init(), id transactionID: SwiftUICore.Transaction.ID = Transaction.id, invalidating attribute: AttributeGraph.WeakAttribute<T>, style: SwiftUICore._GraphMutation_Style = .deferred, mayDeferUpdate: Swift.Bool = true)
  @_spi(ForSwiftUIOnly) final package func emptyTransaction(_ transaction: SwiftUICore.Transaction = .init())
  @_spi(ForSwiftUIOnly) final package func continueTransaction(_ body: @escaping () -> Swift.Void)
  @_spi(ForSwiftUIOnly) final package var hasPendingTransactions: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package func flushTransactions()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) final package func runTransaction(_ transaction: SwiftUICore.Transaction? = nil, do body: () -> Swift.Void)
  #else
  @_spi(ForSwiftUIOnly) final package func runTransaction(_ transaction: SwiftUICore.Transaction? = nil, do body: () -> Swift.Void)
  #endif
  @_spi(ForSwiftUIOnly) final package func runTransaction()
  @_spi(ForSwiftUIOnly) final package var needsTransaction: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package func startTransactionUpdate()
  @_spi(ForSwiftUIOnly) final package func finishTransactionUpdate(in subgraph: AttributeGraph.Subgraph, postUpdate: (_ again: Swift.Bool) -> Swift.Void = { _ in })
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GraphHost {
  @_spi(ForSwiftUIOnly) package static func globalTransaction<T>(_ transaction: SwiftUICore.Transaction = .init(), id transactionID: SwiftUICore.Transaction.ID = Transaction.id, mutation: T, hostProvider: any SwiftUICore.TransactionHostProvider) where T : SwiftUICore.GraphMutation
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.GraphHost {
  @_spi(ForSwiftUIOnly) final package func addPreference<K>(_ key: K.Type) where K : SwiftUICore.HostPreferenceKey
  @_spi(ForSwiftUIOnly) final package func removePreference<K>(_ key: K.Type) where K : SwiftUICore.HostPreferenceKey
  @_spi(ForSwiftUIOnly) final package func preferenceValues() -> SwiftUICore.PreferenceList
  @_spi(ForSwiftUIOnly) final package func preferenceValue<K>(_ key: K.Type) -> K.Value where K : SwiftUICore.HostPreferenceKey
  @_spi(ForSwiftUIOnly) final package func updatePreferences() -> Swift.Bool
}
package protocol GraphMutation {
  typealias Style = SwiftUICore._GraphMutation_Style
  func apply()
  mutating func combine<T>(with other: T) -> Swift.Bool where T : SwiftUICore.GraphMutation
}
package enum _GraphMutation_Style {
  case immediate
  case deferred
  package static func == (a: SwiftUICore._GraphMutation_Style, b: SwiftUICore._GraphMutation_Style) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package struct CustomGraphMutation : SwiftUICore.GraphMutation {
  package init(_ body: @escaping () -> Swift.Void)
  package func apply()
  package mutating func combine<T>(with other: T) -> Swift.Bool where T : SwiftUICore.GraphMutation
}
package protocol TransactionHostProvider : AnyObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var mutationHost: SwiftUICore.GraphHost? { get }
  #else
  var mutationHost: SwiftUICore.GraphHost? { get }
  #endif
}
extension AttributeGraph.Graph {
  package func graphHost() -> SwiftUICore.GraphHost
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public func __previewThunksHaveFinishedLoading()
package protocol ViewInputPredicate {
  static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
}
package protocol ViewInputFlag : SwiftUICore.ViewInputPredicate, SwiftUICore._GraphInputsModifier {
  associatedtype Input : SwiftUICore.ViewInput where Self.Input.Value : Swift.Equatable
  static var value: Self.Input.Value { get }
  init()
}
extension SwiftUICore.ViewInputFlag {
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
  package static func _makeInputs(modifier: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._GraphInputs)
}
extension SwiftUICore.ViewInput where Self : SwiftUICore.ViewInputFlag {
  package typealias Input = Self
}
package protocol ViewInputBoolFlag : SwiftUICore.ViewInput, SwiftUICore.ViewInputFlag where Self.Value == Swift.Bool {
}
extension SwiftUICore.ViewInputBoolFlag {
  @inlinable package static var defaultValue: Swift.Bool {
    get
  }
  @inlinable package static var value: Swift.Bool {
    get
  }
}
extension SwiftUICore.ViewInputPredicate {
  prefix package static func ! (predicate: Self) -> some SwiftUICore.ViewInputPredicate
  
  package static func || <Other>(lhs: Self, rhs: Other) -> some SwiftUICore.ViewInputPredicate where Other : SwiftUICore.ViewInputPredicate
  
  package typealias Inverted = SwiftUICore.InvertedViewInputPredicate<Self>
}
package struct InvertedViewInputPredicate<Base> : SwiftUICore.ViewInputPredicate where Base : SwiftUICore.ViewInputPredicate {
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
}
extension SwiftUICore.InvertedViewInputPredicate where Base : SwiftUICore.Feature {
  package static var isEnabled: Swift.Bool {
    get
  }
}
extension SwiftUICore.InvertedViewInputPredicate : SwiftUICore.ViewInputBoolFlag, SwiftUICore.ViewInputFlag, SwiftUICore._GraphInputsModifier, SwiftUICore.ViewInput, SwiftUICore.GraphInput, SwiftUICore.PropertyKey where Base : SwiftUICore.ViewInputBoolFlag {
  @inlinable package static var value: Swift.Bool {
    get
  }
  @inlinable package init()
  package typealias Value = Swift.Bool
}
package struct OrOperationViewInputPredicate<Left, Right> : SwiftUICore.ViewInputPredicate where Left : SwiftUICore.ViewInputPredicate, Right : SwiftUICore.ViewInputPredicate {
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
  @inlinable package init()
}
package struct AndOperationViewInputPredicate<Left, Right> : SwiftUICore.ViewInputPredicate where Left : SwiftUICore.ViewInputPredicate, Right : SwiftUICore.ViewInputPredicate {
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
  @inlinable package init()
}
package struct TypesMatch<Left, Right> : SwiftUICore.ViewInputPredicate {
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
  @inlinable package init()
}
package struct IsVisionEnabledPredicate : SwiftUICore.ViewInputPredicate {
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
  package init()
}
extension SwiftUICore._ViewInputs {
  package var isVisionEnabled: Swift.Bool {
    get
  }
}
extension SwiftUICore._ViewListInputs {
  package var isVisionEnabled: Swift.Bool {
    get
  }
}
package struct VectorImageLayer : Swift.Hashable {
  package var contents: SwiftUICore.VectorImageContents
  package init(_ contents: SwiftUICore.VectorImageContents)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(image: CoreUI.CUINamedVectorImage, location: SwiftUICore.Image.Location, size: CoreFoundation.CGSize)
  #else
  package init?(image: CoreUI.CUINamedVectorImage, location: SwiftUICore.Image.Location, size: CoreFoundation.CGSize)
  #endif
  package init(pdfPage: CoreGraphics.CGPDFPage, size: CoreFoundation.CGSize)
  package init(svgDocument: CoreSVG.CGSVGDocument, size: CoreFoundation.CGSize)
  package var size: CoreFoundation.CGSize {
    get
  }
  package var location: SwiftUICore.Image.Location?
  package var name: Swift.String?
  package var displayList: any RenderBox.RBDisplayListContents {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func image(size: CoreFoundation.CGSize, imageScale: CoreFoundation.CGFloat, prefersMask: Swift.Bool = false) -> CoreGraphics.CGImage?
  #else
  package func image(size: CoreFoundation.CGSize, imageScale: CoreFoundation.CGFloat, prefersMask: Swift.Bool = false) -> CoreGraphics.CGImage?
  #endif
  package static func == (lhs: SwiftUICore.VectorImageLayer, rhs: SwiftUICore.VectorImageLayer) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.VectorImageLayer : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class VectorImageContents {
  @_spi(ForSwiftUIOnly) package init()
  @_spi(ForSwiftUIOnly) open var size: CoreFoundation.CGSize {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open var displayList: any RenderBox.RBDisplayListContents {
    @_spi(ForSwiftUIOnly) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func image(size: CoreFoundation.CGSize, imageScale: CoreFoundation.CGFloat, prefersMask: Swift.Bool) -> CoreGraphics.CGImage?
  #else
  @_spi(ForSwiftUIOnly) open func image(size: CoreFoundation.CGSize, imageScale: CoreFoundation.CGFloat, prefersMask: Swift.Bool) -> CoreGraphics.CGImage?
  #endif
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.VectorImageContents : Swift.Sendable {
}
@_inheritsConvenienceInitializers package class CachedVectorImageContents : SwiftUICore.VectorImageContents {
  #if compiler(>=5.3) && $NoncopyableGenerics
  final override package func image(size: CoreFoundation.CGSize, imageScale: CoreFoundation.CGFloat, prefersMask: Swift.Bool) -> CoreGraphics.CGImage?
  #else
  final override package func image(size: CoreFoundation.CGSize, imageScale: CoreFoundation.CGFloat, prefersMask: Swift.Bool) -> CoreGraphics.CGImage?
  #endif
  package init()
  @objc deinit
}
final package class DisplayListImageContents : SwiftUICore.CachedVectorImageContents {
  package init(displayList: any RenderBox.RBDisplayListContents, size: CoreFoundation.CGSize)
  override final package var size: CoreFoundation.CGSize {
    get
  }
  override final package var displayList: any RenderBox.RBDisplayListContents {
    get
  }
  @objc deinit
}
package struct PreferenceList : Swift.CustomStringConvertible {
  @inlinable package init()
  package struct Value<T> {
    package var value: T
    package var seed: SwiftUICore.VersionSeed
    package init(value: T, seed: SwiftUICore.VersionSeed)
  }
  package subscript<K>(key: K.Type) -> SwiftUICore.PreferenceList.Value<K.Value> where K : SwiftUICore.PreferenceKey {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func valueIfPresent<K>(for _: K.Type) -> SwiftUICore.PreferenceList.Value<K.Value>? where K : SwiftUICore.PreferenceKey
  #else
  package func valueIfPresent<K>(for _: K.Type) -> SwiftUICore.PreferenceList.Value<K.Value>? where K : SwiftUICore.PreferenceKey
  #endif
  package func contains<K>(_ key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  package mutating func removeValue<K>(for key: K.Type) where K : SwiftUICore.PreferenceKey
  package mutating func modifyValue<K>(for key: K.Type, transform: SwiftUICore.PreferenceList.Value<(inout K.Value) -> Swift.Void>) where K : SwiftUICore.PreferenceKey
  package func mayNotBeEqual(to other: SwiftUICore.PreferenceList) -> Swift.Bool
  package var seed: SwiftUICore.VersionSeed {
    get
  }
  package mutating func combine(with other: SwiftUICore.PreferenceList)
  package mutating func filterRemoved()
  package var description: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper public struct Environment<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content : @unchecked Swift.Sendable {
    case keyPath(Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>)
    case value(Value)
  }
  @usableFromInline
  internal var content: SwiftUICore.Environment<Value>.Content
  @inlinable public init(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>) {
        content = .keyPath(keyPath)
    }
  @inlinable public var wrappedValue: Value {
    get {
        switch content {
        case let .value(value):
            return value
        case let .keyPath(keyPath):
             
            return EnvironmentValues()[keyPath: keyPath]
        }
    }
  }
  @usableFromInline
  internal func error() -> Swift.Never
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Environment : Swift.Sendable where Value : Swift.Sendable {
}
extension Observation.ObservationRegistrar {
  package static var latestTriggers: [Swift.AnyKeyPath]
}
#if compiler(>=5.3) && $NoncopyableGenerics
@inline(__always) package func _withObservation<T>(do work: () throws -> T) rethrows -> (value: T, accessList: Observation.ObservationTracking._AccessList?)
#else
@inline(__always) package func _withObservation<T>(do work: () throws -> T) rethrows -> (value: T, accessList: Observation.ObservationTracking._AccessList?)
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
@inline(__always) package func _installObservation<T>(accessList: Observation.ObservationTracking._AccessList?, attribute: AttributeGraph.Attribute<T>)
#else
@inline(__always) package func _installObservation<T>(accessList: Observation.ObservationTracking._AccessList?, attribute: AttributeGraph.Attribute<T>)
#endif
extension AttributeGraph.Rule {
  @inline(__always) package func withObservation<T>(do work: () throws -> T) rethrows -> T
  package var observationInstaller: (Observation.ObservationTracking._AccessList) -> Swift.Void {
    get
  }
}
extension AttributeGraph.StatefulRule {
  @inline(__always) package func withObservation<T>(do work: () throws -> T) rethrows -> T
  package var observationInstaller: (Observation.ObservationTracking._AccessList) -> Swift.Void {
    get
  }
}
package protocol AccessibilityCombinable {
  @discardableResult
  mutating func merge(with child: Self) -> Swift.Bool
}
extension SwiftUICore.AccessibilityCombinable {
  package func combined(with child: Self) -> Self
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : SwiftUICore.AccessibilityCombinable where Wrapped : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: Swift.Optional<Wrapped>) -> Swift.Bool
}
#else
extension Swift.Optional : SwiftUICore.AccessibilityCombinable where Wrapped : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: Swift.Optional<Wrapped>) -> Swift.Bool
}
#endif
extension Swift.Array : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: Swift.Array<Element>) -> Swift.Bool
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient {
  @_spi(Private) public func color(at t: CoreFoundation.CGFloat) -> SwiftUICore.Color
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyGradient {
  @_spi(Private) public func color(at t: CoreFoundation.CGFloat) -> SwiftUICore.Color
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper @dynamicMemberLookup public struct Binding<Value> : @unchecked Swift.Sendable {
  public var transaction: SwiftUICore.Transaction
  package var location: SwiftUICore.AnyLocation<Value>
  package var _value: Value
  package init(value: Value, location: SwiftUICore.AnyLocation<Value>, transaction: SwiftUICore.Transaction)
  package init(value: Value, location: SwiftUICore.AnyLocation<Value>)
  #if compiler(>=5.3) && $IsolatedAny
  @usableFromInline
  internal static func getIsolated(@_inheritActorContext _ get: @escaping @isolated(any) @Sendable () -> Value) -> () -> Value
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  @_alwaysEmitIntoClient public init(@_inheritActorContext get: @escaping @isolated(any) @Sendable () -> Value, @_inheritActorContext set: @escaping @isolated(any) @Sendable (Value) -> Swift.Void) {
        self.init(isolatedGet: get, isolatedSet: set)
    }
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  @usableFromInline
  @_transparent internal init(@_inheritActorContext isolatedGet: @escaping @isolated(any) @Sendable () -> Value, @_inheritActorContext isolatedSet: @escaping @isolated(any) @Sendable (Value) -> Swift.Void) {
        let enableRuntimeCheck = UserDefaults.standard.bool(
            forKey: "com.apple.SwiftUI.EnableRuntimeConcurrencyCheck"
        )

        self.init(
            get: {
                let nonisolatedGet = isolatedGet as () -> Value
                return if let isolation = extractIsolation(isolatedGet),
                    enableRuntimeCheck
                {
                    isolation.assumeIsolated { _ in nonisolatedGet() }
                } else {
                    nonisolatedGet()
                }
            },
            set: { value in
                let nonisolatedSet = isolatedSet as (Value) -> Void
                if let isolation = extractIsolation(isolatedSet),
                   enableRuntimeCheck
                {
                    isolation.assumeIsolated { _ in
                        nonisolatedSet(value)
                    }
                } else {
                    nonisolatedSet(value)
                }
            }
        )
    }
  #endif
  @usableFromInline
  internal init(get: @escaping () -> Value, set: @escaping (Value) -> Swift.Void)
  #if compiler(>=5.3) && $IsolatedAny
  @_alwaysEmitIntoClient public init(@_inheritActorContext get: @escaping @isolated(any) @Sendable () -> Value, @_inheritActorContext set: @escaping @isolated(any) @Sendable (Value, SwiftUICore.Transaction) -> Swift.Void) {
        self.init(isolatedGet: get, isolatedSet: set)
    }
  #endif
  #if compiler(>=5.3) && $IsolatedAny
  @usableFromInline
  @_transparent internal init(@_inheritActorContext isolatedGet: @escaping @isolated(any) @Sendable () -> Value, @_inheritActorContext isolatedSet: @escaping @isolated(any) @Sendable (Value, SwiftUICore.Transaction) -> Swift.Void) {
        let enableRuntimeCheck = UserDefaults.standard.bool(
            forKey: "com.apple.SwiftUI.EnableRuntimeConcurrencyCheck"
        )

        self.init(
            get: {
                let nonisolatedGet = isolatedGet as () -> Value
                return if let isolation = extractIsolation(isolatedGet),
                    enableRuntimeCheck
                {
                    isolation.assumeIsolated { _ in nonisolatedGet() }
                } else {
                    nonisolatedGet()
                }
            },
            set: { value, transaction in
                let nonisolatedSet = isolatedSet as (Value, Transaction) -> Void
                if let isolation = extractIsolation(isolatedSet),
                   enableRuntimeCheck
                {
                    isolation.assumeIsolated { _ in
                        nonisolatedSet(value, transaction)
                    }
                } else {
                    nonisolatedSet(value, transaction)
                }
            }
        )
    }
  #endif
  @usableFromInline
  internal init(get: @escaping () -> Value, set: @escaping (Value, SwiftUICore.Transaction) -> Swift.Void)
  public static func constant(_ value: Value) -> SwiftUICore.Binding<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  @_alwaysEmitIntoClient public init(projectedValue: SwiftUICore.Binding<Value>) {
        self = projectedValue
    }
  public subscript<Subject>(dynamicMember keyPath: Swift.WritableKeyPath<Value, Subject>) -> SwiftUICore.Binding<Subject> {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.Binding : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.Identifiable where Value : Swift.Identifiable {
  public var id: Value.ID {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ID = Value.ID
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.Sequence where Value : Swift.MutableCollection {
  public typealias Element = SwiftUICore.Binding<Value.Element>
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Binding<Value>>
  public typealias SubSequence = Swift.Slice<SwiftUICore.Binding<Value>>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.Collection where Value : Swift.MutableCollection {
  public typealias Index = Value.Index
  public typealias Indices = Value.Indices
  public var startIndex: SwiftUICore.Binding<Value>.Index {
    get
  }
  public var endIndex: SwiftUICore.Binding<Value>.Index {
    get
  }
  public var indices: Value.Indices {
    get
  }
  public func index(after i: SwiftUICore.Binding<Value>.Index) -> SwiftUICore.Binding<Value>.Index
  public func formIndex(after i: inout SwiftUICore.Binding<Value>.Index)
  public subscript(position: SwiftUICore.Binding<Value>.Index) -> SwiftUICore.Binding<Value>.Element {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.BidirectionalCollection where Value : Swift.BidirectionalCollection, Value : Swift.MutableCollection {
  public func index(before i: SwiftUICore.Binding<Value>.Index) -> SwiftUICore.Binding<Value>.Index
  public func formIndex(before i: inout SwiftUICore.Binding<Value>.Index)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : Swift.RandomAccessCollection where Value : Swift.MutableCollection, Value : Swift.RandomAccessCollection {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding {
  public func transaction(_ transaction: SwiftUICore.Transaction) -> SwiftUICore.Binding<Value>
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func animation(_ animation: SwiftUICore.Animation? = .default) -> SwiftUICore.Binding<Value>
  #else
  public func animation(_ animation: SwiftUICore.Animation? = .default) -> SwiftUICore.Binding<Value>
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript<Subject>(keyPath: Swift.WritableKeyPath<Value, Subject?>, default defaultValue: Subject) -> SwiftUICore.Binding<Subject> {
    get
  }
  #else
  package subscript<Subject>(keyPath: Swift.WritableKeyPath<Value, Subject?>, default defaultValue: Subject) -> SwiftUICore.Binding<Subject> {
    get
  }
  #endif
  package func zip<T>(with rhs: SwiftUICore.Binding<T>) -> SwiftUICore.Binding<(Value, T)>
  package func projecting<P>(_ projection: P) -> SwiftUICore.Binding<P.Projected> where Value == P.Base, P : SwiftUICore.Projection
}
extension SwiftUICore.Binding {
  package init(flattening source: some Collection<Binding<Value>>)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding : SwiftUICore.DynamicProperty {
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct EnableRuntimeConcurrencyCheck {
  @usableFromInline
  internal static var isEnabled: Swift.Bool {
    get
  }
}
@available(watchOS, unavailable, introduced: 6.0)
@available(tvOS, unavailable, introduced: 13.0)
@available(macOS, unavailable, introduced: 10.15)
@available(iOS, unavailable, introduced: 13.0)
@available(*, unavailable)
extension SwiftUICore.EnableRuntimeConcurrencyCheck : @unchecked Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func tag<V>(_ tag: V, includeOptional: Swift.Bool = true) -> some SwiftUICore.View where V : Swift.Hashable {
        return _trait(TagValueTraitKey<V>.self, .tagged(tag))
            ._trait(
                TagValueTraitKey<V?>.self,
                includeOptional ? .tagged(Optional(tag)) : .untagged)
    }
  
  @inlinable nonisolated public func _untagged() -> some SwiftUICore.View {
        return _trait(IsAuxiliaryContentTraitKey.self, true)
    }
  
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func tag<V>(_ tag: V) -> some SwiftUICore.View where V : Swift.Hashable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct TagValueTraitKey<V> : SwiftUICore._ViewTraitKey where V : Swift.Hashable {
  @usableFromInline
  @frozen package enum Value {
    case untagged
    case tagged(V)
  }
  @inlinable package static var defaultValue: SwiftUICore.TagValueTraitKey<V>.Value {
    get { .untagged }
  }
}
@available(*, unavailable)
extension SwiftUICore.TagValueTraitKey.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.TagValueTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct IsAuxiliaryContentTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.IsAuxiliaryContentTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var isAuxiliaryContent: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.ViewTraitCollection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func tagValue<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #else
  package func tagValue<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func tag<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #else
  package func tag<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #endif
  package mutating func setTagIfUnset<V>(for type: V.Type, value: V) where V : Swift.Hashable
  package mutating func setTag<V>(for type: V.Type, value: V) where V : Swift.Hashable
}
extension SwiftUICore.Binding {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func selecting(_ tag: Value?) -> SwiftUICore.Binding<Swift.Bool> where Value : Swift.Hashable
  #else
  package func selecting(_ tag: Value?) -> SwiftUICore.Binding<Swift.Bool> where Value : Swift.Hashable
  #endif
}
extension SwiftUICore.Binding where Value : Swift.Hashable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func projectingTagIndex(viewList: any SwiftUICore.ViewList) -> SwiftUICore.Binding<Swift.Int?>
  #else
  package func projectingTagIndex(viewList: any SwiftUICore.ViewList) -> SwiftUICore.Binding<Swift.Int?>
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _Velocity<Value> : Swift.Equatable where Value : Swift.Equatable {
  public var valuePerSecond: Value
  @inlinable public init(valuePerSecond: Value) {
        self.valuePerSecond = valuePerSecond
    }
  package func map<T>(_ transform: (Value) -> T) -> SwiftUICore._Velocity<T> where T : Swift.Equatable
  public static func == (a: SwiftUICore._Velocity<Value>, b: SwiftUICore._Velocity<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.Comparable where Value : Swift.Comparable {
  public static func < (lhs: SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.Hashable where Value : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : Swift.AdditiveArithmetic where Value : Swift.AdditiveArithmetic {
  @inlinable public init() {
        self.init(valuePerSecond: .zero)
    }
  @inlinable public static var zero: SwiftUICore._Velocity<Value> {
    get {
        return .init(valuePerSecond: .zero)
    }
  }
  @inlinable public static func += (lhs: inout SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) {
        lhs.valuePerSecond += rhs.valuePerSecond
    }
  @inlinable public static func -= (lhs: inout SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) {
        lhs.valuePerSecond -= rhs.valuePerSecond
    }
  @inlinable public static func + (lhs: SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) -> SwiftUICore._Velocity<Value> {
        var r = lhs; r += rhs; return r
    }
  @inlinable public static func - (lhs: SwiftUICore._Velocity<Value>, rhs: SwiftUICore._Velocity<Value>) -> SwiftUICore._Velocity<Value> {
        var r = lhs; r -= rhs; return r
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Velocity : SwiftUICore.VectorArithmetic where Value : SwiftUICore.VectorArithmetic {
  @inlinable public mutating func scale(by rhs: Swift.Double) {
        valuePerSecond.scale(by: rhs)
    }
  @inlinable public var magnitudeSquared: Swift.Double {
    get {
        return valuePerSecond.magnitudeSquared
    }
  }
}
package struct WhitespaceRemovingFormatStyle<Format, Key> : Foundation.FormatStyle where Format : Foundation.FormatStyle, Key : Foundation.DecodableAttributedStringKey, Key : Foundation.EncodableAttributedStringKey, Format.FormatOutput == Foundation.AttributedString, Key.Value : Swift.Decodable, Key.Value : Swift.Encodable {
  package func format(_ input: Format.FormatInput) -> Foundation.AttributedString
  package func locale(_ locale: Foundation.Locale) -> SwiftUICore.WhitespaceRemovingFormatStyle<Format, Key>
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.WhitespaceRemovingFormatStyle<Format, Key>, b: SwiftUICore.WhitespaceRemovingFormatStyle<Format, Key>) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias FormatInput = Format.FormatInput
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias FormatOutput = Foundation.AttributedString
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.WhitespaceRemovingFormatStyle : Foundation.DiscreteFormatStyle where Format : Foundation.DiscreteFormatStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func discreteInput(after input: Format.FormatInput) -> Format.FormatInput?
  #else
  package func discreteInput(after input: Format.FormatInput) -> Format.FormatInput?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func discreteInput(before input: Format.FormatInput) -> Format.FormatInput?
  #else
  package func discreteInput(before input: Format.FormatInput) -> Format.FormatInput?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func input(after input: Format.FormatInput) -> Format.FormatInput?
  #else
  package func input(after input: Format.FormatInput) -> Format.FormatInput?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func input(before input: Format.FormatInput) -> Format.FormatInput?
  #else
  package func input(before input: Format.FormatInput) -> Format.FormatInput?
  #endif
}
extension SwiftUICore.WhitespaceRemovingFormatStyle : SwiftUICore.SafelySerializableDiscreteFormatStyle where Format : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, SwiftUICore.WhitespaceRemovingFormatStyle<Format, Key>>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, Format.FormatInput == S.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct EnvironmentValues : Swift.CustomStringConvertible {
  public init()
  package init(_ plist: SwiftUICore.PropertyList)
  package init(_ plist: SwiftUICore.PropertyList, tracker: SwiftUICore.PropertyList.Tracker)
  package var plist: SwiftUICore.PropertyList {
    get
    set
  }
  package func removingTracker() -> SwiftUICore.EnvironmentValues
  package func addDependencies(from other: SwiftUICore.PropertyList.Tracker)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func valueWithSecondaryLookup<K, S>(for key: K.Type, secondaryKey: S.Type, secondaryLookupHandler: (S.Value) -> K.Value?) -> K.Value where K : SwiftUICore.EnvironmentKey, S : SwiftUICore.EnvironmentKey
  #else
  package func valueWithSecondaryLookup<K, S>(for key: K.Type, secondaryKey: S.Type, secondaryLookupHandler: (S.Value) -> K.Value?) -> K.Value where K : SwiftUICore.EnvironmentKey, S : SwiftUICore.EnvironmentKey
  #endif
  package mutating func setValue<K>(_ value: K.Value, for key: K.Type) where K : SwiftUICore.EnvironmentKey
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.EnvironmentKey {
    get
    set
  }
  package subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.DerivedEnvironmentKey {
    get
  }
  public var description: Swift.String {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.EnvironmentValues : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public mutating func append(contentsOf other: SwiftUICore.EnvironmentValues)
}
package struct ScrollViewDragAutoScrollKey : SwiftUICore.PreferenceKey {
  package static var defaultValue: Swift.Bool
  package static func reduce(value: inout Swift.Bool, nextValue: () -> Swift.Bool)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum DynamicTypeSize : Swift.Hashable, Swift.Comparable, Swift.CaseIterable, Swift.Sendable {
  case xSmall
  case small
  case medium
  case large
  case xLarge
  case xxLarge
  case xxxLarge
  case accessibility1
  case accessibility2
  case accessibility3
  case accessibility4
  case accessibility5
  public var isAccessibilitySize: Swift.Bool {
    get
  }
  package static var systemDefault: SwiftUICore.DynamicTypeSize {
    get
  }
  public static func == (a: SwiftUICore.DynamicTypeSize, b: SwiftUICore.DynamicTypeSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (a: SwiftUICore.DynamicTypeSize, b: SwiftUICore.DynamicTypeSize) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUICore.DynamicTypeSize]
  public static var allCases: [SwiftUICore.DynamicTypeSize] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var dynamicTypeSize: SwiftUICore.DynamicTypeSize {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func dynamicTypeSize(_ size: SwiftUICore.DynamicTypeSize) -> some SwiftUICore.View
  
  nonisolated public func dynamicTypeSize<T>(_ range: T) -> some SwiftUICore.View where T : Swift.RangeExpression, T.Bound == SwiftUICore.DynamicTypeSize
  
}
extension SwiftUICore.DynamicTypeSize {
  package func clamped<T>(to range: T) -> SwiftUICore.DynamicTypeSize where T : Swift.RangeExpression, T.Bound == SwiftUICore.DynamicTypeSize
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func delay(_ delay: Foundation.TimeInterval) -> SwiftUICore.Animation
}
@_spi(Private_Scroll) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ScrollClipEffect<ClipShape> : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.Animatable where ClipShape : SwiftUICore.Shape {
  @_spi(Private_Scroll) @_Concurrency.MainActor @preconcurrency public var shape: ClipShape
  @_spi(Private_Scroll) @inlinable nonisolated public init(shape: ClipShape) {
        self.shape = shape
    }
  @_spi(Private_Scroll) @_Concurrency.MainActor @preconcurrency public var animatableData: ClipShape.AnimatableData {
    @_spi(Private_Scroll) get
    @_spi(Private_Scroll) set
  }
  @_spi(Private_Scroll) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ScrollClipEffect<ClipShape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private_Scroll) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias AnimatableData = ClipShape.AnimatableData
  @_spi(Private_Scroll) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private_Scroll) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private_Scroll) @inlinable nonisolated public func scrollClipShape<S>(_ shape: S) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        return modifier(_ScrollClipEffect(shape: shape))
    }
  
}
package struct WatchColorGradientProvider<Fallback> : SwiftUICore.GradientProvider where Fallback : SwiftUICore.GradientProvider {
  package var color: SwiftUICore.Color
  package var fallback: Fallback
  package init(color: SwiftUICore.Color, fallback: Fallback)
  package func resolve(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.ResolvedGradient
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #else
  package func fallbackColor(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func containerBackgroundMaterial(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Material.ResolvedMaterial?
  #else
  package func containerBackgroundMaterial(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Material.ResolvedMaterial?
  #endif
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.WatchColorGradientProvider<Fallback>, b: SwiftUICore.WatchColorGradientProvider<Fallback>) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.Color.Resolved {
  @_alwaysEmitIntoClient fileprivate func darkened(to factor: Swift.Float) -> SwiftUICore.Color.Resolved {
        var color = self
        color.blue = self.blue * factor
        color.red = self.red * factor
        color.green = self.green * factor
        return color
    }
  @_alwaysEmitIntoClient fileprivate func lightened(to factor: Swift.Float) -> SwiftUICore.Color.Resolved {
        var color = self
        color.blue = self.blue + (1 - self.blue) * factor
        color.red = self.red + (1 - self.red) * factor
        color.green = self.green + (1 - self.green) * factor
        return color
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@propertyWrapper public struct ScaledMetric<Value> : SwiftUICore.DynamicProperty where Value : Swift.BinaryFloatingPoint {
  public init(wrappedValue: Value, relativeTo textStyle: SwiftUICore.Font.TextStyle)
  public init(wrappedValue: Value)
  public var wrappedValue: Value {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ScaledMetric : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "Use @ScaledMetric")
@propertyWrapper public struct _ScaledValue : SwiftUICore.DynamicProperty {
  public init(wrappedValue: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle = .body)
  public var wrappedValue: CoreFoundation.CGFloat {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._ScaledValue : Swift.Sendable {
}
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
public enum ContentSizeCategory : Swift.Hashable, Swift.CaseIterable {
  case extraSmall
  case small
  case medium
  case large
  case extraLarge
  case extraExtraLarge
  case extraExtraExtraLarge
  case accessibilityMedium
  case accessibilityLarge
  case accessibilityExtraLarge
  case accessibilityExtraExtraLarge
  case accessibilityExtraExtraExtraLarge
  package init(_ size: SwiftUICore.DynamicTypeSize)
  @available(iOS 13.4, macOS 10.15.4, tvOS 13.4, watchOS 6.2, *)
  public var isAccessibilityCategory: Swift.Bool {
    get
  }
  public static func == (a: SwiftUICore.ContentSizeCategory, b: SwiftUICore.ContentSizeCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "DynamicTypeSize")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "DynamicTypeSize")
  public typealias AllCases = [SwiftUICore.ContentSizeCategory]
  public static var allCases: [SwiftUICore.ContentSizeCategory] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.ContentSizeCategory : Swift.Sendable {
}
extension SwiftUICore.DynamicTypeSize {
  package init(_ size: SwiftUICore.ContentSizeCategory)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContentSizeCategory {
  @_alwaysEmitIntoClient public static func < (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        func comparisonValue(for sizeCategory: Self) -> Int {
            switch sizeCategory {
            case .extraSmall: return 0
            case .small: return 1
            case .medium: return 2
            case .large: return 3
            case .extraLarge: return 4
            case .extraExtraLarge: return 5
            case .extraExtraExtraLarge: return 6
            case .accessibilityMedium: return 7
            case .accessibilityLarge: return 8
            case .accessibilityExtraLarge: return 9
            case .accessibilityExtraExtraLarge: return 10
            case .accessibilityExtraExtraExtraLarge: return 11
            @unknown default: return 3
            }
        }
        return comparisonValue(for: lhs) < comparisonValue(for: rhs)
    }
  @_alwaysEmitIntoClient public static func <= (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        !(rhs < lhs)
    }
  @_alwaysEmitIntoClient public static func > (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        rhs < lhs
    }
  @_alwaysEmitIntoClient public static func >= (lhs: SwiftUICore.ContentSizeCategory, rhs: SwiftUICore.ContentSizeCategory) -> Swift.Bool {
        !(lhs < rhs)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "dynamicTypeSize")
  public var sizeCategory: SwiftUICore.ContentSizeCategory {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  public static let largeTitle: SwiftUICore.Font
  public static let title: SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title2: SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let title3: SwiftUICore.Font
  public static let headline: SwiftUICore.Font
  public static let subheadline: SwiftUICore.Font
  public static let body: SwiftUICore.Font
  public static let callout: SwiftUICore.Font
  public static let footnote: SwiftUICore.Font
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static let footnote2: SwiftUICore.Font
  public static let caption: SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static let caption2: SwiftUICore.Font
  @_spi(Private) @available(tvOS 18.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let caption3: SwiftUICore.Font
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let extraLargeTitle: SwiftUICore.Font
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let extraLargeTitle2: SwiftUICore.Font
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design? = nil, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design? = nil, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #endif
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` instead.")
  @_disfavoredOverload public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design = .default) -> SwiftUICore.Font
  @_spi(Private) @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` API instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` API instead.")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` API instead.")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use `system(_:design:weight:)` API instead.")
  @_disfavoredOverload public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design = .default, weight: SwiftUICore.Font.Weight) -> SwiftUICore.Font
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(_ style: SwiftUICore.Font.PrivateTextStyle, design: SwiftUICore.Font.Design? = nil, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(_ style: SwiftUICore.Font.PrivateTextStyle, design: SwiftUICore.Font.Design? = nil, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use `system(_:design:weight:)` instead.")
  @available(macOS, introduced: 12.0, deprecated: 13.0, message: "Use `system(_:design:weight:)` instead.")
  @available(tvOS, introduced: 15.0, deprecated: 16.0, message: "Use `system(_:design:weight:)` instead.")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Use `system(_:design:weight:)` instead.")
  @_disfavoredOverload public static func system(_ style: SwiftUICore.Font.PrivateTextStyle, design: SwiftUICore.Font.Design = .default, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #else
  @_spi(Private) @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use `system(_:design:weight:)` instead.")
  @available(macOS, introduced: 12.0, deprecated: 13.0, message: "Use `system(_:design:weight:)` instead.")
  @available(tvOS, introduced: 15.0, deprecated: 16.0, message: "Use `system(_:design:weight:)` instead.")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Use `system(_:design:weight:)` instead.")
  @_disfavoredOverload public static func system(_ style: SwiftUICore.Font.PrivateTextStyle, design: SwiftUICore.Font.Design = .default, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.PrivateDesign, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(_ style: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.PrivateDesign, weight: SwiftUICore.Font.Weight? = nil) -> SwiftUICore.Font
  #endif
  public enum TextStyle : Swift.CaseIterable, Swift.Sendable {
    case largeTitle
    case title
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title2
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case title3
    case headline
    case subheadline
    case body
    case callout
    case footnote
    case caption
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
    case caption2
    @available(visionOS 1.0, *)
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    case extraLargeTitle
    @available(visionOS 1.0, *)
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    case extraLargeTitle2
    @available(tvOS 18.0, *)
    @available(iOS, unavailable)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    case caption3
    public static var allCases: [SwiftUICore.Font.TextStyle]
    public static func == (a: SwiftUICore.Font.TextStyle, b: SwiftUICore.Font.TextStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias AllCases = [SwiftUICore.Font.TextStyle]
    public var hashValue: Swift.Int {
      get
    }
  }
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct PrivateTextStyle : Swift.Hashable {
    @_spi(Private) public static let footnote2: SwiftUICore.Font.PrivateTextStyle
    @_spi(Private) package static let emphasizedBody: SwiftUICore.Font.PrivateTextStyle
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.Font.PrivateTextStyle, b: SwiftUICore.Font.PrivateTextStyle) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.Font.PrivateTextStyle : Swift.Sendable {
}
extension SwiftUICore.Font.TextStyle {
  package var ctTextStyle: CoreFoundation.CFString {
    get
  }
}
extension SwiftUICore.DynamicTypeSize {
  package var ctTextSize: CoreFoundation.CFString {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ kCTFontContentSizeCategory: CoreFoundation.CFString)
  #else
  package init?(_ kCTFontContentSizeCategory: CoreFoundation.CFString)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  public func italic() -> SwiftUICore.Font
  public func smallCaps() -> SwiftUICore.Font
  public func lowercaseSmallCaps() -> SwiftUICore.Font
  public func uppercaseSmallCaps() -> SwiftUICore.Font
  public func monospacedDigit() -> SwiftUICore.Font
  public func weight(_ weight: SwiftUICore.Font.Weight) -> SwiftUICore.Font
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func width(_ width: SwiftUICore.Font.Width) -> SwiftUICore.Font
  public func bold() -> SwiftUICore.Font
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func monospaced() -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func leading(_ leading: SwiftUICore.Font.Leading) -> SwiftUICore.Font
  @available(iOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(macOS, introduced: 11.0, deprecated: 11.0, renamed: "leading")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, renamed: "leading")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, renamed: "leading")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, renamed: "leading")
  public func _leading(_ leading: SwiftUICore.Font._Leading) -> SwiftUICore.Font
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func feature(_ type: Swift.Int, _ selector: Swift.Int) -> SwiftUICore.Font
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func feature(_ settings: Swift.String...) -> SwiftUICore.Font
  @_spi(Widget) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func features(_ features: [CoreFoundation.CFDictionary]) -> SwiftUICore.Font
  public func _stylisticAlternative(_ alternative: SwiftUICore.Font._StylisticAlternative) -> SwiftUICore.Font
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func variation(_ identifier: SwiftUICore.Font.VariationAxisIdentifier, _ value: CoreFoundation.CGFloat) -> SwiftUICore.Font
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum VariationAxisIdentifier : Swift.Int, Swift.Hashable {
    @_spi(Private) case weight
    @_spi(Private) case width
    @_spi(Private) case slant
    @_spi(Private) case opticalSize
    @_spi(Private) case italic
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public init?(rawValue: Swift.Int)
    #else
    @_spi(Private) public init?(rawValue: Swift.Int)
    #endif
    @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias RawValue = Swift.Int
    @_spi(Private) public var rawValue: Swift.Int {
      @_spi(Private) get
    }
  }
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func grade(_ grade: Swift.Int) -> SwiftUICore.Font
  package func modifier<M>(_ modifier: M) -> SwiftUICore.Font where M : SwiftUICore.FontModifier
  package func modifier<M>(type: M.Type) -> SwiftUICore.Font where M : SwiftUICore.StaticFontModifier
  @frozen public struct Weight : Swift.Hashable {
    package var value: CoreFoundation.CGFloat
    public static let ultraLight: SwiftUICore.Font.Weight
    public static let thin: SwiftUICore.Font.Weight
    public static let light: SwiftUICore.Font.Weight
    public static let regular: SwiftUICore.Font.Weight
    public static let medium: SwiftUICore.Font.Weight
    public static let semibold: SwiftUICore.Font.Weight
    public static let bold: SwiftUICore.Font.Weight
    public static let heavy: SwiftUICore.Font.Weight
    public static let black: SwiftUICore.Font.Weight
    @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
    public static func custom(_ value: CoreFoundation.CGFloat) -> SwiftUICore.Font.Weight
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Font.Weight, b: SwiftUICore.Font.Weight) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public struct Width : Swift.Hashable, Swift.Sendable {
    public var value: CoreFoundation.CGFloat
    public static let compressed: SwiftUICore.Font.Width
    public static let condensed: SwiftUICore.Font.Width
    public static let standard: SwiftUICore.Font.Width
    public static let expanded: SwiftUICore.Font.Width
    public init(_ value: CoreFoundation.CGFloat)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Font.Width, b: SwiftUICore.Font.Width) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _StylisticAlternative : Swift.Int, Swift.Hashable {
    case one
    case two
    case three
    case four
    case five
    case six
    case seven
    case eight
    case nine
    case ten
    case eleven
    case twelve
    case thirteen
    case fourteen
    case fifteen
    case sixteen
    case seventeen
    case eighteen
    case nineteen
    case twenty
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.Int)
    #else
    public init?(rawValue: Swift.Int)
    #endif
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum Leading : Swift.Sendable {
    case standard
    case tight
    case loose
    public static func == (a: SwiftUICore.Font.Leading, b: SwiftUICore.Font.Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum _Leading : Swift.Hashable {
    case tight
    case loose
    case standard
    public static func == (a: SwiftUICore.Font._Leading, b: SwiftUICore.Font._Leading) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  package struct BoldModifier : SwiftUICore.StaticFontModifier {
    package static func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package static func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
  }
  package struct ItalicModifier : SwiftUICore.StaticFontModifier {
    package static func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  }
  package struct MonospacedModifier : SwiftUICore.StaticFontModifier {
    package static func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  }
  package struct MonospacedDigitModifier : SwiftUICore.StaticFontModifier {
    package static func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  }
  package struct DesignModifier : SwiftUICore.FontModifier {
    package let design: SwiftUICore.Font.Design
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.DesignModifier, b: SwiftUICore.Font.DesignModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct LeadingModifier : SwiftUICore.FontModifier {
    package var leading: SwiftUICore.Font.Leading
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.LeadingModifier, b: SwiftUICore.Font.LeadingModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct FeatureSettingModifier : SwiftUICore.FontModifier {
    package var type: Swift.Int
    package var selector: Swift.Int
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.FeatureSettingModifier, b: SwiftUICore.Font.FeatureSettingModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct OpenTypeFeatureSettingModifier : SwiftUICore.FontModifier {
    package var settings: [Swift.String]
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.OpenTypeFeatureSettingModifier, b: SwiftUICore.Font.OpenTypeFeatureSettingModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct FeatureDictionariesSettingModifier : SwiftUICore.FontModifier {
    package var features: [CoreFoundation.CFDictionary]
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.FeatureDictionariesSettingModifier, b: SwiftUICore.Font.FeatureDictionariesSettingModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct WeightModifier : SwiftUICore.FontModifier {
    package var weight: SwiftUICore.Font.Weight
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.WeightModifier, b: SwiftUICore.Font.WeightModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct WidthModifier : SwiftUICore.FontModifier {
    package var width: CoreFoundation.CGFloat
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.WidthModifier, b: SwiftUICore.Font.WidthModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct StylisticAlternativeModifier : SwiftUICore.FontModifier {
    package var alternative: SwiftUICore.Font._StylisticAlternative
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.StylisticAlternativeModifier, b: SwiftUICore.Font.StylisticAlternativeModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct VariationModifier : SwiftUICore.FontModifier {
    package var identifier: SwiftUICore.Font.VariationAxisIdentifier
    package var value: CoreFoundation.CGFloat
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.VariationModifier, b: SwiftUICore.Font.VariationModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct GradeModifier : SwiftUICore.FontModifier {
    package var grade: Swift.Int
    package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.Font.GradeModifier, b: SwiftUICore.Font.GradeModifier) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.Font.VariationAxisIdentifier : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Font._Leading : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Font._StylisticAlternative : Swift.Sendable {
}
package protocol FontModifier : Swift.Hashable {
  func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
}
extension SwiftUICore.FontModifier {
  package func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
}
package protocol StaticFontModifier {
  static func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  static func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
}
extension SwiftUICore.StaticFontModifier {
  package static func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
}
package class AnyFontModifier : SwiftUICore.FontModifier {
  package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  package func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
  package func isEqual(to other: SwiftUICore.AnyFontModifier) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (lhs: SwiftUICore.AnyFontModifier, rhs: SwiftUICore.AnyFontModifier) -> Swift.Bool
  package static func dynamic<M>(_ modifier: M) -> SwiftUICore.AnyFontModifier where M : SwiftUICore.FontModifier
  package static func `static`<M>(_ type: M.Type) -> SwiftUICore.AnyFontModifier where M : SwiftUICore.StaticFontModifier
  package var typeID: Swift.ObjectIdentifier {
    get
  }
  @objc deinit
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.AnyFontModifier {
  package var isboldFontWeightModifier: Swift.Bool {
    get
  }
}
final package class AnyDynamicFontModifier<M> : SwiftUICore.AnyFontModifier where M : SwiftUICore.FontModifier {
  final package let modifier: M
  package init(_ modifier: M)
  final package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  final package func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
  final package func isEqual(to other: SwiftUICore.AnyFontModifier) -> Swift.Bool
  final package func hash(into hasher: inout Swift.Hasher)
  final package var typeID: Swift.ObjectIdentifier {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers final package class AnyStaticFontModifier<M> : SwiftUICore.AnyFontModifier where M : SwiftUICore.StaticFontModifier {
  final package func modify(descriptor: inout CoreText.CTFontDescriptor, in context: SwiftUICore.Font.Context)
  final package func modify(traits: inout SwiftUICore.Font.ResolvedTraits)
  final package func isEqual(to other: SwiftUICore.AnyFontModifier) -> Swift.Bool
  final package func hash(into hasher: inout Swift.Hasher)
  final package var typeID: Swift.ObjectIdentifier {
    get
  }
  @objc deinit
}
extension SwiftUICore.EnvironmentValues {
  package var fontModifiers: [SwiftUICore.AnyFontModifier] {
    get
    set
  }
}
extension SwiftUICore.Font.Weight : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUICore.CodableFontWeight {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = SwiftUICore.CodableFontWeight
}
package struct CodableFontWeight : SwiftUICore.CodableProxy {
  package var base: SwiftUICore.Font.Weight
  package init(_ base: SwiftUICore.Font.Weight)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package typealias Base = SwiftUICore.Font.Weight
}
package struct PreferencesOutputs {
  package var debugProperties: SwiftUICore._ViewDebug.Properties
  @inlinable package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(anyKey key: any SwiftUICore.AnyPreferenceKey.Type) -> AttributeGraph.AnyAttribute? {
    get
    set
  }
  #else
  package subscript(anyKey key: any SwiftUICore.AnyPreferenceKey.Type) -> AttributeGraph.AnyAttribute? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript<K>(key: K.Type) -> AttributeGraph.Attribute<K.Value>? where K : SwiftUICore.PreferenceKey {
    get
    set
  }
  #else
  package subscript<K>(key: K.Type) -> AttributeGraph.Attribute<K.Value>? where K : SwiftUICore.PreferenceKey {
    get
    set
  }
  #endif
  package mutating func appendPreference<K>(key: K.Type, value: AttributeGraph.Attribute<K.Value>) where K : SwiftUICore.PreferenceKey
  package func forEachPreference(_ body: (any SwiftUICore.AnyPreferenceKey.Type, AttributeGraph.AnyAttribute) -> Swift.Void)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func setIndirectDependency(_ dependency: AttributeGraph.AnyAttribute?)
  #else
  package func setIndirectDependency(_ dependency: AttributeGraph.AnyAttribute?)
  #endif
  package func attachIndirectOutputs(to childOutputs: SwiftUICore.PreferencesOutputs)
  package func detachIndirectOutputs()
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct FadeHoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.PrimitiveCustomHoverEffect {
  @_spi(CustomHoverEffects) public init(from inactiveOpacity: Swift.Double, to activeOpacity: Swift.Double)
  @_spi(CustomHoverEffects) package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    @_spi(CustomHoverEffects) get
  }
  @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
  @available(iOS, unavailable, introduced: 18.0)
  @available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.FadeHoverEffect : SwiftUICore.PrimitiveCustomHoverEffect {
  @_spi(CustomHoverEffects) public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<SwiftUICore.FadeHoverEffect>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
}
@_spi(CustomHoverEffects) @available(*, unavailable)
extension SwiftUICore.FadeHoverEffect : Swift.Sendable {
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUICore.FadeHoverEffect {
  @_spi(CustomHoverEffects) public static func fade(from inactiveOpacity: Swift.Double, to activeOpacity: Swift.Double) -> SwiftUICore.FadeHoverEffect
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public func fade(from inactiveOpacity: Swift.Double, to activeOpacity: Swift.Double) -> some SwiftUICore.CustomHoverEffect
  
}
@_spi(ForSwiftUIOnly) @_inheritsConvenienceInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@objc(SwiftUICoreGlue) open class CoreGlue : ObjectiveC.NSObject {
  @_spi(ForSwiftUIOnly) package static var shared: SwiftUICore.CoreGlue
  @_spi(ForSwiftUIOnly) open func maxVelocity(_: CoreFoundation.CGFloat)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func nextUpdate(nextTime: SwiftUICore.Time, interval: Swift.Double, reason: Swift.UInt32?)
  #else
  @_spi(ForSwiftUIOnly) open func nextUpdate(nextTime: SwiftUICore.Time, interval: Swift.Double, reason: Swift.UInt32?)
  #endif
  @_spi(ForSwiftUIOnly) open func hasTestHost() -> Swift.Bool
  @_spi(ForSwiftUIOnly) open func isInstantiated(graph: AttributeGraph.Graph) -> Swift.Bool
  @_spi(ForSwiftUIOnly) open var defaultImplicitRootType: SwiftUICore.CoreGlue.DefaultImplicitRootTypeResult {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open var defaultSpacing: CoreFoundation.CGSize {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open func makeDefaultLayoutComputer() -> SwiftUICore.CoreGlue.MakeDefaultLayoutComputerResult
  @_spi(ForSwiftUIOnly) open func makeDefaultLayoutComputer(graph: AttributeGraph.Graph) -> SwiftUICore.CoreGlue.MakeDefaultLayoutComputerResult
  @_spi(ForSwiftUIOnly) open func startChildGeometries(_ params: SwiftUICore.CoreGlue.StartChildGeometriesParameters)
  @_spi(ForSwiftUIOnly) open func endChildGeometries(_ params: SwiftUICore.CoreGlue.EndChildGeometriesParameters)
  @_spi(ForSwiftUIOnly) open func makeLayoutView<L>(root: SwiftUICore._GraphValue<L>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs where L : SwiftUICore.Layout
  @_spi(ForSwiftUIOnly) open func addDisplayListTreeValue(outputs: inout SwiftUICore._ViewOutputs)
  @_spi(ForSwiftUIOnly) open func updateData(_ data: inout SwiftUICore._ViewDebug.Data, value: AttributeGraph.TreeValue)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func makeForEachView<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(ForSwiftUIOnly) open func makeForEachView<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func makeForEachViewList<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(ForSwiftUIOnly) open func makeForEachViewList<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #endif
  @_spi(ForSwiftUIOnly) open func defaultOpenURLAction(env: SwiftUICore.EnvironmentValues) -> SwiftUICore.OpenURLAction
  @_spi(ForSwiftUIOnly) @objc override dynamic public init()
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.CoreGlue {
  @_spi(ForSwiftUIOnly) public struct DefaultImplicitRootTypeResult {
    @_spi(ForSwiftUIOnly) package var value: any SwiftUICore._VariadicView.AnyImplicitRoot.Type
    @_spi(ForSwiftUIOnly) package init(_ value: any SwiftUICore._VariadicView.AnyImplicitRoot.Type)
  }
  @_spi(ForSwiftUIOnly) public struct MakeDefaultLayoutComputerResult {
    @_spi(ForSwiftUIOnly) package var value: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>
    @_spi(ForSwiftUIOnly) package init(_ value: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>)
  }
  @_spi(ForSwiftUIOnly) public struct StartChildGeometriesParameters {
    @_spi(ForSwiftUIOnly) package var recorder: SwiftUICore.LayoutTrace.Recorder
    @_spi(ForSwiftUIOnly) package var parentSize: SwiftUICore.ViewSize
    @_spi(ForSwiftUIOnly) package var origin: CoreFoundation.CGPoint
    @_spi(ForSwiftUIOnly) package var attributeID: Swift.UInt32
    @_spi(ForSwiftUIOnly) package init(recorder: SwiftUICore.LayoutTrace.Recorder, parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint, attributeID: Swift.UInt32)
  }
  @_spi(ForSwiftUIOnly) public struct EndChildGeometriesParameters {
    @_spi(ForSwiftUIOnly) package var recorder: SwiftUICore.LayoutTrace.Recorder
    @_spi(ForSwiftUIOnly) package var geometries: [SwiftUICore.ViewGeometry]
    @_spi(ForSwiftUIOnly) package init(recorder: SwiftUICore.LayoutTrace.Recorder, geometries: [SwiftUICore.ViewGeometry])
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue.DefaultImplicitRootTypeResult : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue.MakeDefaultLayoutComputerResult : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue.StartChildGeometriesParameters : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue.EndChildGeometriesParameters : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @_inheritsConvenienceInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@objc(SwiftUICoreGlue2) open class CoreGlue2 : ObjectiveC.NSObject {
  @_spi(ForSwiftUIOnly) package static var shared: SwiftUICore.CoreGlue2
  @_spi(ForSwiftUIOnly) open func initializeTestApp()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func isStatusBarHidden() -> Swift.Bool?
  #else
  @_spi(ForSwiftUIOnly) open func isStatusBarHidden() -> Swift.Bool?
  #endif
  @_spi(ForSwiftUIOnly) open func configureDefaultEnvironment(_: inout SwiftUICore.EnvironmentValues)
  @_spi(ForSwiftUIOnly) open func makeRootView(base: SwiftUICore.AnyView, rootFocusScope: SwiftUICore.Namespace.ID) -> SwiftUICore.AnyView
  @_spi(ForSwiftUIOnly) open var systemDefaultDynamicTypeSize: SwiftUICore.DynamicTypeSize {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) open var codableAttachmentCellType: SwiftUICore.CoreGlue2.CodableAttachmentCellTypeResult {
    @_spi(ForSwiftUIOnly) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func linkURL(_ parameters: SwiftUICore.CoreGlue2.LinkURLParameters) -> Foundation.URL?
  #else
  @_spi(ForSwiftUIOnly) open func linkURL(_ parameters: SwiftUICore.CoreGlue2.LinkURLParameters) -> Foundation.URL?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func linkURL(at point: CoreFoundation.CGPoint, in size: CoreFoundation.CGSize, stringDrawing: SwiftUICore.ResolvedStyledText.StringDrawing) -> Foundation.URL?
  #else
  @_spi(ForSwiftUIOnly) package func linkURL(at point: CoreFoundation.CGPoint, in size: CoreFoundation.CGSize, stringDrawing: SwiftUICore.ResolvedStyledText.StringDrawing) -> Foundation.URL?
  #endif
  @_spi(ForSwiftUIOnly) open func transformingEquivalentAttributes(_ attributedString: Foundation.AttributedString) -> Foundation.AttributedString
  @_spi(ForSwiftUIOnly) @objc(makeSummarySymbolHostIsOn:font:foregroundColor:) open func makeSummarySymbolHost(isOn: Swift.Bool, font: CoreText.CTFont, foregroundColor: CoreGraphics.CGColor) -> Swift.AnyObject
  @_spi(ForSwiftUIOnly) @objc override dynamic public init()
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.CoreGlue2 {
  @_spi(ForSwiftUIOnly) public struct CodableAttachmentCellTypeResult {
    @_spi(ForSwiftUIOnly) package var value: (any SwiftUICore.ProtobufMessage.Type)?
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(ForSwiftUIOnly) package init(_ value: (any SwiftUICore.ProtobufMessage.Type)?)
    #else
    @_spi(ForSwiftUIOnly) package init(_ value: (any SwiftUICore.ProtobufMessage.Type)?)
    #endif
  }
  @_spi(ForSwiftUIOnly) public struct LinkURLParameters {
    @_spi(ForSwiftUIOnly) package var point: CoreFoundation.CGPoint
    @_spi(ForSwiftUIOnly) package var size: CoreFoundation.CGSize
    @_spi(ForSwiftUIOnly) package var stringDrawing: SwiftUICore.ResolvedStyledText.StringDrawing
    @_spi(ForSwiftUIOnly) package init(point: CoreFoundation.CGPoint, size: CoreFoundation.CGSize, stringDrawing: SwiftUICore.ResolvedStyledText.StringDrawing)
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue2 : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue2.CodableAttachmentCellTypeResult : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.CoreGlue2.LinkURLParameters : Swift.Sendable {
}
package enum DefaultDescriptionAttribute : Swift.String, Swift.CaseIterable {
  case rect
  case origin
  case startPoint
  case endPoint
  case transform
  case clips
  case cornerRadius
  case continuousCorners
  case opacity
  case borderWidth
  case borderColor
  case backgroundColor
  case compositingFilter
  case disableUpdates
  case shadowOpacity
  case shadowRadius
  case shadowColor
  case shadowOffset
  case shadowPath
  case shadowPathIsBounds
  case contentsCenter
  case contentsScaling
  case contentsMultiplyColor
  case colorScheme
  case filters
  case gradientType
  case gradientColors
  case gradientLocations
  case gradientInterpolations
  package static var all: Swift.Set<SwiftUICore.DefaultDescriptionAttribute> {
    get
  }
  package static var geometry: Swift.Set<SwiftUICore.DefaultDescriptionAttribute> {
    get
  }
  package static var relatedToCornerRadius: Swift.Set<SwiftUICore.DefaultDescriptionAttribute> {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(rawValue: Swift.String)
  #else
  package init?(rawValue: Swift.String)
  #endif
  package typealias AllCases = [SwiftUICore.DefaultDescriptionAttribute]
  package typealias RawValue = Swift.String
  package static var allCases: [SwiftUICore.DefaultDescriptionAttribute] {
    get
  }
  package var rawValue: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol EnvironmentKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentKey {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentKey where Self.Value : Swift.Equatable {
  public static func _valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
package protocol DerivedEnvironmentKey {
  associatedtype Value : Swift.Equatable
  static func value(in environment: SwiftUICore.EnvironmentValues) -> Self.Value
}
extension Swift.OptionSet {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func setValue(_ value: Swift.Bool, for set: Self) {
        if value {
            formUnion(set)
        } else {
            subtract(set)
        }
    }
}
@inline(__always) package func isLinkedOnOrAfter(_ semantics: SwiftUICore.Semantics) -> Swift.Bool
@inline(__always) package func isDeployedOnOrAfter(_ semantics: SwiftUICore.Semantics) -> Swift.Bool
package struct Semantics : Swift.Hashable, Swift.Comparable, Swift.CustomStringConvertible {
  package static func < (lhs: SwiftUICore.Semantics, rhs: SwiftUICore.Semantics) -> Swift.Bool
  package var description: Swift.String {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.Semantics, b: SwiftUICore.Semantics) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package enum SemanticRequirement {
  case linkedOnOrAfter
  case deployedOnOrAfter
  package static func == (a: SwiftUICore.SemanticRequirement, b: SwiftUICore.SemanticRequirement) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.Semantics {
  package static var forced: SwiftUICore.Semantics.Forced
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func test<R>(as keyPath: Swift.WritableKeyPath<SwiftUICore.Semantics.Forced, SwiftUICore.Semantics?> = \.sdk, _ body: () throws -> R) rethrows -> R
  #else
  package func test<R>(as keyPath: Swift.WritableKeyPath<SwiftUICore.Semantics.Forced, SwiftUICore.Semantics?> = \.sdk, _ body: () throws -> R) rethrows -> R
  #endif
}
extension SwiftUICore.Semantics {
  package struct Forced {
    package var sdk: SwiftUICore.Semantics?
    package var deploymentTarget: SwiftUICore.Semantics?
    package init()
  }
}
extension SwiftUICore.Semantics {
  package static let firstRelease: SwiftUICore.Semantics
  package static let latest: SwiftUICore.Semantics
  package static let maximal: SwiftUICore.Semantics
  package static let v1: SwiftUICore.Semantics
  package static let v1_3_1: SwiftUICore.Semantics
  package static let v1_4: SwiftUICore.Semantics
  package static let v2: SwiftUICore.Semantics
  package static let v2_1: SwiftUICore.Semantics
  package static let v2_3: SwiftUICore.Semantics
  package static let v3: SwiftUICore.Semantics
  package static let v3_2: SwiftUICore.Semantics
  package static let v3_4: SwiftUICore.Semantics
  package static let v4: SwiftUICore.Semantics
  package static let v4_4: SwiftUICore.Semantics
  package static let v5: SwiftUICore.Semantics
  package static let v5_2: SwiftUICore.Semantics
  package static let v6: SwiftUICore.Semantics
}
extension SwiftUICore.Semantics {
  package var prior: SwiftUICore.Semantics {
    get
  }
}
extension SwiftUICore.SemanticFeature {
  @inline(__always) package static var isEnabled: Swift.Bool {
    get
  }
}
package struct UsingGraphicsRenderer : SwiftUICore.ViewInput {
  package static let defaultValue: Swift.Bool
  package typealias Value = Swift.Bool
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol ConditionalGraphicsView : SwiftUICore.View {
  associatedtype GraphicsBody : SwiftUICore.View
  @_spi(Private) @SwiftUICore.ViewBuilder @preconcurrency @_Concurrency.MainActor var graphicsBody: Self.GraphicsBody { get }
}
@_spi(Private) extension SwiftUICore.ConditionalGraphicsView {
  @_spi(Private) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @_spi(Private) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
package enum ConditionalGraphValue<First, Second> {
  case first(SwiftUICore._GraphValue<First>)
  case second(SwiftUICore._GraphValue<Second>)
}
extension SwiftUICore.ConditionalGraphValue where First : SwiftUICore.View, Second : SwiftUICore.View {
  package func makeView(inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  package func makeViewList(inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
package struct UniqueID : Swift.Hashable {
  @inlinable package init()
  package static let invalid: SwiftUICore.UniqueID
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.UniqueID, b: SwiftUICore.UniqueID) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package enum AccessibilityChildBehaviorKind : Swift.Codable {
  case combine
  case contain
  package static func == (a: SwiftUICore.AccessibilityChildBehaviorKind, b: SwiftUICore.AccessibilityChildBehaviorKind) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package func encode(to encoder: any Swift.Encoder) throws
  package var hashValue: Swift.Int {
    get
  }
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.AccessibilityChildBehaviorKind : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
package struct VelocitySampler<T> where T : SwiftUICore.VectorArithmetic {
  package var lastTime: SwiftUICore.Time? {
    get
  }
  package init()
  package mutating func addSample(_ sample: T, time: SwiftUICore.Time)
  package mutating func reset()
  package var isEmpty: Swift.Bool {
    get
  }
  package var velocity: SwiftUICore._Velocity<T> {
    get
  }
}
package struct AnimatableVelocitySampler<Value> where Value : SwiftUICore.Animatable {
  package var base: SwiftUICore.VelocitySampler<Value.AnimatableData>
  package init()
  package init(base: SwiftUICore.VelocitySampler<Value.AnimatableData>)
  package mutating func addSample(_ sample: Value, time: SwiftUICore.Time)
  package func velocity(_ value: Value) -> Value
}
package protocol GestureViewModifier : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  associatedtype ContentGesture : SwiftUICore.Gesture
  associatedtype Combiner : SwiftUICore.GestureCombiner = SwiftUICore.DefaultGestureCombiner
  var gesture: Self.ContentGesture { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var name: Swift.String? { get }
  #else
  var name: Swift.String? { get }
  #endif
  var gestureMask: SwiftUICore.GestureMask { get }
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public enum GestureResponderExclusionPolicy {
  @_spi(ForSwiftUIOnly) case `default`
  @_spi(ForSwiftUIOnly) case highPriority
  @_spi(ForSwiftUIOnly) case simultaneous
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.GestureResponderExclusionPolicy, b: SwiftUICore.GestureResponderExclusionPolicy) -> Swift.Bool
  @_spi(ForSwiftUIOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForSwiftUIOnly) public var hashValue: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.GestureResponderExclusionPolicy : Swift.Sendable {
}
package protocol GestureCombiner {
  associatedtype Result : SwiftUICore.Gesture where Self.Result.Value == ()
  static func combine(_ gesture1: SwiftUICore.AnyGesture<Swift.Void>, _ gesture2: SwiftUICore.AnyGesture<Swift.Void>) -> Self.Result
  static var exclusionPolicy: SwiftUICore.GestureResponderExclusionPolicy { get }
}
extension SwiftUICore.GestureViewModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var name: Swift.String? {
    get
  }
  #else
  package var name: Swift.String? {
    get
  }
  #endif
  package var gestureMask: SwiftUICore.GestureMask {
    get
  }
  package static func makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  package static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@_Concurrency.MainActor @preconcurrency package struct AddGestureModifier<T> : SwiftUICore.GestureViewModifier where T : SwiftUICore.Gesture {
  @_Concurrency.MainActor @preconcurrency package var gesture: T
  @_Concurrency.MainActor @preconcurrency package var name: Swift.String?
  @_Concurrency.MainActor @preconcurrency package var gestureMask: SwiftUICore.GestureMask
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package init(_ gesture: T, name: Swift.String? = nil, gestureMask: SwiftUICore.GestureMask = .all)
  #else
  @_Concurrency.MainActor @preconcurrency package init(_ gesture: T, name: Swift.String? = nil, gestureMask: SwiftUICore.GestureMask = .all)
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  package typealias Combiner = SwiftUICore.DefaultGestureCombiner
  package typealias ContentGesture = T
}
package struct DefaultGestureCombiner : SwiftUICore.GestureCombiner {
  package typealias Base = SwiftUICore.ExclusiveGesture<SwiftUICore.AnyGesture<Swift.Void>, SwiftUICore.AnyGesture<Swift.Void>>
  package typealias Result = SwiftUICore._MapGesture<SwiftUICore.DefaultGestureCombiner.Base, Swift.Void>
  package static var exclusionPolicy: SwiftUICore.GestureResponderExclusionPolicy {
    get
  }
  package static func combine(_ first: SwiftUICore.AnyGesture<Swift.Void>, _ second: SwiftUICore.AnyGesture<Swift.Void>) -> SwiftUICore.DefaultGestureCombiner.Result
}
package protocol AnyGestureContainingResponder : SwiftUICore.ViewResponder {
  var viewSubgraph: AttributeGraph.Subgraph { get }
  var eventSources: [any SwiftUICore.EventBindingSource] { get }
  func detachContainer()
  var gestureType: any Any.Type { get }
  var isValid: Swift.Bool { get }
}
package protocol AnyGestureResponder : SwiftUICore.AnyGestureContainingResponder {
  var inputs: SwiftUICore._ViewInputs { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var childSubgraph: AttributeGraph.Subgraph? { get set }
  #else
  var childSubgraph: AttributeGraph.Subgraph? { get set }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var childViewSubgraph: AttributeGraph.Subgraph? { get set }
  #else
  var childViewSubgraph: AttributeGraph.Subgraph? { get set }
  #endif
  var exclusionPolicy: SwiftUICore.GestureResponderExclusionPolicy { get }
  var gestureGraph: SwiftUICore.GestureGraph { get }
  func makeSubviewsGesture(inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
}
extension SwiftUICore.AnyGestureResponder {
  package var exclusionPolicy: SwiftUICore.GestureResponderExclusionPolicy {
    get
  }
  package func makeSubviewsGesture(inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  package func makeWrappedGesture(inputs: SwiftUICore._GestureInputs, makeChild: (SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>) -> SwiftUICore._GestureOutputs<Swift.Void>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var label: Swift.String? {
    get
  }
  #else
  package var label: Swift.String? {
    get
  }
  #endif
  package var isCancellable: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requiredTapCount: Swift.Int? {
    get
  }
  #else
  package var requiredTapCount: Swift.Int? {
    get
  }
  #endif
  package func canPrevent(_ other: SwiftUICore.ViewResponder, otherExclusionPolicy: SwiftUICore.GestureResponderExclusionPolicy) -> Swift.Bool
  package func shouldRequireFailure(of other: any SwiftUICore.AnyGestureResponder) -> Swift.Bool
}
package protocol GestureAccessibilityProvider {
  static func makeGesture(mask: @autoclosure () -> AttributeGraph.Attribute<SwiftUICore.GestureMask>, inputs: SwiftUICore._ViewInputs, outputs: inout SwiftUICore._ViewOutputs)
}
extension SwiftUICore._GraphInputs {
  package var gestureAccessibilityProvider: (any SwiftUICore.GestureAccessibilityProvider.Type) {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var gestureAccessibilityProvider: (any SwiftUICore.GestureAccessibilityProvider.Type) {
    get
    set
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.Gesture where Wrapped : SwiftUICore.Gesture {
  public typealias Value = Wrapped.Value
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Wrapped.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
#else
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.Gesture where Wrapped : SwiftUICore.Gesture {
  public typealias Value = Wrapped.Value
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Wrapped.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.PrimitiveGesture where Wrapped : SwiftUICore.Gesture {
}
#else
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.PrimitiveGesture where Wrapped : SwiftUICore.Gesture {
}
#endif
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _FrameLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency internal let width: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let height: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let alignment: SwiftUICore.Alignment
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?, alignment: SwiftUICore.Alignment)
  #else
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package init(width: CoreFoundation.CGFloat?, height: CoreFoundation.CGFloat?, alignment: SwiftUICore.Alignment)
  #endif
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func frame(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View {
        return modifier(
            _FrameLayout(width: width, height: height, alignment: alignment))
    }
  
  #else
  @inlinable nonisolated public func frame(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View {
        return modifier(
            _FrameLayout(width: width, height: height, alignment: alignment))
    }
  
  #endif
  @available(*, deprecated, message: "Please pass one or more parameters.")
  @inlinable nonisolated public func frame() -> some SwiftUICore.View {
        return frame(width: nil, height: nil, alignment: .center)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _FlexFrameLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency internal let minWidth: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let idealWidth: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let maxWidth: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let minHeight: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let idealHeight: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let maxHeight: CoreFoundation.CGFloat?
  @_Concurrency.MainActor @preconcurrency internal let alignment: SwiftUICore.Alignment
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package init(minWidth: CoreFoundation.CGFloat? = nil, idealWidth: CoreFoundation.CGFloat? = nil, maxWidth: CoreFoundation.CGFloat? = nil, minHeight: CoreFoundation.CGFloat? = nil, idealHeight: CoreFoundation.CGFloat? = nil, maxHeight: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment)
  #else
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package init(minWidth: CoreFoundation.CGFloat? = nil, idealWidth: CoreFoundation.CGFloat? = nil, maxWidth: CoreFoundation.CGFloat? = nil, minHeight: CoreFoundation.CGFloat? = nil, idealHeight: CoreFoundation.CGFloat? = nil, maxHeight: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment)
  #endif
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func frame(minWidth: CoreFoundation.CGFloat? = nil, idealWidth: CoreFoundation.CGFloat? = nil, maxWidth: CoreFoundation.CGFloat? = nil, minHeight: CoreFoundation.CGFloat? = nil, idealHeight: CoreFoundation.CGFloat? = nil, maxHeight: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View {
        func areInNondecreasingOrder(
            _ min: CGFloat?, _ ideal: CGFloat?, _ max: CGFloat?
        ) -> Bool {
            let min = min ?? -.infinity
            let ideal = ideal ?? min
            let max = max ?? ideal
            return min <= ideal && ideal <= max
        }

        if !areInNondecreasingOrder(minWidth, idealWidth, maxWidth)
            || !areInNondecreasingOrder(minHeight, idealHeight, maxHeight)
        {
        }

        return modifier(
            _FlexFrameLayout(
                minWidth: minWidth,
                idealWidth: idealWidth, maxWidth: maxWidth,
                minHeight: minHeight,
                idealHeight: idealHeight, maxHeight: maxHeight,
                alignment: alignment))
    }
  
  #else
  @inlinable nonisolated public func frame(minWidth: CoreFoundation.CGFloat? = nil, idealWidth: CoreFoundation.CGFloat? = nil, maxWidth: CoreFoundation.CGFloat? = nil, minHeight: CoreFoundation.CGFloat? = nil, idealHeight: CoreFoundation.CGFloat? = nil, maxHeight: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View {
        func areInNondecreasingOrder(
            _ min: CGFloat?, _ ideal: CGFloat?, _ max: CGFloat?
        ) -> Bool {
            let min = min ?? -.infinity
            let ideal = ideal ?? min
            let max = max ?? ideal
            return min <= ideal && ideal <= max
        }

        if !areInNondecreasingOrder(minWidth, idealWidth, maxWidth)
            || !areInNondecreasingOrder(minHeight, idealHeight, maxHeight)
        {
        }

        return modifier(
            _FlexFrameLayout(
                minWidth: minWidth,
                idealWidth: idealWidth, maxWidth: maxWidth,
                minHeight: minHeight,
                idealHeight: idealHeight, maxHeight: maxHeight,
                alignment: alignment))
    }
  
  #endif
}
package struct AccessibilityLabelStorage : Swift.Equatable {
  package enum Placement : Swift.Equatable {
    case prefix, suffix, assign, optional
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.AccessibilityLabelStorage.Placement, b: SwiftUICore.AccessibilityLabelStorage.Placement) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package var texts: [SwiftUICore.Text]
  package var placement: SwiftUICore.AccessibilityLabelStorage.Placement
  package init(texts: [SwiftUICore.Text], placement: SwiftUICore.AccessibilityLabelStorage.Placement = .assign)
  @discardableResult
  package mutating func removing(_ text: SwiftUICore.Text) -> Swift.Bool
  package static func == (a: SwiftUICore.AccessibilityLabelStorage, b: SwiftUICore.AccessibilityLabelStorage) -> Swift.Bool
}
extension SwiftUICore.AccessibilityLabelStorage : SwiftUICore.AccessibilityCombinable {
  package mutating func merge(with child: SwiftUICore.AccessibilityLabelStorage) -> Swift.Bool
}
package struct CachedEnvironment {
  package var environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues> {
    get
  }
  package mutating func attribute<T>(keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> AttributeGraph.Attribute<T>
}
extension SwiftUICore.CachedEnvironment {
  package mutating func animatedPosition(for inputs: SwiftUICore._ViewInputs) -> AttributeGraph.Attribute<SwiftUICore.ViewOrigin>
  package mutating func animatedSize(for inputs: SwiftUICore._ViewInputs) -> AttributeGraph.Attribute<SwiftUICore.ViewSize>
  package mutating func animatedCGSize(for inputs: SwiftUICore._ViewInputs) -> AttributeGraph.Attribute<CoreFoundation.CGSize>
}
extension SwiftUICore.CachedEnvironment.AnimatedFrame {
  package init(inputs: SwiftUICore._ViewInputs, pixelLength: AttributeGraph.Attribute<CoreFoundation.CGFloat>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
}
extension SwiftUICore.CachedEnvironment {
  package struct AnimatedFrame {
    package let position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>
    package let size: AttributeGraph.Attribute<SwiftUICore.ViewSize>
    package let pixelLength: AttributeGraph.Attribute<CoreFoundation.CGFloat>
    package let time: AttributeGraph.Attribute<SwiftUICore.Time>
    package let transaction: AttributeGraph.Attribute<SwiftUICore.Transaction>
    package let viewPhase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase>
    package let animatedFrame: AttributeGraph.Attribute<SwiftUICore.ViewFrame>
    package init(inputs: SwiftUICore._GraphInputs, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, pixelLength: AttributeGraph.Attribute<CoreFoundation.CGFloat>, animatedFrame: AttributeGraph.Attribute<SwiftUICore.ViewFrame>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
    package mutating func animatedPosition() -> AttributeGraph.Attribute<SwiftUICore.ViewOrigin>
    package mutating func animatedSize() -> AttributeGraph.Attribute<SwiftUICore.ViewSize>
    package mutating func animatedCGSize() -> AttributeGraph.Attribute<CoreFoundation.CGSize>
  }
}
package struct CustomHoverEffectContext : Swift.Equatable {
  package enum Identity : Swift.Equatable {
    case none
    case effect(SwiftUICore.DisplayList.Identity)
    case view(SwiftUICore.Namespace.ID)
    package static func == (a: SwiftUICore.CustomHoverEffectContext.Identity, b: SwiftUICore.CustomHoverEffectContext.Identity) -> Swift.Bool
  }
  package let identity: SwiftUICore.CustomHoverEffectContext.Identity
  package let implicitAccessibilityID: SwiftUICore.Namespace.ID
  package let isModifyingImageView: Swift.Bool
  package let shouldApplySystemEffectAsBackground: Swift.Bool?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(identity: SwiftUICore.CustomHoverEffectContext.Identity, implicitAccessibilityID: SwiftUICore.Namespace.ID, isModifyingImageView: Swift.Bool, shouldApplySystemEffectAsBackground: Swift.Bool?, elements: [SwiftUICore.CustomHoverEffectContext.Element] = [])
  #else
  package init(identity: SwiftUICore.CustomHoverEffectContext.Identity, implicitAccessibilityID: SwiftUICore.Namespace.ID, isModifyingImageView: Swift.Bool, shouldApplySystemEffectAsBackground: Swift.Bool?, elements: [SwiftUICore.CustomHoverEffectContext.Element] = [])
  #endif
  package static func == (lhs: SwiftUICore.CustomHoverEffectContext, rhs: SwiftUICore.CustomHoverEffectContext) -> Swift.Bool
  package struct Properties : Swift.Equatable {
    package init(elements: [SwiftUICore.CustomHoverEffectContext.Properties.Element] = [])
    package static func == (a: SwiftUICore.CustomHoverEffectContext.Properties, b: SwiftUICore.CustomHoverEffectContext.Properties) -> Swift.Bool
  }
  package struct Element : Swift.Equatable {
    package var identity: SwiftUICore.CustomHoverEffectContext.Identity
    package var value: SwiftUICore.CustomHoverEffectContext.Value
    package func matches(_ other: SwiftUICore.CustomHoverEffectContext.Element) -> Swift.Bool
    package static func == (a: SwiftUICore.CustomHoverEffectContext.Element, b: SwiftUICore.CustomHoverEffectContext.Element) -> Swift.Bool
  }
  package enum Value : Swift.Equatable {
    case identity
    case disabled(Swift.Bool)
    package static func == (a: SwiftUICore.CustomHoverEffectContext.Value, b: SwiftUICore.CustomHoverEffectContext.Value) -> Swift.Bool
  }
}
extension SwiftUICore.CustomHoverEffectContext.Properties {
  package typealias Identity = SwiftUICore.CustomHoverEffectContext.Identity
  package typealias Element = SwiftUICore.CustomHoverEffectContext.Element
  package typealias Value = SwiftUICore.CustomHoverEffectContext.Value
  package var isDisabled: Swift.Bool {
    get
    set
  }
  package mutating func appendDisabled(_ disabled: Swift.Bool, identity: SwiftUICore.CustomHoverEffectContext.Properties.Identity)
}
extension SwiftUICore.CustomHoverEffectContext {
  package mutating func appendProperties(_ properties: SwiftUICore.CustomHoverEffectContext.Properties)
  package var isEnabled: Swift.Bool {
    get
  }
  package mutating func appendDisabled(_ disabled: Swift.Bool, identity: SwiftUICore.CustomHoverEffectContext.Identity)
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
  public struct Suffix : Swift.Sendable, Swift.Equatable {
    @_spi(Private) package enum Storage : Swift.Equatable {
      @_spi(Private) case automatic
      @_spi(Private) case none
      @_spi(Private) case truncated(SwiftUICore.Text)
      @_spi(Private) case alwaysVisible(SwiftUICore.Text)
      @_spi(Private) package static func == (a: SwiftUICore.Text.Suffix.Storage, b: SwiftUICore.Text.Suffix.Storage) -> Swift.Bool
    }
    @_spi(Private) package var storage: SwiftUICore.Text.Suffix.Storage
    @_spi(Private) public static var automatic: SwiftUICore.Text.Suffix {
      @_spi(Private) get
    }
    @_spi(Private) public static var none: SwiftUICore.Text.Suffix {
      @_spi(Private) get
    }
    @_spi(Private) public static func truncated(_ suffix: SwiftUICore.Text) -> SwiftUICore.Text.Suffix
    @_spi(Private) public static func alwaysVisible(_ suffix: SwiftUICore.Text) -> SwiftUICore.Text.Suffix
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) package var text: SwiftUICore.Text? {
      @_spi(Private) get
    }
    #else
    @_spi(Private) package var text: SwiftUICore.Text? {
      @_spi(Private) get
    }
    #endif
    @_spi(Private) public static func == (a: SwiftUICore.Text.Suffix, b: SwiftUICore.Text.Suffix) -> Swift.Bool
  }
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
  nonisolated public func textSuffix(_ suffix: SwiftUICore.Text.Suffix) -> some SwiftUICore.View
  
}
package enum ResolvedTextSuffix : Swift.Equatable {
  case none
  case truncated(SwiftUICore.Text.Layout.Line, [SwiftUICore._ShapeStyle_Pack.Style])
  case alwaysVisible(SwiftUICore.Text.Layout.Line, [SwiftUICore._ShapeStyle_Pack.Style])
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var line: SwiftUICore.Text.Layout.Line? {
    get
  }
  #else
  package var line: SwiftUICore.Text.Layout.Line? {
    get
  }
  #endif
  package var styles: [SwiftUICore._ShapeStyle_Pack.Style] {
    get
  }
  package static func == (a: SwiftUICore.ResolvedTextSuffix, b: SwiftUICore.ResolvedTextSuffix) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TextRenderer : SwiftUICore.Animatable {
  func draw(layout: SwiftUICore.Text.Layout, in ctx: inout SwiftUICore.GraphicsContext)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, text: SwiftUICore.TextProxy) -> CoreFoundation.CGSize
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  var displayPadding: SwiftUICore.EdgeInsets { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.TextRenderer {
  @_alwaysEmitIntoClient public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, text: SwiftUICore.TextProxy) -> CoreFoundation.CGSize { text.sizeThatFits(proposal) }
  @_alwaysEmitIntoClient public var displayPadding: SwiftUICore.EdgeInsets {
    get { EdgeInsets() }
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct TextProxy {
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(*, unavailable)
extension SwiftUICore.TextProxy : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func textRenderer<T>(_ renderer: T) -> some SwiftUICore.View where T : SwiftUICore.TextRenderer {
        return modifier(_TextRendererViewModifier(renderer: renderer))
    }
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func textRenderer<T>(_ renderer: T, _v0: Swift.Void = ()) -> some SwiftUICore.View where T : SwiftUICore.TextRenderer {
        return modifier(_TextRendererViewModifier(renderer: renderer))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol TextAttribute : Swift.Hashable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public func customAttribute<T>(_ value: T) -> SwiftUICore.Text where T : SwiftUICore.TextAttribute
}
@_inheritsConvenienceInitializers package class TextAttributeModifierBase : SwiftUICore.AnyTextModifier, Swift.Hashable {
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (lhs: SwiftUICore.TextAttributeModifierBase, rhs: SwiftUICore.TextAttributeModifierBase) -> Swift.Bool
  @objc deinit
  package var hashValue: Swift.Int {
    get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(Private) public struct CustomAttributes : @unchecked Swift.Sendable, Swift.Hashable {
    @_spi(Private) public init()
    @_spi(Private) public mutating func add<T>(_ value: T) where T : SwiftUICore.TextAttribute
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.Text.CustomAttributes, b: SwiftUICore.Text.CustomAttributes) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TextRendererViewModifier<Renderer> : SwiftUICore.ViewInputsModifier, SwiftUICore.PrimitiveViewModifier where Renderer : SwiftUICore.TextRenderer {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var renderer: Renderer
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(renderer: Renderer) {
        self.renderer = renderer
    }
  nonisolated package static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._TextRendererViewModifier<Renderer>>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._TextRendererViewModifier : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public class TextRendererBoxBase {
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.TextRendererBoxBase : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct Layout : Swift.RandomAccessCollection, Swift.Equatable {
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public var isTruncated: Swift.Bool {
      get
    }
    @_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
    public var truncated: Swift.Bool {
      get
    }
    @_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
    public var numberOfLines: Swift.Int {
      get
    }
    public var startIndex: Swift.Int {
      @_alwaysEmitIntoClient get { 0 }
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.Line {
      get
    }
    @frozen public struct CharacterIndex : Swift.Comparable, Swift.Hashable, Swift.Strideable, Swift.Sendable {
      @usableFromInline
      package var value: Swift.Int
      @_alwaysEmitIntoClient internal init(value: Swift.Int) {
                self.value = value
            }
      @_alwaysEmitIntoClient public static func < (lhs: SwiftUICore.Text.Layout.CharacterIndex, rhs: SwiftUICore.Text.Layout.CharacterIndex) -> Swift.Bool {
                return lhs.value < rhs.value
            }
      @_alwaysEmitIntoClient public func advanced(by n: Swift.Int) -> SwiftUICore.Text.Layout.CharacterIndex {
                return .init(value: value + n)
            }
      @_alwaysEmitIntoClient public func distance(to other: SwiftUICore.Text.Layout.CharacterIndex) -> Swift.Int {
                return other.value - value
            }
      public func hash(into hasher: inout Swift.Hasher)
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Stride = Swift.Int
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public struct TypographicBounds : Swift.Equatable, Swift.Sendable {
      public var origin: CoreFoundation.CGPoint
      public var width: CoreFoundation.CGFloat
      public var ascent: CoreFoundation.CGFloat
      public var descent: CoreFoundation.CGFloat
      public var leading: CoreFoundation.CGFloat
      @_alwaysEmitIntoClient public init() {
                origin = .init()
                (width, ascent, descent, leading) = (0, 0, 0, 0)
            }
      public var rect: CoreFoundation.CGRect {
        @_alwaysEmitIntoClient get {
                    return CGRect(x: origin.x, y: origin.y - ascent,
                        width: width, height: ascent + descent)
                }
      }
      public static func == (a: SwiftUICore.Text.Layout.TypographicBounds, b: SwiftUICore.Text.Layout.TypographicBounds) -> Swift.Bool
    }
    public struct Line : Swift.RandomAccessCollection, Swift.Equatable {
      public var origin: CoreFoundation.CGPoint
      package var drawingOptions: SwiftUICore.Text.Layout.DrawingOptions
      public var startIndex: Swift.Int {
        @_alwaysEmitIntoClient get { 0 }
      }
      public var endIndex: Swift.Int {
        get
      }
      public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.Run {
        get
      }
      public var typographicBounds: SwiftUICore.Text.Layout.TypographicBounds {
        get
      }
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var characterRange: Swift.Range<SwiftUICore.Text.Layout.CharacterIndex> {
        get
      }
      package func characterRanges(runIndices: Swift.Range<Swift.Int>) -> SwiftUICore._RangeSet<SwiftUICore.Text.Layout.CharacterIndex>
      package func characterRanges(runIndices: SwiftUICore._RangeSet<Swift.Int>) -> SwiftUICore._RangeSet<SwiftUICore.Text.Layout.CharacterIndex>
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var paragraphLayoutDirection: SwiftUICore.LayoutDirection {
        get
      }
      public static func == (lhs: SwiftUICore.Text.Layout.Line, rhs: SwiftUICore.Text.Layout.Line) -> Swift.Bool
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Element = SwiftUICore.Text.Layout.Run
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Index = Swift.Int
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Indices = Swift.Range<Swift.Int>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout.Line>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias SubSequence = Swift.Slice<SwiftUICore.Text.Layout.Line>
    }
    public struct Run : Swift.RandomAccessCollection, Swift.Equatable {
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var lineOrigin: CoreFoundation.CGPoint
      @_spi(_) @available(*, deprecated, renamed: "lineOrigin")
      public var origin: CoreFoundation.CGPoint {
        get
      }
      public var startIndex: Swift.Int {
        @_alwaysEmitIntoClient get { 0 }
      }
      public var endIndex: Swift.Int {
        get
      }
      public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.RunSlice {
        @_alwaysEmitIntoClient get {
                    return self[index ..< index &+ 1]
                }
      }
      public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.Text.Layout.RunSlice {
        @_alwaysEmitIntoClient get {
                    return RunSlice(run: self, indices: bounds)
                }
      }
      #if compiler(>=5.3) && $NoncopyableGenerics
      public subscript<T>(key: T.Type) -> T? where T : SwiftUICore.TextAttribute {
        get
      }
      #else
      public subscript<T>(key: T.Type) -> T? where T : SwiftUICore.TextAttribute {
        get
      }
      #endif
      public var layoutDirection: SwiftUICore.LayoutDirection {
        get
      }
      public var typographicBounds: SwiftUICore.Text.Layout.TypographicBounds {
        get
      }
      public var characterIndices: [SwiftUICore.Text.Layout.CharacterIndex] {
        get
      }
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var characterRange: Swift.Range<SwiftUICore.Text.Layout.CharacterIndex> {
        get
      }
      public static func == (lhs: SwiftUICore.Text.Layout.Run, rhs: SwiftUICore.Text.Layout.Run) -> Swift.Bool
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Element = SwiftUICore.Text.Layout.RunSlice
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Index = Swift.Int
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Indices = Swift.Range<Swift.Int>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout.Run>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias SubSequence = SwiftUICore.Text.Layout.RunSlice
    }
    public struct RunSlice : Swift.RandomAccessCollection, Swift.Equatable {
      public var run: SwiftUICore.Text.Layout.Run
      public var indices: Swift.Range<Swift.Int>
      public init(run: SwiftUICore.Text.Layout.Run, indices: Swift.Range<Swift.Int>)
      public var startIndex: Swift.Int {
        @_alwaysEmitIntoClient get { indices.lowerBound }
      }
      public var endIndex: Swift.Int {
        @_alwaysEmitIntoClient get { indices.upperBound }
      }
      public subscript(index: Swift.Int) -> SwiftUICore.Text.Layout.RunSlice {
        @_alwaysEmitIntoClient get { self[index ..< index &+ 1] }
      }
      public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUICore.Text.Layout.RunSlice {
        get
      }
      #if compiler(>=5.3) && $NoncopyableGenerics
      public subscript<T>(key: T.Type) -> T? where T : SwiftUICore.TextAttribute {
        @_alwaysEmitIntoClient get { run[key] }
      }
      #else
      public subscript<T>(key: T.Type) -> T? where T : SwiftUICore.TextAttribute {
        @_alwaysEmitIntoClient get { run[key] }
      }
      #endif
      public var typographicBounds: SwiftUICore.Text.Layout.TypographicBounds {
        get
      }
      public var characterIndices: [SwiftUICore.Text.Layout.CharacterIndex] {
        get
      }
      public static func == (a: SwiftUICore.Text.Layout.RunSlice, b: SwiftUICore.Text.Layout.RunSlice) -> Swift.Bool
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Element = SwiftUICore.Text.Layout.RunSlice
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Index = Swift.Int
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Indices = Swift.Range<Swift.Int>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout.RunSlice>
      @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      public typealias SubSequence = SwiftUICore.Text.Layout.RunSlice
    }
    public static func == (a: SwiftUICore.Text.Layout, b: SwiftUICore.Text.Layout) -> Swift.Bool
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Element = SwiftUICore.Text.Layout.Line
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Index = Swift.Int
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Indices = Swift.Range<Swift.Int>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Iterator = Swift.IndexingIterator<SwiftUICore.Text.Layout>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias SubSequence = Swift.Slice<SwiftUICore.Text.Layout>
  }
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout.Line : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout.Run : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.Text.Layout.RunSlice : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public struct LayoutKey : SwiftUICore.PreferenceKey, Swift.Sendable {
    public struct AnchoredLayout : Swift.Equatable {
      public var origin: SwiftUICore.Anchor<CoreFoundation.CGPoint>
      public var layout: SwiftUICore.Text.Layout
      public static func == (a: SwiftUICore.Text.LayoutKey.AnchoredLayout, b: SwiftUICore.Text.LayoutKey.AnchoredLayout) -> Swift.Bool
    }
    public typealias Value = [SwiftUICore.Text.LayoutKey.AnchoredLayout]
    public static let defaultValue: SwiftUICore.Text.LayoutKey.Value
    public static func reduce(value: inout SwiftUICore.Text.LayoutKey.Value, nextValue: () -> SwiftUICore.Text.LayoutKey.Value)
  }
}
@available(*, unavailable)
extension SwiftUICore.Text.LayoutKey.AnchoredLayout : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Layout {
  @frozen public struct DrawingOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    @_alwaysEmitIntoClient public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @_alwaysEmitIntoClient public static var disablesSubpixelQuantization: SwiftUICore.Text.Layout.DrawingOptions {
      get {
            return .init(rawValue: 1 << 0)
        }
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.Text.Layout.DrawingOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Element = SwiftUICore.Text.Layout.DrawingOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias RawValue = Swift.UInt32
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext {
  public func draw(_ line: SwiftUICore.Text.Layout.Line, options: SwiftUICore.Text.Layout.DrawingOptions = .init())
  public func draw(_ run: SwiftUICore.Text.Layout.Run, options: SwiftUICore.Text.Layout.DrawingOptions = .init())
  public func draw(_ slice: SwiftUICore.Text.Layout.RunSlice, options: SwiftUICore.Text.Layout.DrawingOptions = .init())
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func setTextMetadata(of run: SwiftUICore.Text.Layout.Run)
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func setTextMetadata(of slice: SwiftUICore.Text.Layout.RunSlice)
}
extension SwiftUICore.Text.Layout.Run {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func foregroundColor(_ foregroundColor: SwiftUICore.Color.Resolved?) -> SwiftUICore.Text.Layout.Run
  #else
  package func foregroundColor(_ foregroundColor: SwiftUICore.Color.Resolved?) -> SwiftUICore.Text.Layout.Run
  #endif
}
extension SwiftUICore.Text.Layout.RunSlice {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func foregroundColor(_ foregroundColor: SwiftUICore.Color.Resolved?) -> SwiftUICore.Text.Layout.RunSlice
  #else
  package func foregroundColor(_ foregroundColor: SwiftUICore.Color.Resolved?) -> SwiftUICore.Text.Layout.RunSlice
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  public func foregroundColor(_ color: SwiftUICore.Color?) -> SwiftUICore.Text
  #else
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "foregroundStyle(_:)")
  public func foregroundColor(_ color: SwiftUICore.Color?) -> SwiftUICore.Text
  #endif
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func foregroundStyle<S>(_ style: S) -> SwiftUICore.Text where S : SwiftUICore.ShapeStyle
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func font(_ font: SwiftUICore.Font?) -> SwiftUICore.Text
  #else
  public func font(_ font: SwiftUICore.Font?) -> SwiftUICore.Text
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func fontWeight(_ weight: SwiftUICore.Font.Weight?) -> SwiftUICore.Text
  #else
  public func fontWeight(_ weight: SwiftUICore.Font.Weight?) -> SwiftUICore.Text
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func fontWidth(_ width: SwiftUICore.Font.Width?) -> SwiftUICore.Text
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func fontWidth(_ width: SwiftUICore.Font.Width?) -> SwiftUICore.Text
  #endif
  public func bold() -> SwiftUICore.Text
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func bold(_ isActive: Swift.Bool) -> SwiftUICore.Text
  public func italic() -> SwiftUICore.Text
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func italic(_ isActive: Swift.Bool) -> SwiftUICore.Text
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public func monospaced(_ isActive: Swift.Bool = true) -> SwiftUICore.Text
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public func fontDesign(_ design: SwiftUICore.Font.Design?) -> SwiftUICore.Text
  #else
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public func fontDesign(_ design: SwiftUICore.Font.Design?) -> SwiftUICore.Text
  #endif
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func monospacedDigit() -> SwiftUICore.Text
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func strikethrough(_ isActive: Swift.Bool = true, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #else
  public func strikethrough(_ isActive: Swift.Bool = true, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func strikethrough(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func strikethrough(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func underline(_ isActive: Swift.Bool = true, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #else
  public func underline(_ isActive: Swift.Bool = true, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func underline(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func underline(_ isActive: Swift.Bool = true, pattern: SwiftUICore.Text.LineStyle.Pattern, color: SwiftUICore.Color? = nil) -> SwiftUICore.Text
  #endif
  public func kerning(_ kerning: CoreFoundation.CGFloat) -> SwiftUICore.Text
  public func tracking(_ tracking: CoreFoundation.CGFloat) -> SwiftUICore.Text
  public func baselineOffset(_ baselineOffset: CoreFoundation.CGFloat) -> SwiftUICore.Text
  public func _stylisticAlternative(_ alternative: SwiftUICore.Font._StylisticAlternative) -> SwiftUICore.Text
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func collapsible() -> SwiftUICore.Text
  package func isCollapsible() -> Swift.Bool
}
extension SwiftUICore._ShapeStyle_Shape.PreparedTextResult {
  package func apply(to text: SwiftUICore.Text) -> SwiftUICore.Text
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct Scale : Swift.Sendable, Swift.Hashable {
    public static let `default`: SwiftUICore.Text.Scale
    public static let secondary: SwiftUICore.Text.Scale
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Text.Scale, b: SwiftUICore.Text.Scale) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftUICore.Text.Scale {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ string: Swift.String)
  #else
  package init?(_ string: Swift.String)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func textScale(_ scale: SwiftUICore.Text.Scale, isEnabled: Swift.Bool = true) -> SwiftUICore.Text
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func textScale(_ scale: SwiftUICore.Text.Scale, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct CAHostingLayerEvent {
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public struct MouseButton : Swift.Equatable {
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public static let primary: SwiftUICore.CAHostingLayerEvent.MouseButton
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public static let secondary: SwiftUICore.CAHostingLayerEvent.MouseButton
    @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public static func == (a: SwiftUICore.CAHostingLayerEvent.MouseButton, b: SwiftUICore.CAHostingLayerEvent.MouseButton) -> Swift.Bool
  }
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public static func mousePressed(sequence: Swift.Int, button: SwiftUICore.CAHostingLayerEvent.MouseButton, location: CoreFoundation.CGPoint, instant: _Concurrency.ContinuousClock.Instant) -> SwiftUICore.CAHostingLayerEvent
  @_spi(ForUIKitOnly) @_spi(ForAppKitOnly) public static func mouseLifted(sequence: Swift.Int, button: SwiftUICore.CAHostingLayerEvent.MouseButton, location: CoreFoundation.CGPoint, instant: _Concurrency.ContinuousClock.Instant) -> SwiftUICore.CAHostingLayerEvent
}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @available(*, unavailable)
extension SwiftUICore.CAHostingLayerEvent : Swift.Sendable {
}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) @available(*, unavailable)
extension SwiftUICore.CAHostingLayerEvent.MouseButton : Swift.Sendable {
}
package protocol Defaultable {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
package protocol AsyncAttribute : AttributeGraph._AttributeBody {
}
extension SwiftUICore.AsyncAttribute {
  package static var flags: Self.Flags {
    get
  }
}
package struct DefaultRule<T> : AttributeGraph.Rule, SwiftUICore.AsyncAttribute, Swift.CustomStringConvertible where T : SwiftUICore.Defaultable {
  package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var initialValue: T.Value? {
    get
  }
  #else
  package static var initialValue: T.Value? {
    get
  }
  #endif
  package var value: T.Value {
    get
  }
  package var description: Swift.String {
    get
  }
  package typealias Value = T.Value
}
extension AttributeGraph.Attribute {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func overrideDefaultValue<T>(_ value: AttributeGraph.Attribute<Value>?, type: T.Type) where Value == T.Value, T : SwiftUICore.Defaultable
  #else
  package func overrideDefaultValue<T>(_ value: AttributeGraph.Attribute<Value>?, type: T.Type) where Value == T.Value, T : SwiftUICore.Defaultable
  #endif
  package func invalidateValueIfNeeded() -> Swift.Bool
  package func unsafeBitCast<T>(to _: T.Type) -> AttributeGraph.Attribute<T>
}
package protocol RemovableAttribute : AttributeGraph._AttributeBody {
  static func willRemove(attribute: AttributeGraph.AnyAttribute)
  static func didReinsert(attribute: AttributeGraph.AnyAttribute)
}
package protocol InvalidatableAttribute : AttributeGraph._AttributeBody {
  static func willInvalidate(attribute: AttributeGraph.AnyAttribute)
}
extension AttributeGraph.AnyAttribute.Flags {
  package static var transactional: AttributeGraph.Subgraph.Flags {
    get
  }
  package static var removable: AttributeGraph.Subgraph.Flags {
    get
  }
  package static var invalidatable: AttributeGraph.Subgraph.Flags {
    get
  }
  package static var scrapeable: AttributeGraph.Subgraph.Flags {
    get
  }
}
extension AttributeGraph.Subgraph.ChildFlags {
  package static var secondary: AttributeGraph.Subgraph.ChildFlags {
    get
  }
}
extension AttributeGraph.Subgraph {
  package func addSecondaryChild(_ child: AttributeGraph.Subgraph)
  package func willRemove()
  package func didReinsert()
  package func willInvalidate(isInserted: Swift.Bool)
}
extension AttributeGraph.Attribute {
  package func syncMainIfReferences<T>(do body: (Value) -> T) -> T
  package func allowsAsyncUpdate() -> Swift.Bool
}
extension AttributeGraph.WeakAttribute {
  package var uncheckedIdentifier: AttributeGraph.Attribute<Value> {
    get
  }
  package func allowsAsyncUpdate() -> Swift.Bool
}
package struct TreeElementFlags : Swift.OptionSet {
  package let rawValue: Swift.UInt32
  package init(rawValue: Swift.UInt32)
  package static let viewList: SwiftUICore.TreeElementFlags
  package typealias ArrayLiteralElement = SwiftUICore.TreeElementFlags
  package typealias Element = SwiftUICore.TreeElementFlags
  package typealias RawValue = Swift.UInt32
}
package struct TreeValueFlags : Swift.OptionSet {
  package let rawValue: Swift.UInt32
  package init(rawValue: Swift.UInt32)
  package static let stateSignal: SwiftUICore.TreeValueFlags
  package static let environmentObjectSignal: SwiftUICore.TreeValueFlags
  package static let observedObjectSignal: SwiftUICore.TreeValueFlags
  package static let appStorageSignal: SwiftUICore.TreeValueFlags
  package static let sceneStorageSignal: SwiftUICore.TreeValueFlags
  package typealias ArrayLiteralElement = SwiftUICore.TreeValueFlags
  package typealias Element = SwiftUICore.TreeValueFlags
  package typealias RawValue = Swift.UInt32
}
extension AttributeGraph.Metadata {
  package var isValueType: Swift.Bool {
    get
  }
  package func genericType(at index: Swift.Int) -> any Any.Type
  @inline(__always) package func projectEnum(at ptr: Swift.UnsafeRawPointer, tag: Swift.Int, _ body: (Swift.UnsafeRawPointer) -> Swift.Void)
}
@inline(__always) package func compareEnumTags<T>(_ v1: T, _ v2: T) -> Swift.Bool
extension AttributeGraph.Attribute {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var toOptional: AttributeGraph.Attribute<Value?> {
    get
  }
  #else
  package var toOptional: AttributeGraph.Attribute<Value?> {
    get
  }
  #endif
}
extension AttributeGraph.Graph {
  @inline(__always) package static func cancelCurrentUpdateIfDeadlinePassed() -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func startTracing(options: AttributeGraph.Graph.TraceOptions? = nil)
  #else
  package static func startTracing(options: AttributeGraph.Graph.TraceOptions? = nil)
  #endif
  package static func stopTracing()
}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum TouchType : Swift.Hashable {
  @_spi(_) case direct
  @_spi(_) case indirect
  @_spi(_) @available(macOS, obsoleted: 14.0)
  case pencil
  @_spi(_) @available(macOS, obsoleted: 14.0)
  case indirectPointer
  @_spi(_) public static func == (a: SwiftUICore.TouchType, b: SwiftUICore.TouchType) -> Swift.Bool
  @_spi(_) public func hash(into hasher: inout Swift.Hasher)
  @_spi(_) public var hashValue: Swift.Int {
    @_spi(_) get
  }
}
@_spi(_) @available(*, unavailable)
extension SwiftUICore.TouchType : Swift.Sendable {
}
@_spi(_) extension SwiftUICore.TouchType {
  @_spi(_) package static let allTypes: Swift.Set<SwiftUICore.TouchType>
}
package protocol ResettableGestureRule : AttributeGraph.StatefulRule {
  associatedtype PhaseValue = Swift.Void
  var phaseValue: SwiftUICore.GesturePhase<Self.PhaseValue> { get }
  var resetSeed: Swift.UInt32 { get }
  var lastResetSeed: Swift.UInt32 { get set }
  mutating func resetPhase()
}
extension SwiftUICore.ResettableGestureRule {
  package mutating func resetPhase()
  package mutating func resetIfNeeded() -> Swift.Bool
}
extension SwiftUICore.ResettableGestureRule where Self.Value == SwiftUICore.GesturePhase<Self.PhaseValue> {
  package var phaseValue: SwiftUICore.GesturePhase<Self.PhaseValue> {
    get
  }
}
extension SwiftUICore.ResettableGestureRule where Self.PhaseValue == Self.Value.PhaseValue, Self.Value : SwiftUICore.DebuggableGesturePhase {
  package var phaseValue: SwiftUICore.GesturePhase<Self.PhaseValue> {
    get
  }
}
package enum ProcessEnvironment {
  package static func bool(forKey key: Swift.String, defaultValue: Swift.Bool = false) -> Swift.Bool
}
package struct FluidSpringAnimation : SwiftUICore.InternalCustomAnimation {
  package var response: Swift.Double
  package var dampingFraction: Swift.Double
  package var blendDuration: Foundation.TimeInterval
  package init(response: Swift.Double, dampingFraction: Swift.Double, blendDuration: Foundation.TimeInterval)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func velocity<V>(value: V, time: Swift.Double, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  package func velocity<V>(value: V, time: Swift.Double, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  package func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
  package var function: SwiftUICore.Animation.Function {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.FluidSpringAnimation, b: SwiftUICore.FluidSpringAnimation) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
@_alwaysEmitIntoClient internal func springStiffness(response: Swift.Double) -> Swift.Double {
    if response <= 0 {
        return .infinity
    } else {
        let freq = (2.0 * Double.pi) / response
        return freq * freq
    }
}
@_alwaysEmitIntoClient internal func springDamping(fraction: Swift.Double, stiffness: Swift.Double) -> Swift.Double {
    let criticalDamping = 2 * stiffness.squareRoot()
    return criticalDamping * fraction
}
@_alwaysEmitIntoClient internal func springDampingFraction(bounce: Swift.Double) -> Swift.Double {
    (bounce < 0.0) ? 1.0 / (bounce + 1.0) : 1.0 - bounce
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  @_alwaysEmitIntoClient public static func spring(duration: Foundation.TimeInterval = 0.5, bounce: Swift.Double = 0.0, blendDuration: Swift.Double = 0) -> SwiftUICore.Animation {
        spring(
            response: duration,
            dampingFraction: springDampingFraction(bounce: bounce),
            blendDuration: blendDuration)
    }
  @_disfavoredOverload public static func spring(response: Swift.Double = 0.5, dampingFraction: Swift.Double = 0.825, blendDuration: Foundation.TimeInterval = 0) -> SwiftUICore.Animation
  @_alwaysEmitIntoClient public static var spring: SwiftUICore.Animation {
    get { spring() }
  }
  @_disfavoredOverload public static func interactiveSpring(response: Swift.Double = 0.15, dampingFraction: Swift.Double = 0.86, blendDuration: Foundation.TimeInterval = 0.25) -> SwiftUICore.Animation
  @_alwaysEmitIntoClient public static var interactiveSpring: SwiftUICore.Animation {
    get { interactiveSpring() }
  }
  @_alwaysEmitIntoClient public static func interactiveSpring(duration: Foundation.TimeInterval = 0.15, extraBounce: Swift.Double = 0.0, blendDuration: Foundation.TimeInterval = 0.25) -> SwiftUICore.Animation {
        spring(
            duration: duration, bounce: 0.15 + extraBounce,
            blendDuration: blendDuration)
    }
  @_spi(_) @available(*, deprecated)
  @_alwaysEmitIntoClient public static func interactiveSpring(duration: Foundation.TimeInterval = 0.15, additionalBounce: Swift.Double, blendDuration: Foundation.TimeInterval = 0.25) -> SwiftUICore.Animation {
        spring(
            duration: duration, bounce: 0.15 + additionalBounce,
            blendDuration: blendDuration)
    }
  @_alwaysEmitIntoClient public static var smooth: SwiftUICore.Animation {
    get { smooth() }
  }
  @_alwaysEmitIntoClient public static func smooth(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: extraBounce)
    }
  @_spi(_) @available(*, deprecated)
  @_alwaysEmitIntoClient public static func smooth(duration: Foundation.TimeInterval = 0.5, additionalBounce: Swift.Double) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: additionalBounce)
    }
  @_alwaysEmitIntoClient public static var snappy: SwiftUICore.Animation {
    get { snappy() }
  }
  @_alwaysEmitIntoClient public static func snappy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: 0.15 + extraBounce)
    }
  @_spi(_) @available(*, deprecated)
  @_alwaysEmitIntoClient public static func snappy(duration: Foundation.TimeInterval = 0.5, additionalBounce: Swift.Double) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: 0.15 + additionalBounce)
    }
  @_alwaysEmitIntoClient public static var bouncy: SwiftUICore.Animation {
    get { bouncy() }
  }
  @_alwaysEmitIntoClient public static func bouncy(duration: Foundation.TimeInterval = 0.5, extraBounce: Swift.Double = 0.0) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: 0.3 + extraBounce)
    }
  @_spi(_) @available(*, deprecated)
  @_alwaysEmitIntoClient public static func bouncy(duration: Foundation.TimeInterval = 0.5, additionalBounce: Swift.Double) -> SwiftUICore.Animation {
        spring(duration: duration, bounce: 0.3 + additionalBounce)
    }
}
extension SwiftUICore.FluidSpringAnimation : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct AnimatableAttribute<Value> : AttributeGraph.StatefulRule, SwiftUICore.AsyncAttribute, AttributeGraph.ObservedAttribute, Swift.CustomStringConvertible where Value : SwiftUICore.Animatable {
  package init(source: AttributeGraph.Attribute<Value>, phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase>, time: AttributeGraph.Attribute<SwiftUICore.Time>, transaction: AttributeGraph.Attribute<SwiftUICore.Transaction>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
  package mutating func updateValue()
  package var description: Swift.String {
    get
  }
  package mutating func destroy()
}
package struct AnimatableFrameAttribute : AttributeGraph.StatefulRule, SwiftUICore.AsyncAttribute, AttributeGraph.ObservedAttribute {
  package init(position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, pixelLength: AttributeGraph.Attribute<CoreFoundation.CGFloat>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase>, time: AttributeGraph.Attribute<SwiftUICore.Time>, transaction: AttributeGraph.Attribute<SwiftUICore.Transaction>, animationsDisabled: Swift.Bool)
  package typealias Value = SwiftUICore.ViewFrame
  package mutating func updateValue()
  package mutating func destroy()
}
package struct AnimatableFrameAttributeVFD : AttributeGraph.StatefulRule, SwiftUICore.AsyncAttribute, AttributeGraph.ObservedAttribute {
  package init(position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, pixelLength: AttributeGraph.Attribute<CoreFoundation.CGFloat>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase>, time: AttributeGraph.Attribute<SwiftUICore.Time>, transaction: AttributeGraph.Attribute<SwiftUICore.Transaction>, animationsDisabled: Swift.Bool)
  package typealias Value = SwiftUICore.ViewFrame
  package mutating func updateValue()
  package mutating func destroy()
}
package struct AnimatableAttributeHelper<Value> where Value : SwiftUICore.Animatable {
  @AttributeGraph.Attribute @_projectedValueProperty($phase) package var phase: SwiftUICore._GraphInputs.Phase {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase> {
    get
    set
  }
  @AttributeGraph.Attribute @_projectedValueProperty($time) package var time: SwiftUICore.Time {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $time: AttributeGraph.Attribute<SwiftUICore.Time> {
    get
    set
  }
  @AttributeGraph.Attribute @_projectedValueProperty($transaction) package var transaction: SwiftUICore.Transaction {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $transaction: AttributeGraph.Attribute<SwiftUICore.Transaction> {
    get
    set
  }
  package init(phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase>, time: AttributeGraph.Attribute<SwiftUICore.Time>, transaction: AttributeGraph.Attribute<SwiftUICore.Transaction>)
  package var isAnimating: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func update(value: inout (value: Value, changed: Swift.Bool), defaultAnimation: SwiftUICore.Animation?, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, sampleCollector: (Value.AnimatableData, SwiftUICore.Time) -> Swift.Void)
  #else
  package mutating func update(value: inout (value: Value, changed: Swift.Bool), defaultAnimation: SwiftUICore.Animation?, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, sampleCollector: (Value.AnimatableData, SwiftUICore.Time) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func update(value: inout (value: Value, changed: Swift.Bool), defaultAnimation: SwiftUICore.Animation?, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
  #else
  package mutating func update(value: inout (value: Value, changed: Swift.Bool), defaultAnimation: SwiftUICore.Animation?, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
  #endif
  package mutating func checkReset() -> Swift.Bool
  package mutating func reset()
  package mutating func removeListeners()
}
final package class AnimatorState<V> where V : SwiftUICore.VectorArithmetic {
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func updateListeners(isLogicallyComplete: Swift.Bool, time: Foundation.TimeInterval, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #else
  final package func updateListeners(isLogicallyComplete: Swift.Bool, time: Foundation.TimeInterval, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #endif
  final package func removeListeners()
  final package func forkListeners(animation: SwiftUICore.Animation, state: SwiftUICore.AnimationState<V>, interval: V)
  package init(animation: SwiftUICore.Animation, interval: V, at time: SwiftUICore.Time, in transaction: SwiftUICore.Transaction)
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func combine(newAnimation: SwiftUICore.Animation, newInterval: V, at time: SwiftUICore.Time, in transaction: SwiftUICore.Transaction, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #else
  final package func combine(newAnimation: SwiftUICore.Animation, newInterval: V, at time: SwiftUICore.Time, in transaction: SwiftUICore.Transaction, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func update(_ value: inout V, at time: SwiftUICore.Time, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?) -> Swift.Bool
  #else
  final package func update(_ value: inout V, at time: SwiftUICore.Time, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?) -> Swift.Bool
  #endif
  final package func nextUpdate()
  final package func addListeners(transaction: SwiftUICore.Transaction)
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AnimationModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier where Value : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var animation: SwiftUICore.Animation?
  @_Concurrency.MainActor @preconcurrency public var value: Value
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public init(animation: SwiftUICore.Animation?, value: Value) {
        self.animation = animation
        self.value = value
    }
  #else
  @inlinable nonisolated public init(animation: SwiftUICore.Animation?, value: Value) {
        self.animation = animation
        self.value = value
    }
  #endif
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._AnimationModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore._AnimationModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AnimationModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AnimationView<Content> : SwiftUICore.View, SwiftUICore.PrimitiveView where Content : Swift.Equatable, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var content: Content
  @_Concurrency.MainActor @preconcurrency public var animation: SwiftUICore.Animation?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public init(content: Content, animation: SwiftUICore.Animation?) {
        self.content = content
        self.animation = animation
    }
  #else
  @inlinable nonisolated public init(content: Content, animation: SwiftUICore.Animation?) {
        self.content = content
        self.animation = animation
    }
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._AnimationView<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._AnimationView<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._AnimationView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AnimationModifier : Swift.Equatable {
  nonisolated public static func == (a: SwiftUICore._AnimationModifier<Value>, b: SwiftUICore._AnimationModifier<Value>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func animation<V>(_ animation: SwiftUICore.Animation?, value: V) -> some SwiftUICore.View where V : Swift.Equatable {
        return modifier(_AnimationModifier(animation: animation, value: value))
    }
  
  #else
  @inlinable nonisolated public func animation<V>(_ animation: SwiftUICore.Animation?, value: V) -> some SwiftUICore.View where V : Swift.Equatable {
        return modifier(_AnimationModifier(animation: animation, value: value))
    }
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View where Self : Swift.Equatable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @inlinable nonisolated public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.View {
        return _AnimationView(content: self, animation: animation)
    }
  
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @inlinable nonisolated public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.View {
        return _AnimationView(content: self, animation: animation)
    }
  
  #endif
}
package class StoredLocationBase<Value> : SwiftUICore.AnyLocation<Value>, SwiftUICore.Location, @unchecked Swift.Sendable {
  package init(initialValue: Value)
  final package func invalidate()
  final override package var wasRead: Swift.Bool {
    get
    set
  }
  final override package func get() -> Value
  final override package func projecting<P>(_ projection: P) -> SwiftUICore.AnyLocation<P.Projected> where Value == P.Base, P : SwiftUICore.Projection
  final package var updateValue: Value {
    get
  }
  final override package func set(_ newValue: Value, transaction: SwiftUICore.Transaction)
  override package func update() -> (Value, Swift.Bool)
  final package var binding: SwiftUICore.Binding<Value> {
    get
  }
  @objc deinit
}
final package class StoredLocation<Value> : SwiftUICore.StoredLocationBase<Value>, @unchecked Swift.Sendable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(initialValue: Value, host: SwiftUICore.GraphHost?, signal: AttributeGraph.WeakAttribute<Swift.Void>)
  #else
  package init(initialValue: Value, host: SwiftUICore.GraphHost?, signal: AttributeGraph.WeakAttribute<Swift.Void>)
  #endif
  final package func update() -> (Value, Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers final package class ObservableLocation<Value> : SwiftUICore.StoredLocationBase<Value>, SwiftUICore.TransactionHostProvider, @unchecked Swift.Sendable {
  final package func addObserver(host: SwiftUICore.GraphHost, signal: AttributeGraph.WeakAttribute<Swift.Void>)
  final package func removeObserver(signal: AttributeGraph.WeakAttribute<Swift.Void>)
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var mutationHost: SwiftUICore.GraphHost? {
    get
  }
  #else
  final package var mutationHost: SwiftUICore.GraphHost? {
    get
  }
  #endif
  package init(initialValue: Value)
  @objc deinit
}
package protocol GraphInput : SwiftUICore.PropertyKey {
  static var isTriviallyReusable: Swift.Bool { get }
  static func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap, value: inout Self.Value)
  static func tryToReuse(_ value: Self.Value, by other: Self.Value, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
extension SwiftUICore.GraphInput {
  @inlinable package static var isTriviallyReusable: Swift.Bool {
    get
  }
  package static func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap, value: inout Self.Value)
  @inlinable package static func tryToReuse(_ value: Self.Value, by other: Self.Value, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
extension SwiftUICore.GraphInput where Self.Value : SwiftUICore.GraphReusable {
  @inlinable package static var isTriviallyReusable: Swift.Bool {
    get
  }
  @inlinable package static func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap, value: inout Self.Value)
  @inlinable package static func tryToReuse(_ value: Self.Value, by other: Self.Value, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GraphInputs {
  package var customInputs: SwiftUICore.PropertyList
  package subscript<T>(input: T.Type) -> T.Value where T : SwiftUICore.GraphInput {
    get
    set
  }
  package subscript<T>(input: T.Type) -> T.Value where T : SwiftUICore.GraphInput, T.Value : SwiftUICore.GraphReusable {
    get
    set
  }
  package var time: AttributeGraph.Attribute<SwiftUICore.Time>
  package struct Phase : Swift.Equatable {
    @inlinable package init(value: Swift.UInt32)
    @inlinable package init()
    package var resetSeed: Swift.UInt32 {
      @inlinable get
      @inlinable set
    }
    package var isBeingRemoved: Swift.Bool {
      @inlinable get
      @inlinable set
    }
    @inlinable package var isInserted: Swift.Bool {
      get
    }
    @inlinable package mutating func merge(_ other: SwiftUICore._GraphInputs.Phase)
    package static let invalid: SwiftUICore._GraphInputs.Phase
    package static func == (a: SwiftUICore._GraphInputs.Phase, b: SwiftUICore._GraphInputs.Phase) -> Swift.Bool
  }
  package var cachedEnvironment: SwiftUICore.MutableBox<SwiftUICore.CachedEnvironment> {
    get
  }
  package var environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues> {
    get
    set
  }
  package var phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase> {
    get
    set
  }
  package var transaction: AttributeGraph.Attribute<SwiftUICore.Transaction>
  package var changedDebugProperties: SwiftUICore._ViewDebug.Properties
  package struct Options : Swift.OptionSet {
    package let rawValue: Swift.UInt32
    @inlinable package init(rawValue: Swift.UInt32)
    @inlinable package static var animationsDisabled: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var viewRequestsLayoutComputer: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var viewStackOrientationIsDefined: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var viewStackOrientationIsHorizontal: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var viewDisplayListAccessibility: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var viewNeedsGeometry: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var viewNeedsGeometryAccessibility: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var viewNeedsRespondersAccessibility: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var needsStableDisplayListIDs: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var supportsVariableFrameDuration: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var needsDynamicLayout: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var needsAccessibility: SwiftUICore._GraphInputs.Options {
      get
    }
    @inlinable package static var doNotScrape: SwiftUICore._GraphInputs.Options {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias ArrayLiteralElement = SwiftUICore._GraphInputs.Options
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Element = SwiftUICore._GraphInputs.Options
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias RawValue = Swift.UInt32
  }
  package var options: SwiftUICore._GraphInputs.Options
  package var animationsDisabled: Swift.Bool {
    get
    set
  }
  package var needsStableDisplayListIDs: Swift.Bool {
    get
  }
  package var mergedInputs: Swift.Set<AttributeGraph.AnyAttribute>
  package init(time: AttributeGraph.Attribute<SwiftUICore.Time>, phase: AttributeGraph.Attribute<SwiftUICore._GraphInputs.Phase>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transaction: AttributeGraph.Attribute<SwiftUICore.Transaction>)
  package static var invalid: SwiftUICore._GraphInputs {
    get
  }
  package mutating func `import`(_ src: SwiftUICore._GraphInputs)
  package mutating func merge(_ src: SwiftUICore._GraphInputs)
  package mutating func merge(_ src: SwiftUICore._GraphInputs, ignoringPhase: Swift.Bool)
  package func mapEnvironment<T>(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> AttributeGraph.Attribute<T>
  package mutating func copyCaches()
  package mutating func resetCaches()
  package mutating func append<T, U>(_ newValue: U, to _: T.Type) where T : SwiftUICore.GraphInput, T.Value == SwiftUICore.Stack<U>
  package mutating func append<T, U>(_ newValue: U, to _: T.Type) where T : SwiftUICore.GraphInput, U : SwiftUICore.GraphReusable, T.Value == SwiftUICore.Stack<U>
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func popLast<T, U>(_ key: T.Type) -> U? where T : SwiftUICore.GraphInput, T.Value == SwiftUICore.Stack<U>
  #else
  package mutating func popLast<T, U>(_ key: T.Type) -> U? where T : SwiftUICore.GraphInput, T.Value == SwiftUICore.Stack<U>
  #endif
}
@available(*, unavailable)
extension SwiftUICore._GraphInputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _GraphInputsModifier {
  static func _makeInputs(modifier: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._GraphInputs)
}
extension SwiftUICore._GraphInputs {
  package func intern<T>(_ value: T, id: SwiftUICore.GraphHost.ConstantID) -> AttributeGraph.Attribute<T>
}
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated, introduced: 6.0, renamed: "WatchDisplayVariant")
@available(visionOS, unavailable)
public enum _DeviceVariant : Swift.Equatable {
  case compact
  case regular
  case h394
  case h448
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore._DeviceVariant, b: SwiftUICore._DeviceVariant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._DeviceVariant : Swift.Sendable {
}
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 8.0, renamed: "watchDisplayVariant")
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public var _deviceVariant: SwiftUICore._DeviceVariant {
    get
    set
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 8.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum WatchDisplayVariant {
  @_spi(Private) case h340
  @_spi(Private) case h390
  @_spi(Private) case h394
  @_spi(Private) case h448
  @_spi(Private) case h430
  @_spi(Private) case h484
  @_spi(Private) case h502
  @_spi(Private) public var isH430Compatible: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public var isH484Compatible: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public static func == (a: SwiftUICore.WatchDisplayVariant, b: SwiftUICore.WatchDisplayVariant) -> Swift.Bool
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.WatchDisplayVariant : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 8.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var watchDisplayVariant: SwiftUICore.WatchDisplayVariant {
    @_spi(Private) get
    @_spi(Private) set
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
package protocol VariablePrecisionDiscreteFormatStyle<FormatInput> : Foundation.DiscreteFormatStyle where Self.FormatInput : Swift.Comparable, Self.FormatInput : Swift.Decodable, Self.FormatInput : Swift.Encodable, Self.FormatInput : Swift.Hashable {
  var precisionTransition: SwiftUICore.TimeDataFormatting.FormatTransition<Self.FormatInput> { get }
}
#else
package protocol VariablePrecisionDiscreteFormatStyle : Foundation.DiscreteFormatStyle where Self.FormatInput : Swift.Comparable, Self.FormatInput : Swift.Decodable, Self.FormatInput : Swift.Encodable, Self.FormatInput : Swift.Hashable {
  var precisionTransition: SwiftUICore.TimeDataFormatting.FormatTransition<Self.FormatInput> { get }
}
#endif
extension SwiftUICore.TimeDataFormatting {
  package struct FormatTransition<FormatInput> : Swift.Codable, Swift.Hashable where FormatInput : Swift.Comparable, FormatInput : Swift.Decodable, FormatInput : Swift.Encodable, FormatInput : Swift.Hashable {
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.TimeDataFormatting.FormatTransition<FormatInput>, b: SwiftUICore.TimeDataFormatting.FormatTransition<FormatInput>) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
}
extension SwiftUICore.AnyInterfaceIdiom {
  package func reducedLuminanceBudget(for updateFrequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Foundation.TimeInterval
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Color : Swift.Hashable, Swift.CustomStringConvertible, Swift.Sendable {
  package var provider: SwiftUICore.AnyColorBox
  package init(box: SwiftUICore.AnyColorBox)
  package init<P>(provider: P) where P : SwiftUICore.ColorProvider
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<T>(_ color: T) where T : Swift.Hashable, T : SwiftUICore.ShapeStyle, T.Resolved == SwiftUICore.Color.Resolved
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 14.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "resolve(in:)")
  public var cgColor: CoreGraphics.CGColor? {
    get
  }
  #else
  @available(iOS, introduced: 14.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, renamed: "resolve(in:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "resolve(in:)")
  public var cgColor: CoreGraphics.CGColor? {
    get
  }
  #endif
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.Color, rhs: SwiftUICore.Color) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
}
package protocol ColorProvider : Swift.Hashable {
  func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  func apply(color: SwiftUICore.Color, to shape: inout SwiftUICore._ShapeStyle_Shape)
  #if compiler(>=5.3) && $NoncopyableGenerics
  var staticColor: CoreGraphics.CGColor? { get }
  #else
  var staticColor: CoreGraphics.CGColor? { get }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var kitColor: Swift.AnyObject? { get }
  #else
  var kitColor: Swift.AnyObject? { get }
  #endif
  var colorDescription: Swift.String { get }
  func opacity(at level: Swift.Int, environment: SwiftUICore.EnvironmentValues) -> Swift.Float
}
extension SwiftUICore.ColorProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #else
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var kitColor: Swift.AnyObject? {
    get
  }
  #else
  package var kitColor: Swift.AnyObject? {
    get
  }
  #endif
  package var colorDescription: Swift.String {
    get
  }
  package func opacity(at level: Swift.Int, environment: SwiftUICore.EnvironmentValues) -> Swift.Float
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color : SwiftUICore.EnvironmentalView, SwiftUICore.View {
  package func body(environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.ColorView
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias EnvironmentBody = SwiftUICore.ColorView
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyColorBox : SwiftUICore.AnyShapeStyleBox, @unchecked Swift.Sendable {
  final package func apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  package func apply(color: SwiftUICore.Color, to shape: inout SwiftUICore._ShapeStyle_Shape)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #else
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var kitColor: Swift.AnyObject? {
    get
  }
  #else
  package var kitColor: Swift.AnyObject? {
    get
  }
  #endif
  package func hash(into hasher: inout Swift.Hasher)
  package var description: Swift.String {
    get
  }
  package func opacity(at level: Swift.Int, environment: SwiftUICore.EnvironmentValues) -> Swift.Float
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyColorBox : Swift.Sendable {
}
@objc final package class ObjcColor : ObjectiveC.NSObject {
  final package let color: SwiftUICore.Color
  package init(_ color: SwiftUICore.Color)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc override final package func isEqual(_ other: Any?) -> Swift.Bool
  #else
  @objc override final package func isEqual(_ other: Any?) -> Swift.Bool
  #endif
  @objc override final package var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@dynamicMemberLookup package struct SizeAndSpacingContext {
  package var context: AttributeGraph.AnyRuleContext
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(context: AttributeGraph.AnyRuleContext, owner: AttributeGraph.AnyAttribute? = nil, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
  #else
  package init(context: AttributeGraph.AnyRuleContext, owner: AttributeGraph.AnyAttribute? = nil, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>)
  #endif
  package init(_ context: SwiftUICore.PlacementContext)
  package subscript<T>(dynamicMember keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> T {
    get
  }
  package func update<T>(_ body: () -> T) -> T
}
@dynamicMemberLookup package struct PlacementContext {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(context: AttributeGraph.AnyRuleContext, owner: AttributeGraph.AnyAttribute? = nil, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>)
  #else
  package init(context: AttributeGraph.AnyRuleContext, owner: AttributeGraph.AnyAttribute? = nil, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>)
  #endif
  package init(context: AttributeGraph.AnyRuleContext, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>)
  package init(base: SwiftUICore.SizeAndSpacingContext, parentSize: SwiftUICore.ViewSize)
  package var size: CoreFoundation.CGSize {
    get
  }
  package var proposedSize: SwiftUICore._ProposedSize {
    get
  }
  package subscript<T>(dynamicMember keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> T {
    get
  }
}
@dynamicMemberLookup package struct _PositionAwarePlacementContext {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(context: AttributeGraph.AnyRuleContext, owner: AttributeGraph.AnyAttribute?, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>)
  #else
  package init(context: AttributeGraph.AnyRuleContext, owner: AttributeGraph.AnyAttribute?, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>)
  #endif
  package init(context: AttributeGraph.AnyRuleContext, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>)
  package var size: CoreFoundation.CGSize {
    get
  }
  package var proposedSize: SwiftUICore._ProposedSize {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var unadjustedSafeAreaInsets: SwiftUICore.SafeAreaInsets? {
    get
  }
  #else
  package var unadjustedSafeAreaInsets: SwiftUICore.SafeAreaInsets? {
    get
  }
  #endif
  package var transform: SwiftUICore.ViewTransform {
    get
  }
  package subscript<T>(dynamicMember keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> T {
    get
  }
}
extension SwiftUICore.ViewTransformable {
  package mutating func convert(from space: SwiftUICore.CoordinateSpace, to context: SwiftUICore._PositionAwarePlacementContext)
  package mutating func convert(from context: SwiftUICore._PositionAwarePlacementContext, to space: SwiftUICore.CoordinateSpace)
}
package class ArchiveWriter {
  package static let writerKey: Swift.CodingUserInfoKey
  package init()
  package func finalize() throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func addAttachment(hash: SwiftUICore.StrongHash? = nil, from content: (SwiftUICore.ArchiveWriter) throws -> Swift.Void) throws -> Swift.Int
  #else
  final package func addAttachment(hash: SwiftUICore.StrongHash? = nil, from content: (SwiftUICore.ArchiveWriter) throws -> Swift.Void) throws -> Swift.Int
  #endif
  final package func addAttachment(data: Foundation.Data) throws -> Swift.Int
  package func append(_ data: Foundation.Data) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func append<T>(_ buffer: Swift.UnsafeBufferPointer<T>) throws
  #else
  package func append<T>(_ buffer: Swift.UnsafeBufferPointer<T>) throws
  #endif
  @objc deinit
}
final package class FileArchiveWriter : SwiftUICore.ArchiveWriter {
  package init(file: Foundation.FileHandle)
  convenience package init(url: Foundation.URL) throws
  final package func finalize() throws
  final package func append(_ data: Foundation.Data) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func append<T>(_ buffer: Swift.UnsafeBufferPointer<T>) throws
  #else
  final package func append<T>(_ buffer: Swift.UnsafeBufferPointer<T>) throws
  #endif
  final package func rewind(to offset: Swift.UInt64) throws
  @objc deinit
}
@_inheritsConvenienceInitializers final package class DataArchiveWriter : SwiftUICore.ArchiveWriter {
  final package func finalizeData() throws -> Foundation.Data
  final package func append(_ data: Foundation.Data) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func append<T>(_ buffer: Swift.UnsafeBufferPointer<T>) throws
  #else
  final package func append<T>(_ buffer: Swift.UnsafeBufferPointer<T>) throws
  #endif
  final package func rewind(to offset: Swift.UInt64) throws
  package init()
  @objc deinit
}
package class ArchiveReader : Swift.RandomAccessCollection {
  package static let readerKey: Swift.CodingUserInfoKey
  package static let cacheKey: Swift.CodingUserInfoKey
  package static let namedImagesKey: Swift.CodingUserInfoKey
  package typealias Cache = SwiftUICore.MutableBox<[Swift.Int : Any]>
  final package var startIndex: Swift.Int {
    get
  }
  final package var endIndex: Swift.Int {
    get
  }
  final package subscript(index: Swift.Int) -> Foundation.Data {
    get
  }
  package typealias Element = Foundation.Data
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<Swift.Int>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.ArchiveReader>
  package typealias SubSequence = Swift.Slice<SwiftUICore.ArchiveReader>
  @objc deinit
}
final package class FileArchiveReader : SwiftUICore.ArchiveReader {
  package init(file: Foundation.FileHandle) throws
  convenience package init(url: Foundation.URL) throws
  @objc deinit
}
final package class DataArchiveReader : SwiftUICore.ArchiveReader {
  package init(data: Foundation.Data) throws
  @objc deinit
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AnimationState<Value> where Value : SwiftUICore.VectorArithmetic {
  public init()
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.AnimationStateKey {
    get
    set
  }
}
@available(*, unavailable)
extension SwiftUICore.AnimationState : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol AnimationStateKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(animation: SwiftUICore.Animation?)
  #else
  public init(animation: SwiftUICore.Animation?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var animation: SwiftUICore.Animation? {
    get
    set
  }
  #else
  public var animation: SwiftUICore.Animation? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var effectiveAnimation: SwiftUICore.Animation? {
    get
  }
  #else
  package var effectiveAnimation: SwiftUICore.Animation? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var _animationFrameInterval: Swift.Double? {
    get
    set
  }
  #else
  package var _animationFrameInterval: Swift.Double? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var _animationReason: Swift.UInt32? {
    get
    set
  }
  #else
  package var _animationReason: Swift.UInt32? {
    get
    set
  }
  #endif
  package var isAnimated: Swift.Bool {
    get
  }
  public var disablesAnimations: Swift.Bool {
    get
    set
  }
  package var disablesContentTransitions: Swift.Bool {
    get
    set
  }
  package mutating func disableAnimations()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var animationIgnoringTransitionPhase: SwiftUICore.Animation? {
    get
  }
  #else
  package var animationIgnoringTransitionPhase: SwiftUICore.Animation? {
    get
  }
  #endif
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class EventBindingBridge {
  @_spi(ForSwiftUIOnly) weak package var eventBindingManager: SwiftUICore.EventBindingManager? {
    get
  }
  @_spi(ForSwiftUIOnly) package var responderWasBoundHandler: ((SwiftUICore.ResponderNode) -> ())?
  @_spi(ForSwiftUIOnly) public init(eventBindingManager: SwiftUICore.EventBindingManager)
  @_spi(ForSwiftUIOnly) public init()
  @_spi(ForSwiftUIOnly) open var eventSources: [any SwiftUICore.EventBindingSource] {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) @discardableResult
  open func send(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType], source: any SwiftUICore.EventBindingSource) -> Swift.Set<SwiftUICore.EventID>
  @_spi(ForSwiftUIOnly) open func reset(eventSource: any SwiftUICore.EventBindingSource, resetForwardedEventDispatchers: Swift.Bool = false)
  @_spi(ForSwiftUIOnly) open func setInheritedPhase(_ phase: SwiftUICore._GestureInputs.InheritedPhase)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func source(for sourceType: SwiftUICore.EventSourceType) -> (any SwiftUICore.EventBindingSource)?
  #else
  @_spi(ForSwiftUIOnly) open func source(for sourceType: SwiftUICore.EventSourceType) -> (any SwiftUICore.EventBindingSource)?
  #endif
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.EventBindingBridge : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EventBindingBridge : SwiftUICore.EventBindingManagerDelegate {
  @_spi(ForSwiftUIOnly) package func didBind(to newBinding: SwiftUICore.EventBinding, id: SwiftUICore.EventID)
  @_spi(ForSwiftUIOnly) package func didUpdate(phase: SwiftUICore.GesturePhase<Swift.Void>, in eventBindingManager: SwiftUICore.EventBindingManager)
  @_spi(ForSwiftUIOnly) package func didUpdate(gestureCategory: SwiftUICore.GestureCategory, in eventBindingManager: SwiftUICore.EventBindingManager)
  @_spi(ForSwiftUIOnly) package func requestHoverUpdate(in eventBindingManager: SwiftUICore.EventBindingManager)
}
package struct CUIDesignLibraryCacheKey : Swift.Hashable {
  package struct Entry : Swift.Hashable {
    package var color: SwiftUICore.Color.Resolved
    package var blendMode: SwiftUICore.BlendMode
    package init(color: SwiftUICore.Color.Resolved, blendMode: SwiftUICore.BlendMode)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.CUIDesignLibraryCacheKey.Entry, b: SwiftUICore.CUIDesignLibraryCacheKey.Entry) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  @SwiftUICore.AtomicBox @_projectedValueProperty($cache) package static var cache: [SwiftUICore.CUIDesignLibraryCacheKey : SwiftUICore.CUIDesignLibraryCacheKey.Entry] {
    get
    set
    _modify
  }
  package static var $cache: SwiftUICore.AtomicBox<[SwiftUICore.CUIDesignLibraryCacheKey : SwiftUICore.CUIDesignLibraryCacheKey.Entry]> {
    get
  }
  package struct Props : Swift.Hashable, SwiftUICore.DerivedEnvironmentKey {
    package var scheme: SwiftUICore.ColorScheme
    package var contrast: SwiftUICore.ColorSchemeContrast
    package var gamut: SwiftUICore.DisplayGamut
    package var styling: CoreUI.CUIDesignStyling
    package static func value(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.CUIDesignLibraryCacheKey.Props
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.CUIDesignLibraryCacheKey.Props, b: SwiftUICore.CUIDesignLibraryCacheKey.Props) -> Swift.Bool
    package typealias Value = SwiftUICore.CUIDesignLibraryCacheKey.Props
    package var hashValue: Swift.Int {
      get
    }
  }
  package var name: CoreUI.CUIColorName
  package var props: SwiftUICore.CUIDesignLibraryCacheKey.Props
  package init(name: CoreUI.CUIColorName, in env: SwiftUICore.EnvironmentValues)
  package func fetch() -> SwiftUICore.CUIDesignLibraryCacheKey.Entry
  package var cuiDisplayGamut: CoreUI.CUIDisplayGamut {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.CUIDesignLibraryCacheKey, b: SwiftUICore.CUIDesignLibraryCacheKey) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_typeEraser(AnyView) @preconcurrency @_Concurrency.MainActor public protocol View {
  nonisolated static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
package protocol PrimitiveView : SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PrimitiveView {
  public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func bodyError() -> Swift.Never
}
package protocol UnaryView : SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnaryView {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
package protocol MultiView : SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MultiView {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _UnaryViewAdaptor<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var content: Content
  @inlinable nonisolated public init(_ content: Content) { self.content = content }
  @_Concurrency.MainActor @preconcurrency package init(@SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._UnaryViewAdaptor<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._UnaryViewAdaptor : Swift.Sendable {
}
package protocol ViewVisitor {
  mutating func visit<V>(_ view: V) where V : SwiftUICore.View
}
package protocol ViewTypeVisitor {
  mutating func visit<V>(type: V.Type) where V : SwiftUICore.View
}
package struct ViewDescriptor : SwiftUICore.TupleDescriptor, SwiftUICore.ConditionalProtocolDescriptor {
  package static var typeCache: [Swift.ObjectIdentifier : SwiftUICore.TupleTypeDescription<SwiftUICore.ViewDescriptor>]
  package static var descriptor: Swift.UnsafeRawPointer {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func fetchConditionalType(key: Swift.ObjectIdentifier) -> SwiftUICore.ConditionalTypeDescriptor<SwiftUICore.ViewDescriptor>?
  #else
  package static func fetchConditionalType(key: Swift.ObjectIdentifier) -> SwiftUICore.ConditionalTypeDescriptor<SwiftUICore.ViewDescriptor>?
  #endif
  package static func insertConditionalType(key: Swift.ObjectIdentifier, value: SwiftUICore.ConditionalTypeDescriptor<SwiftUICore.ViewDescriptor>)
}
extension SwiftUICore.TypeConformance where P == SwiftUICore.ViewDescriptor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func visitType<V>(visitor: Swift.UnsafeMutablePointer<V>) where V : SwiftUICore.ViewTypeVisitor
  #else
  package func visitType<V>(visitor: Swift.UnsafeMutablePointer<V>) where V : SwiftUICore.ViewTypeVisitor
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnimatablePair<First, Second> : SwiftUICore.VectorArithmetic where First : SwiftUICore.VectorArithmetic, Second : SwiftUICore.VectorArithmetic {
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        self.first = first
        self.second = second
    }
  @inlinable package subscript() -> (First, Second) {
    get { return (first, second) }
    set { (first, second) = newValue }
  }
  @_transparent public static var zero: SwiftUICore.AnimatablePair<First, Second> {
    @_transparent get {
        return .init(First.zero, Second.zero)
    }
  }
  @_transparent public static func += (lhs: inout SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) {
        lhs.first += rhs.first
        lhs.second += rhs.second
    }
  @_transparent public static func -= (lhs: inout SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) {
        lhs.first -= rhs.first
        lhs.second -= rhs.second
    }
  @_transparent public static func + (lhs: SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) -> SwiftUICore.AnimatablePair<First, Second> {
        return .init(lhs.first + rhs.first, lhs.second + rhs.second)
    }
  @_transparent public static func - (lhs: SwiftUICore.AnimatablePair<First, Second>, rhs: SwiftUICore.AnimatablePair<First, Second>) -> SwiftUICore.AnimatablePair<First, Second> {
        return .init(lhs.first - rhs.first, lhs.second - rhs.second)
    }
  @_transparent public mutating func scale(by rhs: Swift.Double) {
        first.scale(by: rhs)
        second.scale(by: rhs)
    }
  @_transparent public var magnitudeSquared: Swift.Double {
    @_transparent get {
        return first.magnitudeSquared + second.magnitudeSquared
    }
  }
  public static func == (a: SwiftUICore.AnimatablePair<First, Second>, b: SwiftUICore.AnimatablePair<First, Second>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AnimatablePair : Swift.Sendable where First : Swift.Sendable, Second : Swift.Sendable {
}
package struct AnimatableArray<Element> : SwiftUICore.VectorArithmetic where Element : SwiftUICore.VectorArithmetic {
  package var elements: [Element]
  package init(_ elements: [Element])
  package static var zero: SwiftUICore.AnimatableArray<Element> {
    get
  }
  package static func += (lhs: inout SwiftUICore.AnimatableArray<Element>, rhs: SwiftUICore.AnimatableArray<Element>)
  package static func -= (lhs: inout SwiftUICore.AnimatableArray<Element>, rhs: SwiftUICore.AnimatableArray<Element>)
  @_transparent package static func + (lhs: SwiftUICore.AnimatableArray<Element>, rhs: SwiftUICore.AnimatableArray<Element>) -> SwiftUICore.AnimatableArray<Element>
  @_transparent package static func - (lhs: SwiftUICore.AnimatableArray<Element>, rhs: SwiftUICore.AnimatableArray<Element>) -> SwiftUICore.AnimatableArray<Element>
  package mutating func scale(by rhs: Swift.Double)
  package var magnitudeSquared: Swift.Double {
    get
  }
  package static func == (a: SwiftUICore.AnimatableArray<Element>, b: SwiftUICore.AnimatableArray<Element>) -> Swift.Bool
}
extension Swift.Array where Element : SwiftUICore.Animatable {
  package var animatableData: SwiftUICore.AnimatableArray<Element.AnimatableData> {
    get
    set
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Gesture<Value> {
  associatedtype Value
  static func _makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Value>
  associatedtype Body : SwiftUICore.Gesture
  var body: Self.Body { get }
}
#else
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Gesture {
  associatedtype Value
  static func _makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Value>
  associatedtype Body : SwiftUICore.Gesture
  var body: Self.Body { get }
}
#endif
package protocol PrimitiveGesture : SwiftUICore.Gesture where Self.Body == Swift.Never {
}
package protocol PubliclyPrimitiveGesture : SwiftUICore.PrimitiveGesture {
  associatedtype InternalBody : SwiftUICore.Gesture where Self.Value == Self.InternalBody.Value
  var internalBody: Self.InternalBody { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PubliclyPrimitiveGesture {
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Value>
  package static func makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Never : SwiftUICore.Gesture {
  public typealias Value = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PrimitiveGesture {
  public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gesture where Self.Value == Self.Body.Value {
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Self.Body.Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GestureInputs {
  package var viewInputs: SwiftUICore._ViewInputs
  package var viewSubgraph: AttributeGraph.Subgraph
  package var preferences: SwiftUICore.PreferencesInputs
  package var events: AttributeGraph.Attribute<[SwiftUICore.EventID : any SwiftUICore.EventType]>
  package var resetSeed: AttributeGraph.Attribute<Swift.UInt32>
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct InheritedPhase : Swift.OptionSet, SwiftUICore.Defaultable {
    @_spi(ForSwiftUIOnly) public let rawValue: Swift.Int
    @_spi(ForSwiftUIOnly) public init(rawValue: Swift.Int)
    @_spi(ForSwiftUIOnly) package static let failed: SwiftUICore._GestureInputs.InheritedPhase
    @_spi(ForSwiftUIOnly) package static let active: SwiftUICore._GestureInputs.InheritedPhase
    @_spi(ForSwiftUIOnly) package static let defaultValue: SwiftUICore._GestureInputs.InheritedPhase
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 10.15, visionOS 2.0, *)
    public typealias ArrayLiteralElement = SwiftUICore._GestureInputs.InheritedPhase
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 10.15, visionOS 2.0, *)
    public typealias Element = SwiftUICore._GestureInputs.InheritedPhase
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 10.15, visionOS 2.0, *)
    public typealias RawValue = Swift.Int
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 10.15, visionOS 2.0, *)
    package typealias Value = SwiftUICore._GestureInputs.InheritedPhase
  }
  package var inheritedPhase: AttributeGraph.Attribute<SwiftUICore._GestureInputs.InheritedPhase>
  package var failedPhase: AttributeGraph.Attribute<SwiftUICore.GesturePhase<Swift.Void>> {
    get
  }
  package var options: SwiftUICore._GestureInputs.Options
  package var platformInputs: SwiftUICore.PlatformGestureInputs
  package init(_ inputs: SwiftUICore._ViewInputs, viewSubgraph: AttributeGraph.Subgraph, events: AttributeGraph.Attribute<[SwiftUICore.EventID : any SwiftUICore.EventType]>, time: AttributeGraph.Attribute<SwiftUICore.Time>, resetSeed: AttributeGraph.Attribute<Swift.UInt32>, inheritedPhase: AttributeGraph.Attribute<SwiftUICore._GestureInputs.InheritedPhase>, gesturePreferenceKeys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>)
  package mutating func mergeViewInputs(_ other: SwiftUICore._ViewInputs, viewSubgraph: AttributeGraph.Subgraph)
  package func animatedPosition() -> AttributeGraph.Attribute<SwiftUICore.ViewOrigin>
  package func intern<T>(_ value: T, id: SwiftUICore.GraphHost.ConstantID) -> AttributeGraph.Attribute<T>
  package func makeIndirectOutputs<Value>() -> SwiftUICore._GestureOutputs<Value>
  package func makeDefaultOutputs<Value>() -> SwiftUICore._GestureOutputs<Value>
}
extension SwiftUICore._GestureInputs {
  package struct Options : Swift.OptionSet {
    package let rawValue: Swift.UInt32
    @inlinable package init(rawValue: Swift.UInt32)
    @inlinable package static var preconvertedEventLocations: SwiftUICore._GestureInputs.Options {
      get
    }
    @inlinable package static var allowsIncompleteEventSequences: SwiftUICore._GestureInputs.Options {
      get
    }
    @inlinable package static var skipCombiners: SwiftUICore._GestureInputs.Options {
      get
    }
    @inlinable package static var includeDebugOutput: SwiftUICore._GestureInputs.Options {
      get
    }
    @inlinable package static var gestureGraph: SwiftUICore._GestureInputs.Options {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias ArrayLiteralElement = SwiftUICore._GestureInputs.Options
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Element = SwiftUICore._GestureInputs.Options
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias RawValue = Swift.UInt32
  }
}
@available(*, unavailable)
extension SwiftUICore._GestureInputs : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore._GestureInputs.InheritedPhase : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _GestureOutputs<Value> {
  package var phase: AttributeGraph.Attribute<SwiftUICore.GesturePhase<Value>>
  package var preferences: SwiftUICore.PreferencesOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var debugData: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Data>? {
    get
    set
  }
  #else
  package var debugData: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Data>? {
    get
    set
  }
  #endif
  package init(phase: AttributeGraph.Attribute<SwiftUICore.GesturePhase<Value>>)
  package func withPhase<T>(_ phase: AttributeGraph.Attribute<SwiftUICore.GesturePhase<T>>) -> SwiftUICore._GestureOutputs<T>
  package func overrideDefaultValues(_ childOutputs: SwiftUICore._GestureOutputs<Value>)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func setIndirectDependency(_ dependency: AttributeGraph.AnyAttribute?)
  #else
  package func setIndirectDependency(_ dependency: AttributeGraph.AnyAttribute?)
  #endif
  package func attachIndirectOutputs(_ childOutputs: SwiftUICore._GestureOutputs<Value>)
  package func detachIndirectOutputs()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript(anyKey key: any SwiftUICore.AnyPreferenceKey.Type) -> AttributeGraph.AnyAttribute? {
    get
    set
  }
  #else
  package subscript(anyKey key: any SwiftUICore.AnyPreferenceKey.Type) -> AttributeGraph.AnyAttribute? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package subscript<K>(key: K.Type) -> AttributeGraph.Attribute<K.Value>? where K : SwiftUICore.PreferenceKey {
    get
    set
  }
  #else
  package subscript<K>(key: K.Type) -> AttributeGraph.Attribute<K.Value>? where K : SwiftUICore.PreferenceKey {
    get
    set
  }
  #endif
  package mutating func appendPreference<K>(key: K.Type, value: AttributeGraph.Attribute<K.Value>) where K : SwiftUICore.PreferenceKey
  package func forEachPreference(_ body: (any SwiftUICore.AnyPreferenceKey.Type, AttributeGraph.AnyAttribute) -> Swift.Void)
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct GestureCategory : Swift.OptionSet {
  @_spi(ForSwiftUIOnly) public let rawValue: Swift.Int
  @_spi(ForSwiftUIOnly) public init(rawValue: Swift.Int)
  @_spi(ForSwiftUIOnly) package static let magnify: SwiftUICore.GestureCategory
  @_spi(ForSwiftUIOnly) package static let rotate: SwiftUICore.GestureCategory
  @_spi(ForSwiftUIOnly) package static let drag: SwiftUICore.GestureCategory
  @_spi(ForSwiftUIOnly) package static let select: SwiftUICore.GestureCategory
  @_spi(ForSwiftUIOnly) package static let longPress: SwiftUICore.GestureCategory
  @_spi(ForSwiftUIOnly) package struct Key : SwiftUICore.PreferenceKey {
    @_spi(ForSwiftUIOnly) package typealias Value = SwiftUICore.GestureCategory
    @_spi(ForSwiftUIOnly) package static let _includesRemovedValues: Swift.Bool
    @_spi(ForSwiftUIOnly) package static let defaultValue: SwiftUICore.GestureCategory.Key.Value
    @_spi(ForSwiftUIOnly) package static func reduce(value: inout SwiftUICore.GestureCategory.Key.Value, nextValue: () -> SwiftUICore.GestureCategory.Key.Value)
  }
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.GestureCategory
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUICore.GestureCategory
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias RawValue = Swift.Int
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.GestureCategory : Swift.Sendable {
}
package struct GestureDescriptor : SwiftUICore.TupleDescriptor {
  package static var typeCache: [Swift.ObjectIdentifier : SwiftUICore.TupleTypeDescription<SwiftUICore.GestureDescriptor>]
  package static var descriptor: Swift.UnsafeRawPointer {
    get
  }
}
package struct GestureModifierDescriptor : SwiftUICore.TupleDescriptor {
  package static var typeCache: [Swift.ObjectIdentifier : SwiftUICore.TupleTypeDescription<SwiftUICore.GestureModifierDescriptor>]
  package static var descriptor: Swift.UnsafeRawPointer {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore._GestureOutputs : Swift.Sendable {
}
package struct PlatformGestureInputs {
}
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use Color(cgColor:) when converting a CGColor, or create a standard Color directly")
extension SwiftUICore.Color {
  public init(_ cgColor: CoreGraphics.CGColor)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public init(cgColor: CoreGraphics.CGColor)
}
extension CoreGraphics.CGColor : SwiftUICore.ColorProvider {
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #else
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #endif
}
extension SwiftUICore.Color.Resolved {
  package static let srgb: CoreGraphics.CGColorSpace
  package static let srgbExtended: CoreGraphics.CGColorSpace
  package static let srgbLinear: CoreGraphics.CGColorSpace
  package static let srgbExtendedLinear: CoreGraphics.CGColorSpace
  package static let displayP3: CoreGraphics.CGColorSpace
  package init(_ cgColor: CoreGraphics.CGColor)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(failableCGColor cgColor: CoreGraphics.CGColor)
  #else
  package init?(failableCGColor cgColor: CoreGraphics.CGColor)
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.Resolved {
  public var cgColor: CoreGraphics.CGColor {
    get
  }
}
extension SwiftUICore.ResolvedGradient {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var cgGradient: CoreGraphics.CGGradient? {
    get
  }
  #else
  package var cgGradient: CoreGraphics.CGGradient? {
    get
  }
  #endif
}
package struct LayoutComputer : Swift.Equatable {
  package init<E>(_ engine: E) where E : SwiftUICore.LayoutEngine
  package static func == (lhs: SwiftUICore.LayoutComputer, rhs: SwiftUICore.LayoutComputer) -> Swift.Bool
  package func layoutPriority() -> Swift.Double
  package func ignoresAutomaticPadding() -> Swift.Bool
  package func requiresSpacingProjection() -> Swift.Bool
  package func spacing() -> SwiftUICore.Spacing
  package func lengthThatFits(_ proposal: SwiftUICore._ProposedSize, in direction: SwiftUICore.Axis) -> CoreFoundation.CGFloat
  package func sizeThatFits(_ proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  package func childGeometries(at parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint) -> [SwiftUICore.ViewGeometry]
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #else
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #endif
}
extension SwiftUICore.LayoutComputer : SwiftUICore.Defaultable {
  package struct DefaultEngine : SwiftUICore.LayoutEngine {
    package func sizeThatFits(_ proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
    package func childGeometries(at parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint) -> [SwiftUICore.ViewGeometry]
  }
  package static let defaultValue: SwiftUICore.LayoutComputer
  package typealias Value = SwiftUICore.LayoutComputer
}
package protocol LayoutEngine {
  func layoutPriority() -> Swift.Double
  func ignoresAutomaticPadding() -> Swift.Bool
  func requiresSpacingProjection() -> Swift.Bool
  mutating func spacing() -> SwiftUICore.Spacing
  mutating func sizeThatFits(_ proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  mutating func lengthThatFits(_ proposal: SwiftUICore._ProposedSize, in axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat
  mutating func childGeometries(at parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint) -> [SwiftUICore.ViewGeometry]
  #if compiler(>=5.3) && $NoncopyableGenerics
  mutating func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #else
  mutating func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var debugContentDescription: Swift.String? { get }
  #else
  var debugContentDescription: Swift.String? { get }
  #endif
}
extension SwiftUICore.LayoutEngine {
  package func layoutPriority() -> Swift.Double
  package func ignoresAutomaticPadding() -> Swift.Bool
  package func requiresSpacingProjection() -> Swift.Bool
  package mutating func lengthThatFits(_ proposal: SwiftUICore._ProposedSize, in axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat
  package func childGeometries(at parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint) -> [SwiftUICore.ViewGeometry]
  package func spacing() -> SwiftUICore.Spacing
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #else
  package func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var debugContentDescription: Swift.String? {
    get
  }
  #else
  package var debugContentDescription: Swift.String? {
    get
  }
  #endif
}
extension SwiftUICore.LayoutComputer {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func withMutableEngine<E, R>(type _: E.Type, do body: (inout E) -> R) -> R? where E : SwiftUICore.LayoutEngine
  #else
  package func withMutableEngine<E, R>(type _: E.Type, do body: (inout E) -> R) -> R? where E : SwiftUICore.LayoutEngine
  #endif
}
extension AttributeGraph.StatefulRule where Self.Value == SwiftUICore.LayoutComputer {
  package mutating func update<E>(to engine: E) where E : SwiftUICore.LayoutEngine
  package mutating func updateIfNotEqual<E>(to engine: E) where E : Swift.Equatable, E : SwiftUICore.LayoutEngine
  package mutating func update<E>(modify: (inout E) -> Swift.Void, create: () -> E) where E : SwiftUICore.LayoutEngine
}
package protocol DynamicView {
  static var canTransition: Swift.Bool { get }
  static var traitKeysDependOnView: Swift.Bool { get }
  associatedtype Metadata
  associatedtype ID : Swift.Hashable
  static func makeID() -> Self.ID
  #if compiler(>=5.3) && $NoncopyableGenerics
  func childInfo(metadata: Self.Metadata) -> (any Any.Type, Self.ID?)
  #else
  func childInfo(metadata: Self.Metadata) -> (any Any.Type, Self.ID?)
  #endif
  func makeChildView(metadata: Self.Metadata, view: AttributeGraph.Attribute<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  func makeChildViewList(metadata: Self.Metadata, view: AttributeGraph.Attribute<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
extension SwiftUICore.DynamicView {
  package static var traitKeysDependOnView: Swift.Bool {
    get
  }
}
extension SwiftUICore.DynamicView where Self.ID == SwiftUICore.UniqueID {
  package static func makeID() -> SwiftUICore.UniqueID
}
extension SwiftUICore.DynamicView {
  package static func makeDynamicView(metadata: Self.Metadata, view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  package static func makeDynamicViewList(metadata: Self.Metadata, view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public struct EventBinding : Swift.Equatable {
  @_spi(ForSwiftUIOnly) package var responder: SwiftUICore.ResponderNode
  @_spi(ForSwiftUIOnly) package init(responder: SwiftUICore.ResponderNode)
  @_spi(ForSwiftUIOnly) public static func == (lhs: SwiftUICore.EventBinding, rhs: SwiftUICore.EventBinding) -> Swift.Bool
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.EventBinding : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
final public class EventBindingManager {
  @_spi(ForSwiftUIOnly) weak final package var host: (any SwiftUICore.EventGraphHost)?
  @_spi(ForSwiftUIOnly) weak final package var delegate: (any SwiftUICore.EventBindingManagerDelegate)?
  @_spi(ForSwiftUIOnly) final package var isActive: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package static var current: SwiftUICore.EventBindingManager? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) package static var current: SwiftUICore.EventBindingManager? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  @_spi(ForSwiftUIOnly) package init()
  @_spi(ForSwiftUIOnly) @objc deinit
  @_spi(ForSwiftUIOnly) final package func addForwardedEventDispatcher(_ dispatcher: any SwiftUICore.ForwardedEventDispatcher)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) final package func rebindEvent(_ identifier: SwiftUICore.EventID, to: SwiftUICore.ResponderNode?) -> (from: SwiftUICore.EventBinding?, to: SwiftUICore.EventBinding?)?
  #else
  @_spi(ForSwiftUIOnly) final package func rebindEvent(_ identifier: SwiftUICore.EventID, to: SwiftUICore.ResponderNode?) -> (from: SwiftUICore.EventBinding?, to: SwiftUICore.EventBinding?)?
  #endif
  @_spi(ForSwiftUIOnly) final package func willRemoveResponder(_ from: SwiftUICore.ResponderNode)
  @_spi(ForSwiftUIOnly) final package func setInheritedPhase(_ phase: SwiftUICore._GestureInputs.InheritedPhase)
  @_spi(ForSwiftUIOnly) @discardableResult
  final package func send(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType]) -> Swift.Set<SwiftUICore.EventID>
  @_spi(ForSwiftUIOnly) final package func send<E>(_ event: E, id: Swift.Int) where E : SwiftUICore.EventType
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) final package var rootResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) final package var rootResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) final package var focusedResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) final package var focusedResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  @_spi(ForSwiftUIOnly) final package func reset(resetForwardedEventDispatchers: Swift.Bool = false)
  @_spi(ForSwiftUIOnly) final package func isActive<E>(for eventType: E.Type) -> Swift.Bool where E : SwiftUICore.EventType
  @_spi(ForSwiftUIOnly) final package func binds<E>(_ event: E) -> Swift.Bool where E : SwiftUICore.EventType
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.EventBindingManager : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.EventBindingManager {
  @_spi(ForSwiftUIOnly) final package func enqueueHoverUpdateIfNeeded()
}
package protocol ForwardedEventDispatcher {
  static var eventType: any SwiftUICore.EventType.Type { get }
  var isActive: Swift.Bool { get }
  func wantsEvent(_ event: any SwiftUICore.EventType, manager: SwiftUICore.EventBindingManager) -> Swift.Bool
  mutating func receiveEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType], manager: SwiftUICore.EventBindingManager) -> Swift.Set<SwiftUICore.EventID>
  mutating func reset()
}
extension SwiftUICore.ForwardedEventDispatcher {
  package var isActive: Swift.Bool {
    get
  }
  package func wantsEvent(_ event: any SwiftUICore.EventType, manager: SwiftUICore.EventBindingManager) -> Swift.Bool
  package mutating func reset()
}
package protocol EventBindingManagerDelegate : AnyObject {
  func didBind(to newBinding: SwiftUICore.EventBinding, id: SwiftUICore.EventID)
  func didUpdate(phase: SwiftUICore.GesturePhase<Swift.Void>, in eventBindingManager: SwiftUICore.EventBindingManager)
  func didUpdate(gestureCategory: SwiftUICore.GestureCategory, in eventBindingManager: SwiftUICore.EventBindingManager)
  func requestHoverUpdate(in eventBindingManager: SwiftUICore.EventBindingManager)
}
extension SwiftUICore.EventBindingManagerDelegate {
  package func didBind(to newBinding: SwiftUICore.EventBinding, id: SwiftUICore.EventID)
  package func requestHoverUpdate(in eventBindingManager: SwiftUICore.EventBindingManager)
  package func didUpdate(gestureCategory: SwiftUICore.GestureCategory, in eventBindingManager: SwiftUICore.EventBindingManager)
}
package struct UniqueSeedGenerator {
  package init()
  package mutating func generate() -> Swift.Int
}
package struct SizeGesture<Content> : SwiftUICore.PrimitiveGesture where Content : SwiftUICore.Gesture {
  package typealias Value = Content.Value
  package var content: (CoreFoundation.CGSize) -> Content
  package init(_ content: @escaping (CoreFoundation.CGSize) -> Content)
  package static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.SizeGesture<Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUICore.SizeGesture<Content>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _LayoutTraits : Swift.Equatable {
  package struct FlexibilityEstimate : Swift.Comparable {
    package init(minLength: CoreFoundation.CGFloat, maxLength: CoreFoundation.CGFloat)
    package static func < (l: SwiftUICore._LayoutTraits.FlexibilityEstimate, r: SwiftUICore._LayoutTraits.FlexibilityEstimate) -> Swift.Bool
    package static func == (a: SwiftUICore._LayoutTraits.FlexibilityEstimate, b: SwiftUICore._LayoutTraits.FlexibilityEstimate) -> Swift.Bool
  }
  package struct Dimension : Swift.Equatable {
    package var min: CoreFoundation.CGFloat {
      get
      set
    }
    package var ideal: CoreFoundation.CGFloat {
      get
      set
    }
    package var max: CoreFoundation.CGFloat {
      get
      set
    }
    package init(min: CoreFoundation.CGFloat, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat)
    package static func fixed(_ d: CoreFoundation.CGFloat) -> SwiftUICore._LayoutTraits.Dimension
    package static func == (a: SwiftUICore._LayoutTraits.Dimension, b: SwiftUICore._LayoutTraits.Dimension) -> Swift.Bool
  }
  package var width: SwiftUICore._LayoutTraits.Dimension
  package var height: SwiftUICore._LayoutTraits.Dimension
  package init()
  package init(width: SwiftUICore._LayoutTraits.Dimension, height: SwiftUICore._LayoutTraits.Dimension)
  package subscript(axis: SwiftUICore.Axis) -> SwiftUICore._LayoutTraits.Dimension {
    get
    set
  }
  public static func == (a: SwiftUICore._LayoutTraits, b: SwiftUICore._LayoutTraits) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._LayoutTraits : Swift.Sendable {
}
extension SwiftUICore._LayoutTraits {
  package init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  package init(_ size: CoreFoundation.CGSize)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._LayoutTraits : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SwiftUICore._LayoutTraits.Dimension : Swift.CustomStringConvertible {
  package var description: Swift.String {
    get
  }
}
extension SwiftUICore._LayoutTraits {
  package var idealSize: CoreFoundation.CGSize {
    get
    set
  }
  package var minSize: CoreFoundation.CGSize {
    get
    set
  }
  package var maxSize: CoreFoundation.CGSize {
    get
    set
  }
}
extension CoreFoundation.CGSize {
  package func clamped(to constraints: SwiftUICore._LayoutTraits) -> CoreFoundation.CGSize
}
package enum GestureUtilities {
  @inline(__always) package static func requestUpdate(by deadline: SwiftUICore.Time, useGestureGraph: Swift.Bool)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyView : SwiftUICore.PrimitiveView, SwiftUICore.View {
  @inlinable nonisolated public init() {}
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.EmptyView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.EmptyView>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_Children : SwiftUICore.View, SwiftUICore.MultiView, SwiftUICore.PrimitiveView {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView.Children>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VariadicView_Children : Swift.RandomAccessCollection {
  @_Concurrency.MainActor @preconcurrency public struct Element : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView, Swift.Identifiable {
    @_Concurrency.MainActor @preconcurrency package var view: SwiftUICore._ViewList_View
    @_Concurrency.MainActor @preconcurrency package var traits: SwiftUICore.ViewTraitCollection
    @_Concurrency.MainActor @preconcurrency public var id: Swift.AnyHashable {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_Concurrency.MainActor @preconcurrency public func id<ID>(as _: ID.Type = ID.self) -> ID? where ID : Swift.Hashable
    #else
    @_Concurrency.MainActor @preconcurrency public func id<ID>(as _: ID.Type = ID.self) -> ID? where ID : Swift.Hashable
    #endif
    @_Concurrency.MainActor @preconcurrency public subscript<Trait>(key: Trait.Type) -> Trait.Value where Trait : SwiftUICore._ViewTraitKey {
      get
      set
    }
    nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._VariadicView_Children.Element>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ID = Swift.AnyHashable
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUICore._VariadicView_Children.Element {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Index = Swift.Int
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUICore._VariadicView_Children>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<SwiftUICore._VariadicView_Children>
}
@available(*, unavailable)
extension SwiftUICore._VariadicView_Children.Element : Swift.Sendable {
}
package protocol ViewListVisitor {
  mutating func visit(view: SwiftUICore._ViewList_View, traits: SwiftUICore.ViewTraitCollection) -> Swift.Bool
}
extension SwiftUICore.ViewList {
  package typealias Backing = SwiftUICore._ViewList_Backing
}
package struct _ViewList_Backing {
  package var children: SwiftUICore._VariadicView.Children
  package var viewCount: Swift.Int {
    get
  }
  package init(_ children: SwiftUICore._VariadicView.Children)
  package func visitViews<V>(applying v: inout V, from start: inout Swift.Int) -> Swift.Bool where V : SwiftUICore.ViewListVisitor
}
extension SwiftUICore._ViewList_Backing {
  package func visitAll<V>(applying v: inout V) where V : SwiftUICore.ViewListVisitor
  package func visitViews<V>(applying v: inout V, from start: Swift.Int) where V : SwiftUICore.ViewListVisitor
}
extension SwiftUICore._ViewList_Backing {
  package var ids: [Swift.AnyHashable] {
    get
  }
}
extension SwiftUICore.ViewList {
  package typealias View = SwiftUICore._ViewList_View
}
@_Concurrency.MainActor @preconcurrency package struct _ViewList_View : SwiftUICore.PrimitiveView, SwiftUICore.View, SwiftUICore.UnaryView {
  @_Concurrency.MainActor @preconcurrency package var id: SwiftUICore._ViewList_ID
  @_Concurrency.MainActor @preconcurrency package init(elements: any SwiftUICore._ViewList_Elements, id: SwiftUICore._ViewList_ID, index: Swift.Int, count: Swift.Int, contentSubgraph: AttributeGraph.Subgraph)
  @_Concurrency.MainActor @preconcurrency package var elementID: SwiftUICore._ViewList_ID {
    get
  }
  @_Concurrency.MainActor @preconcurrency package var reuseIdentifier: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency package var viewID: Swift.AnyHashable {
    get
  }
  nonisolated package static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._ViewList_View>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
package struct ViewListShouldParentToPlaceholderSubgraph : SwiftUICore.GraphInput {
  package static let defaultValue: Swift.Bool
  package typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.RangeReplaceableCollection where Self : Swift.MutableCollection {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public mutating func remove(atOffsets offsets: Foundation.IndexSet)
}
extension Swift.RangeReplaceableCollection {
  package mutating func _remove(atOffsets offsets: Foundation.IndexSet)
}
extension Swift.Collection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func firstIndexByOffset(where predicate: (Swift.Int) throws -> Swift.Bool) rethrows -> (Self.Index, Swift.Int)?
  #else
  package func firstIndexByOffset(where predicate: (Swift.Int) throws -> Swift.Bool) rethrows -> (Self.Index, Swift.Int)?
  #endif
}
extension Swift.MutableCollection {
  package mutating func halfStablePartitionByOffset(isSuffixElementAtOffset: (Swift.Int) throws -> Swift.Bool) rethrows -> Self.Index
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.MutableCollection {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public mutating func move(fromOffsets source: Foundation.IndexSet, toOffset destination: Swift.Int)
  @discardableResult
  package mutating func stablePartitionByOffset(in range: Swift.Range<Self.Index>, startOffset: Swift.Int, isSuffixElementAtOffset: (Swift.Int) throws -> Swift.Bool) rethrows -> Self.Index
  package mutating func stablePartitionByOffset(in range: Swift.Range<Self.Index>, startOffset: Swift.Int, count n: Swift.Int, isSuffixElementAtOffset: (Swift.Int) throws -> Swift.Bool) rethrows -> Self.Index
  @discardableResult
  package mutating func rotate(in range: Swift.Range<Self.Index>, shiftingToStart middle: Self.Index) -> Self.Index
  package mutating func _swapNonemptySubrangePrefixes(_ lhs: Swift.Range<Self.Index>, _ rhs: Swift.Range<Self.Index>) -> (Self.Index, Self.Index)
}
package enum AccessibilityCore {
}
extension SwiftUICore._GraphInputs {
  package var needsAccessibility: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var needsAccessibility: Swift.Bool {
    get
    set
  }
}
package struct WithinAccessibilityRotor : SwiftUICore.ViewInputBoolFlag {
  package init()
  package typealias Value = Swift.Bool
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@objc public protocol PlatformAccessibilityElementProtocol : ObjectiveC.NSObjectProtocol {
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public typealias PlatformAccessibilityElement = ObjectiveC.NSObject & SwiftUICore.PlatformAccessibilityElementProtocol
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension ObjectiveC.NSObject : SwiftUICore.PlatformAccessibilityElementProtocol {
  @_spi(ForSwiftUIOnly) @objc dynamic open var knownRepresentedElement: any ObjectiveC.NSObject & SwiftUICore.PlatformAccessibilityElementProtocol {
    @_spi(ForSwiftUIOnly) @objc get
  }
  @_spi(ForSwiftUIOnly) @objc dynamic open var rotorOwnerElement: any ObjectiveC.NSObject & SwiftUICore.PlatformAccessibilityElementProtocol {
    @_spi(ForSwiftUIOnly) @objc get
  }
}
package enum AccessibilityLayoutRole {
  case stack
  case grid
  package static func == (a: SwiftUICore.AccessibilityLayoutRole, b: SwiftUICore.AccessibilityLayoutRole) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Locale {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var bcp47LanguageCode: Swift.String? {
    get
  }
  #else
  package var bcp47LanguageCode: Swift.String? {
    get
  }
  #endif
}
extension SwiftUICore.AccessibilityCore {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func description(for symbolName: Swift.String, in environment: SwiftUICore.EnvironmentValues) -> Swift.String?
  #else
  package static func description(for symbolName: Swift.String, in environment: SwiftUICore.EnvironmentValues) -> Swift.String?
  #endif
}
extension _Concurrency.MainActor {
  package static func assumeIsolatedIfLinkedOnOrAfterV6<T>(_ operation: @_Concurrency.MainActor () throws -> T, file: Swift.StaticString = #fileID, line: Swift.UInt = #line) rethrows -> T
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  #else
  public init(_ name: Swift.String, bundle: Foundation.Bundle? = nil)
  #endif
  public static var _mainNamedBundle: Foundation.Bundle?
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public init(_ resource: DeveloperToolsSupport.ColorResource)
}
package struct ResolvableStringResolutionContext {
  package var referenceDate: Foundation.Date?
  package var environment: SwiftUICore.EnvironmentValues
  package var maximumWidth: CoreFoundation.CGFloat?
  package var date: Foundation.Date {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(referenceDate: Foundation.Date? = nil, environment: SwiftUICore.EnvironmentValues, maximumWidth: CoreFoundation.CGFloat? = nil)
  #else
  package init(referenceDate: Foundation.Date? = nil, environment: SwiftUICore.EnvironmentValues, maximumWidth: CoreFoundation.CGFloat? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(environment: SwiftUICore.EnvironmentValues, maximumWidth: CoreFoundation.CGFloat? = nil)
  #else
  package init(environment: SwiftUICore.EnvironmentValues, maximumWidth: CoreFoundation.CGFloat? = nil)
  #endif
}
package protocol ResolvableStringAttributeFamily {
  static var attribute: Foundation.NSAttributedString.Key { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #else
  static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #endif
}
package protocol ResolvableStringAttributeRepresentation {
  associatedtype Family : SwiftUICore.ResolvableStringAttributeFamily
  static func encode(_ resolvable: Self, to encoder: any Swift.Encoder) throws
  func representation(for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation
}
package protocol ResolvableStringAttribute : SwiftUICore.ResolvableStringAttributeRepresentation, SwiftUICore.TimelineSchedule where Self.Entries == Swift.AnySequence<Foundation.Date> {
  associatedtype Schedule : SwiftUICore.TimelineSchedule
  #if compiler(>=5.3) && $NoncopyableGenerics
  func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #else
  func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  var schedule: Self.Schedule? { get }
  #else
  var schedule: Self.Schedule? { get }
  #endif
  var requiredFeatures: SwiftUICore.Text.ResolvedProperties.Features { get }
  mutating func makePlatformAttributes(resolver: inout SwiftUICore.PlatformAttributeResolver)
  func sizeVariant(_ sizeVariant: SwiftUICore.TextSizeVariant) -> (resolvable: Self, exact: Swift.Bool)
}
extension SwiftUICore.ResolvableStringAttributeRepresentation where Self : SwiftUICore.ResolvableStringAttributeFamily {
  package typealias Family = Self
}
extension SwiftUICore.ResolvableStringAttributeRepresentation where Self : Swift.Decodable, Self : Swift.Encodable, Self : SwiftUICore.ResolvableStringAttributeFamily {
  package static func encode(_ resolvable: Self, to encoder: any Swift.Encoder) throws
}
extension SwiftUICore.ResolvableStringAttribute where Self : Swift.Decodable, Self : Swift.Encodable, Self : SwiftUICore.ResolvableStringAttributeFamily {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #else
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #endif
}
extension SwiftUICore.ResolvableStringAttributeRepresentation {
  package func representation(for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation
}
extension SwiftUICore.ResolvableStringAttributeRepresentation {
  package static var attribute: Foundation.NSAttributedString.Key {
    get
  }
}
extension SwiftUICore.ResolvableStringAttribute {
  package var requiredFeatures: SwiftUICore.Text.ResolvedProperties.Features {
    get
  }
}
extension SwiftUICore.ResolvableStringAttribute {
  package mutating func makePlatformAttributes(resolver: inout SwiftUICore.PlatformAttributeResolver)
}
extension SwiftUICore.ResolvableStringAttribute {
  package func sizeVariant(_ sizeVariant: SwiftUICore.TextSizeVariant) -> (resolvable: Self, exact: Swift.Bool)
}
extension SwiftUICore.ResolvableStringAttribute {
  package var isDynamic: Swift.Bool {
    get
  }
  package func entries(from startDate: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> Swift.AnySequence<Foundation.Date>
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvableStringReferenceDate: Foundation.Date? {
    get
    set
  }
  #else
  package var resolvableStringReferenceDate: Foundation.Date? {
    get
    set
  }
  #endif
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var stringResolutionDate: Foundation.Date? {
    get
    set
  }
  #else
  package var stringResolutionDate: Foundation.Date? {
    get
    set
  }
  #endif
}
package protocol ResolvedTextContainer {
  var style: SwiftUICore.Text.Style { get set }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var idiom: SwiftUICore.AnyInterfaceIdiom? { get }
  #else
  var idiom: SwiftUICore.AnyInterfaceIdiom? { get }
  #endif
  mutating func append<S>(_ string: S, in env: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, isUniqueSizeVariant: Swift.Bool) where S : Swift.StringProtocol
  mutating func append(_ attributedString: Foundation.NSAttributedString, in env: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, isUniqueSizeVariant: Swift.Bool)
  mutating func append(_ image: SwiftUICore.Image.Resolved, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions)
  mutating func append(_ namedImage: SwiftUICore.Image.NamedResolved, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions)
  #if compiler(>=5.3) && $NoncopyableGenerics
  mutating func append<R>(resolvable: R, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, transition: SwiftUICore.ContentTransition?) where R : SwiftUICore.ResolvableStringAttribute
  #else
  mutating func append<R>(resolvable: R, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, transition: SwiftUICore.ContentTransition?) where R : SwiftUICore.ResolvableStringAttribute
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  package struct Resolved : SwiftUICore.ResolvedTextContainer {
    package var style: SwiftUICore.Text.Style
    package var attributedString: Foundation.NSMutableAttributedString?
    package var includeDefaultAttributes: Swift.Bool
    package var idiom: SwiftUICore.AnyInterfaceIdiom?
    package var properties: SwiftUICore.Text.ResolvedProperties
    package init()
    package mutating func append<S>(_ string: S, in env: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, isUniqueSizeVariant: Swift.Bool) where S : Swift.StringProtocol
    package mutating func append(_ attributedString: Foundation.NSAttributedString, in env: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, isUniqueSizeVariant: Swift.Bool)
    package mutating func append(_ image: SwiftUICore.Image.Resolved, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions)
    package mutating func append(_ namedImage: SwiftUICore.Image.NamedResolved, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package mutating func append<R>(resolvable: R, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, transition: SwiftUICore.ContentTransition?) where R : SwiftUICore.ResolvableStringAttribute
    #else
    package mutating func append<R>(resolvable: R, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, transition: SwiftUICore.ContentTransition?) where R : SwiftUICore.ResolvableStringAttribute
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func nsAttributes(content: (() -> Swift.String)?, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, properties: inout SwiftUICore.Text.ResolvedProperties) -> [Foundation.NSAttributedString.Key : Any]
    #else
    package func nsAttributes(content: (() -> Swift.String)?, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, properties: inout SwiftUICore.Text.ResolvedProperties) -> [Foundation.NSAttributedString.Key : Any]
    #endif
  }
  package struct Style {
    package var accessibility: SwiftUICore.AccessibilityTextAttributes?
    package var clearedFontModifiers: Swift.Set<Swift.ObjectIdentifier>
    package enum LineStyle {
      case implicit
      case explicit(SwiftUICore.Text.LineStyle)
      case `default`
      #if compiler(>=5.3) && $NoncopyableGenerics
      package func resolve(in environment: SwiftUICore.EnvironmentValues, fallbackStyle: @autoclosure () -> SwiftUICore.Text.LineStyle?) -> SwiftUICore.Text.LineStyle.Resolved?
      #else
      package func resolve(in environment: SwiftUICore.EnvironmentValues, fallbackStyle: @autoclosure () -> SwiftUICore.Text.LineStyle?) -> SwiftUICore.Text.LineStyle.Resolved?
      #endif
    }
    package enum TextStyleColor {
      case implicit
      case explicit(SwiftUICore.AnyShapeStyle)
      case `default`
      case foregroundKeyColor(base: SwiftUICore.AnyShapeStyle)
      #if compiler(>=5.3) && $NoncopyableGenerics
      package func resolve(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, properties: inout SwiftUICore.Text.ResolvedProperties, includeDefaultAttributes: Swift.Bool = true) -> SwiftUICore.Color.Resolved?
      #else
      package func resolve(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions, properties: inout SwiftUICore.Text.ResolvedProperties, includeDefaultAttributes: Swift.Bool = true) -> SwiftUICore.Color.Resolved?
      #endif
    }
    package enum TextStyleFont {
      case implicit
      case explicit(SwiftUICore.Font)
      case `default`
      #if compiler(>=5.3) && $NoncopyableGenerics
      package func resolve(in environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true) -> SwiftUICore.Font?
      #else
      package func resolve(in environment: SwiftUICore.EnvironmentValues, includeDefaultAttributes: Swift.Bool = true) -> SwiftUICore.Font?
      #endif
    }
    package func fontTraits(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Font.ResolvedTraits
    package mutating func addFontModifier<M>(_ modifier: M) where M : SwiftUICore.FontModifier
    package mutating func addFontModifier<M>(type: M.Type) where M : SwiftUICore.StaticFontModifier
    package mutating func removeFontModifier<M>(ofType _: M.Type) where M : SwiftUICore.FontModifier
    package mutating func removeFontModifier<M>(ofType _: M.Type) where M : SwiftUICore.StaticFontModifier
  }
  package struct ResolvedProperties {
    package var insets: SwiftUICore.EdgeInsets
    package var features: SwiftUICore.Text.ResolvedProperties.Features
    package var styles: [SwiftUICore._ShapeStyle_Pack.Style]
    package var transitions: [SwiftUICore.Text.ResolvedProperties.Transition]
    package var suffix: SwiftUICore.ResolvedTextSuffix
    package struct CustomAttachments {
      package var characterIndices: [Swift.Int]
      package init(characterIndices: [Swift.Int] = [])
      package var isEmpty: Swift.Bool {
        get
      }
    }
    package var customAttachments: SwiftUICore.Text.ResolvedProperties.CustomAttachments
    package init()
    package mutating func registerCustomAttachment(at offset: Swift.Int)
    package struct Features : Swift.OptionSet {
      package let rawValue: Swift.UInt16
      package init(rawValue: Swift.UInt16)
      package static let keyColor: SwiftUICore.Text.ResolvedProperties.Features
      package static let attachments: SwiftUICore.Text.ResolvedProperties.Features
      package static let sensitive: SwiftUICore.Text.ResolvedProperties.Features
      package static let customRenderer: SwiftUICore.Text.ResolvedProperties.Features
      package static let useTextLayoutManager: SwiftUICore.Text.ResolvedProperties.Features
      package static let useTextSuffix: SwiftUICore.Text.ResolvedProperties.Features
      package static let produceTextLayout: SwiftUICore.Text.ResolvedProperties.Features
      package static let checkInterpolationStrategy: SwiftUICore.Text.ResolvedProperties.Features
      package static let isUniqueSizeVariant: SwiftUICore.Text.ResolvedProperties.Features
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      package typealias ArrayLiteralElement = SwiftUICore.Text.ResolvedProperties.Features
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      package typealias Element = SwiftUICore.Text.ResolvedProperties.Features
      @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
      package typealias RawValue = Swift.UInt16
    }
    package struct Transition : Swift.Equatable {
      package var transition: SwiftUICore.ContentTransition
      package init(transition: SwiftUICore.ContentTransition)
      package static func == (a: SwiftUICore.Text.ResolvedProperties.Transition, b: SwiftUICore.Text.ResolvedProperties.Transition) -> Swift.Bool
    }
    package struct Paragraph {
      package var compositionLanguage: UIFoundation_Private.NSCompositionLanguage
    }
    package var paragraph: SwiftUICore.Text.ResolvedProperties.Paragraph
    package mutating func addColor(_ c: SwiftUICore.Color.Resolved)
    package mutating func addAttachment()
    package mutating func addSensitive()
    package mutating func addCustomStyle(_ style: SwiftUICore._ShapeStyle_Pack.Style) -> SwiftUICore.Color.Resolved
  }
}
extension SwiftUICore.Text.ResolvedProperties.Paragraph {
  package mutating func style(environment: SwiftUICore.EnvironmentValues) -> UIFoundation.NSParagraphStyle
  package mutating func markParagraphBoundary(_ paragraphBoundary: Swift.Bool)
}
extension SwiftUICore.EnvironmentValues {
  package var disableLinkColor: Swift.Bool {
    get
    set
  }
}
package protocol ResolvedTextProvider {
  static func defaultLinkColor(for environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color
  static func updateImageTextAttachment(in: UIFoundation.NSTextAttachment, image: SwiftUICore.Image.Resolved)
  static func updateWidgetTextAttachment(_ for: UIFoundation.NSTextAttachment, namedImage: SwiftUICore.Image.NamedResolved)
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var resolvedTextProvider: (any SwiftUICore.ResolvedTextProvider.Type)? {
    get
    set
  }
  #else
  package var resolvedTextProvider: (any SwiftUICore.ResolvedTextProvider.Type)? {
    get
    set
  }
  #endif
}
package struct ResolvableTimer {
  package static let defaultUnits: Foundation.NSCalendar.Unit
  package var interval: Foundation.DateInterval
  package var pause: Foundation.TimeInterval?
  package var countdown: Swift.Bool
  @SwiftUICore.CodableRawRepresentable package var units: Foundation.NSCalendar.Unit {
    get
    set
    _modify
  }
  package let calendar: Foundation.Calendar
  package let locale: Foundation.Locale
  package let timeZone: Foundation.TimeZone
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(interval: Foundation.DateInterval, pause: Foundation.TimeInterval? = nil, countdown: Swift.Bool, units: Foundation.NSCalendar.Unit? = nil, in environment: SwiftUICore.EnvironmentValues)
  #else
  package init(interval: Foundation.DateInterval, pause: Foundation.TimeInterval? = nil, countdown: Swift.Bool, units: Foundation.NSCalendar.Unit? = nil, in environment: SwiftUICore.EnvironmentValues)
  #endif
  package var format: SwiftUICore.SystemFormatStyle.Timer {
    get
  }
  package var source: SwiftUICore.TimeDataSource<Foundation.Date>.DateStorage {
    get
  }
}
extension SwiftUICore.ResolvableTimer : SwiftUICore.ConfigurationBasedResolvableStringAttributeRepresentation {
  package static var attribute: Foundation.NSAttributedString.Key
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #else
  package static func decode(from decoder: any Swift.Decoder) throws -> (any SwiftUICore.ResolvableStringAttribute)?
  #endif
  package var invalidationConfiguration: SwiftUICore.ResolvableAttributeConfiguration {
    get
  }
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.ResolvableTimer : Swift.Equatable {
  package static func == (a: SwiftUICore.ResolvableTimer, b: SwiftUICore.ResolvableTimer) -> Swift.Bool
}
extension SwiftUICore.ResolvableTimer : Swift.CustomDebugStringConvertible {
  package var debugDescription: Swift.String {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TimeDataSource<Value> {
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
package protocol TimeDataSourceStorage<Value> : Swift.Decodable, Swift.Encodable, Swift.Hashable, Swift.Sendable {
  associatedtype Value
  func value(for date: Foundation.Date) -> Self.Value
  func date(for value: Self.Value) -> Foundation.Date
  func round(_ value: Self.Value, _ rule: Swift.FloatingPointRoundingRule, toMultipleOf multiple: Swift.Double) -> Self.Value
  func convergesToZero(_ value: Self.Value) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  var end: Self.Value? { get }
  #else
  var end: Self.Value? { get }
  #endif
}
#else
package protocol TimeDataSourceStorage : Swift.Decodable, Swift.Encodable, Swift.Hashable, Swift.Sendable {
  associatedtype Value
  func value(for date: Foundation.Date) -> Self.Value
  func date(for value: Self.Value) -> Foundation.Date
  func round(_ value: Self.Value, _ rule: Swift.FloatingPointRoundingRule, toMultipleOf multiple: Swift.Double) -> Self.Value
  func convergesToZero(_ value: Self.Value) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  var end: Self.Value? { get }
  #else
  var end: Self.Value? { get }
  #endif
}
#endif
extension SwiftUICore.TimeDataSourceStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func withValue(for date: Foundation.Date, call closure: (Self.Value) -> Self.Value?) -> Foundation.Date?
  #else
  package func withValue(for date: Foundation.Date, call closure: (Self.Value) -> Self.Value?) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var end: Self.Value? {
    get
  }
  #else
  package var end: Self.Value? {
    get
  }
  #endif
}
extension SwiftUICore.TimeDataSource where Value == Foundation.Date {
  package enum DateStorage : SwiftUICore.TimeDataSourceStorage {
    package typealias Value = Foundation.Date
    case identity
    case identityWithPause(pauseDate: Foundation.Date)
    package func value(for date: Foundation.Date) -> SwiftUICore.TimeDataSource<Value>.DateStorage.Value
    package func date(for value: SwiftUICore.TimeDataSource<Value>.DateStorage.Value) -> Foundation.Date
    package func round(_ value: SwiftUICore.TimeDataSource<Value>.DateStorage.Value, _ rule: Swift.FloatingPointRoundingRule, toMultipleOf multiple: Swift.Double) -> SwiftUICore.TimeDataSource<Value>.DateStorage.Value
    package func convergesToZero(_ value: SwiftUICore.TimeDataSource<Value>.DateStorage.Value) -> Swift.Bool
    #if compiler(>=5.3) && $NoncopyableGenerics
    package var end: SwiftUICore.TimeDataSource<Foundation.Date>.DateStorage.Value? {
      get
    }
    #else
    package var end: SwiftUICore.TimeDataSource<Foundation.Date>.DateStorage.Value? {
      get
    }
    #endif
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.TimeDataSource<Value>.DateStorage, b: SwiftUICore.TimeDataSource<Value>.DateStorage) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
}
extension SwiftUICore.TimeDataSource where Value == Swift.Duration {
  package enum DurationStorage : SwiftUICore.TimeDataSourceStorage {
    package typealias Value = Swift.Duration
    case durationOffset(date: Foundation.Date)
    package func value(for date: Foundation.Date) -> SwiftUICore.TimeDataSource<Value>.DurationStorage.Value
    package func date(for value: SwiftUICore.TimeDataSource<Value>.DurationStorage.Value) -> Foundation.Date
    package func round(_ value: SwiftUICore.TimeDataSource<Value>.DurationStorage.Value, _ rule: Swift.FloatingPointRoundingRule, toMultipleOf multiple: Swift.Double) -> SwiftUICore.TimeDataSource<Value>.DurationStorage.Value
    package func convergesToZero(_ value: SwiftUICore.TimeDataSource<Value>.DurationStorage.Value) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.TimeDataSource<Value>.DurationStorage, b: SwiftUICore.TimeDataSource<Value>.DurationStorage) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
}
extension SwiftUICore.TimeDataSource where Value == Swift.Range<Foundation.Date> {
  package enum DateRangeStorage : SwiftUICore.TimeDataSourceStorage {
    package typealias Value = Swift.Range<Foundation.Date>
    case dateRangeStartingAt(date: Foundation.Date)
    case dateRangeEndingAt(date: Foundation.Date)
    package func value(for date: Foundation.Date) -> SwiftUICore.TimeDataSource<Value>.DateRangeStorage.Value
    package func date(for value: SwiftUICore.TimeDataSource<Value>.DateRangeStorage.Value) -> Foundation.Date
    package func round(_ value: SwiftUICore.TimeDataSource<Value>.DateRangeStorage.Value, _ rule: Swift.FloatingPointRoundingRule, toMultipleOf multiple: Swift.Double) -> SwiftUICore.TimeDataSource<Value>.DateRangeStorage.Value
    package func convergesToZero(_ value: SwiftUICore.TimeDataSource<Value>.DateRangeStorage.Value) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.TimeDataSource<Value>.DateRangeStorage, b: SwiftUICore.TimeDataSource<Value>.DateRangeStorage) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.TimeDataSource : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.TimeDataSource {
  public static var currentDate: SwiftUICore.TimeDataSource<Foundation.Date> {
    get
  }
  public static func durationOffset(to date: Foundation.Date) -> SwiftUICore.TimeDataSource<Swift.Duration>
  public static func dateRange(startingAt date: Foundation.Date) -> SwiftUICore.TimeDataSource<Swift.Range<Foundation.Date>>
  public static func dateRange(endingAt date: Foundation.Date) -> SwiftUICore.TimeDataSource<Swift.Range<Foundation.Date>>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public enum SystemFormatStyle : Swift.Sendable {
}
extension SwiftUICore.Text {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public init<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Foundation.AttributedString
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_disfavoredOverload public init<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Swift.String
}
extension SwiftUICore.LocalizedStringKey.StringInterpolation {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public mutating func appendInterpolation<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Foundation.AttributedString
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_disfavoredOverload public mutating func appendInterpolation<V, F>(_ source: SwiftUICore.TimeDataSource<V>, format: F) where V == F.FormatInput, F : Foundation.DiscreteFormatStyle, F.FormatOutput == Swift.String
}
package protocol AttributedStringConvertible {
  var attributedString: Foundation.AttributedString { get }
}
extension Foundation.AttributedString : SwiftUICore.AttributedStringConvertible {
  package var attributedString: Foundation.AttributedString {
    get
  }
}
extension Swift.String : SwiftUICore.AttributedStringConvertible {
  package var attributedString: Foundation.AttributedString {
    get
  }
}
extension Foundation.Bundle {
  package static let systemFormatStyle: Foundation.Bundle
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct ContainerRelativeShape : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @inlinable nonisolated public init() {}
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.ContainerRelativeShape, SwiftUICore.ForegroundStyle>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape where Self == SwiftUICore.ContainerRelativeShape {
  @_alwaysEmitIntoClient public static var containerRelative: SwiftUICore.ContainerRelativeShape {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContainerRelativeShape : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUICore.ContainerRelativeShape._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUICore.ContainerRelativeShape._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUICore.ContainerRelativeShape._Inset
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI22ContainerRelativeShapeV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle {
  public func _fillingContainerShape() -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func containerShape<T>(_ shape: T) -> some SwiftUICore.View where T : SwiftUICore.InsettableShape {
        modifier(_ContainerShapeModifier(shape: shape))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _containerShape<T>(_ shape: T) -> some SwiftUICore.View where T : SwiftUICore.InsettableShape
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContainerShapeModifier<Shape> : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Shape : SwiftUICore.InsettableShape {
  @_Concurrency.MainActor @preconcurrency public var shape: Shape
  @inlinable @_Concurrency.MainActor @preconcurrency public init(shape: Shape) { self.shape = shape }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ContainerShapeModifier<Shape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ContainerShapeModifier : Swift.Sendable {
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol KeyframeTrackContent<Value> {
  associatedtype Value : SwiftUICore.Animatable = Self.Body.Value
  associatedtype Body : SwiftUICore.KeyframeTrackContent
  @SwiftUICore.KeyframeTrackContentBuilder<Self.Value> var body: Self.Body { get }
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Self.Value>)
}
#else
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol KeyframeTrackContent {
  associatedtype Value : SwiftUICore.Animatable = Self.Body.Value
  associatedtype Body : SwiftUICore.KeyframeTrackContent
  @SwiftUICore.KeyframeTrackContentBuilder<Self.Value> var body: Self.Body { get }
  func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Self.Value>)
}
#endif
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.KeyframeTrackContent where Self.Value == Self.Body.Value {
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Self.Value>)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _ResolvedKeyframeTrackContent<Value> where Value : SwiftUICore.Animatable {
}
@available(*, unavailable)
extension SwiftUICore._ResolvedKeyframeTrackContent : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct CubicKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ to: Value, duration: Foundation.TimeInterval, startVelocity: Value? = nil, endVelocity: Value? = nil)
  #else
  public init(_ to: Value, duration: Foundation.TimeInterval, startVelocity: Value? = nil, endVelocity: Value? = nil)
  #endif
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.CubicKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.CubicKeyframe : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SpringKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ to: Value, duration: Foundation.TimeInterval? = nil, spring: SwiftUICore.Spring = Spring(), startVelocity: Value? = nil)
  #else
  public init(_ to: Value, duration: Foundation.TimeInterval? = nil, spring: SwiftUICore.Spring = Spring(), startVelocity: Value? = nil)
  #endif
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.SpringKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.SpringKeyframe : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LinearKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  public init(_ to: Value, duration: Foundation.TimeInterval, timingCurve: SwiftUICore.UnitCurve = .linear)
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.LinearKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.LinearKeyframe : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct MoveKeyframe<Value> : SwiftUICore.KeyframeTrackContent where Value : SwiftUICore.Animatable {
  public init(_ to: Value)
  public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<Value>)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.MoveKeyframe<Value>
}
@available(*, unavailable)
extension SwiftUICore.MoveKeyframe : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct PhaseAnimator<Phase, Content> : SwiftUICore.View where Phase : Swift.Equatable, Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ phases: some Sequence<Phase>, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (Phase) -> Content, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default })
  #else
  nonisolated public init(_ phases: some Sequence<Phase>, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (Phase) -> Content, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default })
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ phases: some Sequence<Phase>, @SwiftUICore.ViewBuilder content: @escaping (Phase) -> Content, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default })
  #else
  nonisolated public init(_ phases: some Sequence<Phase>, @SwiftUICore.ViewBuilder content: @escaping (Phase) -> Content, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default })
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13PhaseAnimatorV4bodyQrvp", 0) __<Phase, Content>
}
@available(*, unavailable)
extension SwiftUICore.PhaseAnimator : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func phaseAnimator<Phase>(_ phases: some Sequence<Phase>, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.PlaceholderContentView<Self>, Phase) -> some View, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default }) -> some SwiftUICore.View where Phase : Swift.Equatable
  
  #else
  nonisolated public func phaseAnimator<Phase>(_ phases: some Sequence<Phase>, trigger: some Equatable, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.PlaceholderContentView<Self>, Phase) -> some View, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default }) -> some SwiftUICore.View where Phase : Swift.Equatable
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func phaseAnimator<Phase>(_ phases: some Sequence<Phase>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.PlaceholderContentView<Self>, Phase) -> some View, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default }) -> some SwiftUICore.View where Phase : Swift.Equatable
  
  #else
  nonisolated public func phaseAnimator<Phase>(_ phases: some Sequence<Phase>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.PlaceholderContentView<Self>, Phase) -> some View, animation: @escaping (Phase) -> SwiftUICore.Animation? = { _ in .default }) -> some SwiftUICore.View where Phase : Swift.Equatable
  
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _RendererConfiguration {
  public enum Renderer {
    case `default`
    indirect case rasterized(_: SwiftUICore._RendererConfiguration.RasterizationOptions = .init())
  }
  public var renderer: SwiftUICore._RendererConfiguration.Renderer
  public var minFrameInterval: Swift.Double
  public init(renderer: SwiftUICore._RendererConfiguration.Renderer = .default)
  public static func rasterized(_ options: SwiftUICore._RendererConfiguration.RasterizationOptions = .init()) -> SwiftUICore._RendererConfiguration
  public struct RasterizationOptions {
    public var colorMode: SwiftUICore.ColorRenderingMode
    public var rbColorMode: Swift.Int32?
    public var rendersAsynchronously: Swift.Bool
    public var isOpaque: Swift.Bool
    public var drawsPlatformViews: Swift.Bool
    public var prefersDisplayCompositing: Swift.Bool
    public var maxDrawableCount: Swift.Int
    public init()
  }
}
@available(*, unavailable)
extension SwiftUICore._RendererConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._RendererConfiguration.Renderer : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._RendererConfiguration.RasterizationOptions : Swift.Sendable {
}
package protocol LayoutGesture : SwiftUICore.PrimitiveDebuggableGesture, SwiftUICore.PrimitiveGesture where Self.Value == () {
  var responder: SwiftUICore.MultiViewResponder { get }
  func updateEventBindings(_ events: inout [SwiftUICore.EventID : any SwiftUICore.EventType], proxy: SwiftUICore.LayoutGestureChildProxy)
}
extension SwiftUICore.LayoutGesture {
  package static func _makeGesture(gesture: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  package func updateEventBindings(_ events: inout [SwiftUICore.EventID : any SwiftUICore.EventType], proxy: SwiftUICore.LayoutGestureChildProxy)
}
package struct DefaultLayoutGesture : SwiftUICore.LayoutGesture {
  package var responder: SwiftUICore.MultiViewResponder
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = ()
}
package struct LayoutGestureChildProxy : Swift.RandomAccessCollection {
  package struct Child {
    package func binds(_ binding: SwiftUICore.EventBinding) -> Swift.Bool
    package func containsGlobalLocation(_ p: SwiftUICore.PlatformPoint) -> Swift.Bool
  }
  package var startIndex: Swift.Int {
    get
  }
  package var endIndex: Swift.Int {
    get
  }
  package subscript(index: Swift.Int) -> SwiftUICore.LayoutGestureChildProxy.Child {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func bindChild(index: Swift.Int, event: any SwiftUICore.EventType, id: SwiftUICore.EventID) -> (from: SwiftUICore.EventBinding?, to: SwiftUICore.EventBinding?)?
  #else
  package func bindChild(index: Swift.Int, event: any SwiftUICore.EventType, id: SwiftUICore.EventID) -> (from: SwiftUICore.EventBinding?, to: SwiftUICore.EventBinding?)?
  #endif
  package typealias Element = SwiftUICore.LayoutGestureChildProxy.Child
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<Swift.Int>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.LayoutGestureChildProxy>
  package typealias SubSequence = Swift.Slice<SwiftUICore.LayoutGestureChildProxy>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct KeyframeTimeline<Value> {
  package var initialValue: Value
  package var content: SwiftUICore._ResolvedKeyframes<Value>
  public init(initialValue: Value, @SwiftUICore.KeyframesBuilder<Value> content: () -> some Keyframes<Value>)
  package init(initialValue: Value, initialVelocity: Value, @SwiftUICore.KeyframesBuilder<Value> content: () -> some Keyframes<Value>)
  public var duration: Foundation.TimeInterval {
    get
  }
  public func value(time: Swift.Double) -> Value
  public func value(progress: Swift.Double) -> Value
  package func velocity(time: Swift.Double) -> Value
  package func update(value: inout Value, time: Swift.Double)
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTimeline : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 16.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TapGesture : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture {
  public var count: Swift.Int
  public init(count: Swift.Int = 1)
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUICore.TapGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  @available(iOS 13.0, tvOS 16.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 16.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Swift.Void
}
@available(*, unavailable)
extension SwiftUICore.TapGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 16.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func onTapGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
package let tapDurationThreshold: CoreFoundation.CGFloat
package struct SingleTapGesture<BaseEvent> : SwiftUICore.Gesture where BaseEvent : SwiftUICore.TappableEventType {
  package init()
  package var body: some SwiftUICore.Gesture<BaseEvent> {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16SingleTapGestureV4bodyQrvp", 0) __<BaseEvent>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = BaseEvent
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_functionBuilder public struct KeyframeTrackContentBuilder<Value> where Value : SwiftUICore.Animatable {
  public static func buildExpression<K>(_ expression: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  public static func buildArray(_ components: [some KeyframeTrackContent<Value>]) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildEither<First, Second>(first component: First) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildEither<First, Second>(second component: Second) -> SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second> where Value == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value
  public static func buildPartialBlock<K>(first: K) -> K where Value == K.Value, K : SwiftUICore.KeyframeTrackContent
  public static func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some SwiftUICore.KeyframeTrackContent<Value>
  
  public static func buildBlock() -> some SwiftUICore.KeyframeTrackContent<Value>
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.KeyframeTrackContentBuilder {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct Conditional<ConditionalValue, First, Second> : SwiftUICore.KeyframeTrackContent where ConditionalValue == First.Value, First : SwiftUICore.KeyframeTrackContent, Second : SwiftUICore.KeyframeTrackContent, First.Value == Second.Value {
    public func _resolve(into resolved: inout SwiftUICore._ResolvedKeyframeTrackContent<ConditionalValue>)
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = SwiftUICore.KeyframeTrackContentBuilder<Value>.Conditional<ConditionalValue, First, Second>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Value = ConditionalValue
  }
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTrackContentBuilder : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore.KeyframeTrackContentBuilder.Conditional : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ParagraphTypesetting : Swift.Sendable, Swift.Equatable {
  @_spi(Private) public static let automatic: SwiftUICore.ParagraphTypesetting
  @_spi(Private) public static let balanced: SwiftUICore.ParagraphTypesetting
  @_spi(Private) public static func == (a: SwiftUICore.ParagraphTypesetting, b: SwiftUICore.ParagraphTypesetting) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func paragraphTypesetting(_ paragraphTypesetting: SwiftUICore.ParagraphTypesetting, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
package struct ResolvableProgress {
  package var interval: Swift.ClosedRange<Foundation.Date>
  package var countdown: Swift.Bool
}
extension SwiftUICore.ResolvableProgress : SwiftUICore.ConfigurationBasedResolvableStringAttribute {
  package static var attribute: Foundation.NSAttributedString.Key
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #else
  package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #endif
  package var invalidationConfiguration: SwiftUICore.ResolvableAttributeConfiguration {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias Entries = Swift.AnySequence<Foundation.Date>
  package typealias Schedule = SwiftUICore.ResolvableAttributeConfiguration.Schedule
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.ResolvableProgress : Swift.Equatable {
  package static func == (a: SwiftUICore.ResolvableProgress, b: SwiftUICore.ResolvableProgress) -> Swift.Bool
}
extension SwiftUICore.ResolvableProgress : Swift.CustomDebugStringConvertible {
  package var debugDescription: Swift.String {
    get
  }
}
package struct ResolvableDateInterval {
  package var interval: Foundation.DateInterval
  package let calendar: Foundation.Calendar
  package let locale: Foundation.Locale
  package let timeZone: Foundation.TimeZone
  package init(_ interval: Foundation.DateInterval, in environment: SwiftUICore.EnvironmentValues)
}
extension SwiftUICore.ResolvableDateInterval : SwiftUICore.ResolvableStringAttribute, SwiftUICore.ResolvableStringAttributeFamily, Swift.Codable {
  package static var attribute: Foundation.NSAttributedString.Key
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #else
  package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var schedule: SwiftUICore.ExplicitTimelineSchedule<Swift.Array<Foundation.Date>>? {
    get
  }
  #else
  package var schedule: SwiftUICore.ExplicitTimelineSchedule<Swift.Array<Foundation.Date>>? {
    get
  }
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias Entries = Swift.AnySequence<Foundation.Date>
  package typealias Schedule = SwiftUICore.ExplicitTimelineSchedule<Swift.Array<Foundation.Date>>
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.ResolvableDateInterval : Swift.Equatable {
  package static func == (a: SwiftUICore.ResolvableDateInterval, b: SwiftUICore.ResolvableDateInterval) -> Swift.Bool
}
package struct ResolvableCurrentDate {
  package enum DateFormat : Swift.Equatable, Swift.Codable {
    case format(Swift.String)
    case template(Swift.String)
    package static func == (a: SwiftUICore.ResolvableCurrentDate.DateFormat, b: SwiftUICore.ResolvableCurrentDate.DateFormat) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package init(from decoder: any Swift.Decoder) throws
  }
  package let dateFormat: SwiftUICore.ResolvableCurrentDate.DateFormat
  package let calendar: Foundation.Calendar
  package let locale: Foundation.Locale
  package let timeZone: Foundation.TimeZone
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(dateFormat: SwiftUICore.ResolvableCurrentDate.DateFormat, timeZone: Foundation.TimeZone?, in environment: SwiftUICore.EnvironmentValues)
  #else
  package init(dateFormat: SwiftUICore.ResolvableCurrentDate.DateFormat, timeZone: Foundation.TimeZone?, in environment: SwiftUICore.EnvironmentValues)
  #endif
}
extension SwiftUICore.ResolvableCurrentDate {
  package static var attribute: Foundation.NSAttributedString.Key
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var provider: SwiftUI_SPI.BaseDateProvider? {
    get
  }
  #else
  package var provider: SwiftUI_SPI.BaseDateProvider? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #else
  package func resolve(in context: SwiftUICore.ResolvableStringResolutionContext) -> Foundation.AttributedString?
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias Entries = Swift.AnySequence<Foundation.Date>
  package typealias Schedule = SwiftUICore.ResolvableAttributeConfiguration.Schedule
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.ResolvableCurrentDate : Swift.Equatable {
  package static func == (a: SwiftUICore.ResolvableCurrentDate, b: SwiftUICore.ResolvableCurrentDate) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func layoutPriority(_ value: Swift.Double) -> some SwiftUICore.View {
        return _trait(LayoutPriorityTraitKey.self, value)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct LayoutPriorityTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable package static var defaultValue: Swift.Double {
    get { 0.0 }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Value = Swift.Double
}
@available(*, unavailable)
extension SwiftUICore.LayoutPriorityTraitKey : Swift.Sendable {
}
@_Concurrency.MainActor @preconcurrency package struct LayoutPriorityLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency package init(priority: Swift.Double)
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  @_Concurrency.MainActor @preconcurrency package func layoutPriority(child: SwiftUICore.LayoutProxy) -> Swift.Double
  @_Concurrency.MainActor @preconcurrency package func ignoresAutomaticPadding(child: SwiftUICore.LayoutProxy) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency package var priority: Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
package protocol ImageAccessibilityProvider {
  associatedtype Body : SwiftUICore.View
  static func makeView(image: SwiftUICore.Image, resolved: SwiftUICore.Image.Resolved) -> Self.Body
}
extension SwiftUICore._GraphInputs {
  package var imageAccessibilityProvider: (any SwiftUICore.ImageAccessibilityProvider.Type) {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var imageAccessibilityProvider: (any SwiftUICore.ImageAccessibilityProvider.Type) {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct AnyView : SwiftUICore.View, SwiftUICore.PrimitiveView {
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUICore.AnyViewStorageBase
  nonisolated public init<V>(_ view: V) where V : SwiftUICore.View
  @_alwaysEmitIntoClient nonisolated public init<V>(erasing view: V) where V : SwiftUICore.View {
        self.init(view)
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init?(_fromValue value: Any)
  #else
  nonisolated public init?(_fromValue value: Any)
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.AnyView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.AnyView>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @_Concurrency.MainActor @preconcurrency package func visitContent<V>(_ visitor: inout V) where V : SwiftUICore.ViewVisitor
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.AnyView : Swift.Sendable {
}
extension SwiftUICore.AnyView : SwiftUICore.DynamicView {
  @_Concurrency.MainActor @preconcurrency package static var canTransition: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func childInfo(metadata: Swift.Void) -> (any Any.Type, SwiftUICore.UniqueID?)
  #else
  @_Concurrency.MainActor @preconcurrency package func childInfo(metadata: Swift.Void) -> (any Any.Type, SwiftUICore.UniqueID?)
  #endif
  @_Concurrency.MainActor @preconcurrency package func makeChildView(metadata: Swift.Void, view: AttributeGraph.Attribute<SwiftUICore.AnyView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package func makeChildViewList(metadata: Swift.Void, view: AttributeGraph.Attribute<SwiftUICore.AnyView>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = SwiftUICore.UniqueID
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Metadata = Swift.Void
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyViewStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyViewStorageBase : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct Time : Swift.Equatable, Swift.Hashable, Swift.Comparable {
  @_spi(ForSwiftUIOnly) public var seconds: Swift.Double
  @_spi(ForSwiftUIOnly) public init(seconds: Swift.Double)
  @_spi(ForSwiftUIOnly) public init()
  @_spi(ForSwiftUIOnly) public static let zero: SwiftUICore.Time
  @_spi(ForSwiftUIOnly) public static let infinity: SwiftUICore.Time
  @_spi(ForSwiftUIOnly) @inlinable public static var systemUptime: SwiftUICore.Time {
    @_spi(ForSwiftUIOnly) get {
        return Time(seconds: CACurrentMediaTime())
    }
  }
  @_spi(ForSwiftUIOnly) @inlinable prefix public static func - (lhs: SwiftUICore.Time) -> SwiftUICore.Time {
        return Time(seconds: -lhs.seconds)
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func + (lhs: SwiftUICore.Time, rhs: Swift.Double) -> SwiftUICore.Time {
        return Time(seconds: lhs.seconds + rhs)
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func + (lhs: Swift.Double, rhs: SwiftUICore.Time) -> SwiftUICore.Time {
        return rhs + lhs
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func - (lhs: SwiftUICore.Time, rhs: Swift.Double) -> SwiftUICore.Time {
        return Time(seconds: lhs.seconds - rhs)
    }
  @_spi(ForSwiftUIOnly) @inlinable package static func - (lhs: SwiftUICore.Time, rhs: SwiftUICore.Time) -> Swift.Double {
        return lhs.seconds - rhs.seconds
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func * (lhs: SwiftUICore.Time, rhs: Swift.Double) -> SwiftUICore.Time {
        return Time(seconds: lhs.seconds * rhs)
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func / (lhs: SwiftUICore.Time, rhs: Swift.Double) -> SwiftUICore.Time {
        return Time(seconds: lhs.seconds / rhs)
    }
  @_spi(ForSwiftUIOnly) @inlinable package static func += (lhs: inout SwiftUICore.Time, rhs: Swift.Double) {
        lhs = lhs + rhs
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func -= (lhs: inout SwiftUICore.Time, rhs: Swift.Double) {
        lhs = lhs - rhs
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func *= (lhs: inout SwiftUICore.Time, rhs: Swift.Double) {
        lhs = lhs * rhs
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func /= (lhs: inout SwiftUICore.Time, rhs: Swift.Double) {
        lhs = lhs / rhs
    }
  @_spi(ForSwiftUIOnly) @inlinable public static func < (lhs: SwiftUICore.Time, rhs: SwiftUICore.Time) -> Swift.Bool {
        return lhs.seconds < rhs.seconds
    }
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.Time, b: SwiftUICore.Time) -> Swift.Bool
  @_spi(ForSwiftUIOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForSwiftUIOnly) public var hashValue: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.Time : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _VectorMath : SwiftUICore.Animatable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VectorMath {
  @inlinable public var magnitude: Swift.Double {
    get {
        return animatableData.magnitudeSquared.squareRoot()
    }
  }
  @inlinable public mutating func negate() {
        animatableData = .zero - animatableData
    }
  @inlinable prefix public static func - (operand: Self) -> Self {
        var result = operand
        result.negate()
        return result
    }
  @inlinable public static func += (lhs: inout Self, rhs: Self) {
        lhs.animatableData += rhs.animatableData
    }
  @inlinable public static func + (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result += rhs
        return result
    }
  @inlinable public static func -= (lhs: inout Self, rhs: Self) {
        lhs.animatableData -= rhs.animatableData
    }
  @inlinable public static func - (lhs: Self, rhs: Self) -> Self {
        var result = lhs
        result -= rhs
        return result
    }
  @inlinable public static func *= (lhs: inout Self, rhs: Swift.Double) {
        lhs.animatableData.scale(by: rhs)
    }
  @inlinable public static func * (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result *= rhs
        return result
    }
  @inlinable public static func /= (lhs: inout Self, rhs: Swift.Double) {
        lhs *= 1 / rhs
    }
  @inlinable public static func / (lhs: Self, rhs: Swift.Double) -> Self {
        var result = lhs
        result /= rhs
        return result
    }
}
extension SwiftUICore._VectorMath {
  package mutating func normalize()
  package func normalized() -> Self
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum Prominence : Swift.Sendable {
  case standard
  case increased
  public static func == (a: SwiftUICore.Prominence, b: SwiftUICore.Prominence) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var headerProminence: SwiftUICore.Prominence {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func headerProminence(_ prominence: SwiftUICore.Prominence) -> some SwiftUICore.View
  
}
package struct HeaderProminenceKey : SwiftUICore.EnvironmentKey, SwiftUICore._ViewTraitKey {
  package static let defaultValue: SwiftUICore.Prominence
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = SwiftUICore.Prominence
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "Use .buttonStyle(.borderedProminent)")
extension SwiftUICore.View {
  @_spi(_) nonisolated public func controlProminence(_ prominence: SwiftUICore.Prominence) -> some SwiftUICore.View
  
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "Use .buttonStyle(.borderedProminent)")
extension SwiftUICore.EnvironmentValues {
  @_spi(_) public var controlProminence: SwiftUICore.Prominence {
    @_spi(_) get
    @_spi(_) set
  }
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "Use .buttonStyle(.borderedProminent) or headerProminence.")
extension SwiftUICore.View {
  @_spi(_) nonisolated public func prominence(_ prominence: SwiftUICore.Prominence) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _EventDebugTriggers : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let responders: SwiftUICore._EventDebugTriggers
  public static let sendEvents: SwiftUICore._EventDebugTriggers
  public static let eventBindings: SwiftUICore._EventDebugTriggers
  public static let eventPhases: SwiftUICore._EventDebugTriggers
  public static let gestures: SwiftUICore._EventDebugTriggers
  public static let hitTest: SwiftUICore._EventDebugTriggers
  public static let all: SwiftUICore._EventDebugTriggers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore._EventDebugTriggers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore._EventDebugTriggers
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int
}
@available(*, unavailable)
extension SwiftUICore._EventDebugTriggers : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public var _eventDebugTriggers: SwiftUICore._EventDebugTriggers
@inline(never) package func printEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType])
@inline(never) package func printEventBindings(_ bindings: [SwiftUICore.EventID : SwiftUICore.EventBinding])
#if compiler(>=5.3) && $NoncopyableGenerics
@inline(never) package func printGestures(data: @autoclosure () -> SwiftUICore.GestureDebug.Data?, host: Swift.AnyObject?)
#else
@inline(never) package func printGestures(data: @autoclosure () -> SwiftUICore.GestureDebug.Data?, host: Swift.AnyObject?)
#endif
@_spi(ForSwiftUIOnly) extension SwiftUICore.ResponderNode {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) @inline(never) package func log(action: Swift.String, data: Any? = nil)
  #else
  @_spi(ForSwiftUIOnly) @inline(never) package func log(action: Swift.String, data: Any? = nil)
  #endif
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore._GestureInputs.InheritedPhase : Swift.CustomStringConvertible {
  @_spi(ForSwiftUIOnly) public var description: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ColorMatrix : Swift.Equatable {
  public var r1: Swift.Float = 1, r2: Swift.Float = 0, r3: Swift.Float = 0, r4: Swift.Float = 0, r5: Swift.Float = 0
  public var g1: Swift.Float = 0, g2: Swift.Float = 1, g3: Swift.Float = 0, g4: Swift.Float = 0, g5: Swift.Float = 0
  public var b1: Swift.Float = 0, b2: Swift.Float = 0, b3: Swift.Float = 1, b4: Swift.Float = 0, b5: Swift.Float = 0
  public var a1: Swift.Float = 0, a2: Swift.Float = 0, a3: Swift.Float = 0, a4: Swift.Float = 1, a5: Swift.Float = 0
  @inlinable public init() {}
  public static func == (a: SwiftUICore.ColorMatrix, b: SwiftUICore.ColorMatrix) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ColorMatrix : Swift.Equatable, Swift.Codable {
  public var m11: Swift.Float = 1, m12: Swift.Float = 0, m13: Swift.Float = 0, m14: Swift.Float = 0, m15: Swift.Float = 0
  public var m21: Swift.Float = 0, m22: Swift.Float = 1, m23: Swift.Float = 0, m24: Swift.Float = 0, m25: Swift.Float = 0
  public var m31: Swift.Float = 0, m32: Swift.Float = 0, m33: Swift.Float = 1, m34: Swift.Float = 0, m35: Swift.Float = 0
  public var m41: Swift.Float = 0, m42: Swift.Float = 0, m43: Swift.Float = 0, m44: Swift.Float = 1, m45: Swift.Float = 0
  @inlinable public init() {}
  public init(color: SwiftUICore.Color, in environment: SwiftUICore.EnvironmentValues)
  package init(_ m: SwiftUICore.ColorMatrix)
  package var isIdentity: Swift.Bool {
    get
  }
  public static func * (a: SwiftUICore._ColorMatrix, b: SwiftUICore._ColorMatrix) -> SwiftUICore._ColorMatrix
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: SwiftUICore._ColorMatrix, b: SwiftUICore._ColorMatrix) -> Swift.Bool
}
extension SwiftUICore._ColorMatrix {
  @inline(__always) package init(row1: (Swift.Float, Swift.Float, Swift.Float, Swift.Float, Swift.Float), row2: (Swift.Float, Swift.Float, Swift.Float, Swift.Float, Swift.Float), row3: (Swift.Float, Swift.Float, Swift.Float, Swift.Float, Swift.Float), row4: (Swift.Float, Swift.Float, Swift.Float, Swift.Float, Swift.Float))
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ filter: SwiftUICore.GraphicsFilter, premultiplied: Swift.Bool = false)
  #else
  package init?(_ filter: SwiftUICore.GraphicsFilter, premultiplied: Swift.Bool = false)
  #endif
  package init(colorMultiply c: SwiftUICore.Color.Resolved, premultiplied: Swift.Bool = false)
  package init(hueRotation: SwiftUICore.Angle)
  package init(brightness: Swift.Double)
  package init(contrast: Swift.Double)
  package init(luminanceToAlpha: Swift.Void)
  package init(colorInvert x: Swift.Float)
  package init(colorMonochrome c: SwiftUICore.Color.Resolved, amount: Swift.Float = 1, bias: Swift.Float = 0)
  package init(floatArray: [Swift.Float])
  package var floatArray: [Swift.Float] {
    get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension SwiftUICore._ColorMatrix : SwiftUICore.ShapeStyle {
  @_spi(Private) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Resolved = Swift.Never
}
extension SwiftUICore._ColorMatrix : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum _ViewDebug {
  public enum Property : Swift.UInt32, Swift.Hashable {
    case type
    case value
    case transform
    case position
    case size
    case environment
    case phase
    case layoutComputer
    case displayList
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(rawValue: Swift.UInt32)
    #else
    public init?(rawValue: Swift.UInt32)
    #endif
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public struct Properties : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    @inlinable package init(_ property: SwiftUICore._ViewDebug.Property) {
            self.init(rawValue: 1 << property.rawValue)
        }
    public static let type: SwiftUICore._ViewDebug.Properties
    public static let value: SwiftUICore._ViewDebug.Properties
    public static let transform: SwiftUICore._ViewDebug.Properties
    public static let position: SwiftUICore._ViewDebug.Properties
    public static let size: SwiftUICore._ViewDebug.Properties
    public static let environment: SwiftUICore._ViewDebug.Properties
    public static let phase: SwiftUICore._ViewDebug.Properties
    public static let layoutComputer: SwiftUICore._ViewDebug.Properties
    public static let displayList: SwiftUICore._ViewDebug.Properties
    public static let all: SwiftUICore._ViewDebug.Properties
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias ArrayLiteralElement = SwiftUICore._ViewDebug.Properties
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Element = SwiftUICore._ViewDebug.Properties
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias RawValue = Swift.UInt32
  }
  package static var properties: SwiftUICore._ViewDebug.Properties
  public struct Data {
    package var data: [SwiftUICore._ViewDebug.Property : Any]
    package var childData: [SwiftUICore._ViewDebug.Data]
    package init()
  }
  package static var isInitialized: Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug.Properties : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug.Property : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug.Data : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ViewDebug : Swift.Sendable {
}
extension SwiftUICore._ViewDebug {
  package static func initialize(inputs: inout SwiftUICore._ViewInputs)
}
extension SwiftUICore.ViewModifier {
  @inline(__always) nonisolated package static func makeDebuggableView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @inline(__always) nonisolated package static func makeDebuggableViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
extension SwiftUICore.View {
  @inline(__always) nonisolated package static func makeDebuggableView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @inline(__always) nonisolated package static func makeDebuggableViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
extension SwiftUICore._ViewDebug {
  package static func makeDebugData(subgraph: AttributeGraph.Subgraph) -> [SwiftUICore._ViewDebug.Data]
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ViewDebug {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func serializedData(_ viewDebugData: [SwiftUICore._ViewDebug.Data]) -> Foundation.Data?
  #else
  public static func serializedData(_ viewDebugData: [SwiftUICore._ViewDebug.Data]) -> Foundation.Data?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ViewDebug.Data : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
package protocol CustomViewDebugReflectable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var customViewDebugMirror: Swift.Mirror? { get }
  #else
  var customViewDebugMirror: Swift.Mirror? { get }
  #endif
}
package protocol CustomViewDebugValueConvertible {
  var viewDebugValue: Any { get }
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.ViewTransform.Item : Swift.Encodable {
  @_spi(ForSwiftUIOnly) package func encode(to encoder: any Swift.Encoder) throws
}
package protocol ValueWrapper {
  #if compiler(>=5.3) && $NoncopyableGenerics
  var wrappedValue: Any? { get }
  #else
  var wrappedValue: Any? { get }
  #endif
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : SwiftUICore.ValueWrapper {
  package var wrappedValue: Any? {
    get
  }
}
#else
extension Swift.Optional : SwiftUICore.ValueWrapper {
  package var wrappedValue: Any? {
    get
  }
}
#endif
@objc package protocol XcodeViewDebugDataProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc func makeViewDebugData() -> Foundation.Data?
  #else
  @objc func makeViewDebugData() -> Foundation.Data?
  #endif
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public static func _logChanges()
}
package protocol GestureContainerFactory {
  static func makeGestureContainer(responder: any SwiftUICore.AnyGestureContainingResponder) -> Swift.AnyObject
}
package struct GestureContainerFactoryInput : SwiftUICore.ViewInput {
  package static let defaultValue: (any SwiftUICore.GestureContainerFactory.Type)?
  package typealias Value = (any SwiftUICore.GestureContainerFactory.Type)?
}
extension SwiftUICore._ViewInputs {
  package func makeGestureContainer(responder: any SwiftUICore.AnyGestureContainingResponder) -> Swift.AnyObject
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public static func easeInOut(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var easeInOut: SwiftUICore.Animation {
    get
  }
  public static func easeIn(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var easeIn: SwiftUICore.Animation {
    get
  }
  public static func easeOut(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var easeOut: SwiftUICore.Animation {
    get
  }
  public static func linear(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static var linear: SwiftUICore.Animation {
    get
  }
  package static func coreAnimationDefault(duration: Foundation.TimeInterval) -> SwiftUICore.Animation
  public static func timingCurve(_ p1x: Swift.Double, _ p1y: Swift.Double, _ p2x: Swift.Double, _ p2y: Swift.Double, duration: Foundation.TimeInterval = 0.35) -> SwiftUICore.Animation
}
package struct BezierAnimation : SwiftUICore.InternalCustomAnimation {
  package var duration: Foundation.TimeInterval
  package var curve: SwiftUICore.UnitCurve.CubicSolver
  package init(curve: SwiftUICore.UnitCurve.CubicSolver, duration: Foundation.TimeInterval)
  package init(_ c0x: Swift.Double, _ c0y: Swift.Double, _ c1x: Swift.Double, _ c1y: Swift.Double, duration: Foundation.TimeInterval)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func fraction(for elapsed: Foundation.TimeInterval) -> Swift.Double?
  #else
  package func fraction(for elapsed: Foundation.TimeInterval) -> Swift.Double?
  #endif
  package var function: SwiftUICore.Animation.Function {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.BezierAnimation, b: SwiftUICore.BezierAnimation) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package struct BezierTimingFunction<T> : Swift.Equatable where T : Swift.BinaryFloatingPoint {
  package var p1x: T, p1y: T, p2x: T, p2y: T
  package init<U>(p1: (U, U), p2: (U, U)) where U : Swift.BinaryFloatingPoint
  package static var linear: SwiftUICore.BezierTimingFunction<T> {
    get
  }
  package var p1: (T, T) {
    get
    set
  }
  package var p2: (T, T) {
    get
    set
  }
  package static func == (a: SwiftUICore.BezierTimingFunction<T>, b: SwiftUICore.BezierTimingFunction<T>) -> Swift.Bool
}
extension SwiftUICore.BezierAnimation : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency package func _backdropEffect<T>(_ effect: (SwiftUICore._BackdropEffectPlaceholder) -> T) -> some SwiftUICore.View where T : SwiftUICore.View {
        modifier(_BackdropEffect(backdrop: effect(.init())))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BackdropEffect<Backdrop> : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Backdrop : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var backdrop: Backdrop
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(backdrop: Backdrop) {
        self.backdrop = backdrop
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackdropEffect<Backdrop>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackdropEffect : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BackdropEffectPlaceholder : SwiftUICore.UnaryView, SwiftUICore.PrimitiveView {
  @inlinable @_Concurrency.MainActor @preconcurrency internal init() {}
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._BackdropEffectPlaceholder>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol Animatable {
  associatedtype AnimatableData : SwiftUICore.VectorArithmetic
  var animatableData: Self.AnimatableData { get set }
  static func _makeAnimatable(value: inout SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animatable where Self : SwiftUICore.VectorArithmetic {
  public var animatableData: Self {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animatable where Self.AnimatableData == SwiftUICore.EmptyAnimatableData {
  public var animatableData: SwiftUICore.EmptyAnimatableData {
    @inlinable get { return EmptyAnimatableData() }
    @inlinable set {}
  }
  public static func _makeAnimatable(value: inout SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs)
}
extension SwiftUICore.Animatable {
  package static func makeAnimatable(value: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs) -> AttributeGraph.Attribute<Self>
}
extension AttributeGraph.Attribute where Value : SwiftUICore.Animatable {
  package func animated(inputs: SwiftUICore._GraphInputs) -> AttributeGraph.Attribute<Value>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animatable {
  public static func _makeAnimatable(value: inout SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct EmptyAnimatableData : SwiftUICore.VectorArithmetic {
  @inlinable public init() {}
  @inlinable public static var zero: SwiftUICore.EmptyAnimatableData {
    get { return .init() }
  }
  @inlinable public static func += (lhs: inout SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) {}
  @inlinable public static func -= (lhs: inout SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) {}
  @inlinable public static func + (lhs: SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) -> SwiftUICore.EmptyAnimatableData {
        return .zero
    }
  @inlinable public static func - (lhs: SwiftUICore.EmptyAnimatableData, rhs: SwiftUICore.EmptyAnimatableData) -> SwiftUICore.EmptyAnimatableData {
        return .zero
    }
  @inlinable public mutating func scale(by rhs: Swift.Double) {}
  @inlinable public var magnitudeSquared: Swift.Double {
    get { return 0 }
  }
  public static func == (a: SwiftUICore.EmptyAnimatableData, b: SwiftUICore.EmptyAnimatableData) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Double : SwiftUICore.Animatable {
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = Swift.Double
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGFloat : SwiftUICore.Animatable {
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = CoreFoundation.CGFloat
}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct MeshGradient : SwiftUICore.UnaryView, SwiftUICore.ShapeStyle, Swift.Equatable, Swift.Sendable {
  public enum Locations : Swift.Equatable, Swift.Sendable {
    case points([Swift.SIMD2<Swift.Float>])
    case bezierPoints([SwiftUICore.MeshGradient.BezierPoint])
    public static func == (a: SwiftUICore.MeshGradient.Locations, b: SwiftUICore.MeshGradient.Locations) -> Swift.Bool
  }
  public enum Colors : Swift.Equatable, Swift.Sendable {
    case colors([SwiftUICore.Color])
    case resolvedColors([SwiftUICore.Color.Resolved])
    public static func == (a: SwiftUICore.MeshGradient.Colors, b: SwiftUICore.MeshGradient.Colors) -> Swift.Bool
  }
  @frozen public struct BezierPoint : Swift.Equatable, Swift.Sendable {
    public var position: Swift.SIMD2<Swift.Float>
    public var leadingControlPoint: Swift.SIMD2<Swift.Float>
    public var topControlPoint: Swift.SIMD2<Swift.Float>
    public var trailingControlPoint: Swift.SIMD2<Swift.Float>
    public var bottomControlPoint: Swift.SIMD2<Swift.Float>
    @_alwaysEmitIntoClient public init(position: Swift.SIMD2<Swift.Float>, leadingControlPoint: Swift.SIMD2<Swift.Float>, topControlPoint: Swift.SIMD2<Swift.Float>, trailingControlPoint: Swift.SIMD2<Swift.Float>, bottomControlPoint: Swift.SIMD2<Swift.Float>) {
            self.position = position
            self.leadingControlPoint = leadingControlPoint
            self.topControlPoint = topControlPoint
            self.trailingControlPoint = trailingControlPoint
            self.bottomControlPoint = bottomControlPoint
        }
    public static func == (a: SwiftUICore.MeshGradient.BezierPoint, b: SwiftUICore.MeshGradient.BezierPoint) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency public var width: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var height: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var locations: SwiftUICore.MeshGradient.Locations
  @_Concurrency.MainActor @preconcurrency public var colors: SwiftUICore.MeshGradient.Colors
  @_Concurrency.MainActor @preconcurrency public var background: SwiftUICore.Color
  @_Concurrency.MainActor @preconcurrency public var smoothsColors: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var colorSpace: SwiftUICore.Gradient.ColorSpace
  @_Concurrency.MainActor @preconcurrency public init(width: Swift.Int, height: Swift.Int, locations: SwiftUICore.MeshGradient.Locations, colors: SwiftUICore.MeshGradient.Colors, background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(width: Swift.Int, height: Swift.Int, points: [Swift.SIMD2<Swift.Float>], colors: [SwiftUICore.Color], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height, locations: .points(points),
            colors: .colors(colors), background: background,
            smoothsColors: smoothsColors, colorSpace: colorSpace)
    }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(width: Swift.Int, height: Swift.Int, points: [Swift.SIMD2<Swift.Float>], resolvedColors: [SwiftUICore.Color.Resolved], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height, locations: .points(points),
            colors: .resolvedColors(resolvedColors), background: background,
            smoothsColors: smoothsColors, colorSpace: colorSpace)
    }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(width: Swift.Int, height: Swift.Int, bezierPoints: [SwiftUICore.MeshGradient.BezierPoint], colors: [SwiftUICore.Color], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height,
            locations: .bezierPoints(bezierPoints), colors: .colors(colors),
            background: background, smoothsColors: smoothsColors,
            colorSpace: colorSpace)
    }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(width: Swift.Int, height: Swift.Int, bezierPoints: [SwiftUICore.MeshGradient.BezierPoint], resolvedColors: [SwiftUICore.Color.Resolved], background: SwiftUICore.Color = .clear, smoothsColors: Swift.Bool = true, colorSpace: SwiftUICore.Gradient.ColorSpace = .device) {
        self.init(width: width, height: height,
            locations: .bezierPoints(bezierPoints),
            colors: .resolvedColors(resolvedColors),
            background: background, smoothsColors: smoothsColors,
            colorSpace: colorSpace)
    }
  package struct _Paint {
    package var locations: SwiftUICore.MeshGradient.Locations
    package var colors: [SwiftUICore.Color.Resolved]
    package var background: SwiftUICore.Color.Resolved
    package var width: Swift.Int, height: Swift.Int
    package var flags: RenderBox.RBMeshGradientFlags
    package init(locations: SwiftUICore.MeshGradient.Locations, colors: [SwiftUICore.Color.Resolved], background: SwiftUICore.Color.Resolved, width: Swift.Int, height: Swift.Int, flags: RenderBox.RBMeshGradientFlags)
  }
  @_Concurrency.MainActor @preconcurrency package func resolvePaint(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.MeshGradient._Paint
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func withResolvedColors(in env: SwiftUICore.EnvironmentValues, _ body: (Swift.UnsafeBufferPointer<SwiftUICore.Color.Resolved>) -> Swift.Void)
  #else
  @_Concurrency.MainActor @preconcurrency package func withResolvedColors(in env: SwiftUICore.EnvironmentValues, _ body: (Swift.UnsafeBufferPointer<SwiftUICore.Color.Resolved>) -> Swift.Void)
  #endif
  nonisolated public static func == (a: SwiftUICore.MeshGradient, b: SwiftUICore.MeshGradient) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUICore.Rectangle, SwiftUICore.MeshGradient>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Resolved = Swift.Never
}
extension SwiftUICore.MeshGradient._Paint : SwiftUICore.ResolvedPaint {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in context: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #else
  package func draw(path: SwiftUICore.Path, style: SwiftUICore.PathDrawingStyle, in context: SwiftUICore.GraphicsContext, bounds: CoreFoundation.CGRect?)
  #endif
  package var isClear: Swift.Bool {
    get
  }
  package var isOpaque: Swift.Bool {
    get
  }
  package var isCALayerCompatible: Swift.Bool {
    get
  }
  package typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatableArray<Swift.Float>, SwiftUICore.AnimatablePair<SwiftUICore.AnimatableArray<SwiftUICore.Color.Resolved.AnimatableData>, SwiftUICore.Color.Resolved.AnimatableData>>
  package var animatableData: SwiftUICore.MeshGradient._Paint.AnimatableData {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #else
  package static var leafProtobufTag: SwiftUICore.CodableResolvedPaint.Tag? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.MeshGradient._Paint, b: SwiftUICore.MeshGradient._Paint) -> Swift.Bool
}
extension SwiftUICore.MeshGradient._Paint : SwiftUICore.ProtobufMessage {
  package func encodePaint(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.MeshGradient.Locations : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PinnedScrollableViews : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let sectionHeaders: SwiftUICore.PinnedScrollableViews
  public static let sectionFooters: SwiftUICore.PinnedScrollableViews
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.PinnedScrollableViews
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.PinnedScrollableViews
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.UInt32
}
@objc final package class CorePlatformImage : ObjectiveC.NSObject {
  final package var system: SwiftUI_SPI.CoreSystem
  final package var kitImage: ObjectiveC.NSObject
  final package var isTemplate: Swift.Bool
  package init(system: SwiftUI_SPI.CoreSystem, kitImage: ObjectiveC.NSObject)
  convenience package init(system: SwiftUI_SPI.CoreSystem, cgImage: CoreGraphics.CGImage, scale: CoreFoundation.CGFloat, orientation: Swift.UInt8)
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var cgImage: CoreGraphics.CGImage? {
    get
  }
  #else
  final package var cgImage: CoreGraphics.CGImage? {
    get
  }
  #endif
  final package var size: CoreFoundation.CGSize {
    get
  }
  final package var scale: CoreFoundation.CGFloat {
    get
  }
  final package var imageOrientation: Swift.UInt8 {
    get
  }
  final package var baselineOffsetFromBottom: CoreFoundation.CGFloat {
    get
  }
  final package var alignmentRect: CoreFoundation.CGRect {
    get
    set
  }
  @objc deinit
}
extension Swift.Unmanaged {
  @_transparent package func map<T>(_ transform: (Instance) -> T) -> T
  @_transparent package func map<T>(_ transform: (Instance) -> T) -> Swift.Unmanaged<T> where T : AnyObject
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_transparent package func map<T>(_ transform: (Instance) -> T?) -> Swift.Unmanaged<T>? where T : AnyObject
  #else
  @_transparent package func map<T>(_ transform: (Instance) -> T?) -> Swift.Unmanaged<T>? where T : AnyObject
  #endif
  package static func == (lhs: Swift.Unmanaged<Instance>, rhs: Swift.Unmanaged<Instance>) -> Swift.Bool
  package static func != (lhs: Swift.Unmanaged<Instance>, rhs: Swift.Unmanaged<Instance>) -> Swift.Bool
}
package protocol CustomAnimationModifier : Swift.Hashable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func animate<V, B>(base: B, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
  #else
  func animate<V, B>(base: B, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func velocity<V, B>(base: B, value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
  #else
  func velocity<V, B>(base: B, value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
  #endif
  func shouldMerge<V, B>(base: B, previous: Self, previousBase: B, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
  func function(base: SwiftUICore.Animation.Function) -> SwiftUICore.Animation.Function
}
extension SwiftUICore.CustomAnimationModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func velocity<V, B>(base: B, value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
  #else
  package func velocity<V, B>(base: B, value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
  #endif
  package func shouldMerge<V, B>(base: B, previous: Self, previousBase: B, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic, B : SwiftUICore.CustomAnimation
}
extension SwiftUICore.Animation {
  package func modifier<M>(_ modifier: M) -> SwiftUICore.Animation where M : SwiftUICore.CustomAnimationModifier
}
package struct CustomAnimationModifiedContent<Base, Modifier> : SwiftUICore.InternalCustomAnimation where Base : SwiftUICore.CustomAnimation, Modifier : SwiftUICore.CustomAnimationModifier {
  package var base: Base
  package var modifier: Modifier
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  package func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
  package var function: SwiftUICore.Animation.Function {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.CustomAnimationModifiedContent<Base, Modifier>, b: SwiftUICore.CustomAnimationModifiedContent<Base, Modifier>) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.CustomAnimationModifiedContent {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
}
package struct InternalCustomAnimationModifiedContent<Base, Modifier> : SwiftUICore.InternalCustomAnimation where Base : SwiftUICore.InternalCustomAnimation, Modifier : SwiftUICore.CustomAnimationModifier {
  package typealias _Base = SwiftUICore.CustomAnimationModifiedContent<Base, Modifier>
  package var _base: SwiftUICore.InternalCustomAnimationModifiedContent<Base, Modifier>._Base
  package init(base: Base, modifier: Modifier)
  package var base: Base {
    get
  }
  package var modifier: Modifier {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  package func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  package func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  package func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
  package var function: SwiftUICore.Animation.Function {
    get
  }
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.InternalCustomAnimationModifiedContent<Base, Modifier>, b: SwiftUICore.InternalCustomAnimationModifiedContent<Base, Modifier>) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.InternalCustomAnimationModifiedContent {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.PrimitiveView where Wrapped : SwiftUICore.View {
}
#else
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.PrimitiveView where Wrapped : SwiftUICore.View {
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.View where Wrapped : SwiftUICore.View {
  public typealias Body = Swift.Never
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
#else
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Swift.Optional : SwiftUICore.View where Wrapped : SwiftUICore.View {
  public typealias Body = Swift.Never
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : SwiftUICore.DynamicView where Wrapped : SwiftUICore.View {
  package static var canTransition: Swift.Bool {
    get
  }
  package func childInfo(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>) -> (any Any.Type, SwiftUICore.UniqueID?)
  package func makeChildView(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>, view: AttributeGraph.Attribute<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  package func makeChildViewList(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>, view: AttributeGraph.Attribute<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  package typealias ID = SwiftUICore.UniqueID
  package typealias Metadata = SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>
}
#else
extension Swift.Optional : SwiftUICore.DynamicView where Wrapped : SwiftUICore.View {
  package static var canTransition: Swift.Bool {
    get
  }
  package func childInfo(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>) -> (any Any.Type, SwiftUICore.UniqueID?)
  package func makeChildView(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>, view: AttributeGraph.Attribute<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  package func makeChildViewList(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>, view: AttributeGraph.Attribute<Swift.Optional<Wrapped>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  package typealias ID = SwiftUICore.UniqueID
  package typealias Metadata = SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>
}
#endif
@propertyWrapper final package class Box<T> {
  final package let value: T
  @inlinable package init(_ value: T)
  @inlinable convenience package init(wrappedValue: T)
  @inlinable final package var wrappedValue: T {
    get
  }
  @inlinable final package var projectedValue: SwiftUICore.Box<T> {
    get
  }
  @objc deinit
}
extension SwiftUICore.Box : Swift.Equatable where T : Swift.Equatable {
  @inlinable package static func == (lhs: SwiftUICore.Box<T>, rhs: SwiftUICore.Box<T>) -> Swift.Bool
}
@propertyWrapper final package class MutableBox<T> {
  final package var value: T
  @inlinable package init(_ value: T)
  @inlinable convenience package init(wrappedValue: T)
  @inlinable final package var wrappedValue: T {
    get
    set
  }
  @inlinable final package var projectedValue: SwiftUICore.MutableBox<T> {
    get
  }
  @objc deinit
}
extension SwiftUICore.MutableBox : Swift.Equatable where T : Swift.Equatable {
  @inlinable package static func == (lhs: SwiftUICore.MutableBox<T>, rhs: SwiftUICore.MutableBox<T>) -> Swift.Bool
}
package struct WeakBox<T> where T : AnyObject {
  weak package var base: T?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable package init(_ base: T? = nil)
  #else
  @inlinable package init(_ base: T? = nil)
  #endif
}
package struct HashableWeakBox<T> : Swift.Hashable where T : AnyObject {
  weak package var base: T?
  @inlinable package init(_ base: T)
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (lhs: SwiftUICore.HashableWeakBox<T>, rhs: SwiftUICore.HashableWeakBox<T>) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
package struct Indirect<T> {
  package var value: T {
    get
    set
  }
  package init(_ value: T)
}
extension SwiftUICore.Indirect : Swift.Equatable where T : Swift.Equatable {
  package static func == (lhs: SwiftUICore.Indirect<T>, rhs: SwiftUICore.Indirect<T>) -> Swift.Bool
}
package protocol PropertyKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  static func valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
extension SwiftUICore.PropertyKey where Self.Value : Swift.Equatable {
  package static func valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
extension SwiftUICore.PropertyKey {
  package static func valuesEqual(_ lhs: Self.Value, _ rhs: Self.Value) -> Swift.Bool
}
package protocol DerivedPropertyKey {
  associatedtype Value : Swift.Equatable
  static func value(in plist: SwiftUICore.PropertyList) -> Self.Value
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
@frozen package struct PropertyList : Swift.CustomStringConvertible {
  @usableFromInline
  internal var elements: SwiftUICore.PropertyList.Element?
  @inlinable package init() { elements = nil }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(data: Swift.AnyObject?)
  #else
  package init(data: Swift.AnyObject?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable package var data: Swift.AnyObject? {
    get { return elements }
  }
  #else
  @inlinable package var data: Swift.AnyObject? {
    get { return elements }
  }
  #endif
  @inlinable package var isEmpty: Swift.Bool {
    get { return elements === nil }
  }
  package var id: SwiftUICore.UniqueID {
    get
  }
  package mutating func override(with other: SwiftUICore.PropertyList)
  package subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.PropertyKey {
    get
    set
  }
  package subscript<K>(key: K.Type) -> K.Value where K : SwiftUICore.DerivedPropertyKey {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func valueWithSecondaryLookup<K, S>(for key: K.Type, secondaryKey: S.Type, secondaryLookupHandler: (S.Value) -> K.Value?) -> K.Value where K : SwiftUICore.PropertyKey, S : SwiftUICore.PropertyKey
  #else
  package func valueWithSecondaryLookup<K, S>(for key: K.Type, secondaryKey: S.Type, secondaryLookupHandler: (S.Value) -> K.Value?) -> K.Value where K : SwiftUICore.PropertyKey, S : SwiftUICore.PropertyKey
  #endif
  package mutating func prependValue<K>(_ value: K.Value, for key: K.Type) where K : SwiftUICore.PropertyKey
  package func mayNotBeEqual(to other: SwiftUICore.PropertyList) -> Swift.Bool
  package func mayNotBeEqual(to other: SwiftUICore.PropertyList, ignoredTypes: [Swift.ObjectIdentifier]) -> Swift.Bool
  @_transparent package mutating func set(_ other: SwiftUICore.PropertyList)
  @usableFromInline
  package var description: Swift.String {
    get
  }
  package func forEach<K>(keyType: K.Type, _ body: (K.Value, inout Swift.Bool) -> Swift.Void) where K : SwiftUICore.PropertyKey
  package mutating func merge(_ other: SwiftUICore.PropertyList)
  package func merging(_ other: SwiftUICore.PropertyList) -> SwiftUICore.PropertyList
  package static func value<T>(as _: T.Type, from element: SwiftUICore.PropertyList.Element) -> T
}
@available(*, unavailable)
extension SwiftUICore.PropertyList : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  package class Tracker {
    package init()
    final package func reset()
    final package func value<K>(_ plist: SwiftUICore.PropertyList, for key: K.Type) -> K.Value where K : SwiftUICore.PropertyKey
    #if compiler(>=5.3) && $NoncopyableGenerics
    final package func valueWithSecondaryLookup<K, S>(_ plist: SwiftUICore.PropertyList, for key: K.Type, secondaryKey: S.Type, secondaryLookupHandler: (S.Value) -> K.Value?) -> K.Value where K : SwiftUICore.PropertyKey, S : SwiftUICore.PropertyKey
    #else
    final package func valueWithSecondaryLookup<K, S>(_ plist: SwiftUICore.PropertyList, for key: K.Type, secondaryKey: S.Type, secondaryLookupHandler: (S.Value) -> K.Value?) -> K.Value where K : SwiftUICore.PropertyKey, S : SwiftUICore.PropertyKey
    #endif
    final package func derivedValue<K>(_ plist: SwiftUICore.PropertyList, for key: K.Type) -> K.Value where K : SwiftUICore.DerivedPropertyKey
    final package func initializeValues(from plist: SwiftUICore.PropertyList)
    final package func invalidateValue<K>(for key: K.Type, from oldPlist: SwiftUICore.PropertyList, to newPlist: SwiftUICore.PropertyList) where K : SwiftUICore.PropertyKey
    final package func invalidateAllValues(from oldPlist: SwiftUICore.PropertyList, to newPlist: SwiftUICore.PropertyList)
    final package func hasDifferentUsedValues(_ plist: SwiftUICore.PropertyList) -> Swift.Bool
    final package func formUnion(_ other: SwiftUICore.PropertyList.Tracker)
    @objc @usableFromInline
    deinit
  }
}
@available(*, unavailable)
extension SwiftUICore.PropertyList.Tracker : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PropertyList {
  @_hasMissingDesignatedInitializers @usableFromInline
  package class Element : Swift.CustomStringConvertible {
    @objc deinit
    @usableFromInline
    package var description: Swift.String {
      get
    }
  }
}
@available(*, unavailable)
extension SwiftUICore.PropertyList.Element : Swift.Sendable {
}
package protocol TappableEventType : SwiftUICore.EventType {
}
package typealias PlatformTappableSpatialEvent = SwiftUICore.TappableSpatialEvent
package struct TappableEvent : SwiftUICore.TappableEventType, Swift.Equatable {
  package var phase: SwiftUICore.EventPhase
  package var timestamp: SwiftUICore.Time
  package var binding: SwiftUICore.EventBinding?
  package init<T>(_ event: T) where T : SwiftUICore.TappableEventType
  package init(_ event: any SwiftUICore.TappableEventType)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ event: any SwiftUICore.EventType)
  #else
  package init?(_ event: any SwiftUICore.EventType)
  #endif
  package static func == (a: SwiftUICore.TappableEvent, b: SwiftUICore.TappableEvent) -> Swift.Bool
}
package struct TappableSpatialEvent : SwiftUICore.TappableEventType, SwiftUICore.SpatialEventType, Swift.Equatable {
  package var phase: SwiftUICore.EventPhase
  package var timestamp: SwiftUICore.Time
  package var binding: SwiftUICore.EventBinding?
  package var globalLocation: CoreFoundation.CGPoint
  package var location: CoreFoundation.CGPoint
  package var radius: CoreFoundation.CGFloat
  package init<T>(_ event: T) where T : SwiftUICore.SpatialEventType, T : SwiftUICore.TappableEventType
  package init(_ event: any SwiftUICore.SpatialEventType & SwiftUICore.TappableEventType)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ event: any SwiftUICore.EventType)
  #else
  package init?(_ event: any SwiftUICore.EventType)
  #endif
  package static func == (a: SwiftUICore.TappableSpatialEvent, b: SwiftUICore.TappableSpatialEvent) -> Swift.Bool
}
package protocol TouchTypeProviding {
  var touchType: SwiftUICore.TouchType { get }
}
package struct ProtobufDecoder {
  package enum DecodingError : Swift.Error {
    case failed
    package static func == (a: SwiftUICore.ProtobufDecoder.DecodingError, b: SwiftUICore.ProtobufDecoder.DecodingError) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package typealias Field = SwiftUICore.ProtobufFormat.Field
  package typealias WireType = SwiftUICore.ProtobufFormat.WireType
  package var userInfo: [Swift.CodingUserInfoKey : Any]
  package init(_ data: Foundation.Data)
}
extension SwiftUICore.ProtobufDecoder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func nextField() throws -> SwiftUICore.ProtobufDecoder.Field?
  #else
  package mutating func nextField() throws -> SwiftUICore.ProtobufDecoder.Field?
  #endif
  package mutating func skipField(_ field: SwiftUICore.ProtobufDecoder.Field) throws
  package mutating func boolField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.Bool
  package mutating func uintField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UInt
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func enumField<T>(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> T? where T : SwiftUICore.ProtobufEnum
  #else
  package mutating func enumField<T>(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> T? where T : SwiftUICore.ProtobufEnum
  #endif
  package mutating func uint8Field(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UInt8
  package mutating func uint16Field(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UInt16
  package mutating func uint32Field(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UInt32
  package mutating func uint64Field(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UInt64
  package mutating func intField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.Int
  package mutating func fixed32Field(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UInt32
  package mutating func fixed64Field(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UInt64
  package mutating func floatField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.Float
  package mutating func doubleField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.Double
  @inline(__always) package mutating func cgFloatField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> CoreFoundation.CGFloat
  package mutating func dataBufferField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.UnsafeRawBufferPointer
  package mutating func dataField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Foundation.Data
  package mutating func messageField<T>(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> T where T : SwiftUICore.ProtobufDecodableMessage
  package mutating func messageField<T>(_ field: SwiftUICore.ProtobufDecoder.Field, _ body: (inout SwiftUICore.ProtobufDecoder) throws -> T) throws -> T
  package mutating func stringField(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> Swift.String
  package mutating func codableField<T>(_ field: SwiftUICore.ProtobufDecoder.Field) throws -> T where T : Swift.Decodable
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func verticalStackOrientation() -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public protocol ViewModifier {
  nonisolated static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func body(content: Self.Content) -> Self.Body
  typealias Content = SwiftUICore._ViewModifier_Content<Self>
}
package protocol PrimitiveViewModifier : SwiftUICore.ViewModifier where Self.Body == Swift.Never {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier where Self.Body == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public func body(content: Self.Content) -> Self.Body
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
package protocol UnaryViewModifier : SwiftUICore.ViewModifier {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnaryViewModifier {
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
package protocol MultiViewModifier : SwiftUICore.ViewModifier {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MultiViewModifier {
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier where Self : SwiftUICore._GraphInputsModifier, Self.Body == Swift.Never {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
package protocol ViewInputsModifier : SwiftUICore.ViewModifier where Self.Body == Swift.Never {
  #if compiler(>=5.3) && $NoncopyableGenerics
  static var graphInputsSemantics: SwiftUICore.Semantics? { get }
  #else
  static var graphInputsSemantics: SwiftUICore.Semantics? { get }
  #endif
  nonisolated static func _makeViewInputs(modifier: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._ViewInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewInputsModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #else
  package static var graphInputsSemantics: SwiftUICore.Semantics? {
    get
  }
  #endif
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
extension SwiftUICore.ViewModifier {
  nonisolated package static func makeUnaryViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  nonisolated package static func makeMultiViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyModifier : SwiftUICore.PrimitiveViewModifier, SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public static let identity: SwiftUICore.EmptyModifier
  public typealias Body = Swift.Never
  @inlinable nonisolated public init() {}
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.EmptyModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore.EmptyModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.EmptyModifier.Content) -> SwiftUICore.EmptyModifier.Body
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct ModifiedContent<Content, Modifier> {
  public typealias Body = Swift.Never
  public var content: Content
  public var modifier: Modifier
  @inlinable public init(content: Content, modifier: Modifier) {
        self.content = content
        self.modifier = modifier
    }
}
@available(*, unavailable)
extension SwiftUICore.ModifiedContent : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : Swift.Equatable where Content : Swift.Equatable, Modifier : Swift.Equatable {
  public static func == (a: SwiftUICore.ModifiedContent<Content, Modifier>, b: SwiftUICore.ModifiedContent<Content, Modifier>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : SwiftUICore.View where Content : SwiftUICore.View, Modifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : SwiftUICore.ViewModifier where Content : SwiftUICore.ViewModifier, Modifier : SwiftUICore.ViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier {
  @inlinable @_Concurrency.MainActor @preconcurrency public func concat<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
extension SwiftUICore.ModifiedContent : SwiftUICore.CustomViewDebugReflectable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var customViewDebugMirror: Swift.Mirror? {
    get
  }
  #else
  package var customViewDebugMirror: Swift.Mirror? {
    get
  }
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore.Image {
  public struct DynamicRange : Swift.Hashable, Swift.Sendable {
    package enum Storage : Swift.UInt8, Swift.Hashable, Swift.Comparable {
      case standard
      case constrainedHigh
      case high
      package static func < (lhs: SwiftUICore.Image.DynamicRange.Storage, rhs: SwiftUICore.Image.DynamicRange.Storage) -> Swift.Bool
      #if compiler(>=5.3) && $NoncopyableGenerics
      package init?(rawValue: Swift.UInt8)
      #else
      package init?(rawValue: Swift.UInt8)
      #endif
      @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
      @_spi_available(watchOS, introduced: 10.0)
      package typealias RawValue = Swift.UInt8
      package var rawValue: Swift.UInt8 {
        get
      }
    }
    package var storage: SwiftUICore.Image.DynamicRange.Storage
    package init(storage: SwiftUICore.Image.DynamicRange.Storage)
    public static let standard: SwiftUICore.Image.DynamicRange
    public static let constrainedHigh: SwiftUICore.Image.DynamicRange
    public static let high: SwiftUICore.Image.DynamicRange
    package var maxHeadroom: SwiftUICore.Image.Headroom {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Image.DynamicRange, b: SwiftUICore.Image.DynamicRange) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  package struct Headroom : Swift.RawRepresentable, Swift.Comparable {
    package let rawValue: CoreFoundation.CGFloat
    package init(rawValue: CoreFoundation.CGFloat)
    package static func < (lhs: SwiftUICore.Image.Headroom, rhs: SwiftUICore.Image.Headroom) -> Swift.Bool
    package static let standard: SwiftUICore.Image.Headroom
    package static let constrainedHigh: SwiftUICore.Image.Headroom
    package static let highHLG: SwiftUICore.Image.Headroom
    package static let high: SwiftUICore.Image.Headroom
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @_spi_available(watchOS, introduced: 10.0)
    package typealias RawValue = CoreFoundation.CGFloat
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func allowedDynamicRange(_ range: SwiftUICore.Image.DynamicRange?) -> SwiftUICore.Image
  #else
  public func allowedDynamicRange(_ range: SwiftUICore.Image.DynamicRange?) -> SwiftUICore.Image
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var allowedDynamicRange: SwiftUICore.Image.DynamicRange? {
    get
    set
  }
  #else
  public var allowedDynamicRange: SwiftUICore.Image.DynamicRange? {
    get
    set
  }
  #endif
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var maxAllowedDynamicRange: SwiftUICore.Image.DynamicRange? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #else
  @_spi(Private) public var maxAllowedDynamicRange: SwiftUICore.Image.DynamicRange? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient nonisolated public func allowedDynamicRange(_ range: SwiftUICore.Image.DynamicRange?) -> some SwiftUICore.View {
        return environment(\.allowedDynamicRange, range)
    }
  
  #else
  @_alwaysEmitIntoClient nonisolated public func allowedDynamicRange(_ range: SwiftUICore.Image.DynamicRange?) -> some SwiftUICore.View {
        return environment(\.allowedDynamicRange, range)
    }
  
  #endif
}
extension SwiftUICore.Image.DynamicRange : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct SymbolVariants : Swift.Hashable, Swift.Sendable {
  package enum Shape : Swift.Hashable {
    case circle
    case square
    case rectangle
    package var suffix: Swift.String {
      get
    }
    package static func == (a: SwiftUICore.SymbolVariants.Shape, b: SwiftUICore.SymbolVariants.Shape) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  public static let none: SwiftUICore.SymbolVariants
  public static let circle: SwiftUICore.SymbolVariants
  public static let square: SwiftUICore.SymbolVariants
  public static let rectangle: SwiftUICore.SymbolVariants
  public var circle: SwiftUICore.SymbolVariants {
    get
  }
  public var square: SwiftUICore.SymbolVariants {
    get
  }
  public var rectangle: SwiftUICore.SymbolVariants {
    get
  }
  public static let fill: SwiftUICore.SymbolVariants
  public var fill: SwiftUICore.SymbolVariants {
    get
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static let background: SwiftUICore.SymbolVariants
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var background: SwiftUICore.SymbolVariants {
    get
  }
  public static let slash: SwiftUICore.SymbolVariants
  public var slash: SwiftUICore.SymbolVariants {
    get
  }
  package mutating func formUnion(_ other: SwiftUICore.SymbolVariants)
  public func contains(_ other: SwiftUICore.SymbolVariants) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.SymbolVariants, b: SwiftUICore.SymbolVariants) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func symbolVariant(_ variant: SwiftUICore.SymbolVariants) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var symbolVariants: SwiftUICore.SymbolVariants {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var symbolBackgroundCornerRadius: CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var symbolBackgroundCornerRadius: CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var symbolsGrowToFitBackground: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func appearanceAnimation<V>(animation: SwiftUICore.Animation = Animation.default, modifier: (Self, Swift.Bool) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency package struct AppearanceAnimationView<Content, Modified> : SwiftUICore.ConditionallyArchivableView where Content : SwiftUICore.View, Modified : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency package var archivedBody: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  package typealias ArchivedBody = @_opaqueReturnTypeOf("$s7SwiftUI23AppearanceAnimationViewV12archivedBodyQrvp", 0) __<Content, Modified>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23AppearanceAnimationViewV4bodyQrvp", 0) __<Content, Modified>
}
package struct CodablePlatformImage : SwiftUICore.ProtobufMessage {
  package var base: SwiftUICore.CorePlatformImage
  package init(_ image: ObjectiveC.NSObject) throws
  package var kitImage: ObjectiveC.NSObject {
    get
  }
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct CodableCGImage : SwiftUICore.ProtobufMessage {
  package var base: CoreGraphics.CGImage
  package init(_ base: CoreGraphics.CGImage)
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct CodableRBDisplayListContents : SwiftUICore.ProtobufMessage {
  package var base: any RenderBox.RBDisplayListContents
  package init(_ base: any RenderBox.RBDisplayListContents)
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@objc final package class RBDisplayListEncoderDelegate : ObjectiveC.NSObject, RenderBox.RBEncoderDelegate {
  final package let encoder: SwiftUICore.ProtobufEncoder
  package init(_ encoder: SwiftUICore.ProtobufEncoder)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc final package var encoderSet: RenderBox.RBEncoderSet? {
    @objc get
  }
  #else
  @objc final package var encoderSet: RenderBox.RBEncoderSet? {
    @objc get
  }
  #endif
  @objc final package func encodedData(image: RenderBox.RBImage) throws -> Foundation.Data
  @objc final package func encodedData(cgFont: CoreGraphics.CGFont) throws -> Foundation.Data
  @objc final package func shouldEncodeFontSubset(cgFont: CoreGraphics.CGFont) -> Swift.Bool
  @objc final package func encodedFontData(data: Foundation.Data, cgFont: CoreGraphics.CGFont) throws -> Foundation.Data
  @objc deinit
}
@objc final package class RBDisplayListDecoderDelegate : ObjectiveC.NSObject, RenderBox.RBDecoderDelegate {
  final package let decoder: SwiftUICore.ProtobufDecoder
  package init(_ decoder: SwiftUICore.ProtobufDecoder)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc final package func decodedImageContents(data: Foundation.Data, type: Swift.UnsafeMutablePointer<RenderBox.RBImageType>) throws -> CoreFoundation.CFTypeRef
  #else
  @objc final package func decodedImageContents(data: Foundation.Data, type: Swift.UnsafeMutablePointer<RenderBox.RBImageType>) throws -> CoreFoundation.CFTypeRef
  #endif
  @objc final package func decodedCGFont(data: Foundation.Data) throws -> CoreGraphics.CGFont
  @objc deinit
}
extension CoreGraphics.CGImage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func render(size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat, environment: SwiftUICore.EnvironmentValues, options: SwiftUICore.RasterizationOptions, renderer: (inout SwiftUICore.GraphicsContext) -> Swift.Void) -> CoreGraphics.CGImage?
  #else
  package static func render(size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat, environment: SwiftUICore.EnvironmentValues, options: SwiftUICore.RasterizationOptions, renderer: (inout SwiftUICore.GraphicsContext) -> Swift.Void) -> CoreGraphics.CGImage?
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(size: CoreFoundation.CGSize, label: SwiftUICore.Text? = nil, opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, renderer: @escaping (inout SwiftUICore.GraphicsContext) -> Swift.Void)
  #else
  public init(size: CoreFoundation.CGSize, label: SwiftUICore.Text? = nil, opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, renderer: @escaping (inout SwiftUICore.GraphicsContext) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(size: CoreFoundation.CGSize, label: SwiftUICore.Text? = nil, options: SwiftUICore.RasterizationOptions, renderer: @escaping (inout SwiftUICore.GraphicsContext) -> Swift.Void)
  #else
  package init(size: CoreFoundation.CGSize, label: SwiftUICore.Text? = nil, options: SwiftUICore.RasterizationOptions, renderer: @escaping (inout SwiftUICore.GraphicsContext) -> Swift.Void)
  #endif
}
package protocol Feature : SwiftUICore.ViewInputBoolFlag {
  static var isEnabled: Swift.Bool { get }
}
extension SwiftUICore.Feature {
  @inlinable package static var defaultValue: Swift.Bool {
    get
  }
}
package protocol UserDefaultKeyedFeature : SwiftUICore.Feature {
  static var key: Swift.String { get }
  static var defaultFeatureValue: Swift.Bool { get }
  static var defaults: Foundation.UserDefaults { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  static var cachedValue: Swift.Bool? { get set }
  #else
  static var cachedValue: Swift.Bool? { get set }
  #endif
}
extension SwiftUICore.UserDefaultKeyedFeature {
  package static var isEnabled: Swift.Bool {
    get
  }
  package static var defaultFeatureValue: Swift.Bool {
    get
  }
  package static var defaults: Foundation.UserDefaults {
    get
  }
}
extension SwiftUICore.UserDefaultKeyedFeature {
  package static func test<R>(enabled: Swift.Bool, _ body: () throws -> R) rethrows -> R
}
package struct BothFeatures<Left, Right> : SwiftUICore.Feature where Left : SwiftUICore.Feature, Right : SwiftUICore.Feature {
  @inlinable package init()
  @inlinable package static var isEnabled: Swift.Bool {
    get
  }
  package typealias Value = Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundModifier<Background> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Background : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var background: Background
  @_Concurrency.MainActor @preconcurrency public var alignment: SwiftUICore.Alignment
  @inlinable nonisolated public init(background: Background, alignment: SwiftUICore.Alignment = .center) {
        self.background = background
        self.alignment = alignment
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundModifier<Background>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._BackgroundModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackgroundModifier : Swift.Equatable where Background : Swift.Equatable {
  nonisolated public static func == (a: SwiftUICore._BackgroundModifier<Background>, b: SwiftUICore._BackgroundModifier<Background>) -> Swift.Bool
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundStyleModifier<Style> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore.ShapeStyledLeafView where Style : SwiftUICore.ShapeStyle {
  @_Concurrency.MainActor @preconcurrency public var style: Style
  @_Concurrency.MainActor @preconcurrency public var ignoresSafeAreaEdges: SwiftUICore.Edge.Set
  @inlinable nonisolated public init(style: Style, ignoresSafeAreaEdges: SwiftUICore.Edge.Set) {
        self.style = style
        self.ignoresSafeAreaEdges = ignoresSafeAreaEdges
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundStyleModifier<Style>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated package static func makeShapeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundStyleModifier<Style>>, inputs: SwiftUICore._ViewInputs, shapeIsBackground: Swift.Bool, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package func shape(in size: CoreFoundation.CGSize) -> SwiftUICore._BackgroundStyleModifier<Style>.FramedShape
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias ShapeUpdateData = Swift.Void
}
@available(*, unavailable)
extension SwiftUICore._BackgroundStyleModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BackgroundShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore.ShapeStyledLeafView where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var style: Style
  @_Concurrency.MainActor @preconcurrency public var shape: Bounds
  @_Concurrency.MainActor @preconcurrency public var fillStyle: SwiftUICore.FillStyle
  @inlinable nonisolated public init(style: Style, shape: Bounds, fillStyle: SwiftUICore.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._BackgroundShapeModifier<Style, Bounds>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package func shape(in size: CoreFoundation.CGSize) -> SwiftUICore._BackgroundShapeModifier<Style, Bounds>.FramedShape
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias ShapeUpdateData = Swift.Void
}
@available(*, unavailable)
extension SwiftUICore._BackgroundShapeModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _InsettableBackgroundShapeModifier<Style, Bounds> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Style : SwiftUICore.ShapeStyle, Bounds : SwiftUICore.InsettableShape {
  @_Concurrency.MainActor @preconcurrency public var style: Style
  @_Concurrency.MainActor @preconcurrency public var shape: Bounds
  @_Concurrency.MainActor @preconcurrency public var fillStyle: SwiftUICore.FillStyle
  @inlinable nonisolated public init(style: Style, shape: Bounds, fillStyle: SwiftUICore.FillStyle) {
        self.style = style
        self.shape = shape
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._InsettableBackgroundShapeModifier<Style, Bounds>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._InsettableBackgroundShapeModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `background(alignment:content:)` instead.")
  @inlinable @_disfavoredOverload nonisolated public func background<Background>(_ background: Background, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View where Background : SwiftUICore.View {
        return modifier(
            _BackgroundModifier(background: background, alignment: alignment))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func background<V>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(
            _BackgroundModifier(background: content(), alignment: alignment))
    }
  
  @inlinable nonisolated public func background(ignoresSafeAreaEdges edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View {
        modifier(_BackgroundStyleModifier(
            style: .background, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable nonisolated public func background<S>(_ style: S, ignoresSafeAreaEdges edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_BackgroundStyleModifier(
            style: style, ignoresSafeAreaEdges: edges))
    }
  
  @inlinable nonisolated public func background<S>(in shape: S, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        modifier(_BackgroundShapeModifier(
            style: .background, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable nonisolated public func background<S, T>(_ style: S, in shape: T, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle, T : SwiftUICore.Shape {
        modifier(_BackgroundShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable nonisolated public func background<S>(in shape: S, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.InsettableShape {
        modifier(_InsettableBackgroundShapeModifier(
            style: .background, shape: shape, fillStyle: fillStyle))
    }
  
  @inlinable nonisolated public func background<S, T>(_ style: S, in shape: T, fillStyle: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle, T : SwiftUICore.InsettableShape {
        modifier(_InsettableBackgroundShapeModifier(
            style: style, shape: shape, fillStyle: fillStyle))
    }
  
}
package protocol StronglyHashable {
  func hash(into hasher: inout SwiftUICore.StrongHasher)
}
package struct StrongHash : Swift.Hashable, SwiftUICore.StronglyHashableByBitPattern, Swift.Codable, Swift.CustomStringConvertible {
  package var words: (Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32)
  package init()
  package init<T>(of value: T) where T : SwiftUICore.StronglyHashable
  package init<T>(encodable value: T) throws where T : Swift.Encodable
  package static func random() -> SwiftUICore.StrongHash
  package static func == (lhs: SwiftUICore.StrongHash, rhs: SwiftUICore.StrongHash) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var description: Swift.String {
    get
  }
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package var hashValue: Swift.Int {
    get
  }
}
package struct StrongHasher {
  package init()
  package mutating func finalize() -> SwiftUICore.StrongHash
  package mutating func combineBytes(_ ptr: Swift.UnsafeRawPointer, count: Swift.Int)
  package mutating func combineBitPattern<T>(_ x: T)
  package mutating func combine<T>(_ x: T) where T : SwiftUICore.StronglyHashable
  package mutating func combineType(_ type: any Any.Type)
}
extension Swift.String : SwiftUICore.StronglyHashable {
  package func hash(into hasher: inout SwiftUICore.StrongHasher)
}
extension Foundation.Data : SwiftUICore.StronglyHashable {
  package func hash(into hasher: inout SwiftUICore.StrongHasher)
}
extension Swift.Bool : SwiftUICore.StronglyHashable {
  package func hash(into hasher: inout SwiftUICore.StrongHasher)
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional where Wrapped : SwiftUICore.StronglyHashable {
  package func hash(into hasher: inout SwiftUICore.StrongHasher)
}
#else
extension Swift.Optional where Wrapped : SwiftUICore.StronglyHashable {
  package func hash(into hasher: inout SwiftUICore.StrongHasher)
}
#endif
extension Swift.RawRepresentable where Self.RawValue : SwiftUICore.StronglyHashable {
  package func hash(into hasher: inout SwiftUICore.StrongHasher)
}
package protocol StronglyHashableByBitPattern : SwiftUICore.StronglyHashable {
}
extension SwiftUICore.StronglyHashableByBitPattern {
  package func hash(into hasher: inout SwiftUICore.StrongHasher)
}
extension Swift.Int : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.UInt : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.Int8 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.UInt8 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.Int16 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.UInt16 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.Int32 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.UInt32 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.Int64 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.UInt64 : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.Float : SwiftUICore.StronglyHashableByBitPattern {
}
extension Swift.Double : SwiftUICore.StronglyHashableByBitPattern {
}
extension Foundation.UUID : SwiftUICore.StronglyHashableByBitPattern {
}
extension RenderBox.RBUUID {
  package init(hash: SwiftUICore.StrongHash)
}
extension SwiftUICore.StrongHash : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol CustomAnimation : Swift.Hashable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
}
package protocol InternalCustomAnimation : SwiftUICore.CustomAnimation {
  var function: SwiftUICore.Animation.Function { get }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CustomAnimation {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  public func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  public func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Swift.Never : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
@discardableResult
package func withDelay(_ timeInterval: Foundation.TimeInterval, do body: @escaping () -> Swift.Void) -> Foundation.Timer
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol DynamicViewContent : SwiftUICore.View {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach : SwiftUICore.DynamicViewContent where Content : SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ModifiedContent : SwiftUICore.DynamicViewContent where Content : SwiftUICore.DynamicViewContent, Modifier : SwiftUICore.ViewModifier {
  public var data: Content.Data {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Data = Content.Data
}
package struct DynamicViewContentIDTraitKey : SwiftUICore._ViewTraitKey {
  package static let defaultValue: Swift.Int?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = Swift.Int?
}
package struct DynamicViewContentOffsetTraitKey : SwiftUICore._ViewTraitKey {
  package static let defaultValue: Swift.Int?
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = Swift.Int?
}
package struct DynamicContentOffsetVisitor : SwiftUICore.ViewListVisitor {
  package var offset: Swift.Int?
  package mutating func visit(view: SwiftUICore._ViewList_View, traits: SwiftUICore.ViewTraitCollection) -> Swift.Bool
}
package struct PreferencesInputs {
  package var keys: SwiftUICore.PreferenceKeys
  package var hostKeys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>
  @inlinable package init(hostKeys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>)
  @inlinable package mutating func remove<K>(_ key: K.Type) where K : SwiftUICore.PreferenceKey
  @inlinable package mutating func add<K>(_ key: K.Type) where K : SwiftUICore.PreferenceKey
  @inlinable package func contains<K>(_ key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  @inlinable package func contains<K>(_ key: K.Type, includeHostPreferences: Swift.Bool) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  package func makeIndirectOutputs() -> SwiftUICore.PreferencesOutputs
}
package protocol ProtocolDescriptor {
  static var descriptor: Swift.UnsafeRawPointer { get }
}
extension SwiftUICore.ProtocolDescriptor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func conformance(of type: any Any.Type) -> SwiftUICore.TypeConformance<Self>?
  #else
  package static func conformance(of type: any Any.Type) -> SwiftUICore.TypeConformance<Self>?
  #endif
}
package struct TypeConformance<P> where P : SwiftUICore.ProtocolDescriptor {
  package let storage: (type: any Any.Type, conformance: Swift.UnsafeRawPointer)
  package init(storage: (type: any Any.Type, conformance: Swift.UnsafeRawPointer))
  package var type: any Any.Type {
    get
  }
  package var conformance: Swift.UnsafeRawPointer {
    get
  }
  package var metadata: Swift.UnsafeRawPointer {
    get
  }
  package func unsafeExistentialMetatype<ExistentialMetatype>(_ type: ExistentialMetatype.Type) -> ExistentialMetatype
}
extension SwiftUICore.TimeDataFormatting {
  package enum UpdateFrequency : Swift.Codable, Swift.Hashable, Swift.Comparable {
    case high
    case second
    case minute
    package init(duration: Swift.Duration)
    package var frequency: Swift.Double {
      get
    }
    package var interval: Foundation.TimeInterval {
      get
    }
    package var magnitude: Foundation.Calendar.Component.Magnitude {
      get
    }
    package var duration: Swift.Duration {
      get
    }
    package static func < (lhs: SwiftUICore.TimeDataFormatting.UpdateFrequency, rhs: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Swift.Bool
    package static func == (a: SwiftUICore.TimeDataFormatting.UpdateFrequency, b: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
}
package protocol UpdateFrequencyDependentFormatStyle : Foundation.FormatStyle {
  func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Self
}
extension Foundation.Date.FormatStyle : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Foundation.Date.FormatStyle
}
extension Foundation.Date.FormatStyle.Attributed : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Foundation.Date.FormatStyle.Attributed
}
extension SwiftUICore.WhitespaceRemovingFormatStyle : SwiftUICore.UpdateFrequencyDependentFormatStyle where Format : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> SwiftUICore.WhitespaceRemovingFormatStyle<Format, Key>
}
extension Foundation.Date.AnchoredRelativeFormatStyle : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Foundation.Date.AnchoredRelativeFormatStyle
}
extension Swift.Duration.UnitsFormatStyle : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> Swift.Duration.UnitsFormatStyle
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @propertyWrapper public struct State<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUICore.AnyLocation<Value>?
  public init(wrappedValue value: Value)
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal init(wrappedValue thunk: @autoclosure @escaping () -> Value) where Value : AnyObject, Value : Observation.Observable
  @_alwaysEmitIntoClient public init(initialValue value: Value) {
        _value = value
    }
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.State : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.State where Value : Swift.ExpressibleByNilLiteral {
  @inlinable public init() {
        self.init(wrappedValue: nil)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct AnimationContext<Value> where Value : SwiftUICore.VectorArithmetic {
  public var state: SwiftUICore.AnimationState<Value>
  public var isLogicallyComplete: Swift.Bool
  public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(state: SwiftUICore.AnimationState<Value>, environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool)
  #else
  package init(state: SwiftUICore.AnimationState<Value>, environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(state: SwiftUICore.AnimationState<Value>, environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?)
  #else
  package init(state: SwiftUICore.AnimationState<Value>, environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool)
  #else
  package init(environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?)
  #else
  package init(environment: AttributeGraph.WeakAttribute<SwiftUICore.EnvironmentValues>?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(state: SwiftUICore.AnimationState<Value> = .init(), environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool = false)
  #else
  package init(state: SwiftUICore.AnimationState<Value> = .init(), environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool = false)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(state: SwiftUICore.AnimationState<Value>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #else
  package init(state: SwiftUICore.AnimationState<Value>, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool)
  #else
  package init(environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?, isLogicallyComplete: Swift.Bool)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #else
  package init(environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>?)
  #endif
  public func withState<T>(_ state: SwiftUICore.AnimationState<T>) -> SwiftUICore.AnimationContext<T> where T : SwiftUICore.VectorArithmetic
}
@available(*, unavailable)
extension SwiftUICore.AnimationContext : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _TestApp {
  package static var rootViewIdentifier: some Swift.Hashable {
    get
  }
  package static var comparisonViewIdentifier: some Swift.Hashable {
    get
  }
  @_Concurrency.MainActor @preconcurrency package struct RootView : SwiftUICore.View {
    package struct StateType {
      package var id: Swift.Int {
        get
      }
      package var testView: SwiftUICore.AnyView {
        get
      }
      package init()
      package mutating func setTestView<V>(_ view: V) where V : SwiftUICore.View
    }
    @_Concurrency.MainActor @preconcurrency package init()
    @_Concurrency.MainActor @preconcurrency package var body: some SwiftUICore.View {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8_TestAppV8RootViewV4bodyQrvp", 0) __
  }
  package static let defaultEnvironment: SwiftUICore.EnvironmentValues
  public init()
  package static var host: (any SwiftUICore.TestHost)?
  package static var comparisonHost: (any SwiftUICore.TestHost)?
  package static func setIntents(_ intents: SwiftUICore.TestIntents)
  package static func isIntending(to intents: SwiftUICore.TestIntents) -> Swift.Bool
  package static var environmentOverride: SwiftUICore.EnvironmentValues?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func setTestEnvironment(_ environment: SwiftUICore.EnvironmentValues?)
  #else
  package static func setTestEnvironment(_ environment: SwiftUICore.EnvironmentValues?)
  #endif
  package static func updateTestEnvironment(_ body: (inout SwiftUICore.EnvironmentValues) -> Swift.Void)
  package func setSemantics(_ version: Swift.String)
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public enum EventSourceType : Swift.CaseIterable {
  @_spi(ForSwiftUIOnly) case platformGestureRecognizer
  @_spi(ForSwiftUIOnly) @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  case platformHostingView
  @_spi(ForSwiftUIOnly) @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  case hoverGestureRecognizer
  @_spi(ForSwiftUIOnly) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  case selectGestureRecognizer
  @_spi(ForSwiftUIOnly) public static var allCases: [SwiftUICore.EventSourceType] {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.EventSourceType, b: SwiftUICore.EventSourceType) -> Swift.Bool
  @_spi(ForSwiftUIOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias AllCases = [SwiftUICore.EventSourceType]
  @_spi(ForSwiftUIOnly) public var hashValue: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.EventSourceType : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._TestApp : Swift.Sendable {
}
extension SwiftUICore._TestApp {
  package static func date(for time: SwiftUICore.Time) -> Foundation.Date
  package static var dateIsSynchronizedWithTime: Swift.Bool {
    get
  }
}
final package class ObjectCache<Key, Value> where Key : Swift.Hashable {
  @inlinable package init(constructor: @escaping (Key) -> Value)
  final package subscript(key: Key) -> Value {
    get
  }
  @objc deinit
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable prefix package static func - (operand: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        var result = operand
        result.width = -result.width
        result.height = -result.height
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func += (lhs: inout CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) {
        lhs.width += rhs.width
        lhs.height += rhs.height
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func + (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        var result = lhs
        result += rhs
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func -= (lhs: inout CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) {
        lhs.width -= rhs.width
        lhs.height -= rhs.height
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func - (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) -> CoreFoundation.CGSize {
        var result = lhs
        result -= rhs
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func *= (lhs: inout CoreFoundation.CGSize, rhs: Swift.Double) {
        lhs.width *= CGFloat(rhs)
        lhs.height *= CGFloat(rhs)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func * (lhs: CoreFoundation.CGSize, rhs: Swift.Double) -> CoreFoundation.CGSize {
        var result = lhs
        result *= rhs
        return result
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func /= (lhs: inout CoreFoundation.CGSize, rhs: Swift.Double) {
        lhs *= 1 / rhs
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package static func / (lhs: CoreFoundation.CGSize, rhs: Swift.Double) -> CoreFoundation.CGSize {
        var result = lhs
        result /= rhs
        return result
    }
}
package func mix(_ lhs: CoreFoundation.CGSize, _ rhs: CoreFoundation.CGSize, by t: Swift.Double) -> CoreFoundation.CGSize
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol ArchivedViewDelegate {
  @_spi(Private) mutating func resolveImage(uuid: Foundation.UUID) throws -> SwiftUICore.Image.ResolvedUUID
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class AnyArchivedViewDelegate {
  @_spi(ForSwiftUIOnly) package init()
  @_spi(ForSwiftUIOnly) open func resolveImage(uuid: Foundation.UUID) throws -> SwiftUICore.Image.ResolvedUUID
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.AnyArchivedViewDelegate : Swift.Sendable {
}
package enum GestureDependency {
  case none
  case pausedWhileActive
  case pausedUntilFailed
  case failIfActive
  package static func == (a: SwiftUICore.GestureDependency, b: SwiftUICore.GestureDependency) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.Gesture {
  package func dependency(_ dependency: SwiftUICore.GestureDependency) -> some SwiftUICore.Gesture<Self.Value>
  
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
open class ResponderNode {
  @_spi(ForSwiftUIOnly) public init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open var nextResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) open var nextResponder: SwiftUICore.ResponderNode? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) open func bindEvent(_ event: any SwiftUICore.EventType) -> SwiftUICore.ResponderNode?
  #else
  @_spi(ForSwiftUIOnly) open func bindEvent(_ event: any SwiftUICore.EventType) -> SwiftUICore.ResponderNode?
  #endif
  @_spi(ForSwiftUIOnly) @discardableResult
  open func visit(applying visitor: (SwiftUICore.ResponderNode) -> SwiftUICore.ResponderVisitorResult) -> SwiftUICore.ResponderVisitorResult
  @_spi(ForSwiftUIOnly) open func makeGesture(inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  @_spi(ForSwiftUIOnly) open func resetGesture()
  @_spi(ForSwiftUIOnly) final package var sequence: SwiftUICore.ResponderSequence {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) final package func isDescendant(of responder: SwiftUICore.ResponderNode) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) final package func firstAncestor<T>(ofType type: T.Type = T.self) -> T?
  #else
  @_spi(ForSwiftUIOnly) final package func firstAncestor<T>(ofType type: T.Type = T.self) -> T?
  #endif
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.ResponderNode : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
public enum ResponderVisitorResult : Swift.Equatable {
  @_spi(ForSwiftUIOnly) case next
  @_spi(ForSwiftUIOnly) case skipToNextSibling
  @_spi(ForSwiftUIOnly) case cancel
  @_spi(ForSwiftUIOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.ResponderVisitorResult, b: SwiftUICore.ResponderVisitorResult) -> Swift.Bool
  @_spi(ForSwiftUIOnly) public var hashValue: Swift.Int {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.ResponderVisitorResult : Swift.Sendable {
}
package struct ResponderSequence : Swift.Sequence {
  package struct Iterator : Swift.IteratorProtocol {
    #if compiler(>=5.3) && $NoncopyableGenerics
    package mutating func next() -> SwiftUICore.ResponderNode?
    #else
    package mutating func next() -> SwiftUICore.ResponderNode?
    #endif
    package typealias Element = SwiftUICore.ResponderNode
  }
  package func makeIterator() -> SwiftUICore.ResponderSequence.Iterator
  package typealias Element = SwiftUICore.ResponderNode
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct AnyTransition {
  fileprivate let box: SwiftUICore.AnyTransitionBox
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<T>(_ transition: T) where T : SwiftUICore.Transition
  package func visitBase<V>(applying v: inout V) where V : SwiftUICore.TransitionVisitor
  package func visitType<V>(applying v: inout V) where V : SwiftUICore.TransitionTypeVisitor
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func base<T>(as _: T.Type) -> T? where T : SwiftUICore.Transition
  #else
  package func base<T>(as _: T.Type) -> T? where T : SwiftUICore.Transition
  #endif
  package var isIdentity: Swift.Bool {
    get
  }
  package func adjustedForAccessibility(prefersCrossFade: Swift.Bool) -> SwiftUICore.AnyTransition
}
@available(*, unavailable)
extension SwiftUICore.AnyTransition : Swift.Sendable {
}
package protocol TransitionVisitor {
  mutating func visit<T>(_ transition: T) where T : SwiftUICore.Transition
}
package protocol TransitionTypeVisitor {
  mutating func visit<T>(_ type: T.Type) where T : SwiftUICore.Transition
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnyTransitionBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyTransitionBox : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _ArchivedViewHostDelegate {
  @_spi(Private) mutating func viewDataNeedsUpdate()
  @_spi(Private) mutating func failedToEncodeView(type: any Any.Type)
  @_spi(Private) mutating func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) func preferredImageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #else
  @_spi(Private) func preferredImageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol ArchivedViewHostStates {
  @_spi(Private) var count: Swift.Int { get }
  @_spi(Private) mutating func updateState(at index: Swift.Int, proxy: SwiftUICore.ArchivedViewStateProxy) throws
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) func auxiliaryData() throws -> Foundation.Data?
  #else
  @_spi(Private) func auxiliaryData() throws -> Foundation.Data?
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ArchivedViewStateProxy {
  @_spi(Private) package init(writer: SwiftUICore.ArchiveWriter)
  @_spi(Private) public func addAttachment(data: Foundation.Data) throws -> Swift.Int
  @_spi(Private) public func addAttachment(encoder: (CoreGraphics.CGDataConsumer) throws -> Swift.Void) throws -> Swift.Int
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.ArchivedViewStateProxy : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ArchivedViewHostDelegate {
  @_spi(Private) public mutating func failedToEncodeView(type: any Any.Type)
  @_spi(Private) public mutating func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func preferredImageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #else
  @_spi(Private) public func preferredImageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #endif
}
package protocol AnyArchivedViewHost {
  func failedToEncodeView(type: any Any.Type)
  func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
  var allowedImageTypes: Swift.Set<UniformTypeIdentifiers.UTType> { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func imageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #else
  func imageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #endif
}
extension SwiftUICore._DisplayList_StableIdentityMap {
  package mutating func addIDs(from list: SwiftUICore.DisplayList, root: SwiftUICore.DisplayList.StableIdentityRoot)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public func combined(with other: SwiftUICore.AnyTransition) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public func combined<T>(with other: T) -> some SwiftUICore.Transition where T : SwiftUICore.Transition
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ContentTransition : Swift.Equatable, Swift.Sendable {
  package enum Storage : Swift.Equatable, @unchecked Swift.Sendable {
    case named(SwiftUICore.ContentTransition.NamedTransition)
    case custom(SwiftUICore.ContentTransition.CustomTransition)
    case symbolReplace(SwiftUICore._SymbolEffect.ReplaceConfiguration)
    package static func == (a: SwiftUICore.ContentTransition.Storage, b: SwiftUICore.ContentTransition.Storage) -> Swift.Bool
  }
  @_spi(Private) public struct Style : Swift.Hashable, Swift.Sendable, Swift.Codable {
    @_spi(Private) package enum Storage : Swift.Hashable, Swift.Sendable {
      @_spi(Private) case `default`
      @_spi(Private) case sessionWidget
      @_spi(Private) case animatedWidget
      @_spi(Private) package static func == (a: SwiftUICore.ContentTransition.Style.Storage, b: SwiftUICore.ContentTransition.Style.Storage) -> Swift.Bool
      @_spi(Private) package func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) package var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) package var storage: SwiftUICore.ContentTransition.Style.Storage
    @_spi(Private) package init(_ storage: SwiftUICore.ContentTransition.Style.Storage)
    @_spi(Private) public static let `default`: SwiftUICore.ContentTransition.Style
    @_spi(Private) public static let sessionWidget: SwiftUICore.ContentTransition.Style
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public static let animatedWidget: SwiftUICore.ContentTransition.Style
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.ContentTransition.Style, b: SwiftUICore.ContentTransition.Style) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
  package var storage: SwiftUICore.ContentTransition.Storage
  package var isReplaceable: Swift.Bool
  package init(storage: SwiftUICore.ContentTransition.Storage)
  package struct NamedTransition : Swift.Hashable, Swift.Sendable {
    package enum Name : Swift.Hashable {
      case `default`
      case identity
      case opacity
      case diff
      case fadeIfDifferent
      case text(different: Swift.Bool)
      case numericText(SwiftUICore.ContentTransition.NumericTextConfiguration)
      package func hash(into hasher: inout Swift.Hasher)
      package static func == (a: SwiftUICore.ContentTransition.NamedTransition.Name, b: SwiftUICore.ContentTransition.NamedTransition.Name) -> Swift.Bool
      package var hashValue: Swift.Int {
        get
      }
    }
    package var name: SwiftUICore.ContentTransition.NamedTransition.Name
    package var layoutDirection: SwiftUICore.LayoutDirection?
    package var style: SwiftUICore.ContentTransition.Style?
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(name: SwiftUICore.ContentTransition.NamedTransition.Name = .default, layoutDirection: SwiftUICore.LayoutDirection? = nil, style: SwiftUICore.ContentTransition.Style? = nil)
    #else
    package init(name: SwiftUICore.ContentTransition.NamedTransition.Name = .default, layoutDirection: SwiftUICore.LayoutDirection? = nil, style: SwiftUICore.ContentTransition.Style? = nil)
    #endif
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.ContentTransition.NamedTransition, b: SwiftUICore.ContentTransition.NamedTransition) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct NumericTextConfiguration : Swift.Hashable, Swift.Sendable {
    @_spi(Private) package enum Direction : Swift.Hashable {
      @_spi(Private) case fixed(downwards: Swift.Bool)
      @_spi(Private) case automatic(value: Swift.Float)
      @_spi(Private) package func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) package static func == (a: SwiftUICore.ContentTransition.NumericTextConfiguration.Direction, b: SwiftUICore.ContentTransition.NumericTextConfiguration.Direction) -> Swift.Bool
      @_spi(Private) package var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) package struct Options : Swift.OptionSet, Swift.Hashable {
      @_spi(Private) package let rawValue: Swift.UInt8
      @_spi(Private) package init(rawValue: Swift.UInt8)
      @_spi(Private) package static let reversed: SwiftUICore.ContentTransition.NumericTextConfiguration.Options
      @_spi(Private) package static let relativeBlur: SwiftUICore.ContentTransition.NumericTextConfiguration.Options
      @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      package typealias ArrayLiteralElement = SwiftUICore.ContentTransition.NumericTextConfiguration.Options
      @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      package typealias Element = SwiftUICore.ContentTransition.NumericTextConfiguration.Options
      @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
      package typealias RawValue = Swift.UInt8
    }
    @_spi(Private) package var direction: SwiftUICore.ContentTransition.NumericTextConfiguration.Direction
    @_spi(Private) package var axis: SwiftUICore.Axis?
    @_spi(Private) package var options: SwiftUICore.ContentTransition.NumericTextConfiguration.Options
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) package init(direction: SwiftUICore.ContentTransition.NumericTextConfiguration.Direction = .fixed(downwards: false), axis: SwiftUICore.Axis? = nil, options: SwiftUICore.ContentTransition.NumericTextConfiguration.Options = .relativeBlur)
    #else
    @_spi(Private) package init(direction: SwiftUICore.ContentTransition.NumericTextConfiguration.Direction = .fixed(downwards: false), axis: SwiftUICore.Axis? = nil, options: SwiftUICore.ContentTransition.NumericTextConfiguration.Options = .relativeBlur)
    #endif
    @_spi(Private) package var delay: Swift.Float {
      @_spi(Private) get
      @_spi(Private) set
    }
    @_spi(Private) package var maxDurationMultiple: Swift.Float {
      @_spi(Private) get
    }
    @_spi(Private) package var scale: Swift.Float {
      @_spi(Private) get
      @_spi(Private) set
    }
    @_spi(Private) package var blur: Swift.Float {
      @_spi(Private) get
      @_spi(Private) set
    }
    @_spi(Private) package var relativeBlur: Swift.Float {
      @_spi(Private) get
      @_spi(Private) set
    }
    @_spi(Private) package var offset: Swift.Float {
      @_spi(Private) get
      @_spi(Private) set
    }
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.ContentTransition.NumericTextConfiguration, b: SwiftUICore.ContentTransition.NumericTextConfiguration) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
  package init(_ name: SwiftUICore.ContentTransition.NamedTransition.Name)
  package struct CustomTransition : Swift.Equatable, Swift.Sendable {
    package var effects: [SwiftUICore.ContentTransition.Effect]
    package var method: SwiftUICore.ContentTransition.Method
    package var layoutDirection: SwiftUICore.LayoutDirection?
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(effects: [SwiftUICore.ContentTransition.Effect], method: SwiftUICore.ContentTransition.Method, layoutDirection: SwiftUICore.LayoutDirection? = nil)
    #else
    package init(effects: [SwiftUICore.ContentTransition.Effect], method: SwiftUICore.ContentTransition.Method, layoutDirection: SwiftUICore.LayoutDirection? = nil)
    #endif
    package static func == (a: SwiftUICore.ContentTransition.CustomTransition, b: SwiftUICore.ContentTransition.CustomTransition) -> Swift.Bool
  }
  @_spi(Private) public struct EffectType : Swift.Equatable, Swift.Sendable {
    @_spi(Private) package enum Arg : Swift.Equatable, Swift.Sendable {
      @_spi(Private) case none
      @_spi(Private) case float(Swift.Float)
      @_spi(Private) case int(Swift.UInt32)
      @_spi(Private) package static func == (a: SwiftUICore.ContentTransition.EffectType.Arg, b: SwiftUICore.ContentTransition.EffectType.Arg) -> Swift.Bool
    }
    @_spi(Private) package var type: RenderBox.RBTransitionEffectType
    @_spi(Private) package var arg0: SwiftUICore.ContentTransition.EffectType.Arg, arg1: SwiftUICore.ContentTransition.EffectType.Arg
    @_spi(Private) package init(type: RenderBox.RBTransitionEffectType, arg0: SwiftUICore.ContentTransition.EffectType.Arg = .none, arg1: SwiftUICore.ContentTransition.EffectType.Arg = .none)
    @_spi(Private) public static var opacity: SwiftUICore.ContentTransition.EffectType {
      @_spi(Private) get
    }
    @_spi(Private) @available(*, deprecated, message: "use opacity variable")
    public static func opacity(_ opacity: Swift.Double = 0) -> SwiftUICore.ContentTransition.EffectType
    @_spi(Private) public static func blur(radius: CoreFoundation.CGFloat) -> SwiftUICore.ContentTransition.EffectType
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public static func relativeBlur(scale: CoreFoundation.CGSize) -> SwiftUICore.ContentTransition.EffectType
    @_spi(Private) public static func scale(_ scale: CoreFoundation.CGFloat = 0) -> SwiftUICore.ContentTransition.EffectType
    @_spi(Private) public static func translation(_ size: CoreFoundation.CGSize) -> SwiftUICore.ContentTransition.EffectType
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public static func translation(scale: CoreFoundation.CGSize) -> SwiftUICore.ContentTransition.EffectType
    @_spi(Private) public static var matchMove: SwiftUICore.ContentTransition.EffectType {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUICore.ContentTransition.EffectType, b: SwiftUICore.ContentTransition.EffectType) -> Swift.Bool
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public enum SequenceDirection : Swift.Hashable, Swift.Sendable {
    @_spi(Private) case leading, trailing, up, down
    @_spi(Private) case forwards, backwards
    @_spi(Private) public static func == (a: SwiftUICore.ContentTransition.SequenceDirection, b: SwiftUICore.ContentTransition.SequenceDirection) -> Swift.Bool
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
  @_spi(Private) public struct Effect : Swift.Equatable, Swift.Sendable {
    @_spi(Private) package var type: SwiftUICore.ContentTransition.EffectType
    @_spi(Private) package var begin: Swift.Float
    @_spi(Private) package var duration: Swift.Float
    @_spi(Private) package var events: RenderBox.RBTransitionEvents
    @_spi(Private) package var flags: RenderBox.RBTransitionEffectFlags
    @_spi(Private) package init(type: SwiftUICore.ContentTransition.EffectType, begin: Swift.Float = 0, duration: Swift.Float = 1, events: RenderBox.RBTransitionEvents = .addRemove, flags: RenderBox.RBTransitionEffectFlags = .init())
    @_spi(Private) public init(_ type: SwiftUICore.ContentTransition.EffectType, timeline: Swift.ClosedRange<Swift.Float> = 0 ... 1, appliesOnInsertion: Swift.Bool = true, appliesOnRemoval: Swift.Bool = true)
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public static func sequence(direction: SwiftUICore.ContentTransition.SequenceDirection, delay: Swift.Double, maxAllowedDurationMultiple: Swift.Double = .infinity, appliesOnInsertion: Swift.Bool = true, appliesOnRemoval: Swift.Bool = true) -> SwiftUICore.ContentTransition.Effect
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public func removeInverts(_ state: Swift.Bool) -> SwiftUICore.ContentTransition.Effect
    @_spi(Private) public static func == (a: SwiftUICore.ContentTransition.Effect, b: SwiftUICore.ContentTransition.Effect) -> Swift.Bool
  }
  @_spi(Private) public struct Method : Swift.Equatable, Swift.Sendable {
    @_spi(Private) package var method: RenderBox.RBTransitionMethod
    @_spi(Private) package init(method: RenderBox.RBTransitionMethod)
    @_spi(Private) public static let diff: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static let forwards: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static let backwards: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static let prefix: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static let suffix: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static let prefixAndSuffix: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static let binary: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static let none: SwiftUICore.ContentTransition.Method
    @_spi(Private) public static func == (a: SwiftUICore.ContentTransition.Method, b: SwiftUICore.ContentTransition.Method) -> Swift.Bool
  }
  @_spi(Private) public init(method: SwiftUICore.ContentTransition.Method, effects: [SwiftUICore.ContentTransition.Effect])
  @_spi(Private) public static let `default`: SwiftUICore.ContentTransition
  public static let identity: SwiftUICore.ContentTransition
  public static let opacity: SwiftUICore.ContentTransition
  package static let fadeIfDifferent: SwiftUICore.ContentTransition
  public static let interpolate: SwiftUICore.ContentTransition
  @_spi(Private) public static var text: SwiftUICore.ContentTransition {
    get
  }
  package static var differentText: SwiftUICore.ContentTransition {
    get
  }
  public static func numericText(countsDown: Swift.Bool = false) -> SwiftUICore.ContentTransition
  @_spi(Private) @available(*, deprecated, message: "replaced by numericText(countsDown:)")
  public static func numericText(increasing: Swift.Bool) -> SwiftUICore.ContentTransition
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func numericText(value: Swift.Double) -> SwiftUICore.ContentTransition
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func numericText(_ config: SwiftUICore.ContentTransition.NumericTextConfiguration) -> SwiftUICore.ContentTransition
  package func isNamed(_ name: SwiftUICore.ContentTransition.NamedTransition.Name) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var style: SwiftUICore.ContentTransition.Style? {
    get
    set
  }
  #else
  @_spi(Private) public var style: SwiftUICore.ContentTransition.Style? {
    get
    set
  }
  #endif
  package var rbTransition: RenderBox.RBTransition {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var numericValue: Swift.Float? {
    get
  }
  #else
  package var numericValue: Swift.Float? {
    get
  }
  #endif
  @_spi(Private) @frozen public struct Options : Swift.OptionSet {
    @_spi(Private) public let rawValue: Swift.UInt32
    @_spi(Private) @inlinable public init(rawValue: Swift.UInt32) { self.rawValue = rawValue }
    @_spi(Private) public static let addsDrawingGroup: SwiftUICore.ContentTransition.Options
    @_spi(Private) public static let animatesDifferentContent: SwiftUICore.ContentTransition.Options
    @_spi(Private) package static let formsGroup: SwiftUICore.ContentTransition.Options
    @_spi(Private) package static let implicitGroup: SwiftUICore.ContentTransition.Options
    @_spi(Private) package static let inherited: SwiftUICore.ContentTransition.Options
    @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.ContentTransition.Options
    @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Element = SwiftUICore.ContentTransition.Options
    @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias RawValue = Swift.UInt32
  }
  package struct State : Swift.Equatable, SwiftUICore.EnvironmentKey {
    package static let defaultValue: SwiftUICore.ContentTransition.State
    package var transition: SwiftUICore.ContentTransition
    package var style: SwiftUICore.ContentTransition.Style
    package var animation: SwiftUICore.Animation?
    package var options: SwiftUICore.ContentTransition.Options
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init(transition: SwiftUICore.ContentTransition = .default, style: SwiftUICore.ContentTransition.Style = .default, animation: SwiftUICore.Animation? = nil, options: SwiftUICore.ContentTransition.Options = .init())
    #else
    package init(transition: SwiftUICore.ContentTransition = .default, style: SwiftUICore.ContentTransition.Style = .default, animation: SwiftUICore.Animation? = nil, options: SwiftUICore.ContentTransition.Options = .init())
    #endif
    package static func == (lhs: SwiftUICore.ContentTransition.State, rhs: SwiftUICore.ContentTransition.State) -> Swift.Bool
    package var rasterizationOptions: SwiftUICore.RasterizationOptions {
      get
    }
    package mutating func applyDynamicTextAnimation(in transaction: SwiftUICore.Transaction)
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    package typealias Value = SwiftUICore.ContentTransition.State
  }
  package mutating func applyEnvironmentValues(style: SwiftUICore.ContentTransition.Style, layoutDirection: SwiftUICore.LayoutDirection)
  public static func == (a: SwiftUICore.ContentTransition, b: SwiftUICore.ContentTransition) -> Swift.Bool
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContentTransition.NumericTextConfiguration {
  @_spi(Private) public static func fixed(downwards: Swift.Bool = false) -> SwiftUICore.ContentTransition.NumericTextConfiguration
  @_spi(Private) public static func automatic(value: Swift.Double) -> SwiftUICore.ContentTransition.NumericTextConfiguration
  @_spi(Private) public func axis(_ axis: SwiftUICore.Axis) -> SwiftUICore.ContentTransition.NumericTextConfiguration
  @_spi(Private) public func delay(_ duration: Swift.Double) -> SwiftUICore.ContentTransition.NumericTextConfiguration
  @_spi(Private) public func scale(_ scale: CoreFoundation.CGFloat) -> SwiftUICore.ContentTransition.NumericTextConfiguration
  @_spi(Private) public func blur(radius: CoreFoundation.CGFloat) -> SwiftUICore.ContentTransition.NumericTextConfiguration
  @_spi(Private) public func relativeOffset(_ offset: CoreFoundation.CGFloat) -> SwiftUICore.ContentTransition.NumericTextConfiguration
  @_spi(Private) public func reversed(_ reversed: Swift.Bool) -> SwiftUICore.ContentTransition.NumericTextConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func contentTransition(_ transition: SwiftUICore.ContentTransition) -> some SwiftUICore.View {
        return environment(\.contentTransition, transition)
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable nonisolated public func contentTransition(_ transition: SwiftUICore.ContentTransition, animation: SwiftUICore.Animation? = nil, options: SwiftUICore.ContentTransition.Options = .init()) -> some SwiftUICore.View {
        return modifier(_ContentTransitionModifier(transition: transition,
            animation: animation, options: options))
    }
  
  #else
  @_spi(Private) @inlinable nonisolated public func contentTransition(_ transition: SwiftUICore.ContentTransition, animation: SwiftUICore.Animation? = nil, options: SwiftUICore.ContentTransition.Options = .init()) -> some SwiftUICore.View {
        return modifier(_ContentTransitionModifier(transition: transition,
            animation: animation, options: options))
    }
  
  #endif
  @_spi(Private) @inlinable nonisolated public func contentTransitionGroup() -> some SwiftUICore.View {
        return modifier(_ContentTransitionGroup())
    }
  
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func contentTransitionPrefersCharacterOrder() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContentTransitionModifier : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var transition: SwiftUICore.ContentTransition
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var animation: SwiftUICore.Animation?
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var options: SwiftUICore.ContentTransition.Options
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable @_Concurrency.MainActor @preconcurrency internal init(transition: SwiftUICore.ContentTransition, animation: SwiftUICore.Animation?, options: SwiftUICore.ContentTransition.Options) {
        self.transition = transition
        self.animation = animation
        self.options = options
    }
  #else
  @_spi(Private) @inlinable @_Concurrency.MainActor @preconcurrency internal init(transition: SwiftUICore.ContentTransition, animation: SwiftUICore.Animation?, options: SwiftUICore.ContentTransition.Options) {
        self.transition = transition
        self.animation = animation
        self.options = options
    }
  #endif
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ContentTransitionModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore._ContentTransitionModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  package var contentTransitionState: SwiftUICore.ContentTransition.State {
    get
    set
  }
  public var contentTransition: SwiftUICore.ContentTransition {
    get
    set
  }
  @_spi(Private) public var contentTransitionStyle: SwiftUICore.ContentTransition.Style {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var contentTransitionAnimation: SwiftUICore.Animation? {
    get
    set
  }
  #else
  @_spi(Private) public var contentTransitionAnimation: SwiftUICore.Animation? {
    get
    set
  }
  #endif
  public var contentTransitionAddsDrawingGroup: Swift.Bool {
    get
    set
  }
  package var contentTransitionGroupEffect: SwiftUICore.ContentTransitionEffect {
    get
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContentTransitionGroup : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_spi(Private) @inlinable @_Concurrency.MainActor @preconcurrency internal init() {}
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ContentTransitionGroup>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_Concurrency.MainActor @preconcurrency package struct ContentTransitionEffect : SwiftUICore._RendererEffect {
  @_Concurrency.MainActor @preconcurrency package var state: SwiftUICore.ContentTransition.State
  @_Concurrency.MainActor @preconcurrency package init(state: SwiftUICore.ContentTransition.State)
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated package static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.ContentTransitionEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
extension SwiftUICore.ContentTransition : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.ContentTransition.State : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(Private) extension SwiftUICore.ContentTransition.Style : SwiftUICore.ProtobufMessage {
  @_spi(Private) package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_spi(Private) package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(Private) extension SwiftUICore.ContentTransition.Style : SwiftUICore.CodableByProtobuf {
}
extension SwiftUICore.ContentTransition.NamedTransition : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(Private) extension SwiftUICore.ContentTransition.NumericTextConfiguration : SwiftUICore.ProtobufMessage {
  @_spi(Private) package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_spi(Private) package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.ContentTransition.CustomTransition : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(Private) extension SwiftUICore.ContentTransition.Effect : SwiftUICore.ProtobufMessage {
  @_spi(Private) package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_spi(Private) package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension RenderBox.RBTransitionMethod : SwiftUICore.ProtobufEnum {
}
extension RenderBox.RBTransitionEffectType : SwiftUICore.ProtobufEnum {
}
extension RenderBox.RBTransitionEvents : SwiftUICore.ProtobufEnum {
}
package struct ArchivedViewInput : SwiftUICore.ViewInput {
  package struct Flags : Swift.OptionSet {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let isArchived: SwiftUICore.ArchivedViewInput.Flags
    package static let stableIDs: SwiftUICore.ArchivedViewInput.Flags
    package static let customFontURLs: SwiftUICore.ArchivedViewInput.Flags
    package static let assetCatalogRefences: SwiftUICore.ArchivedViewInput.Flags
    package static let preciseTextLayout: SwiftUICore.ArchivedViewInput.Flags
    package typealias ArrayLiteralElement = SwiftUICore.ArchivedViewInput.Flags
    package typealias Element = SwiftUICore.ArchivedViewInput.Flags
    package typealias RawValue = Swift.UInt8
  }
  package struct Value : Swift.Equatable {
    package var flags: SwiftUICore.ArchivedViewInput.Flags
    package var deploymentVersion: SwiftUICore.ArchivedViewInput.DeploymentVersion
    package init(flags: SwiftUICore.ArchivedViewInput.Flags = .init(), deploymentVersion: SwiftUICore.ArchivedViewInput.DeploymentVersion = .current)
    package static let isArchived: SwiftUICore.ArchivedViewInput.Value
    package var isArchived: Swift.Bool {
      get
    }
    package var stableIDs: Swift.Bool {
      get
    }
    package var customFontURLs: Swift.Bool {
      get
    }
    package var assetCatalogRefences: Swift.Bool {
      get
    }
    package var preciseTextLayout: Swift.Bool {
      get
    }
    package static func == (a: SwiftUICore.ArchivedViewInput.Value, b: SwiftUICore.ArchivedViewInput.Value) -> Swift.Bool
  }
  package struct DeploymentVersion : Swift.Hashable, Swift.Comparable, Swift.Codable, Swift.Sendable {
    package let rawValue: Swift.Int8
    package init(rawValue: Swift.Int8)
    package static let v5: SwiftUICore.ArchivedViewInput.DeploymentVersion
    package static let v6: SwiftUICore.ArchivedViewInput.DeploymentVersion
    @_alwaysEmitIntoClient package static var current: SwiftUICore.ArchivedViewInput.DeploymentVersion {
      get
    }
    package static func < (lhs: SwiftUICore.ArchivedViewInput.DeploymentVersion, rhs: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> Swift.Bool
    package static let oldest: SwiftUICore.ArchivedViewInput.DeploymentVersion
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.ArchivedViewInput.DeploymentVersion, b: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package static let defaultValue: SwiftUICore.ArchivedViewInput.Value
}
extension SwiftUICore.ArchivedViewInput.DeploymentVersion {
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
}
package protocol InterpolatableContent {
  static var defaultTransition: SwiftUICore.ContentTransition { get }
  func requiresTransition(to other: Self) -> Swift.Bool
  var appliesTransitionsForSizeChanges: Swift.Bool { get }
  var addsDrawingGroup: Swift.Bool { get }
  func modifyTransition(state: inout SwiftUICore.ContentTransition.State, to other: Self)
}
extension SwiftUICore.InterpolatableContent where Self : Swift.Equatable {
  package func requiresTransition(to other: Self) -> Swift.Bool
  package var appliesTransitionsForSizeChanges: Swift.Bool {
    get
  }
  package var addsDrawingGroup: Swift.Bool {
    get
  }
}
extension SwiftUICore.InterpolatableContent {
  package static var defaultTransition: SwiftUICore.ContentTransition {
    get
  }
  package func modifyTransition(state: inout SwiftUICore.ContentTransition.State, to other: Self)
}
extension SwiftUICore._ViewOutputs {
  package mutating func applyInterpolatorGroup<T>(_ group: SwiftUICore.DisplayList.InterpolatorGroup, content: AttributeGraph.Attribute<T>, inputs: SwiftUICore._ViewInputs, animatesSize: Swift.Bool, defersRender: Swift.Bool) where T : SwiftUICore.InterpolatableContent
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation {
  public func repeatCount(_ repeatCount: Swift.Int, autoreverses: Swift.Bool = true) -> SwiftUICore.Animation
  public func repeatForever(autoreverses: Swift.Bool = true) -> SwiftUICore.Animation
}
package struct CatalogKey : Swift.Hashable {
  package var colorScheme: SwiftUICore.ColorScheme
  package var contrast: SwiftUICore.ColorSchemeContrast
  package init(colorScheme: SwiftUICore.ColorScheme, contrast: SwiftUICore.ColorSchemeContrast)
  package init(_ environment: SwiftUICore.EnvironmentValues)
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.CatalogKey, b: SwiftUICore.CatalogKey) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.CatalogKey : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package enum CatalogAssetMatchType : Swift.Equatable {
  case always
  case appearance
  case cuiIdiom(Swift.Int)
  package static func defaultValue(idiom: Swift.Int) -> [SwiftUICore.CatalogAssetMatchType]
  package static func == (a: SwiftUICore.CatalogAssetMatchType, b: SwiftUICore.CatalogAssetMatchType) -> Swift.Bool
}
extension SwiftUICore.EnvironmentValues {
  package var cuiAssetIdiom: Swift.Int {
    get
    set
  }
  package var cuiAssetSubtype: Swift.Int {
    get
    set
  }
  package var cuiAssetMatchTypes: [SwiftUICore.CatalogAssetMatchType] {
    get
    set
  }
}
package protocol SafelySerializableDiscreteFormatStyle : Foundation.DiscreteFormatStyle where Self.FormatOutput : SwiftUICore.AttributedStringConvertible {
  static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Self>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, Self.FormatInput == S.Value
}
extension Foundation.Date.FormatStyle : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Foundation.Date.FormatStyle>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension Foundation.Date.FormatStyle.Attributed : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Foundation.Date.FormatStyle.Attributed>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension Foundation.Date.VerbatimFormatStyle : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Foundation.Date.VerbatimFormatStyle>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension Foundation.Date.VerbatimFormatStyle.Attributed : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Foundation.Date.VerbatimFormatStyle.Attributed>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension Foundation.Date.ComponentsFormatStyle : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Foundation.Date.ComponentsFormatStyle>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Swift.Range<Foundation.Date>
}
extension Foundation.Date.AnchoredRelativeFormatStyle : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Foundation.Date.AnchoredRelativeFormatStyle>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension Swift.Duration.TimeFormatStyle : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Swift.Duration.TimeFormatStyle>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Swift.Duration
}
extension Swift.Duration.TimeFormatStyle.Attributed : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Swift.Duration.TimeFormatStyle.Attributed>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Swift.Duration
}
extension Swift.Duration.UnitsFormatStyle : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Swift.Duration.UnitsFormatStyle>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Swift.Duration
}
extension Swift.Duration.UnitsFormatStyle.Attributed : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, Swift.Duration.UnitsFormatStyle.Attributed>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Swift.Duration
}
@_spi(Testing) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(Testing) nonisolated public func testID<ID>(_ id: ID) -> SwiftUICore.TestIDView<Self, ID> where ID : Swift.Hashable
}
@_spi(Testing) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct TestIDView<Content, ID> : SwiftUICore.PrimitiveView, SwiftUICore.UnaryView where Content : SwiftUICore.View, ID : Swift.Hashable {
  @_spi(Testing) @_Concurrency.MainActor @preconcurrency public var content: Content
  @_spi(Testing) @_Concurrency.MainActor @preconcurrency public var id: ID
  @_spi(Testing) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.TestIDView<Content, ID>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Testing) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@_spi(Testing) @available(*, unavailable)
extension SwiftUICore.TestIDView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _BenchmarkHost : AnyObject {
  func _renderForTest(interval: Swift.Double)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  func _performScrollTest(startOffset: CoreFoundation.CGFloat, iterations: Swift.Int, delta: CoreFoundation.CGFloat, length: CoreFoundation.CGFloat, completion: (() -> Swift.Void)?)
  #else
  func _performScrollTest(startOffset: CoreFoundation.CGFloat, iterations: Swift.Int, delta: CoreFoundation.CGFloat, length: CoreFoundation.CGFloat, completion: (() -> Swift.Void)?)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _Benchmark : SwiftUICore._Test {
  func measure(host: any SwiftUICore._BenchmarkHost) -> [Swift.Double]
}
package var enableProfiler: Swift.Bool
package var enableTracer: Swift.Bool
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BenchmarkHost {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func _performScrollTest(startOffset: CoreFoundation.CGFloat, iterations: Swift.Int, delta: CoreFoundation.CGFloat, length: CoreFoundation.CGFloat, completion: (() -> Swift.Void)?)
  #else
  public func _performScrollTest(startOffset: CoreFoundation.CGFloat, iterations: Swift.Int, delta: CoreFoundation.CGFloat, length: CoreFoundation.CGFloat, completion: (() -> Swift.Void)?)
  #endif
  public func measureAction(action: () -> Swift.Void) -> Swift.Double
  public func measureRender(interval: Swift.Double = 1.0 / 60.0) -> Swift.Double
  public func measureRenders(seconds: Swift.Double) -> [Swift.Double]
  public func measureRenders(duration: Swift.Double) -> [Swift.Double]
}
package func summarize(_ measurements: [(any SwiftUICore._Benchmark, [Swift.Double])]) -> Swift.String
package func write(_ measurements: [(any SwiftUICore._Benchmark, [Swift.Double])], to path: Swift.String) throws
package func log(_ measurements: [(any SwiftUICore._Benchmark, [Swift.Double])])
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@preconcurrency @_Concurrency.MainActor public protocol Transition {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func body(content: Self.Content, phase: SwiftUICore.TransitionPhase) -> Self.Body
  @_Concurrency.MainActor @preconcurrency static var properties: SwiftUICore.TransitionProperties { get }
  typealias Content = SwiftUICore.PlaceholderContentView<Self>
  @_Concurrency.MainActor @preconcurrency func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public static var properties: SwiftUICore.TransitionProperties {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @_Concurrency.MainActor @preconcurrency public func apply<V>(content: V, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
extension SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency package static func makeView(view: SwiftUICore._GraphValue<Self.Body>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package var hasContentTransition: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func contentTransitionEffects(style: SwiftUICore.ContentTransition.Style, size: CoreFoundation.CGSize) -> [SwiftUICore.ContentTransition.Effect]
}
@_Concurrency.MainActor @preconcurrency package struct ApplyTransitionModifier<TransitionType> : SwiftUICore.PrimitiveViewModifier, SwiftUICore.MultiViewModifier where TransitionType : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency package var transition: TransitionType
  @_Concurrency.MainActor @preconcurrency package var phase: SwiftUICore.TransitionPhase
  @_Concurrency.MainActor @preconcurrency package init(transition: TransitionType, phase: SwiftUICore.TransitionPhase)
  nonisolated package static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore.ApplyTransitionModifier<TransitionType>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package static func viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @_Concurrency.MainActor @preconcurrency package static func viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct _Transition_ContentTransition {
  package enum Operation {
    case hasContentTransition
    case effects(style: SwiftUICore.ContentTransition.Style, size: CoreFoundation.CGSize)
  }
  package enum Result {
    case none
    case bool(Swift.Bool)
    case effects(_: [SwiftUICore.ContentTransition.Effect] = [])
  }
  package var operation: SwiftUICore._Transition_ContentTransition.Operation
  package var result: SwiftUICore._Transition_ContentTransition.Result
}
@available(*, unavailable)
extension SwiftUICore._Transition_ContentTransition : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum TransitionPhase {
  case willAppear
  case identity
  case didDisappear
  public var isIdentity: Swift.Bool {
    get
  }
  public static func == (a: SwiftUICore.TransitionPhase, b: SwiftUICore.TransitionPhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase {
  public var value: Swift.Double {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TransitionProperties : Swift.Sendable {
  public init(hasMotion: Swift.Bool = true)
  public var hasMotion: Swift.Bool
  package func union(_ other: SwiftUICore.TransitionProperties) -> SwiftUICore.TransitionProperties
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static let identity: SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.IdentityTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var identity: SwiftUICore.IdentityTransition {
    get { Self() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct IdentityTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.IdentityTransition.Content, phase: SwiftUICore.TransitionPhase) -> SwiftUICore.IdentityTransition.Content
  @_Concurrency.MainActor @preconcurrency public static let properties: SwiftUICore.TransitionProperties
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore.IdentityTransition.Content
}
@available(*, unavailable)
extension SwiftUICore.IdentityTransition : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  package var isVisionEnabled: Swift.Bool {
    get
    set
  }
}
package struct IsVisionEnabledKey : SwiftUICore.EnvironmentKey {
  package static let defaultValue: Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol VisualEffect : Swift.Sendable, SwiftUICore.Animatable {
  static func _makeVisualEffect(effect: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @_spi(_) @available(*, deprecated, message: "Use visualEffect(_:) instead")
  nonisolated public func geometryEffect(_ effect: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUICore.GeometryProxy) -> some VisualEffect) -> some SwiftUICore.View
  
  nonisolated public func visualEffect(_ effect: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUICore.GeometryProxy) -> some VisualEffect) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct EmptyVisualEffect : SwiftUICore.VisualEffect {
  public init()
  public static func _makeVisualEffect(effect: SwiftUICore._GraphValue<SwiftUICore.EmptyVisualEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum CoordinateSpace {
  case global
  case local
  case named(Swift.AnyHashable)
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct ID : Swift.Equatable, Swift.Sendable {
    @_spi(ForSwiftUIOnly) public init()
    @_spi(ForSwiftUIOnly) public static func == (a: SwiftUICore.CoordinateSpace.ID, b: SwiftUICore.CoordinateSpace.ID) -> Swift.Bool
  }
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  case id(SwiftUICore.CoordinateSpace.ID)
  package static let root: SwiftUICore.CoordinateSpace
  package var canonical: SwiftUICore.CoordinateSpace {
    get
  }
  package enum Name : Swift.Equatable {
    case name(Swift.AnyHashable)
    case id(SwiftUICore.CoordinateSpace.ID)
    package var space: SwiftUICore.CoordinateSpace {
      get
    }
    package static func == (lhs: SwiftUICore.CoordinateSpace.Name, rhs: SwiftUICore.CoordinateSpace.Name) -> Swift.Bool
  }
}
@available(*, unavailable)
extension SwiftUICore.CoordinateSpace : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpace {
  public var isGlobal: Swift.Bool {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpace : Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUICore.CoordinateSpace, rhs: SwiftUICore.CoordinateSpace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol CoordinateSpaceProtocol {
  var coordinateSpace: SwiftUICore.CoordinateSpace { get }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct NamedCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol, Swift.Equatable {
  package var name: SwiftUICore.CoordinateSpace.Name
  package init(name: SwiftUICore.CoordinateSpace.Name)
  public var coordinateSpace: SwiftUICore.CoordinateSpace {
    get
  }
  public static func == (a: SwiftUICore.NamedCoordinateSpace, b: SwiftUICore.NamedCoordinateSpace) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.NamedCoordinateSpace {
  public static func named(_ name: some Hashable) -> SwiftUICore.NamedCoordinateSpace
  package static func id(_ id: SwiftUICore.CoordinateSpace.ID) -> SwiftUICore.NamedCoordinateSpace
}
@available(*, unavailable)
extension SwiftUICore.NamedCoordinateSpace : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct LocalCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol {
  public init()
  public var coordinateSpace: SwiftUICore.CoordinateSpace {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.LocalCoordinateSpace : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.LocalCoordinateSpace {
  public static var local: SwiftUICore.LocalCoordinateSpace {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct GlobalCoordinateSpace : SwiftUICore.CoordinateSpaceProtocol {
  public init()
  public var coordinateSpace: SwiftUICore.CoordinateSpace {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.GlobalCoordinateSpace : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.GlobalCoordinateSpace {
  public static var global: SwiftUICore.GlobalCoordinateSpace {
    get
  }
}
package protocol AccessibilityNumeric {
  var isValidMinValue: Swift.Bool { get }
  var isValidMaxValue: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension SwiftUICore.AccessibilityNumeric where Self : Swift.FixedWidthInteger {
  package var isValidMinValue: Swift.Bool {
    get
  }
  package var isValidMaxValue: Swift.Bool {
    get
  }
}
extension SwiftUICore.AccessibilityNumeric where Self : Swift.BinaryFloatingPoint {
  package var isValidMinValue: Swift.Bool {
    get
  }
  package var isValidMaxValue: Swift.Bool {
    get
  }
}
extension Swift.Int : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.Int8 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.Int16 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.Int32 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.Int64 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.UInt : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.UInt8 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.UInt16 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.UInt32 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.UInt64 : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.Double : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.Float : SwiftUICore.AccessibilityNumeric {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #else
  package func asNumber() -> SwiftUICore.AccessibilityNumber?
  #endif
}
extension Swift.ClosedRange where Bound : Swift.Strideable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var minimumValue: (any SwiftUICore.AccessibilityNumeric)? {
    get
  }
  #else
  package var minimumValue: (any SwiftUICore.AccessibilityNumeric)? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var maximumValue: (any SwiftUICore.AccessibilityNumeric)? {
    get
  }
  #else
  package var maximumValue: (any SwiftUICore.AccessibilityNumeric)? {
    get
  }
  #endif
}
extension SwiftUICore.AccessibilityValueStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload package init<V>(_ value: V, from lowerBound: V? = nil, to upperBound: V? = nil, description: SwiftUICore.Text?) where V : Swift.Numeric
  #else
  @_disfavoredOverload package init<V>(_ value: V, from lowerBound: V? = nil, to upperBound: V? = nil, description: SwiftUICore.Text?) where V : Swift.Numeric
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SaturationEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var amount: Swift.Double
  @inlinable @_Concurrency.MainActor @preconcurrency public init(amount: Swift.Double) {
        self.amount = amount
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._SaturationEffect, b: SwiftUICore._SaturationEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func saturation(_ amount: Swift.Double) -> some SwiftUICore.View {
        return modifier(_SaturationEffect(amount: amount))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color {
  public func opacity(_ opacity: Swift.Double) -> SwiftUICore.Color
  package func multiplyingHierarchicalOpacity(at level: Swift.Int) -> SwiftUICore.Color
  package func over(_ rhs: SwiftUICore.Color) -> SwiftUICore.Color
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func mix(with rhs: SwiftUICore.Color, by fraction: Swift.Double, in colorSpace: SwiftUICore.Gradient.ColorSpace = .perceptual) -> SwiftUICore.Color
  @_spi(Private) @available(*, deprecated, renamed: "mix(with:by:in:)")
  public func blend(with rhs: SwiftUICore.Color, in colorSpace: SwiftUICore.Gradient.ColorSpace = .perceptual, by fraction: Swift.Double) -> SwiftUICore.Color
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension SwiftUICore.Color {
  @_spi(Private) public func _settingOpacity(_ opacity: Swift.Double) -> SwiftUICore.Color
}
@_spi(Private) @available(watchOS 11.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.Color {
  @_spi(Private) public func vibrancy(_ vibrantMatrix: SwiftUICore._ColorMatrix, tertiaryOpacity: Swift.Double) -> SwiftUICore.Color
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public enum TextAlignment : Swift.Hashable, Swift.CaseIterable {
  case leading
  case center
  case trailing
  package var value: CoreFoundation.CGFloat {
    get
  }
  public static func == (a: SwiftUICore.TextAlignment, b: SwiftUICore.TextAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.TextAlignment]
  public static var allCases: [SwiftUICore.TextAlignment] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.TextAlignment : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Angle {
  public var radians: Swift.Double
  @inlinable public var degrees: Swift.Double {
    get { return radians * (180.0 / .pi) }
    set { radians = newValue * (.pi / 180.0) }
  }
  @inlinable public init() {
        self.init(radians: 0.0)
    }
  @inlinable public init(radians: Swift.Double) {
        self.radians = radians
    }
  @inlinable public init(degrees: Swift.Double) {
        self.init(radians: degrees * (.pi / 180.0))
    }
  @inlinable public static func radians(_ radians: Swift.Double) -> SwiftUICore.Angle {
        return Angle(radians: radians)
    }
  @inlinable public static func degrees(_ degrees: Swift.Double) -> SwiftUICore.Angle {
        return Angle(degrees: degrees)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Angle : Swift.Hashable, Swift.Comparable {
  @inlinable public static func < (lhs: SwiftUICore.Angle, rhs: SwiftUICore.Angle) -> Swift.Bool {
        return lhs.radians < rhs.radians
    }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.Angle, b: SwiftUICore.Angle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
package func cos(_ angle: SwiftUICore.Angle) -> Swift.Double
package func sin(_ angle: SwiftUICore.Angle) -> Swift.Double
package func tan(_ angle: SwiftUICore.Angle) -> Swift.Double
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Angle : SwiftUICore.Animatable, SwiftUICore._VectorMath {
  public var animatableData: Swift.Double {
    get
    set
  }
  @inlinable public static var zero: SwiftUICore.Angle {
    get {
        return .init()
    }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Swift.Double
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SafeAreaIgnoringLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency public var edges: SwiftUICore.Edge.Set
  @inlinable @_Concurrency.MainActor @preconcurrency public init(edges: SwiftUICore.Edge.Set = .all) {
        self.edges = edges
    }
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore._PositionAwarePlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func ignoresAutomaticPadding(child: SwiftUICore.LayoutProxy) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore._PositionAwarePlacementContext
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SafeAreaRegionsIgnoringLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency public var regions: SwiftUICore.SafeAreaRegions
  @_Concurrency.MainActor @preconcurrency public var edges: SwiftUICore.Edge.Set
  @inlinable @_Concurrency.MainActor @preconcurrency package init(regions: SwiftUICore.SafeAreaRegions, edges: SwiftUICore.Edge.Set) {
        self.regions = regions
        self.edges = edges
    }
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore._PositionAwarePlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func ignoresAutomaticPadding(child: SwiftUICore.LayoutProxy) -> Swift.Bool
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  package typealias PlacementContextType = SwiftUICore._PositionAwarePlacementContext
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ignoresSafeArea(_:edges:) instead.")
  @inlinable nonisolated public func edgesIgnoringSafeArea(_ edges: SwiftUICore.Edge.Set) -> some SwiftUICore.View {
        return modifier(_SafeAreaIgnoringLayout(edges: edges))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func ignoresSafeArea(_ regions: SwiftUICore.SafeAreaRegions = .all, edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View {
        return modifier(_SafeAreaRegionsIgnoringLayout(
            regions: regions, edges: edges))
    }
  
}
package struct UnsafeHeterogeneousBuffer : Swift.Collection {
  package typealias VTable = SwiftUICore._UnsafeHeterogeneousBuffer_VTable
  package typealias Element = SwiftUICore._UnsafeHeterogeneousBuffer_Element
  package struct Index : Swift.Equatable, Swift.Comparable {
    package static func < (lhs: SwiftUICore.UnsafeHeterogeneousBuffer.Index, rhs: SwiftUICore.UnsafeHeterogeneousBuffer.Index) -> Swift.Bool
    package static func == (a: SwiftUICore.UnsafeHeterogeneousBuffer.Index, b: SwiftUICore.UnsafeHeterogeneousBuffer.Index) -> Swift.Bool
  }
  package struct Item {
  }
  package var count: Swift.Int {
    get
  }
  package var isEmpty: Swift.Bool {
    get
  }
  package var startIndex: SwiftUICore.UnsafeHeterogeneousBuffer.Index {
    get
  }
  package var endIndex: SwiftUICore.UnsafeHeterogeneousBuffer.Index {
    get
  }
  package init()
  package func destroy()
  package func formIndex(after index: inout SwiftUICore.UnsafeHeterogeneousBuffer.Index)
  package func index(after index: SwiftUICore.UnsafeHeterogeneousBuffer.Index) -> SwiftUICore.UnsafeHeterogeneousBuffer.Index
  package subscript(index: SwiftUICore.UnsafeHeterogeneousBuffer.Index) -> SwiftUICore.UnsafeHeterogeneousBuffer.Element {
    get
  }
  @discardableResult
  package mutating func append<T>(_ value: T, vtable: SwiftUICore.UnsafeHeterogeneousBuffer.VTable.Type) -> SwiftUICore.UnsafeHeterogeneousBuffer.Index
  package typealias Indices = Swift.DefaultIndices<SwiftUICore.UnsafeHeterogeneousBuffer>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.UnsafeHeterogeneousBuffer>
  package typealias SubSequence = Swift.Slice<SwiftUICore.UnsafeHeterogeneousBuffer>
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct _UnsafeHeterogeneousBuffer_Element {
  @_spi(ForSwiftUIOnly) package func hasType<T>(_ type: T.Type) -> Swift.Bool
  @_spi(ForSwiftUIOnly) package func vtable<T>(as type: T.Type) -> T.Type where T : SwiftUICore._UnsafeHeterogeneousBuffer_VTable
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func body<T>(as type: T.Type) -> Swift.UnsafeMutablePointer<T>
  #else
  @_spi(ForSwiftUIOnly) package func body<T>(as type: T.Type) -> Swift.UnsafeMutablePointer<T>
  #endif
  @_spi(ForSwiftUIOnly) package var flags: Swift.UInt32 {
    @_spi(ForSwiftUIOnly) get
    @_spi(ForSwiftUIOnly) nonmutating set
  }
  @_spi(ForSwiftUIOnly) package var address: Swift.UnsafeRawPointer {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore._UnsafeHeterogeneousBuffer_Element : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @_hasMissingDesignatedInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
open class _UnsafeHeterogeneousBuffer_VTable {
  @_spi(ForSwiftUIOnly) open class func hasType<T>(_ type: T.Type) -> Swift.Bool
  @_spi(ForSwiftUIOnly) open class func moveInitialize(elt: SwiftUICore._UnsafeHeterogeneousBuffer_Element, from: SwiftUICore._UnsafeHeterogeneousBuffer_Element)
  @_spi(ForSwiftUIOnly) open class func deinitialize(elt: SwiftUICore._UnsafeHeterogeneousBuffer_Element)
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore._UnsafeHeterogeneousBuffer_VTable : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct _ConditionalContent<TrueContent, FalseContent> {
  @frozen public enum Storage {
    case trueContent(TrueContent)
    case falseContent(FalseContent)
  }
  public let storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage
}
@available(*, unavailable)
extension SwiftUICore._ConditionalContent.Storage : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ConditionalContent : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ConditionalContent {
  @_alwaysEmitIntoClient public init(_storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage) {
        self.storage = _storage
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ConditionalContent : SwiftUICore.View, SwiftUICore.PrimitiveView where TrueContent : SwiftUICore.View, FalseContent : SwiftUICore.View {
  public typealias Body = Swift.Never
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
extension SwiftUICore._ConditionalContent : SwiftUICore.DynamicView where TrueContent : SwiftUICore.View, FalseContent : SwiftUICore.View {
  package static var canTransition: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func childInfo(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>) -> (any Any.Type, SwiftUICore.UniqueID?)
  #else
  package func childInfo(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>) -> (any Any.Type, SwiftUICore.UniqueID?)
  #endif
  package func makeChildView(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>, view: AttributeGraph.Attribute<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  package func makeChildViewList(metadata: SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>, view: AttributeGraph.Attribute<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ID = SwiftUICore.UniqueID
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Metadata = SwiftUICore.ConditionalMetadata<SwiftUICore.ViewDescriptor>
}
extension SwiftUICore._ConditionalContent {
  package struct Info {
  }
  package struct Container<Provider> : AttributeGraph.StatefulRule, SwiftUICore.AsyncAttribute where TrueContent == Provider.TrueContent, FalseContent == Provider.FalseContent, Provider : SwiftUICore.ConditionalContentProvider {
    package init(content: AttributeGraph.Attribute<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, provider: Provider)
    package typealias Value = SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Info
    package mutating func updateValue()
  }
  package struct TrueChild : AttributeGraph.StatefulRule, SwiftUICore.AsyncAttribute {
    package typealias Value = TrueContent
    package mutating func updateValue()
  }
  package struct FalseChild : AttributeGraph.StatefulRule, SwiftUICore.AsyncAttribute {
    package typealias Value = FalseContent
    package mutating func updateValue()
  }
}
package protocol ConditionalContentProvider {
  associatedtype TrueContent
  associatedtype FalseContent
  associatedtype Inputs
  associatedtype Outputs
  var inputs: Self.Inputs { get }
  var outputs: Self.Outputs { get }
  func detachOutputs()
  func attachOutputs(to: Self.Outputs)
  func makeChildInputs() -> Self.Inputs
  func makeTrueOutputs(child: AttributeGraph.Attribute<Self.TrueContent>, inputs: Self.Inputs) -> Self.Outputs
  func makeFalseOutputs(child: AttributeGraph.Attribute<Self.FalseContent>, inputs: Self.Inputs) -> Self.Outputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image {
  public enum TemplateRenderingMode : Swift.Sendable {
    case template
    case original
    public static func == (a: SwiftUICore.Image.TemplateRenderingMode, b: SwiftUICore.Image.TemplateRenderingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(macOS 11.0, *)
  public enum Scale : Swift.Hashable, Swift.Sendable {
    case small
    case medium
    case large
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    case _fittingCircleRadius(_fixedPointFraction: Swift.UInt16)
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    @available(*, deprecated, renamed: "_controlCenter_large")
    @_alwaysEmitIntoClient public static func fittingCircleRadius(pointSizeMultiple: CoreFoundation.CGFloat) -> SwiftUICore.Image.Scale { ._controlCenter_large }
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    case _controlCenter_small, _controlCenter_medium, _controlCenter_large
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Image.Scale, b: SwiftUICore.Image.Scale) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum UserInterfaceSizeClass : Swift.Sendable {
  case compact
  case regular
  public static func == (a: SwiftUICore.UserInterfaceSizeClass, b: SwiftUICore.UserInterfaceSizeClass) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum DisplayGamut : Swift.Int {
  @_spi(Private) case sRGB
  @_spi(Private) case displayP3
  @_spi(Private) package static var deviceDefault: SwiftUICore.DisplayGamut {
    @_spi(Private) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init?(rawValue: Swift.Int)
  #else
  @_spi(Private) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int
  @_spi(Private) public var rawValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.DisplayGamut : Swift.Sendable {
}
@_spi(Private) extension SwiftUICore.DisplayGamut : SwiftUICore.ProtobufEnum {
}
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(iOS, unavailable)
@available(macCatalyst, introduced: 13.0, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public enum ControlActiveState : Swift.Equatable, Swift.CaseIterable, Swift.Sendable {
  case key
  case active
  case inactive
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.ControlActiveState, b: SwiftUICore.ControlActiveState) -> Swift.Bool
  @available(iOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(tvOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(watchOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(macCatalyst, introduced: 13.0, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(visionOS, unavailable, message: "Use `EnvironmentValues.appearsActive` instead.")
  public typealias AllCases = [SwiftUICore.ControlActiveState]
  public static var allCases: [SwiftUICore.ControlActiveState] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum LegibilityWeight : Swift.Hashable, Swift.Sendable {
  case regular
  case bold
  public static func == (a: SwiftUICore.LegibilityWeight, b: SwiftUICore.LegibilityWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(macOS 11.0, *)
  @inlinable nonisolated public func imageScale(_ scale: SwiftUICore.Image.Scale) -> some SwiftUICore.View {
        return environment(\.imageScale, scale)
    }
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(*, deprecated, message: "Use View/textSizing(.adjustsForOversizedCharacters)")
  nonisolated public func adjustsTextFrameForOversizedCharacters(_ adjustsTextFrame: Swift.Bool = true) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func font(_ font: SwiftUICore.Font?) -> some SwiftUICore.View {
        return environment(\.font, font)
    }
  
  #else
  @inlinable nonisolated public func font(_ font: SwiftUICore.Font?) -> some SwiftUICore.View {
        return environment(\.font, font)
    }
  
  #endif
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func monospacedDigit() -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func monospaced(_ isActive: Swift.Bool = true) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func fontWeight(_ weight: SwiftUICore.Font.Weight?) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func fontWeight(_ weight: SwiftUICore.Font.Weight?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func fontWidth(_ width: SwiftUICore.Font.Width?) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func fontWidth(_ width: SwiftUICore.Font.Width?) -> some SwiftUICore.View
  
  #endif
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func bold(_ isActive: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func italic(_ isActive: Swift.Bool = true) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  nonisolated public func fontDesign(_ design: SwiftUICore.Font.Design?) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  nonisolated public func fontDesign(_ design: SwiftUICore.Font.Design?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func symbolFont(_ font: SwiftUICore.Font?) -> some SwiftUICore.View
  
  #else
  @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func symbolFont(_ font: SwiftUICore.Font?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func defaultFont(_ font: SwiftUICore.Font?) -> some SwiftUICore.View
  
  #else
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func defaultFont(_ font: SwiftUICore.Font?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func defaultSymbolFont(_ font: SwiftUICore.Font?) -> some SwiftUICore.View
  
  #else
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func defaultSymbolFont(_ font: SwiftUICore.Font?) -> some SwiftUICore.View
  
  #endif
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func kerning(_ kerning: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func tracking(_ tracking: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func baselineOffset(_ baselineOffset: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  package mutating func configureForRoot()
  package func configuredForRoot() -> SwiftUICore.EnvironmentValues
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var font: SwiftUICore.Font? {
    get
    set
  }
  #else
  public var font: SwiftUICore.Font? {
    get
    set
  }
  #endif
  package var effectiveFont: SwiftUICore.Font {
    get
  }
  package var effectiveSymbolFont: SwiftUICore.Font {
    get
  }
  package var fallbackFont: SwiftUICore.Font {
    get
  }
  package var fallbackFontProvider: (any SwiftUICore.FallbackFontProvider) {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultFont: SwiftUICore.Font? {
    get
    set
  }
  #else
  package var defaultFont: SwiftUICore.Font? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultSymbolFont: SwiftUICore.Font? {
    get
    set
  }
  #else
  package var defaultSymbolFont: SwiftUICore.Font? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var symbolFont: SwiftUICore.Font? {
    get
    set
  }
  #else
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var symbolFont: SwiftUICore.Font? {
    get
    set
  }
  #endif
  @available(macOS 11.0, *)
  public var imageScale: SwiftUICore.Image.Scale {
    get
    set
  }
  package var isInTouchBar: Swift.Bool {
    get
    set
  }
}
package protocol FallbackFontProvider {
  func makeFont(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Font
}
package struct DefaultFallbackFontProvider : SwiftUICore.FallbackFontProvider {
  package init()
  package func makeFont(in env: SwiftUICore.EnvironmentValues) -> SwiftUICore.Font
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var displayScale: CoreFoundation.CGFloat {
    get
    set
  }
  public var pixelLength: CoreFoundation.CGFloat {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var defaultPixelLength: CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  package var defaultPixelLength: CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var dividerThickness: CoreFoundation.CGFloat {
    get
    set
  }
  package var defaultRenderingMode: SwiftUICore.Image.TemplateRenderingMode {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ClarityBoard) @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  public var displayCornerRadius: CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  @_spi(ClarityBoard) @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  public var displayCornerRadius: CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var legibilityWeight: SwiftUICore.LegibilityWeight? {
    get
    set
  }
  #else
  public var legibilityWeight: SwiftUICore.LegibilityWeight? {
    get
    set
  }
  #endif
  public var locale: Foundation.Locale {
    get
    set
  }
  public var calendar: Foundation.Calendar {
    get
    set
  }
  public var timeZone: Foundation.TimeZone {
    get
    set
  }
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var displayGamut: SwiftUICore.DisplayGamut {
    get
    set
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public var controlActiveState: SwiftUICore.ControlActiveState {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @backDeployed(before: macOS 14.0, tvOS 17.0, watchOS 10.0)
  public var horizontalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #else
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @backDeployed(before: macOS 14.0, tvOS 17.0, watchOS 10.0)
  public var horizontalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal var realHorizontalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #else
  @available(iOS 13.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal var realHorizontalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @backDeployed(before: macOS 14.0, tvOS 17.0, watchOS 10.0)
  public var verticalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #else
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @backDeployed(before: macOS 14.0, tvOS 17.0, watchOS 10.0)
  public var verticalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal var realVerticalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #else
  @available(iOS 13.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @usableFromInline
  internal var realVerticalSizeClass: SwiftUICore.UserInterfaceSizeClass? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  package var allowsVibrantBlending: Swift.Bool {
    get
    set
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 12.0, message: "Use `backgroundMaterial` instead")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public var _useVibrantStyling: Swift.Bool {
    get
    set
  }
  @available(macCatalyst 15.0, macOS 12.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  package var reduceDesktopTinting: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.EnvironmentValues {
  package var defaultKerning: CoreFoundation.CGFloat {
    get
    set
  }
  package var defaultTracking: CoreFoundation.CGFloat {
    get
    set
  }
  package var defaultBaselineOffset: CoreFoundation.CGFloat {
    get
    set
  }
}
package struct UncheckedSendable<Value> : @unchecked Swift.Sendable {
  package var value: Value
  package init(_ value: Value)
}
extension SwiftUICore.UncheckedSendable : Swift.Equatable where Value : Swift.Equatable {
  package static func == (a: SwiftUICore.UncheckedSendable<Value>, b: SwiftUICore.UncheckedSendable<Value>) -> Swift.Bool
}
extension SwiftUICore.UncheckedSendable : Swift.Hashable where Value : Swift.Hashable {
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package struct WeakUncheckedSendable<Value> : @unchecked Swift.Sendable where Value : AnyObject {
  weak package var value: Value?
  package init(_ value: Value)
}
package struct TransactionID : Swift.Comparable, Swift.Hashable {
  @inlinable package init()
  @inlinable package init(graph: AttributeGraph.Graph)
  @inlinable package init(context: AttributeGraph.AnyRuleContext)
  @inlinable package init<Value>(context: AttributeGraph.RuleContext<Value>)
  @inlinable package static func < (lhs: SwiftUICore.TransactionID, rhs: SwiftUICore.TransactionID) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.TransactionID, b: SwiftUICore.TransactionID) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient {
  public struct ColorSpace : Swift.Hashable, Swift.Sendable {
    public static let device: SwiftUICore.Gradient.ColorSpace
    @_spi(Private) public static let linear: SwiftUICore.Gradient.ColorSpace
    public static let perceptual: SwiftUICore.Gradient.ColorSpace
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUICore.Gradient.ColorSpace, b: SwiftUICore.Gradient.ColorSpace) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func colorSpace(_ space: SwiftUICore.Gradient.ColorSpace) -> SwiftUICore.AnyGradient
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyGradient {
  public func colorSpace(_ space: SwiftUICore.Gradient.ColorSpace) -> SwiftUICore.AnyGradient
}
final package class IndirectAttributeMap {
  final package let subgraph: AttributeGraph.Subgraph
  final package var map: [AttributeGraph.AnyAttribute : AttributeGraph.AnyAttribute]
  package init(subgraph: AttributeGraph.Subgraph)
  @objc deinit
}
package protocol GraphReusable {
  static var isTriviallyReusable: Swift.Bool { get }
  mutating func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap)
  func tryToReuse(by other: Self, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
extension SwiftUICore.GraphReusable {
  @inlinable package static var isTriviallyReusable: Swift.Bool {
    get
  }
}
extension SwiftUICore._GraphValue : SwiftUICore.GraphReusable {
  package mutating func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap)
  package func tryToReuse(by other: SwiftUICore._GraphValue<Value>, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
extension SwiftUICore._GraphValue where Value : SwiftUICore.GraphReusable {
  package static var isTriviallyReusable: Swift.Bool {
    get
  }
}
extension SwiftUICore._GraphInputs : SwiftUICore.GraphReusable {
  package mutating func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap)
  package func tryToReuse(by other: SwiftUICore._GraphInputs, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
extension AttributeGraph.Attribute : SwiftUICore.GraphReusable {
  package mutating func makeReusable(indirectMap: SwiftUICore.IndirectAttributeMap)
  package func tryToReuse(by other: AttributeGraph.Attribute<Value>, indirectMap: SwiftUICore.IndirectAttributeMap, testOnly: Swift.Bool) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct ForEach<Data, ID, Content> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
  public var data: Data
  public var content: (Data.Element) -> Content
  package enum IDGenerator {
    case keyPath(Swift.KeyPath<Data.Element, ID>)
    case offset
    package var isConstant: Swift.Bool {
      get
    }
    package func makeID(data: Data, index: Data.Index, offset: Swift.Int) -> ID
  }
  package var idGenerator: SwiftUICore.ForEach<Data, ID, Content>.IDGenerator
  package var reuseID: Swift.KeyPath<Data.Element, Swift.Int>?
  package init(_ data: Data, idGenerator: SwiftUICore.ForEach<Data, ID, Content>.IDGenerator, content: @escaping (Data.Element) -> Content)
  package init<T>(_ other: SwiftUICore.ForEach<Data, ID, T>, transform: @escaping (T) -> Content)
}
@available(*, unavailable)
extension SwiftUICore.ForEach : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach : SwiftUICore.View, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  public typealias Body = Swift.Never
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
package struct ForEachEvictionInput : SwiftUICore.GraphInput {
  package typealias Value = AttributeGraph.WeakAttribute<Swift.Bool>
  package static let defaultValue: AttributeGraph.WeakAttribute<Swift.Bool>
  package static let evictByDefault: Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where ID == Data.Element.ID, Content : SwiftUICore.View, Data.Element : Swift.Identifiable {
  public init(_ data: Data, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where Content : SwiftUICore.View {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where Content : SwiftUICore.View {
  @_disfavoredOverload @_alwaysEmitIntoClient public init<C>(_ data: SwiftUICore.Binding<C>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> Content) where Data == Swift.LazyMapSequence<C.Indices, (C.Index, ID)>, ID == C.Element.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C.Element : Swift.Identifiable, C.Index : Swift.Hashable {
        self.init(data, id: \.id, content: content)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient public init<C>(_ data: SwiftUICore.Binding<C>, id: Swift.KeyPath<C.Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> Content) where Data == Swift.LazyMapSequence<C.Indices, (C.Index, ID)>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C.Index : Swift.Hashable {
        let elementIDs = data.wrappedValue.indices.lazy.map { index in
            (index, data.wrappedValue[index][keyPath: id])
        }
        self.init(elementIDs, id: \.1) { (index, _) in
            let elementBinding = Binding {
                data.wrappedValue[index]
            } set: {
                data.wrappedValue[index] = $0
            }
            content(elementBinding)
        }
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUICore.View {
  @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (Swift.Int) -> Content)
}
package struct VersionSeed : Swift.CustomStringConvertible {
  @inlinable package static var invalid: SwiftUICore.VersionSeed {
    get
  }
  @inlinable package static var empty: SwiftUICore.VersionSeed {
    get
  }
  @inlinable package var isInvalid: Swift.Bool {
    get
  }
  @inlinable package init(nodeId: Swift.UInt32, viewSeed: Swift.UInt32)
  @inlinable package init(value: Swift.UInt32)
  @inlinable package func matches(_ other: SwiftUICore.VersionSeed) -> Swift.Bool
  package mutating func merge(_ other: SwiftUICore.VersionSeed)
  package mutating func mergeValue(_ other: Swift.UInt32)
  package var description: Swift.String {
    get
  }
}
package protocol InterfaceIdiom {
  static func accepts<I>(_ type: I.Type) -> Swift.Bool where I : SwiftUICore.InterfaceIdiom
  static var hashValue: SwiftUICore.InterfaceIdiomKind { get }
}
package enum InterfaceIdiomKind {
  case carPlay
  case clarity
  case complication
  case widget
  case mac
  case macCatalyst
  case phone
  case pad
  case tv
  case touchBar
  case watch
  case vision
  case nokit
  package static func == (a: SwiftUICore.InterfaceIdiomKind, b: SwiftUICore.InterfaceIdiomKind) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.InterfaceIdiom {
  @inlinable package static func accepts<I>(_ type: I.Type) -> Swift.Bool where I : SwiftUICore.InterfaceIdiom
  @inlinable package static func accepts<I>(_ idiom: I) -> Swift.Bool where I : SwiftUICore.InterfaceIdiom
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.CarPlayInterfaceIdiom {
  @inlinable package static var carPlay: SwiftUICore.CarPlayInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.ClarityUIInterfaceIdiom {
  @inlinable package static var clarityUI: SwiftUICore.ClarityUIInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.ComplicationInterfaceIdiom {
  @inlinable package static var complication: SwiftUICore.ComplicationInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.WidgetInterfaceIdiom {
  @inlinable package static var widget: SwiftUICore.WidgetInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.MacInterfaceIdiom {
  @inlinable package static var mac: SwiftUICore.MacInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.MacCatalystInterfaceIdiom {
  @inlinable package static var macCatalyst: SwiftUICore.MacCatalystInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.PhoneInterfaceIdiom {
  @inlinable package static var phone: SwiftUICore.PhoneInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.PadInterfaceIdiom {
  @inlinable package static var pad: SwiftUICore.PadInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.TVInterfaceIdiom {
  @inlinable package static var tv: SwiftUICore.TVInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.TouchBarInterfaceIdiom {
  @inlinable package static var touchBar: SwiftUICore.TouchBarInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.WatchInterfaceIdiom {
  @inlinable package static var watch: SwiftUICore.WatchInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.VisionInterfaceIdiom {
  @inlinable package static var vision: SwiftUICore.VisionInterfaceIdiom {
    get
  }
}
extension SwiftUICore.InterfaceIdiom where Self == SwiftUICore.NoKitInterfaceIdiom {
  @inlinable package static var nokit: SwiftUICore.NoKitInterfaceIdiom {
    get
  }
}
package struct CarPlayInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct ClarityUIInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct ComplicationInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
  package static func accepts<I>(_ type: I.Type) -> Swift.Bool where I : SwiftUICore.InterfaceIdiom
}
package struct WidgetInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct MacInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct MacCatalystInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
  package static func accepts<I>(_ type: I.Type) -> Swift.Bool where I : SwiftUICore.InterfaceIdiom
}
package struct PhoneInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct PadInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct TVInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct TouchBarInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct WatchInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct VisionInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct NoKitInterfaceIdiom : SwiftUICore.InterfaceIdiom {
  package static let hashValue: SwiftUICore.InterfaceIdiomKind
}
package struct AnyInterfaceIdiom : Swift.Hashable {
  package init<I>(_: I) where I : SwiftUICore.InterfaceIdiom
  package static func == (lhs: SwiftUICore.AnyInterfaceIdiom, rhs: SwiftUICore.AnyInterfaceIdiom) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package func accepts<I>(_ type: I.Type) -> Swift.Bool where I : SwiftUICore.InterfaceIdiom
  package func accepts<I>(_ idiom: I) -> Swift.Bool where I : SwiftUICore.InterfaceIdiom
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ColorMultiplyEffect : SwiftUICore.EnvironmentalModifier, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var color: SwiftUICore.Color
  @inlinable @_Concurrency.MainActor @preconcurrency public init(color: SwiftUICore.Color) {
        self.color = color
    }
  @_Concurrency.MainActor @preconcurrency public func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore._ColorMultiplyEffect._Resolved
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public static var _requiresMainThread: Swift.Bool {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct _Resolved : SwiftUICore.RendererEffect {
    public typealias AnimatableData = SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, SwiftUICore.AnimatablePair<Swift.Float, Swift.Float>>>
    @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._ColorMultiplyEffect._Resolved.AnimatableData {
      get
      set
    }
    @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  nonisolated public static func == (a: SwiftUICore._ColorMultiplyEffect, b: SwiftUICore._ColorMultiplyEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ResolvedModifier = SwiftUICore._ColorMultiplyEffect._Resolved
}
@available(*, unavailable)
extension SwiftUICore._ColorMultiplyEffect : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUICore._ColorMultiplyEffect._Resolved : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func colorMultiply(_ color: SwiftUICore.Color) -> some SwiftUICore.View {
        return modifier(_ColorMultiplyEffect(color: color))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct Canvas<Symbols> : SwiftUICore.UnaryView, SwiftUICore.PrimitiveView, SwiftUICore.ContentResponder where Symbols : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var symbols: Symbols
  @_Concurrency.MainActor @preconcurrency public var renderer: (inout SwiftUICore.GraphicsContext, CoreFoundation.CGSize) -> Swift.Void
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public var preservesMetadata: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var isOpaque: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var colorMode: SwiftUICore.ColorRenderingMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rendersAsynchronously: Swift.Bool {
    get
    set
  }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var rendersFirstFrameAsynchronously: Swift.Bool {
    get
    set
  }
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var isAccelerated: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, rendersAsynchronously: Swift.Bool = false, renderer: @escaping (inout SwiftUICore.GraphicsContext, CoreFoundation.CGSize) -> Swift.Void, @SwiftUICore.ViewBuilder symbols: () -> Symbols)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Canvas<Symbols>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.Canvas : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Canvas {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var allowsPackedDrawable: Swift.Bool {
    @_spi(_) get
    @_spi(_) set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Canvas where Symbols == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(opaque: Swift.Bool = false, colorMode: SwiftUICore.ColorRenderingMode = .nonLinear, rendersAsynchronously: Swift.Bool = false, renderer: @escaping (inout SwiftUICore.GraphicsContext, CoreFoundation.CGSize) -> Swift.Void)
}
@_Concurrency.MainActor @preconcurrency package struct ColorView : SwiftUICore.RendererLeafView, SwiftUICore.Animatable {
  @_Concurrency.MainActor @preconcurrency package var color: SwiftUICore.Color.Resolved
  @_Concurrency.MainActor @preconcurrency package init(_ color: SwiftUICore.Color.Resolved)
  nonisolated package static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.ColorView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package var descriptionAttributes: [(name: Swift.String, value: Swift.String)] {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  @_Concurrency.MainActor @preconcurrency package func content() -> SwiftUICore.DisplayList.Content.Value
  package typealias AnimatableData = SwiftUICore.Color.Resolved.AnimatableData
  @_Concurrency.MainActor @preconcurrency package var animatableData: SwiftUICore.ColorView.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public func withAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, _ body: () throws -> Result) rethrows -> Result
#else
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public func withAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, _ body: () throws -> Result) rethrows -> Result
#endif
package protocol TextAccessibilityProvider {
  associatedtype Body : SwiftUICore.View
  static func makeView(content: SwiftUICore.StyledTextContentView, text: SwiftUICore.Text, resolved: SwiftUICore.ResolvedStyledText) -> Self.Body
}
extension SwiftUICore._GraphInputs {
  package var textAccessibilityProvider: (any SwiftUICore.TextAccessibilityProvider.Type) {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var textAccessibilityProvider: (any SwiftUICore.TextAccessibilityProvider.Type) {
    get
    set
  }
}
package struct AccessibilityText : Swift.Equatable {
  package enum Storage : Swift.Equatable {
    case plain(Swift.String)
    case attributed(Foundation.NSAttributedString)
    package static func == (lhs: SwiftUICore.AccessibilityText.Storage, rhs: SwiftUICore.AccessibilityText.Storage) -> Swift.Bool
  }
  package var storage: SwiftUICore.AccessibilityText.Storage
  package var optional: Swift.Bool
  package init(storage: SwiftUICore.AccessibilityText.Storage, optional: Swift.Bool = false)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ text: SwiftUICore.Text, environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom? = nil)
  #else
  package init?(_ text: SwiftUICore.Text, environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(texts: [SwiftUICore.Text], environment: SwiftUICore.EnvironmentValues, optional: Swift.Bool = false, idiom: SwiftUICore.AnyInterfaceIdiom? = nil)
  #else
  package init?(texts: [SwiftUICore.Text], environment: SwiftUICore.EnvironmentValues, optional: Swift.Bool = false, idiom: SwiftUICore.AnyInterfaceIdiom? = nil)
  #endif
  package init(_ string: Any)
  package var text: SwiftUICore.Text {
    get
  }
  package var attributedString: Foundation.NSAttributedString {
    get
  }
  package var isEmpty: Swift.Bool {
    get
  }
  package static func == (a: SwiftUICore.AccessibilityText, b: SwiftUICore.AccessibilityText) -> Swift.Bool
}
final package class AccessibilityTextStorage : SwiftUICore.AnyTextStorage, @unchecked Swift.Sendable {
  final package var base: SwiftUICore.AccessibilityText
  package init(_ base: SwiftUICore.AccessibilityText)
  final package var hasResolvableAttributes: Swift.Bool {
    get
  }
  @objc deinit
}
extension SwiftUICore.AccessibilityText : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.AccessibilityText : SwiftUICore.CodableByProtobuf {
}
package struct AccessibilityTextAttributes : Swift.Equatable {
  package var contentType: SwiftUICore.AccessibilityTextContentType?
  package var headingLevel: SwiftUICore.AccessibilityHeadingLevel?
  package var durationTimeMMSS: Swift.Bool?
  package var label: SwiftUICore.Text?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(contentType: SwiftUICore.AccessibilityTextContentType? = nil, headingLevel: SwiftUICore.AccessibilityHeadingLevel? = nil, durationTimeMMSS: Swift.Bool? = nil, label: SwiftUICore.Text? = nil)
  #else
  package init(contentType: SwiftUICore.AccessibilityTextContentType? = nil, headingLevel: SwiftUICore.AccessibilityHeadingLevel? = nil, durationTimeMMSS: Swift.Bool? = nil, label: SwiftUICore.Text? = nil)
  #endif
  package func combined(with other: SwiftUICore.AccessibilityTextAttributes) -> SwiftUICore.AccessibilityTextAttributes
  package static func == (lhs: SwiftUICore.AccessibilityTextAttributes, rhs: SwiftUICore.AccessibilityTextAttributes) -> Swift.Bool
}
final package class AccessibilityTextModifier : SwiftUICore.AnyTextModifier {
  final package let value: SwiftUICore.AccessibilityTextAttributes
  package init(_ value: SwiftUICore.AccessibilityTextAttributes)
  @objc deinit
}
package enum AccessibilityImageLabel : Swift.Equatable {
  case text(SwiftUICore.Text)
  case systemSymbol(Swift.String)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ description: Swift.String?)
  #else
  package init?(_ description: Swift.String?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(_ description: SwiftUICore.Text?)
  #else
  package init?(_ description: SwiftUICore.Text?)
  #endif
  package var text: SwiftUICore.Text {
    get
  }
  package static func == (a: SwiftUICore.AccessibilityImageLabel, b: SwiftUICore.AccessibilityImageLabel) -> Swift.Bool
}
extension SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var storedAccessibilityLabel: SwiftUICore.Text? {
    get
  }
  #else
  package var storedAccessibilityLabel: SwiftUICore.Text? {
    get
  }
  #endif
}
package struct InterfaceIdiomPredicate<Idiom> : SwiftUICore.ViewInputPredicate where Idiom : SwiftUICore.InterfaceIdiom {
  package init()
  package static func evaluate(inputs: SwiftUICore._GraphInputs) -> Swift.Bool
}
package struct InterfaceIdiomInput : SwiftUICore.ViewInput {
  package static let defaultValue: SwiftUICore.AnyInterfaceIdiom?
  package typealias Value = SwiftUICore.AnyInterfaceIdiom?
}
extension SwiftUICore._GraphInputs {
  package var interfaceIdiom: SwiftUICore.AnyInterfaceIdiom {
    get
  }
  package static var defaultInterfaceIdiom: SwiftUICore.AnyInterfaceIdiom {
    get
  }
}
extension SwiftUICore.AnyInterfaceIdiom {
  package static func ~= (pattern: some InterfaceIdiom, value: SwiftUICore.AnyInterfaceIdiom) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ClipEffect<ClipShape> : SwiftUICore.RendererEffect where ClipShape : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: ClipShape
  @_Concurrency.MainActor @preconcurrency public var style: SwiftUICore.FillStyle
  @inlinable @_Concurrency.MainActor @preconcurrency public init(shape: ClipShape, style: SwiftUICore.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: ClipShape.AnimatableData {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = ClipShape.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func clipShape<S>(_ shape: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        return modifier(_ClipEffect(shape: shape, style: style))
    }
  
  @inlinable nonisolated public func clipped(antialiased: Swift.Bool = false) -> some SwiftUICore.View {
        return clipShape(Rectangle(),
            style: FillStyle(antialiased: antialiased))
    }
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `clipShape` or `fill` instead.")
  @inlinable nonisolated public func cornerRadius(_ radius: CoreFoundation.CGFloat, antialiased: Swift.Bool = true) -> some SwiftUICore.View {
        return clipShape(RoundedRectangle(cornerRadius: radius),
            style: FillStyle(antialiased: antialiased))
    }
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func clipShape<S>(_ shape: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.HoverEffectContent where S : SwiftUICore.Shape
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(CustomHoverEffects) public func _clipShape<S>(_ shape: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.HoverEffectContent where S : SwiftUICore.Shape
  
}
@_spi(CustomHoverEffects) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.VisualEffect {
  @_spi(CustomHoverEffects) public func clipShape<S>(_ shape: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.VisualEffect where S : SwiftUICore.Shape
  
}
@_spi(CustomHoverEffects) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.VisualEffect {
  @_spi(CustomHoverEffects) public func _clipShape<S>(_ shape: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.VisualEffect where S : SwiftUICore.Shape
  
}
package protocol TupleDescriptor : SwiftUICore.ProtocolDescriptor {
  static var typeCache: [Swift.ObjectIdentifier : SwiftUICore.TupleTypeDescription<Self>] { get set }
}
extension SwiftUICore.TupleDescriptor {
  package static func tupleDescription(_ type: AttributeGraph.TupleType) -> SwiftUICore.TupleTypeDescription<Self>
}
package struct TupleTypeDescription<P> where P : SwiftUICore.ProtocolDescriptor {
  package let contentTypes: [(Swift.Int, SwiftUICore.TypeConformance<P>)]
  package init(_ type: AttributeGraph.TupleType)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func transaction(_ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) -> some SwiftUICore.View {
        modifier(_TransactionModifier(transform: transform))
    }
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func transaction(value: some Equatable, _ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) -> some SwiftUICore.View {
        modifier(_ValueTransactionModifier(value: value, transform: transform))
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 12.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "Use withAnimation or animation(_:value:) instead.")
  @_disfavoredOverload @inlinable nonisolated public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.View {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
  #else
  @available(iOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 12.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 15.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use withAnimation or animation(_:value:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "Use withAnimation or animation(_:value:) instead.")
  @_disfavoredOverload @inlinable nonisolated public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.View {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
  #endif
  @_spi(DoNotImport) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient nonisolated public func ignoresAnimation() -> some SwiftUICore.View {
        transaction { t in
            if !t.disablesAnimations {
                t.animation = nil
            }
        }
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewModifier {
  @inlinable @_Concurrency.MainActor @preconcurrency public func transaction(_ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) -> some SwiftUICore.ViewModifier {
        return _PushPopTransactionModifier(content: self, transform: transform)
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.ViewModifier {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.ViewModifier {
        return transaction { t in
            if !t.disablesAnimations {
                t.animation = animation
            }
        }
    }
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func transaction<V>(_ transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void, @SwiftUICore.ViewBuilder body: (SwiftUICore.PlaceholderContentView<Self>) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func animation<V>(_ animation: SwiftUICore.Animation?, @SwiftUICore.ViewBuilder body: (SwiftUICore.PlaceholderContentView<Self>) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #else
  nonisolated public func animation<V>(_ animation: SwiftUICore.Animation?, @SwiftUICore.ViewBuilder body: (SwiftUICore.PlaceholderContentView<Self>) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #endif
}
@_spi(ForSwiftChartsOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PlaceholderContentView {
  @_spi(ForSwiftChartsOnly) @_Concurrency.MainActor @preconcurrency public static func withPlaceholderContent<V>(@SwiftUICore.ViewBuilder result: (SwiftUICore.PlaceholderContentView<Value>) -> V) -> some SwiftUICore.ViewModifier where V : SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TransactionModifier : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var transform: (inout SwiftUICore.Transaction) -> Swift.Void
  @inlinable nonisolated public init(transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) {
        self.transform = transform
    }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._TransactionModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._TransactionModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ValueTransactionModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore._GraphInputsModifier, SwiftUICore.PrimitiveViewModifier where Value : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var value: Value
  @_Concurrency.MainActor @preconcurrency public var transform: (inout SwiftUICore.Transaction) -> Swift.Void
  @inlinable nonisolated public init(value: Value, transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) {
        self.value = value
        self.transform = transform
    }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUICore._ValueTransactionModifier<Value>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._ValueTransactionModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PushPopTransactionModifier<Content> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Content : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public var content: Content
  @_Concurrency.MainActor @preconcurrency public var base: SwiftUICore._TransactionModifier
  @inlinable nonisolated public init(content: Content, transform: @escaping (inout SwiftUICore.Transaction) -> Swift.Void) {
        self.content = content
        base = .init(transform: transform)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._PushPopTransactionModifier<Content>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._PushPopTransactionModifier : Swift.Sendable {
}
extension SwiftUICore._GraphInputs {
  package var savedTransactions: [AttributeGraph.Attribute<SwiftUICore.Transaction>] {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  package var savedTransactions: [AttributeGraph.Attribute<SwiftUICore.Transaction>] {
    get
    set
  }
  package func geometryTransaction() -> AttributeGraph.Attribute<SwiftUICore.Transaction>
}
package struct ViewGraphGeometryObservers<Measurer> where Measurer : SwiftUICore.ViewGraphGeometryMeasurer {
  package typealias Proposal = Measurer.Proposal
  package typealias Size = Measurer.Size
  package typealias Callback = (SwiftUICore.ViewGraphGeometryObservers<Measurer>.Size, SwiftUICore.ViewGraphGeometryObservers<Measurer>.Size) -> Swift.Void
  package mutating func addObserver(for proposal: SwiftUICore.ViewGraphGeometryObservers<Measurer>.Proposal, exclusive: Swift.Bool = true, callback: @escaping SwiftUICore.ViewGraphGeometryObservers<Measurer>.Callback)
  package mutating func stopObserving(proposal: SwiftUICore.ViewGraphGeometryObservers<Measurer>.Proposal)
  package mutating func removeAll()
  @discardableResult
  package mutating func resetObserver(for proposal: SwiftUICore.ViewGraphGeometryObservers<Measurer>.Proposal) -> Swift.Bool
}
package protocol ViewGraphGeometryMeasurer {
  associatedtype Proposal : Swift.Hashable
  associatedtype Size : Swift.Equatable
  static func measure(given proposal: Self.Proposal, in graph: SwiftUICore.ViewGraph) -> Self.Size
  static var invalidValue: Self.Size { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  public static func custom(_ name: Swift.String, size: CoreFoundation.CGFloat) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, size: CoreFoundation.CGFloat, relativeTo textStyle: SwiftUICore.Font.TextStyle) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:size:textStyle:)")
  public static func _custom(_ name: Swift.String, size: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public static func custom(_ name: Swift.String, fixedSize: CoreFoundation.CGFloat) -> SwiftUICore.Font
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @available(*, deprecated, renamed: "custom(_:fixedSize:)")
  public static func _custom(_ name: Swift.String, verbatimSize: CoreFoundation.CGFloat) -> SwiftUICore.Font
  public init(_ font: CoreText.CTFont)
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol FontDefinition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveTextStyleFont(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveTextStyleFont(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveTextStyleFontInfo(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveTextStyleFontInfo(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveSystemFont(size: CoreFoundation.CGFloat, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveSystemFont(size: CoreFoundation.CGFloat, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveCustomFont(name: Swift.String, size: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  static func resolveCustomFont(name: Swift.String, size: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  static func resolvePrivateTextStyleFont(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  static func resolvePrivateTextStyleFont(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  static func resolvePrivateTextStyleFontInfo(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #else
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  static func resolvePrivateTextStyleFontInfo(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #endif
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static func resolvePrivateSystemDesignFont(size: CoreFoundation.CGFloat, design: CoreFoundation.CFString, weight: SwiftUICore.Font.Weight, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static func resolvePrivateSystemDesignFontInfo(size: CoreFoundation.CGFloat, design: CoreFoundation.CFString, weight: SwiftUICore.Font.Weight, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static func resolveFont(_ font: CoreText.CTFont) -> CoreText.CTFontDescriptor
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static func resolveFontInfo(_ font: CoreText.CTFont) -> SwiftUICore.Font.ResolvedTraits
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.FontDefinition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveTextStyleFont(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveTextStyleFont(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveTextStyleFontInfo(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveTextStyleFontInfo(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveSystemFont(size: CoreFoundation.CGFloat, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveSystemFont(size: CoreFoundation.CGFloat, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public static func resolveCustomFont(name: Swift.String, size: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) public static func resolveCustomFont(name: Swift.String, size: CoreFoundation.CGFloat, textStyle: SwiftUICore.Font.TextStyle?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
}
@_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.FontDefinition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public static func resolvePrivateTextStyleFont(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public static func resolvePrivateTextStyleFont(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public static func resolvePrivateTextStyleFontInfo(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #else
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public static func resolvePrivateTextStyleFontInfo(textStyle: CoreFoundation.CFString, design: CoreFoundation.CFString?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  #endif
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func resolvePrivateSystemDesignFont(size: CoreFoundation.CGFloat, design: CoreFoundation.CFString, weight: SwiftUICore.Font.Weight, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func resolvePrivateSystemDesignFontInfo(size: CoreFoundation.CGFloat, design: CoreFoundation.CFString, weight: SwiftUICore.Font.Weight, in context: SwiftUICore.Font.Context) -> SwiftUICore.Font.ResolvedTraits
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func resolveFont(_ font: CoreText.CTFont) -> CoreText.CTFontDescriptor
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func resolveFontInfo(_ font: CoreText.CTFont) -> SwiftUICore.Font.ResolvedTraits
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum DefaultFontDefinition : SwiftUICore.FontDefinition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveTextStyleFont(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveTextStyleFont(textStyle: SwiftUICore.Font.TextStyle, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveSystemFont(size: CoreFoundation.CGFloat, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func resolveSystemFont(size: CoreFoundation.CGFloat, design: SwiftUICore.Font.Design?, weight: SwiftUICore.Font.Weight?, in context: SwiftUICore.Font.Context) -> CoreText.CTFontDescriptor
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.DefaultFontDefinition : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var fontDefinition: any SwiftUICore.FontDefinition.Type {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight? = nil, design: SwiftUICore.Font.Design? = nil) -> SwiftUICore.Font
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight? = nil, design: SwiftUICore.Font.Design? = nil) -> SwiftUICore.Font
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  package static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight? = nil, design: SwiftUICore.Font.Design? = nil, relativeTo textStyle: SwiftUICore.Font.TextStyle? = nil, maximumSize: CoreFoundation.CGFloat? = nil) -> SwiftUICore.Font
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  package static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight? = nil, design: SwiftUICore.Font.Design? = nil, relativeTo textStyle: SwiftUICore.Font.TextStyle? = nil, maximumSize: CoreFoundation.CGFloat? = nil) -> SwiftUICore.Font
  #endif
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `system(size:weight:design:)` instead.")
  @_disfavoredOverload public static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight = .regular, design: SwiftUICore.Font.Design = .default) -> SwiftUICore.Font
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func system(size: CoreFoundation.CGFloat, weight: SwiftUICore.Font.Weight = .regular, design: SwiftUICore.Font.PrivateDesign) -> SwiftUICore.Font
  public enum Design : Swift.Hashable, Swift.Sendable {
    case `default`
    @available(watchOS 7.0, *)
    case serif
    case rounded
    @available(watchOS 7.0, *)
    case monospaced
    public static func == (a: SwiftUICore.Font.Design, b: SwiftUICore.Font.Design) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public struct PrivateDesign : Swift.Hashable {
    @_spi(Private) public static let compact: SwiftUICore.Font.PrivateDesign
    @_spi(Private) public static let compactRounded: SwiftUICore.Font.PrivateDesign
    @_spi(Private) public static let soft: SwiftUICore.Font.PrivateDesign
    @_spi(Private) public static let compactSoft: SwiftUICore.Font.PrivateDesign
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUICore.Font.PrivateDesign, b: SwiftUICore.Font.PrivateDesign) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.Font.PrivateDesign : Swift.Sendable {
}
package struct AccessibilityProperties : Swift.Equatable {
  package var isEmpty: Swift.Bool {
    get
  }
  package init<K>(_ key: K.Type, _ value: K.PropertyValue) where K : SwiftUICore.AccessibilityPropertiesKey
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init<K>(_ key: K.Type, _ value: K.PropertyValue?) where K : SwiftUICore.AccessibilityPropertiesKey
  #else
  package init<K>(_ key: K.Type, _ value: K.PropertyValue?) where K : SwiftUICore.AccessibilityPropertiesKey
  #endif
  package init(reserving count: Swift.Int = 0)
  package mutating func update(_ work: ((inout [Swift.ObjectIdentifier : any SwiftUICore.AnyAccessibilityPropertiesEntry]) -> ()))
  package static func == (lhs: SwiftUICore.AccessibilityProperties, rhs: SwiftUICore.AccessibilityProperties) -> Swift.Bool
}
extension SwiftUICore.AccessibilityProperties {
  package subscript<K>(key: K.Type) -> K.PropertyValue where K : SwiftUICore.AccessibilityPropertiesKey {
    get
    set
  }
}
package protocol AnyAccessibilityPropertiesEntry {
  var anyValue: Any { get }
  func isEqual(to other: any SwiftUICore.AnyAccessibilityPropertiesEntry) -> Swift.Bool
}
extension SwiftUICore.AnyAccessibilityPropertiesEntry {
  package func isEqual(to other: any SwiftUICore.AnyAccessibilityPropertiesEntry) -> Swift.Bool
}
package struct AccessibilityPropertiesEntry<V> : SwiftUICore.AnyAccessibilityPropertiesEntry, Swift.Equatable {
  package var typedValue: V
  package init(_ typedValue: V)
  package static func == (lhs: SwiftUICore.AccessibilityPropertiesEntry<V>, rhs: SwiftUICore.AccessibilityPropertiesEntry<V>) -> Swift.Bool
  package var anyValue: Any {
    get
  }
  package func isEqual(to other: any SwiftUICore.AnyAccessibilityPropertiesEntry) -> Swift.Bool
}
extension SwiftUICore.AccessibilityPropertiesEntry : SwiftUICore.AccessibilityCombinable where V : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityPropertiesEntry<V>) -> Swift.Bool
  @discardableResult
  package mutating func merge(with child: V) -> Swift.Bool
}
package protocol AccessibilityPropertiesKey {
  associatedtype PropertyValue
  static var defaultValue: Self.PropertyValue { get }
  static func isDefault(_ value: Self.PropertyValue) -> Swift.Bool
}
package protocol AccessibilityOptionalPropertiesKey : SwiftUICore.AccessibilityPropertiesKey {
  associatedtype NonOptionalPropertyValue where Self.PropertyValue == Self.NonOptionalPropertyValue?
  static var valueType: Self.NonOptionalPropertyValue.Type { get }
}
extension SwiftUICore.AccessibilityPropertiesKey {
  package static func isDefault(_ value: Self.PropertyValue) -> Swift.Bool
}
extension SwiftUICore.AccessibilityPropertiesKey where Self.PropertyValue : Swift.Equatable {
  package static func isDefault(_ value: Self.PropertyValue) -> Swift.Bool
}
extension SwiftUICore.AccessibilityOptionalPropertiesKey {
  package static func isDefault(_ value: Self.PropertyValue) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var defaultValue: Swift.Optional<Self.NonOptionalPropertyValue> {
    get
  }
  #else
  package static var defaultValue: Swift.Optional<Self.NonOptionalPropertyValue> {
    get
  }
  #endif
}
package struct AccessibilityAttachment : Swift.Equatable {
  package var properties: SwiftUICore.AccessibilityProperties
  package var platformElement: (any ObjectiveC.NSObject & SwiftUICore.PlatformAccessibilityElementProtocol)?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(properties: SwiftUICore.AccessibilityProperties, platformElement: (any ObjectiveC.NSObject & SwiftUICore.PlatformAccessibilityElementProtocol)?)
  #else
  package init(properties: SwiftUICore.AccessibilityProperties, platformElement: (any ObjectiveC.NSObject & SwiftUICore.PlatformAccessibilityElementProtocol)?)
  #endif
  package init(properties: SwiftUICore.AccessibilityProperties)
  package init()
  package var isEmpty: Swift.Bool {
    get
  }
  package static func == (lhs: SwiftUICore.AccessibilityAttachment, rhs: SwiftUICore.AccessibilityAttachment) -> Swift.Bool
}
extension SwiftUICore.AccessibilityAttachment {
  package static func properties(_ properties: SwiftUICore.AccessibilityProperties) -> SwiftUICore.AccessibilityAttachment
}
package enum AccessibilityAttachmentToken : Swift.Hashable, Swift.Codable {
  case attribute(AttributeGraph.AnyWeakAttribute)
  case identifier(Swift.UInt32)
  package init(_ attribute: AttributeGraph.AnyAttribute)
  package init<T>(_ attribute: AttributeGraph.Attribute<T>)
  package init(_ identifier: Swift.UInt32)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var attribute: AttributeGraph.AnyAttribute? {
    get
  }
  #else
  package var attribute: AttributeGraph.AnyAttribute? {
    get
  }
  #endif
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package func hash(into hasher: inout Swift.Hasher)
  package static func == (a: SwiftUICore.AccessibilityAttachmentToken, b: SwiftUICore.AccessibilityAttachmentToken) -> Swift.Bool
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol PreferenceKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
  static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)
  static var _includesRemovedValues: Swift.Bool { get }
  static var _isReadableByHost: Swift.Bool { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PreferenceKey where Self.Value : Swift.ExpressibleByNilLiteral {
  public static var defaultValue: Self.Value {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PreferenceKey {
  public static var _includesRemovedValues: Swift.Bool {
    get
  }
  public static var _isReadableByHost: Swift.Bool {
    get
  }
  package static var readableName: Swift.String {
    get
  }
}
package protocol AnyPreferenceKey {
  static var valueType: any Any.Type { get }
  static func visitKey<V>(_ v: inout V) where V : SwiftUICore.PreferenceKeyVisitor
}
package protocol PreferenceKeyVisitor {
  mutating func visit<K>(key: K.Type) where K : SwiftUICore.PreferenceKey
}
package struct _AnyPreferenceKey<K> : SwiftUICore.AnyPreferenceKey where K : SwiftUICore.PreferenceKey {
  package static var valueType: any Any.Type {
    get
  }
  package static func visitKey<V>(_ v: inout V) where V : SwiftUICore.PreferenceKeyVisitor
}
package struct PreferenceKeys : Swift.Equatable, Swift.RandomAccessCollection, Swift.MutableCollection {
  @inlinable package init()
  @inlinable package var isEmpty: Swift.Bool {
    get
  }
  @inlinable package func contains(_ key: any SwiftUICore.AnyPreferenceKey.Type) -> Swift.Bool
  @inlinable package func contains<K>(_ key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  package mutating func add(_ key: any SwiftUICore.AnyPreferenceKey.Type)
  package mutating func add<K>(_ key: K.Type) where K : SwiftUICore.PreferenceKey
  package mutating func remove(_ key: any SwiftUICore.AnyPreferenceKey.Type)
  package mutating func remove<K>(_ key: K.Type) where K : SwiftUICore.PreferenceKey
  package static func == (lhs: SwiftUICore.PreferenceKeys, rhs: SwiftUICore.PreferenceKeys) -> Swift.Bool
  @inlinable package var startIndex: Swift.Int {
    get
  }
  @inlinable package var endIndex: Swift.Int {
    get
  }
  package subscript(index: Swift.Int) -> any SwiftUICore.AnyPreferenceKey.Type {
    @inlinable get
    @inlinable set
  }
  package typealias Element = any SwiftUICore.AnyPreferenceKey.Type
  package typealias Index = Swift.Int
  package typealias Indices = Swift.Range<Swift.Int>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.PreferenceKeys>
  package typealias SubSequence = Swift.Slice<SwiftUICore.PreferenceKeys>
}
package struct HostPreferencesKey : SwiftUICore.PreferenceKey {
  package typealias Value = SwiftUICore.PreferenceList
  package static var defaultValue: SwiftUICore.HostPreferencesKey.Value {
    get
  }
  package static func reduce(value: inout SwiftUICore.HostPreferencesKey.Value, nextValue: () -> SwiftUICore.HostPreferencesKey.Value)
  package static func makeNodeId() -> Swift.UInt32
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol HostPreferenceKey : SwiftUICore.PreferenceKey {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HostPreferenceKey {
  @_spi(Private) public static var _isReadableByHost: Swift.Bool {
    @_spi(Private) get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func spacing(_ spacing: SwiftUICore.Spacing) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @inlinable @_disfavoredOverload public func fill<S>(_ content: S, style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return _ShapeView(shape: self, style: content, fillStyle: style)
    }
  
  @inlinable @_disfavoredOverload public func fill(style: SwiftUICore.FillStyle = FillStyle()) -> some SwiftUICore.View {
        return _ShapeView(shape: self, style: .foreground, fillStyle: style)
    }
  
  @inlinable @_disfavoredOverload public func stroke<S>(_ content: S, style: SwiftUICore.StrokeStyle) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return _ShapeView(shape: stroke(style: style), style: content)
    }
  
  @inlinable @_disfavoredOverload public func stroke<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return _ShapeView(
            shape: stroke(style: StrokeStyle(lineWidth: lineWidth)),
            style: content)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  public var body: SwiftUICore._ShapeView<Self, SwiftUICore.ForegroundStyle> {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self : SwiftUICore.View, Self.Body == SwiftUICore._ShapeView<SwiftUICore.Rectangle, Self> {
  public var body: SwiftUICore._ShapeView<SwiftUICore.Rectangle, Self> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeView<Content, Style> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.ShapeStyledLeafView, SwiftUICore.PrimitiveView, SwiftUICore.LeafViewLayout where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle {
  @_Concurrency.MainActor @preconcurrency public var shape: Content
  @_Concurrency.MainActor @preconcurrency public var style: Style
  @_Concurrency.MainActor @preconcurrency public var fillStyle: SwiftUICore.FillStyle
  @inlinable nonisolated public init(shape: Content, style: Style, fillStyle: SwiftUICore.FillStyle = FillStyle()) {
        self.shape = shape
        self.style = style
        self.fillStyle = fillStyle
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<Content, Style>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package func shape(in size: CoreFoundation.CGSize) -> SwiftUICore._ShapeView<Content, Style>.FramedShape
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias ShapeUpdateData = Swift.Void
}
@available(*, unavailable)
extension SwiftUICore._ShapeView : Swift.Sendable {
}
extension SwiftUICore.ShapeStyle {
  package static func legacyMakeShapeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, Self>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol ShapeView<Content> : SwiftUICore.View {
  associatedtype Content : SwiftUICore.Shape
  var shape: Self.Content { get }
}
#else
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol ShapeView : SwiftUICore.View {
  associatedtype Content : SwiftUICore.Shape
  var shape: Self.Content { get }
}
#endif
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Shape {
  @_alwaysEmitIntoClient public func fill<S>(_ content: S = .foreground, style: SwiftUICore.FillStyle = FillStyle()) -> SwiftUICore._ShapeView<Self, S> where S : SwiftUICore.ShapeStyle {
        _ShapeView(shape: self, style: content, fillStyle: style)
    }
  @_alwaysEmitIntoClient public func stroke<S>(_ content: S, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        StrokeShapeView(
            shape: self, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: EmptyView())
    }
  @_alwaysEmitIntoClient public func stroke<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        stroke(
            content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.InsettableShape {
  @_alwaysEmitIntoClient public func strokeBorder<S>(_ content: S = .foreground, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        StrokeBorderShapeView(
            shape: self, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: EmptyView())
    }
  @_alwaysEmitIntoClient public func strokeBorder<S>(_ content: S = .foreground, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self, S, SwiftUICore.EmptyView> where S : SwiftUICore.ShapeStyle {
        strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore._ShapeView : SwiftUICore.ShapeView {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct FillShapeView<Content, Style, Background> : SwiftUICore.ShapeView, SwiftUICore.PrimitiveView, SwiftUICore.UnaryView where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {
  @usableFromInline
  internal typealias ViewType = SwiftUICore.ModifiedContent<SwiftUICore._ShapeView<Content, Style>, SwiftUICore._BackgroundModifier<Background>>
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var view: SwiftUICore.FillShapeView<Content, Style, Background>.ViewType
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var shape: Content {
    get { view.content.shape }
    set { view.content.shape = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var style: Style {
    get { view.content.style }
    set { view.content.style = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var fillStyle: SwiftUICore.FillStyle {
    get { view.content.fillStyle }
    set { view.content.fillStyle = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var background: Background {
    get { view.modifier.background }
    set { view.modifier.background = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(shape: Content, style: Style, fillStyle: SwiftUICore.FillStyle, background: Background) {
        view = .init(content: _ShapeView(
            shape: shape, style: style, fillStyle: fillStyle),
            modifier: .init(background: background))
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.FillShapeView<Content, Style, Background>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.FillShapeView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct StrokeShapeView<Content, Style, Background> : SwiftUICore.ShapeView, SwiftUICore.PrimitiveView, SwiftUICore.UnaryView where Content : SwiftUICore.Shape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {
  @usableFromInline
  internal typealias ViewType = SwiftUICore.ModifiedContent<SwiftUICore._ShapeView<SwiftUICore._StrokedShape<Content>, Style>, SwiftUICore._BackgroundModifier<Background>>
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var view: SwiftUICore.StrokeShapeView<Content, Style, Background>.ViewType
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var shape: Content {
    get { view.content.shape.shape }
    set { view.content.shape.shape = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var style: Style {
    get { view.content.style }
    set { view.content.style = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var strokeStyle: SwiftUICore.StrokeStyle {
    get { view.content.shape.style }
    set { view.content.shape.style = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var isAntialiased: Swift.Bool {
    get { view.content.fillStyle.isAntialiased }
    set { view.content.fillStyle.isAntialiased = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var background: Background {
    get { view.modifier.background }
    set { view.modifier.background = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(shape: Content, style: Style, strokeStyle: SwiftUICore.StrokeStyle, isAntialiased: Swift.Bool, background: Background) {
        view = .init(content: _ShapeView(
            shape: _StrokedShape(shape: shape, style: strokeStyle),
            style: style, fillStyle: .init(antialiased: isAntialiased)),
            modifier: .init(background: background))
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.StrokeShapeView<Content, Style, Background>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.StrokeShapeView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct StrokeBorderShapeView<Content, Style, Background> : SwiftUICore.ShapeView, SwiftUICore.PrimitiveView, SwiftUICore.UnaryView where Content : SwiftUICore.InsettableShape, Style : SwiftUICore.ShapeStyle, Background : SwiftUICore.View {
  @usableFromInline
  internal typealias ViewType = SwiftUICore.ModifiedContent<SwiftUICore._ShapeView<SwiftUICore._StrokedShape<Content.InsetShape>, Style>, SwiftUICore._BackgroundModifier<Background>>
  @_Concurrency.MainActor @preconcurrency public var shape: Content
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var view: SwiftUICore.StrokeBorderShapeView<Content, Style, Background>.ViewType
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var style: Style {
    get { view.content.style }
    set { view.content.style = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var strokeStyle: SwiftUICore.StrokeStyle {
    get { view.content.shape.style }
    set { view.content.shape.style = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var isAntialiased: Swift.Bool {
    get { view.content.fillStyle.isAntialiased }
    set { view.content.fillStyle.isAntialiased = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public var background: Background {
    get { view.modifier.background }
    set { view.modifier.background = newValue }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(shape: Content, style: Style, strokeStyle: SwiftUICore.StrokeStyle, isAntialiased: Swift.Bool, background: Background) {
        self.shape = shape
        view = .init(content: _ShapeView(
            shape: _StrokedShape(
                shape: shape.inset(by: strokeStyle.lineWidth * 0.5),
                style: strokeStyle),
            style: style, fillStyle: .init(antialiased: isAntialiased)),
            modifier: .init(background: background))
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.StrokeBorderShapeView<Content, Style, Background>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.StrokeBorderShapeView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeView {
  @_alwaysEmitIntoClient public func fill<S>(_ content: S = .foreground, style: SwiftUICore.FillStyle = FillStyle()) -> SwiftUICore.FillShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        FillShapeView(
            shape: shape, style: content, fillStyle: style, background: self)
    }
  @_alwaysEmitIntoClient public func stroke<S>(_ content: S, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        StrokeShapeView(
            shape: shape, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: self)
    }
  @_alwaysEmitIntoClient public func stroke<S>(_ content: S, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        stroke(
            content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeView where Self.Content : SwiftUICore.InsettableShape {
  @_alwaysEmitIntoClient public func strokeBorder<S>(_ content: S = .foreground, style: SwiftUICore.StrokeStyle, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        StrokeBorderShapeView(
            shape: shape, style: content, strokeStyle: style,
            isAntialiased: antialiased, background: self)
    }
  @_alwaysEmitIntoClient public func strokeBorder<S>(_ content: S = .foreground, lineWidth: CoreFoundation.CGFloat = 1, antialiased: Swift.Bool = true) -> SwiftUICore.StrokeBorderShapeView<Self.Content, S, Self> where S : SwiftUICore.ShapeStyle {
        strokeBorder(content, style: StrokeStyle(lineWidth: lineWidth),
            antialiased: antialiased)
    }
}
extension SwiftUICore.Gesture {
  package func cancellable() -> some SwiftUICore.Gesture<Self.Value>
  
}
package struct IsCancellableGestureKey : SwiftUICore.PreferenceKey {
  package static let defaultValue: Swift.Bool
  package static func reduce(value: inout Swift.Bool, nextValue: () -> Swift.Bool)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = Swift.Bool
}
package struct BackdropEffect {
  package var scale: Swift.Float
  package var color: SwiftUICore.Color.Resolved
  package var filters: [SwiftUICore.GraphicsFilter]
  package init(scale: Swift.Float = 1, color: SwiftUICore.Color.Resolved = .black, filters: [SwiftUICore.GraphicsFilter] = [], captureOnly: Swift.Bool = false)
}
extension SwiftUICore.BackdropEffect : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Binding {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<V>(_ base: SwiftUICore.Binding<V>) where Value == V?
  #else
  public init<V>(_ base: SwiftUICore.Binding<V>) where Value == V?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ base: SwiftUICore.Binding<Value?>)
  #else
  public init?(_ base: SwiftUICore.Binding<Value?>)
  #endif
  public init<V>(_ base: SwiftUICore.Binding<V>) where Value == Swift.AnyHashable, V : Swift.Hashable
  package init<V>(_ base: SwiftUICore.Binding<V>) where Value == Swift.Double, V : Swift.BinaryFloatingPoint
  package static func == (lhs: SwiftUICore.Binding<Value>, rhs: Value) -> SwiftUICore.Binding<Swift.Bool> where Value : Swift.Hashable
}
extension SwiftUICore.Binding where Value == Swift.Bool {
  package static var `false`: SwiftUICore.Binding<Swift.Bool> {
    get
  }
}
package enum BindingOperations {
  package struct ToOptional<Value> : SwiftUICore.Projection {
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func get(base: Value) -> Value?
    #else
    package func get(base: Value) -> Value?
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func set(base: inout Value, newValue: Value?)
    #else
    package func set(base: inout Value, newValue: Value?)
    #endif
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.BindingOperations.ToOptional<Value>, b: SwiftUICore.BindingOperations.ToOptional<Value>) -> Swift.Bool
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Base = Value
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Projected = Value?
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct ToAnyHashable<Value> : SwiftUICore.Projection where Value : Swift.Hashable {
    package func get(base: Value) -> Swift.AnyHashable
    package func set(base: inout Value, newValue: Swift.AnyHashable)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.BindingOperations.ToAnyHashable<Value>, b: SwiftUICore.BindingOperations.ToAnyHashable<Value>) -> Swift.Bool
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Base = Value
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Projected = Swift.AnyHashable
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct ForceUnwrapping<Value> : SwiftUICore.Projection {
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func get(base: Value?) -> Value
    #else
    package func get(base: Value?) -> Value
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func set(base: inout Value?, newValue: Value)
    #else
    package func set(base: inout Value?, newValue: Value)
    #endif
    package init()
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.BindingOperations.ForceUnwrapping<Value>, b: SwiftUICore.BindingOperations.ForceUnwrapping<Value>) -> Swift.Bool
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Base = Value?
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Projected = Value
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct NilCoalescing<Value> : SwiftUICore.Projection {
    package init(defaultValue: Value)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func get(base: Value?) -> Value
    #else
    package func get(base: Value?) -> Value
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    package func set(base: inout Value?, newValue: Value)
    #else
    package func set(base: inout Value?, newValue: Value)
    #endif
    package static func == (lhs: SwiftUICore.BindingOperations.NilCoalescing<Value>, rhs: SwiftUICore.BindingOperations.NilCoalescing<Value>) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Base = Value?
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Projected = Value
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct ToDouble<Base> : SwiftUICore.Projection where Base : Swift.BinaryFloatingPoint {
    package func get(base: Base) -> Swift.Double
    package func set(base: inout Base, newValue: Swift.Double)
    package init()
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.BindingOperations.ToDouble<Base>, b: SwiftUICore.BindingOperations.ToDouble<Base>) -> Swift.Bool
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Projected = Swift.Double
    package var hashValue: Swift.Int {
      get
    }
  }
  package struct ToDoubleFromInteger<Base> : SwiftUICore.Projection where Base : Swift.BinaryInteger {
    package func get(base: Base) -> Swift.Double
    package func set(base: inout Base, newValue: Swift.Double)
    package init()
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.BindingOperations.ToDoubleFromInteger<Base>, b: SwiftUICore.BindingOperations.ToDoubleFromInteger<Base>) -> Swift.Bool
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    package typealias Projected = Swift.Double
    package var hashValue: Swift.Int {
      get
    }
  }
}
@propertyWrapper package struct AtomicBox<Value> {
  package init(wrappedValue: Value)
  package var wrappedValue: Value {
    @inline(__always) get
    @inline(__always) nonmutating _modify
  }
  @inline(__always) package func access<T>(_ body: (inout Value) throws -> T) rethrows -> T
  package var projectedValue: SwiftUICore.AtomicBox<Value> {
    get
  }
}
extension SwiftUICore.AtomicBox : @unchecked Swift.Sendable where Value : Swift.Sendable {
}
extension SwiftUICore.AtomicBox where Value : Swift.ExpressibleByNilLiteral {
  package init()
}
final package class ThreadSpecific<T> {
  package init(_ defaultValue: T)
  @objc deinit
  final package var value: T {
    get
    set(v)
  }
}
package func onMainThread(do body: @escaping () -> Swift.Void)
package func mainThreadPrecondition()
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package enum Log {
  package static let subsystem: Swift.String
  @inline(__always) package static func log(_ message: @autoclosure () -> Swift.String, unless condition: @autoclosure () -> Swift.Bool, file: Swift.StaticString, line: Swift.UInt)
  @inline(__always) package static func log(_ message: @autoclosure () -> Swift.String, unless condition: @autoclosure () -> Swift.Bool, file: Swift.StaticString)
  @inline(__always) package static func log(_ message: @autoclosure () -> Swift.String, unless condition: @autoclosure () -> Swift.Bool)
  @inline(__always) package static func log(_ message: @autoclosure () -> Swift.String)
  package static func internalWarning(_ message: @autoclosure () -> Swift.String, file: Swift.StaticString, line: Swift.UInt)
  package static func internalWarning(_ message: @autoclosure () -> Swift.String)
  package static func internalError(_ message: @autoclosure () -> Swift.String, file: Swift.StaticString, line: Swift.UInt)
  package static func internalError(_ message: @autoclosure () -> Swift.String)
  package static func externalWarning(_ message: Swift.String)
  package static func eventDebug(_ message: Swift.String)
  @usableFromInline
  package static var runtimeIssuesLog: os.OSLog
  package static let propertyChangeLog: os.Logger
  package static var unlocatedIssuesLog: os.Logger
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @usableFromInline
  package static var internalErrorsLog: os.OSLog
  @usableFromInline
  package static var eventDebuggingLog: os.OSLog
  package static let archiving: os.Logger
  package static let archivedToggle: os.Logger
  package static let archivedButton: os.Logger
  package static let archivedPlaybackButton: os.Logger
  package static let metadataExtraction: os.Logger
}
@available(*, unavailable)
extension SwiftUICore.Log : Swift.Sendable {
}
@_transparent package func precondition(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String, file: Swift.StaticString = #fileID, line: Swift.UInt = #line)
@_transparent package func preconditionFailure(_ message: @autoclosure () -> Swift.String, file: Swift.StaticString, line: Swift.UInt) -> Swift.Never
@_transparent package func preconditionFailure(_ message: @autoclosure () -> Swift.String) -> Swift.Never
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension os.OSLog {
  @usableFromInline
  internal static var runtimeIssuesLog: os.OSLog
}
@inline(__always) package func isCatalyst() -> Swift.Bool
@inline(__always) package func isUIKitBased() -> Swift.Bool
@inline(__always) package func isAppKitBased() -> Swift.Bool
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public func concat<T>(_ effect: T) -> SwiftUICore.ModifiedContent<Self, T>
}
@_spi(CustomHoverEffects) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public func _concat<T>(_ effect: T) -> SwiftUICore.ModifiedContent<Self, T>
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUICore.CustomHoverEffect, SwiftUICore.InternalCustomHoverEffect where Content : SwiftUICore.CustomHoverEffect, Modifier : SwiftUICore.CustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
  package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    get
  }
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ViewTransform : Swift.Equatable, Swift.CustomStringConvertible {
  @_spi(ForSwiftUIOnly) package enum Conversion {
    @_spi(ForSwiftUIOnly) case rootToSpace(SwiftUICore.CoordinateSpace)
    @_spi(ForSwiftUIOnly) case spaceToRoot(SwiftUICore.CoordinateSpace)
    @_spi(ForSwiftUIOnly) case localToSpace(SwiftUICore.CoordinateSpace)
    @_spi(ForSwiftUIOnly) case spaceToLocal(SwiftUICore.CoordinateSpace)
    @_spi(ForSwiftUIOnly) case spaceToSpace(SwiftUICore.CoordinateSpace, SwiftUICore.CoordinateSpace)
    @_spi(ForSwiftUIOnly) package static func globalToSpace(_ space: SwiftUICore.CoordinateSpace) -> SwiftUICore.ViewTransform.Conversion
    @_spi(ForSwiftUIOnly) package static func spaceToGlobal(_ space: SwiftUICore.CoordinateSpace) -> SwiftUICore.ViewTransform.Conversion
  }
  @_spi(ForSwiftUIOnly) package enum Item : Swift.Equatable {
    @_spi(ForSwiftUIOnly) case translation(CoreFoundation.CGSize)
    @_spi(ForSwiftUIOnly) case affineTransform(CoreFoundation.CGAffineTransform, inverse: Swift.Bool)
    @_spi(ForSwiftUIOnly) case projectionTransform(SwiftUICore.ProjectionTransform, inverse: Swift.Bool)
    @_spi(ForSwiftUIOnly) case coordinateSpace(SwiftUICore.CoordinateSpace.Name)
    @_spi(ForSwiftUIOnly) case sizedSpace(SwiftUICore.CoordinateSpace.Name, size: CoreFoundation.CGSize)
    @_spi(ForSwiftUIOnly) case scrollGeometry(SwiftUICore.ViewTransform.ScrollGeometryItem)
    @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore.ViewTransform.Item, b: SwiftUICore.ViewTransform.Item) -> Swift.Bool
  }
  @_spi(ForSwiftUIOnly) package struct ScrollGeometryItem : Swift.Equatable {
    @_spi(ForSwiftUIOnly) package static func == (a: SwiftUICore.ViewTransform.ScrollGeometryItem, b: SwiftUICore.ViewTransform.ScrollGeometryItem) -> Swift.Bool
  }
  @_spi(ForSwiftUIOnly) package var positionAdjustment: CoreFoundation.CGSize {
    get
  }
  @_spi(ForSwiftUIOnly) package init()
  @_spi(ForSwiftUIOnly) package var isEmpty: Swift.Bool {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) public static func == (lhs: SwiftUICore.ViewTransform, rhs: SwiftUICore.ViewTransform) -> Swift.Bool
  @_spi(ForSwiftUIOnly) package mutating func append(movingContentsOf elements: inout SwiftUICore.ViewTransform.UnsafeBuffer)
  @_spi(ForSwiftUIOnly) package mutating func appendPosition(_ position: CoreFoundation.CGPoint)
  @_spi(ForSwiftUIOnly) package func withPosition(_ position: CoreFoundation.CGPoint) -> SwiftUICore.ViewTransform
  @_spi(ForSwiftUIOnly) package mutating func appendPosition(_ position: CoreFoundation.CGPoint, scale: CoreFoundation.CGFloat)
  @_spi(ForSwiftUIOnly) package mutating func resetPosition(_ position: CoreFoundation.CGPoint)
  @_spi(ForSwiftUIOnly) package mutating func setPositionAdjustment(_ offset: CoreFoundation.CGSize)
  @_spi(ForSwiftUIOnly) package mutating func appendTranslation(_ size: CoreFoundation.CGSize)
  @_spi(ForSwiftUIOnly) package mutating func appendAffineTransform(_ matrix: CoreFoundation.CGAffineTransform, inverse: Swift.Bool)
  @_spi(ForSwiftUIOnly) package mutating func appendProjectionTransform(_ matrix: SwiftUICore.ProjectionTransform, inverse: Swift.Bool)
  @_spi(ForSwiftUIOnly) package mutating func appendCoordinateSpace(name: Swift.AnyHashable)
  @_spi(ForSwiftUIOnly) package mutating func appendCoordinateSpace(id: SwiftUICore.CoordinateSpace.ID)
  @_spi(ForSwiftUIOnly) package mutating func appendSizedSpace(name: Swift.AnyHashable, size: CoreFoundation.CGSize)
  @_spi(ForSwiftUIOnly) package mutating func appendSizedSpace(id: SwiftUICore.CoordinateSpace.ID, size: CoreFoundation.CGSize)
  @_spi(ForSwiftUIOnly) package mutating func appendScrollGeometry(_ geometry: SwiftUICore.ScrollGeometry, isClipped: Swift.Bool)
  @_spi(ForSwiftUIOnly) package func forEach(inverted: Swift.Bool, _ body: (SwiftUICore.ViewTransform.Item, inout Swift.Bool) -> Swift.Void)
  @_spi(ForSwiftUIOnly) package func forEach(_ body: (SwiftUICore.ViewTransform.Item, inout Swift.Bool) -> Swift.Void)
  @_spi(ForSwiftUIOnly) package func convert(_ conversion: SwiftUICore.ViewTransform.Conversion, _ body: (SwiftUICore.ViewTransform.Item) -> Swift.Void)
  @_spi(ForSwiftUIOnly) package func convert(_ conversion: SwiftUICore.ViewTransform.Conversion, points: inout [CoreFoundation.CGPoint])
  @_spi(ForSwiftUIOnly) package func convert(_ conversion: SwiftUICore.ViewTransform.Conversion, point: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package var containingScrollGeometry: SwiftUICore.ScrollGeometry? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) package var containingScrollGeometry: SwiftUICore.ScrollGeometry? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package var nearestScrollGeometry: SwiftUICore.ScrollGeometry? {
    @_spi(ForSwiftUIOnly) get
  }
  #else
  @_spi(ForSwiftUIOnly) package var nearestScrollGeometry: SwiftUICore.ScrollGeometry? {
    @_spi(ForSwiftUIOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func containingSizedCoordinateSpace(name: SwiftUICore.CoordinateSpace.Name) -> CoreFoundation.CGRect?
  #else
  @_spi(ForSwiftUIOnly) package func containingSizedCoordinateSpace(name: SwiftUICore.CoordinateSpace.Name) -> CoreFoundation.CGRect?
  #endif
  @_spi(ForSwiftUIOnly) public var description: Swift.String {
    @_spi(ForSwiftUIOnly) get
  }
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUICore.ViewTransform : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) extension SwiftUICore.ViewTransform {
  @_spi(ForSwiftUIOnly) package struct UnsafeBuffer : Swift.Equatable {
    @_spi(ForSwiftUIOnly) package init()
    @_spi(ForSwiftUIOnly) package mutating func destroy()
    @_spi(ForSwiftUIOnly) package mutating func appendTranslation(_ size: CoreFoundation.CGSize)
    @_spi(ForSwiftUIOnly) package mutating func appendAffineTransform(_ matrix: CoreFoundation.CGAffineTransform, inverse: Swift.Bool)
    @_spi(ForSwiftUIOnly) package mutating func appendProjectionTransform(_ matrix: SwiftUICore.ProjectionTransform, inverse: Swift.Bool)
    @_spi(ForSwiftUIOnly) package mutating func appendCoordinateSpace(id: SwiftUICore.CoordinateSpace.ID)
    @_spi(ForSwiftUIOnly) package mutating func appendSizedSpace(id: SwiftUICore.CoordinateSpace.ID, size: CoreFoundation.CGSize)
    @_spi(ForSwiftUIOnly) package mutating func appendScrollGeometry(_ geometry: SwiftUICore.ScrollGeometry, isClipped: Swift.Bool)
    @_spi(ForSwiftUIOnly) package static func == (lhs: SwiftUICore.ViewTransform.UnsafeBuffer, rhs: SwiftUICore.ViewTransform.UnsafeBuffer) -> Swift.Bool
  }
}
package protocol ViewTransformable {
  mutating func convert(to space: SwiftUICore.CoordinateSpace, transform: SwiftUICore.ViewTransform)
  mutating func convert(from space: SwiftUICore.CoordinateSpace, transform: SwiftUICore.ViewTransform)
}
extension CoreFoundation.CGPoint : SwiftUICore.ViewTransformable {
  package mutating func applyTransform(item: SwiftUICore.ViewTransform.Item)
}
extension Swift.Array : SwiftUICore.ViewTransformable where Element == CoreFoundation.CGPoint {
  package mutating func applyTransform(item: SwiftUICore.ViewTransform.Item)
  package mutating func apply(_ m: SwiftUICore.ProjectionTransform, inverse: Swift.Bool)
}
extension CoreFoundation.CGRect : SwiftUICore.ViewTransformable {
  package mutating func convert(to space: SwiftUICore.CoordinateSpace, transform: SwiftUICore.ViewTransform)
  package mutating func convert(from space: SwiftUICore.CoordinateSpace, transform: SwiftUICore.ViewTransform)
  package mutating func whileClippingToScrollViewsConvert(to space: SwiftUICore.CoordinateSpace, transform: SwiftUICore.ViewTransform) -> Swift.Bool
}
extension SwiftUICore.Path : SwiftUICore.ViewTransformable {
  package mutating func convert(to space: SwiftUICore.CoordinateSpace, transform: SwiftUICore.ViewTransform)
  package mutating func convert(from space: SwiftUICore.CoordinateSpace, transform: SwiftUICore.ViewTransform)
}
extension Swift.FloatingPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: Self) {
        if m == 1 {
            round(rule)
        } else {
            self /= m
            round(rule)
            self *= m
        }
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(toMultipleOf m: Self) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: Self) -> Self {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(toMultipleOf m: Self) -> Self {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func roundToNearestOrUp(toMultipleOf m: Self) {
        self += m / 2
        round(.down, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func roundedToNearestOrUp(toMultipleOf m: Self) -> Self {
        var r = self
        r.roundToNearestOrUp(toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func approximates(_ value: Self, epsilon: Self) -> Swift.Bool {
        abs(self - value) < epsilon
    }
}
extension CoreFoundation.CGPoint {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) {
        x.round(rule, toMultipleOf: m)
        y.round(rule, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(toMultipleOf m: CoreFoundation.CGFloat) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func roundToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) {
        x.roundToNearestOrUp(toMultipleOf: m)
        y.roundToNearestOrUp(toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func roundedToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGPoint {
        var r = self
        r.roundToNearestOrUp(toMultipleOf: m)
        return r
    }
}
extension CoreFoundation.CGSize {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) {
        width.round(rule, toMultipleOf: m)
        height.round(rule, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(toMultipleOf m: CoreFoundation.CGFloat) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero, toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGSize {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGSize {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
}
extension CoreFoundation.CGRect {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func roundCoordinatesToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) {
        self = self.standardized
        var max = origin + size
        origin.roundToNearestOrUp(toMultipleOf: m)
        max.roundToNearestOrUp(toMultipleOf: m)
        size.width = max.x - x
        size.height = max.y - y
         
         
        size.round(toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func roundedCoordinatesToNearestOrUp(toMultipleOf m: CoreFoundation.CGFloat) -> CoreFoundation.CGRect {
        var r = self
        r.roundCoordinatesToNearestOrUp(toMultipleOf: m)
        return r
    }
}
extension SwiftUICore.EdgeInsets {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(_ rule: Swift.FloatingPointRoundingRule, toMultipleOf m: CoreFoundation.CGFloat) {
        top.round(rule, toMultipleOf: m)
        leading.round(rule, toMultipleOf: m)
        bottom.round(rule, toMultipleOf: m)
        trailing.round(rule, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func round(toMultipleOf m: CoreFoundation.CGFloat) {
        round(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(_ rule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero, toMultipleOf m: CoreFoundation.CGFloat) -> SwiftUICore.EdgeInsets {
        var r = self
        r.round(rule, toMultipleOf: m)
        return r
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func rounded(toMultipleOf m: CoreFoundation.CGFloat) -> SwiftUICore.EdgeInsets {
        rounded(.toNearestOrAwayFromZero, toMultipleOf: m)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func approximates(_ other: SwiftUICore.EdgeInsets, epsilon: CoreFoundation.CGFloat) -> Swift.Bool {
        top.approximates(other.top, epsilon: epsilon)
            && leading.approximates(other.leading, epsilon: epsilon)
            && bottom.approximates(other.bottom, epsilon: epsilon)
            && trailing.approximates(other.trailing, epsilon: epsilon)
    }
}
package protocol VibrantColorStyle {
  static func apply(_ type: SwiftUICore.SystemColorType, color: SwiftUICore.Color, material: SwiftUICore.Material, to shape: inout SwiftUICore._ShapeStyle_Shape)
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var vibrantColorStyle: (any SwiftUICore.VibrantColorStyle.Type)? {
    get
    set
  }
  #else
  package var vibrantColorStyle: (any SwiftUICore.VibrantColorStyle.Type)? {
    get
    set
  }
  #endif
}
package struct SystemVibrantColorStyle : SwiftUICore.VibrantColorStyle {
  package static func apply(_ type: SwiftUICore.SystemColorType, color: SwiftUICore.Color, material: SwiftUICore.Material, to shape: inout SwiftUICore._ShapeStyle_Shape)
}
@objc @_inheritsConvenienceInitializers final package class ImageLayer : QuartzCore.CALayer {
  @objc override dynamic package init()
  @objc override dynamic package init(layer: Any)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @objc required dynamic package init?(coder: Foundation.NSCoder)
  #else
  @objc required dynamic package init?(coder: Foundation.NSCoder)
  #endif
  @objc deinit
}
package protocol DerivedLayoutEngine : SwiftUICore.LayoutEngine {
  var base: SwiftUICore.LayoutComputer { get }
}
extension SwiftUICore.DerivedLayoutEngine {
  package func layoutPriority() -> Swift.Double
  package func ignoresAutomaticPadding() -> Swift.Bool
  package func requiresSpacingProjection() -> Swift.Bool
  package mutating func spacing() -> SwiftUICore.Spacing
  package mutating func sizeThatFits(_ proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  package mutating func lengthThatFits(_ proposal: SwiftUICore._ProposedSize, in axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat
  package mutating func childGeometries(at parentSize: SwiftUICore.ViewSize, origin: CoreFoundation.CGPoint) -> [SwiftUICore.ViewGeometry]
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #else
  package mutating func explicitAlignment(_ k: SwiftUICore.AlignmentKey, at viewSize: SwiftUICore.ViewSize) -> CoreFoundation.CGFloat?
  #endif
}
package protocol TestHost : SwiftUICore._BenchmarkHost {
  func setTestSize(_ size: CoreFoundation.CGSize)
  func setTestSafeAreaInsets(_ insets: SwiftUICore.EdgeInsets)
  func sendTestEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType])
  func resetTestEvents()
  #if compiler(>=5.3) && $NoncopyableGenerics
  var environmentOverride: SwiftUICore.EnvironmentValues? { get set }
  #else
  var environmentOverride: SwiftUICore.EnvironmentValues? { get set }
  #endif
  var viewCacheIsEmpty: Swift.Bool { get }
  var isHiddenForReuse: Swift.Bool { get set }
  func forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  func forEachDescendantHost(body: (any SwiftUICore.TestHost) -> Swift.Void)
  func renderForTest(interval: Swift.Double)
  func testIntentsChanged(before: SwiftUICore.TestIntents, after: SwiftUICore.TestIntents)
  func invalidateProperties(_ props: SwiftUICore.ViewRendererHostProperties, mayDeferUpdate: Swift.Bool)
  var accessibilityEnabled: Swift.Bool { get set }
  var hasActivePresentation: Swift.Bool { get }
  func dismissActivePresentations()
  var attributeCountInfo: SwiftUICore.AttributeCountTestInfo { get }
}
extension SwiftUICore.TestHost {
  package var hasActivePresentation: Swift.Bool {
    get
  }
  package func dismissActivePresentations()
}
extension SwiftUICore.TestHost {
  package func testIntentsChanged(before: SwiftUICore.TestIntents, after: SwiftUICore.TestIntents)
}
extension CoreFoundation.CGSize {
  package static let deviceSize: CoreFoundation.CGSize
}
extension CoreFoundation.CGRect {
  package func unapplying(_ m: CoreFoundation.CGAffineTransform) -> CoreFoundation.CGRect
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityEnabled: Swift.Bool {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var speechAlwaysIncludesPunctuation: Swift.Bool? {
    get
    set
  }
  #else
  package var speechAlwaysIncludesPunctuation: Swift.Bool? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var speechSpellsOutCharacters: Swift.Bool? {
    get
    set
  }
  #else
  package var speechSpellsOutCharacters: Swift.Bool? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var speechAdjustedPitch: Swift.Double? {
    get
    set
  }
  #else
  package var speechAdjustedPitch: Swift.Double? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var speechAnnouncementsPriority: SwiftUICore.AccessibilityAnnouncementPriority? {
    get
    set
  }
  #else
  package var speechAnnouncementsPriority: SwiftUICore.AccessibilityAnnouncementPriority? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
    set
  }
  public var _accessibilityDifferentiateWithoutColor: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceTransparency: Swift.Bool {
    get
    set
  }
  public var _accessibilityReduceTransparency: Swift.Bool {
    get
    set
  }
  public var accessibilityReduceMotion: Swift.Bool {
    get
    set
  }
  public var _accessibilityReduceMotion: Swift.Bool {
    get
    set
  }
  package var accessibilityPrefersCrossFadeTransitions: Swift.Bool {
    get
    set
  }
  public var accessibilityInvertColors: Swift.Bool {
    get
    set
  }
  public var _accessibilityInvertColors: Swift.Bool {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityShowButtonShapes: Swift.Bool {
    get
    set
  }
  public var _accessibilityShowButtonShapes: Swift.Bool {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityDimFlashingLights: Swift.Bool {
    get
    set
  }
  public var accessibilityPlayAnimatedImages: Swift.Bool {
    get
    set
  }
}
@available(visionOS 1.0, *)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityPrefersHeadAnchorAlternative: Swift.Bool {
    get
    set
  }
  @_spi(Private) public var accessibilityIncreaseFocusStateEnabled: Swift.Bool {
    get
    set
  }
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
package enum CustomHoverEffectMatchGroupBehaviorInfo : Swift.Hashable, Swift.Sendable {
  case activatesGroup
  case followsGroup
  case ignoresGroup
  package static func == (a: SwiftUICore.CustomHoverEffectMatchGroupBehaviorInfo, b: SwiftUICore.CustomHoverEffectMatchGroupBehaviorInfo) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Text : Swift.Equatable, Swift.Sendable {
  @usableFromInline
  @frozen package enum Storage : Swift.Equatable {
    case verbatim(Swift.String)
    case anyTextStorage(SwiftUICore.AnyTextStorage)
    package func resolve<T>(into result: inout T, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions) where T : SwiftUICore.ResolvedTextContainer
    package func resolvesToEmpty(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions = []) -> Swift.Bool
    @usableFromInline
    package static func == (lhs: SwiftUICore.Text.Storage, rhs: SwiftUICore.Text.Storage) -> Swift.Bool
    package func isStyled(options: SwiftUICore.Text.ResolveOptions = []) -> Swift.Bool
    package func allowsTypesettingLanguage() -> Swift.Bool
  }
  package func assertUnstyled(_ context: Swift.String = #function, options: SwiftUICore.Text.ResolveOptions = [])
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @usableFromInline
  @frozen package enum Modifier : Swift.Equatable {
    case color(SwiftUICore.Color?)
    case font(SwiftUICore.Font?)
    case italic
    case weight(SwiftUICore.Font.Weight?)
    case kerning(CoreFoundation.CGFloat)
    case tracking(CoreFoundation.CGFloat)
    case baseline(CoreFoundation.CGFloat)
    case rounded
    case anyTextModifier(SwiftUICore.AnyTextModifier)
    @usableFromInline
    package static func == (lhs: SwiftUICore.Text.Modifier, rhs: SwiftUICore.Text.Modifier) -> Swift.Bool
  }
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct ResolveOptions : Swift.OptionSet, Swift.Sendable {
    @_spi(ForSwiftUIOnly) public let rawValue: ObjectiveC.NSInteger
    @_spi(ForSwiftUIOnly) public init(rawValue: ObjectiveC.NSInteger)
    @_spi(ForSwiftUIOnly) package init(for environment: SwiftUICore.EnvironmentValues)
    @_spi(ForSwiftUIOnly) package static let includeAccessibility: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) package static let foregroundKeyColor: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) package static let writeAuxiliaryMetadata: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) package static let includeTransitions: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) package static let disableLinkColor: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) package static let allowsKeyColors: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) package static let allowsTextSuffix: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) package static let includeSupportForRepeatedResolution: SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias ArrayLiteralElement = SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias Element = SwiftUICore.Text.ResolveOptions
    @_spi(ForSwiftUIOnly) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias RawValue = ObjectiveC.NSInteger
  }
  @usableFromInline
  package var storage: SwiftUICore.Text.Storage
  @usableFromInline
  package var modifiers: [SwiftUICore.Text.Modifier] = [Modifier]()
  @inlinable public init(verbatim content: Swift.String) {
        storage = .verbatim(content)
    }
  @_disfavoredOverload public init<S>(_ content: S) where S : Swift.StringProtocol
  package func modified(with modifier: SwiftUICore.Text.Modifier) -> SwiftUICore.Text
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveStringCheckingForResolvables(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions = [], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> (string: Swift.String, hasResolvableAttributes: Swift.Bool)
  #else
  package func resolveStringCheckingForResolvables(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions = [], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> (string: Swift.String, hasResolvableAttributes: Swift.Bool)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveString(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions = [], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Swift.String
  #else
  package func resolveString(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions = [], idiom: SwiftUICore.AnyInterfaceIdiom? = nil) -> Swift.String
  #endif
  package func resolve<T>(into result: inout T, in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions) where T : SwiftUICore.ResolvedTextContainer
  package func resolvesToEmpty(in environment: SwiftUICore.EnvironmentValues, with options: SwiftUICore.Text.ResolveOptions = []) -> Swift.Bool
  package func isStyled(options: SwiftUICore.Text.ResolveOptions = []) -> Swift.Bool
  package func allowsTypesettingLanguage() -> Swift.Bool
  package init(anyTextStorage: SwiftUICore.AnyTextStorage)
  public static func == (a: SwiftUICore.Text, b: SwiftUICore.Text) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Storage : @unchecked Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Modifier : @unchecked Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyTextStorage {
  @objc @usableFromInline
  deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTextStorage : @unchecked Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTextStorage : Swift.CustomDebugStringConvertible {
  @usableFromInline
  package var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyTextModifier {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUICore.AnyTextModifier : Swift.Sendable {
}
final package class SpeechModifier : SwiftUICore.AnyTextModifier {
  final package let value: SwiftUICore.AccessibilitySpeechAttributes
  package init(_ value: SwiftUICore.AccessibilitySpeechAttributes)
  final package func isStyled(options: SwiftUICore.Text.ResolveOptions = []) -> Swift.Bool
  final package func modify(style: inout SwiftUICore.Text.Style, environment: SwiftUICore.EnvironmentValues)
  final package func isEqual(to other: SwiftUICore.AnyTextModifier) -> Swift.Bool
  @objc deinit
}
final package class TextShadowModifier : SwiftUICore.AnyTextModifier {
  final package func modify(style: inout SwiftUICore.Text.Style, environment: SwiftUICore.EnvironmentValues)
  final package func isEqual(to other: SwiftUICore.AnyTextModifier) -> Swift.Bool
  @objc deinit
}
final package class TextTransitionModifier : SwiftUICore.AnyTextModifier {
  final package func modify(style: inout SwiftUICore.Text.Style, environment: SwiftUICore.EnvironmentValues)
  final package func isEqual(to other: SwiftUICore.AnyTextModifier) -> Swift.Bool
  @objc deinit
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public func _resolveText(in environment: SwiftUICore.EnvironmentValues) -> Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum _LocalizationInfo : Swift.Equatable {
  case none
  case verbatim(Swift.String)
  case localized(key: Swift.String, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, hasFormatting: Swift.Bool = false)
  public static func == (a: SwiftUICore._LocalizationInfo, b: SwiftUICore._LocalizationInfo) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore._LocalizationInfo : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  public var _localizationInfo: SwiftUICore._LocalizationInfo {
    get
  }
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(_) public func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUICore.Text
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text {
  @_spi(Private) public func contentTransition(_ transition: SwiftUICore.ContentTransition) -> SwiftUICore.Text
}
extension SwiftUICore.Text {
  package enum System {
    package static let back: SwiftUICore.Text
    package static let cancel: SwiftUICore.Text
    package static let uiClose: SwiftUICore.Text
    package static let uiCopy: SwiftUICore.Text
    package static let uiDelete: SwiftUICore.Text
    package static let done: SwiftUICore.Text
    package static let edit: SwiftUICore.Text
    package static let uiLookUp: SwiftUICore.Text
    package static let off: SwiftUICore.Text
    package static let ok: SwiftUICore.Text
    package static let on: SwiftUICore.Text
    package static let paste: SwiftUICore.Text
    package static let search: SwiftUICore.Text
    package static let share: SwiftUICore.Text
    package static let shareEllipses: SwiftUICore.Text
    package static let rename: SwiftUICore.Text
  }
}
extension Swift.String {
  package enum System {
  }
}
extension Swift.String.System {
  package static func kitLocalized(_ key: Swift.String, tableName: Swift.String = "Localizable", comment: Swift.String) -> Swift.String
}
extension Foundation.Bundle {
  package static var kit: Foundation.Bundle {
    get
  }
}
extension SwiftUICore.Text.System {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func kitLocalized(_ key: SwiftUICore.LocalizedStringKey, tableName: Swift.String? = nil, comment: Swift.StaticString? = nil) -> SwiftUICore.Text
  #else
  package static func kitLocalized(_ key: SwiftUICore.LocalizedStringKey, tableName: Swift.String? = nil, comment: Swift.StaticString? = nil) -> SwiftUICore.Text
  #endif
}
extension SwiftUICore.Text.System {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func swiftUICoreLocalized(_ key: SwiftUICore.LocalizedStringKey, tableName: Swift.String = "Core", comment: Swift.StaticString? = nil) -> SwiftUICore.Text
  #else
  package static func swiftUICoreLocalized(_ key: SwiftUICore.LocalizedStringKey, tableName: Swift.String = "Core", comment: Swift.StaticString? = nil) -> SwiftUICore.Text
  #endif
}
extension Foundation.Bundle {
  package static var swiftUICore: Foundation.Bundle {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct SafeAreaRegions : Swift.OptionSet {
  public let rawValue: Swift.UInt
  @inlinable public init(rawValue: Swift.UInt) { self.rawValue = rawValue }
  public static let container: SwiftUICore.SafeAreaRegions
  public static let keyboard: SwiftUICore.SafeAreaRegions
  public static let all: SwiftUICore.SafeAreaRegions
  package static let background: SwiftUICore.SafeAreaRegions
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArrayLiteralElement = SwiftUICore.SafeAreaRegions
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUICore.SafeAreaRegions
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias RawValue = Swift.UInt
}
package struct SafeAreaInsets : Swift.Equatable {
  package enum OptionalValue : Swift.Equatable {
    case empty
    indirect case insets(SwiftUICore.SafeAreaInsets)
    package static func == (a: SwiftUICore.SafeAreaInsets.OptionalValue, b: SwiftUICore.SafeAreaInsets.OptionalValue) -> Swift.Bool
  }
  package struct Element : Swift.Equatable {
    package var regions: SwiftUICore.SafeAreaRegions
    package var insets: SwiftUICore.EdgeInsets
    package init(regions: SwiftUICore.SafeAreaRegions, insets: SwiftUICore.EdgeInsets)
    package static func == (a: SwiftUICore.SafeAreaInsets.Element, b: SwiftUICore.SafeAreaInsets.Element) -> Swift.Bool
  }
  package var space: SwiftUICore.CoordinateSpace.ID
  package var elements: [SwiftUICore.SafeAreaInsets.Element]
  package var next: SwiftUICore.SafeAreaInsets.OptionalValue
  package init(space: SwiftUICore.CoordinateSpace.ID, elements: [SwiftUICore.SafeAreaInsets.Element])
  package init(space: SwiftUICore.CoordinateSpace.ID, elements: [SwiftUICore.SafeAreaInsets.Element], next: SwiftUICore.SafeAreaInsets.OptionalValue)
  package func resolve(regions: SwiftUICore.SafeAreaRegions, in ctx: SwiftUICore._PositionAwarePlacementContext) -> SwiftUICore.EdgeInsets
  package static func == (a: SwiftUICore.SafeAreaInsets, b: SwiftUICore.SafeAreaInsets) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency package struct _SafeAreaInsetsModifier : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency package init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package init(elements: [SwiftUICore.SafeAreaInsets.Element], nextInsets: SwiftUICore.SafeAreaInsets.OptionalValue? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency package init(elements: [SwiftUICore.SafeAreaInsets.Element], nextInsets: SwiftUICore.SafeAreaInsets.OptionalValue? = nil)
  #endif
  nonisolated package static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._SafeAreaInsetsModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated package static func == (a: SwiftUICore._SafeAreaInsetsModifier, b: SwiftUICore._SafeAreaInsetsModifier) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
extension SwiftUICore._SafeAreaInsetsModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package init(insets: SwiftUICore.EdgeInsets, nextInsets: SwiftUICore.SafeAreaInsets.OptionalValue? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency package init(insets: SwiftUICore.EdgeInsets, nextInsets: SwiftUICore.SafeAreaInsets.OptionalValue? = nil)
  #endif
}
extension SwiftUICore._PositionAwarePlacementContext {
  package func safeAreaInsets(matching regions: SwiftUICore.SafeAreaRegions = .all) -> SwiftUICore.EdgeInsets
}
package typealias SafeAreaInsetsModifier = SwiftUICore.ModifiedContent<SwiftUICore._PaddingLayout, SwiftUICore._SafeAreaInsetsModifier>
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency public func _safeAreaInsets(_ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func safeAreaInsets(_ insets: SwiftUICore.EdgeInsets, next: SwiftUICore.SafeAreaInsets.OptionalValue? = nil) -> SwiftUICore.ModifiedContent<Self, SwiftUICore.SafeAreaInsetsModifier>
  #else
  @_Concurrency.MainActor @preconcurrency package func safeAreaInsets(_ insets: SwiftUICore.EdgeInsets, next: SwiftUICore.SafeAreaInsets.OptionalValue? = nil) -> SwiftUICore.ModifiedContent<Self, SwiftUICore.SafeAreaInsetsModifier>
  #endif
}
package struct ResolvedSafeAreaInsets : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  package init(regions: SwiftUICore.SafeAreaRegions, environment: AttributeGraph.Attribute<SwiftUICore.EnvironmentValues>, size: AttributeGraph.Attribute<SwiftUICore.ViewSize>, position: AttributeGraph.Attribute<SwiftUICore.ViewOrigin>, transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore.SafeAreaInsets>)
  package var value: SwiftUICore.EdgeInsets {
    get
  }
  package typealias Value = SwiftUICore.EdgeInsets
}
package typealias CoreFont = CoreText.CTFont
extension Foundation.NSAttributedString {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func kitFont() -> ObjectiveC.NSObject?
  #else
  package func kitFont() -> ObjectiveC.NSObject?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func limitedFontHeight(by lineLimit: Swift.Int) -> CoreFoundation.CGFloat?
  #else
  package func limitedFontHeight(by lineLimit: Swift.Int) -> CoreFoundation.CGFloat?
  #endif
}
extension CoreText.CTFont {
  package static func limitedHeight(by lineLimit: Swift.Int, lineHeight: CoreFoundation.CGFloat, leading: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static func make(platformFont: Swift.AnyObject) -> Self?
  #else
  package static func make(platformFont: Swift.AnyObject) -> Self?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency package struct IDView<Content, ID> : SwiftUICore.View where Content : SwiftUICore.View, ID : Swift.Hashable {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var content: Content
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var id: ID
  @inlinable @_Concurrency.MainActor @preconcurrency package init(_ content: Content, id: ID) {
        self.content = content
        self.id = id
    }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package var body: Swift.Never {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  package typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore.IDView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func id<ID>(_ id: ID) -> some SwiftUICore.View where ID : Swift.Hashable {
        return IDView(self, id: id)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.IDView {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.IDView<Content, ID>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.IDView {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUICore.IDView<Content, ID>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency package static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
extension SwiftUICore.IDView : SwiftUICore.DynamicView {
  @_Concurrency.MainActor @preconcurrency package static var canTransition: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency package static var traitKeysDependOnView: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency package static func makeID() -> ID
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func childInfo(metadata: ()) -> (any Any.Type, ID?)
  #else
  @_Concurrency.MainActor @preconcurrency package func childInfo(metadata: ()) -> (any Any.Type, ID?)
  #endif
  @_Concurrency.MainActor @preconcurrency package func makeChildView(metadata: (), view: AttributeGraph.Attribute<SwiftUICore.IDView<Content, ID>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package func makeChildViewList(metadata: (), view: AttributeGraph.Attribute<SwiftUICore.IDView<Content, ID>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Metadata = ()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ColorScheme : Swift.CaseIterable, Swift.Sendable {
  case light
  case dark
  public static func == (a: SwiftUICore.ColorScheme, b: SwiftUICore.ColorScheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.ColorScheme]
  public static var allCases: [SwiftUICore.ColorScheme] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum ColorSchemeContrast : Swift.CaseIterable, Swift.Sendable {
  case standard
  case increased
  public static func == (a: SwiftUICore.ColorSchemeContrast, b: SwiftUICore.ColorSchemeContrast) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AllCases = [SwiftUICore.ColorSchemeContrast]
  public static var allCases: [SwiftUICore.ColorSchemeContrast] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "preferredColorScheme(_:)")
extension SwiftUICore.View {
  @inlinable nonisolated public func colorScheme(_ colorScheme: SwiftUICore.ColorScheme) -> some SwiftUICore.View {
        return environment(\.colorScheme, colorScheme)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  public var colorScheme: SwiftUICore.ColorScheme {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var explicitPreferredColorScheme: SwiftUICore.ColorScheme? {
    get
    set
  }
  #else
  package var explicitPreferredColorScheme: SwiftUICore.ColorScheme? {
    get
    set
  }
  #endif
  package var systemColorScheme: SwiftUICore.ColorScheme {
    get
    set
  }
  public var colorSchemeContrast: SwiftUICore.ColorSchemeContrast {
    get
  }
  public var _colorSchemeContrast: SwiftUICore.ColorSchemeContrast {
    get
    set
  }
}
@_Concurrency.MainActor @preconcurrency package struct SystemColorSchemeModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore.EnvironmentModifier {
  @_Concurrency.MainActor @preconcurrency package var isEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency package init(isEnabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency package static func makeEnvironment(modifier: AttributeGraph.Attribute<SwiftUICore.SystemColorSchemeModifier>, environment: inout SwiftUICore.EnvironmentValues)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
extension SwiftUICore.ColorScheme : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
extension SwiftUICore.ColorSchemeContrast : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public protocol _Test {
  func setUpTest()
  func tearDownTest()
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  func tearDownTestWithError() throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Test {
  public func setUpTest()
  public func tearDownTest()
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public func tearDownTestWithError() throws
}
package struct TestIntents : Swift.OptionSet {
  package let rawValue: Swift.UInt64
  package init(rawValue: Swift.UInt64)
  package static let ignoreGeometry: SwiftUICore.TestIntents
  package static let ignoreTinting: SwiftUICore.TestIntents
  package static let includeColorScheme: SwiftUICore.TestIntents
  package static let ignoreCornerRadius: SwiftUICore.TestIntents
  package static let lazyLoadMenus: SwiftUICore.TestIntents
  package static let includeChildWindows: SwiftUICore.TestIntents
  package static let includeTransparency: SwiftUICore.TestIntents
  package static let includeWindowConstraints: SwiftUICore.TestIntents
  package static let includeSplitViewItemState: SwiftUICore.TestIntents
  package static let includeListSeparators: SwiftUICore.TestIntents
  package static let includeTableRowViews: SwiftUICore.TestIntents
  package static let includeStatusBar: SwiftUICore.TestIntents
  package static let includeTruncation: SwiftUICore.TestIntents
  package static let includeExtendedContents: SwiftUICore.TestIntents
  package static let includeWindowStyleMask: SwiftUICore.TestIntents
  package static let includeBridgeMetrics: SwiftUICore.TestIntents
  package static let ignoreDisabled: SwiftUICore.TestIntents
  package static let includeListBackground: SwiftUICore.TestIntents
  package static let includeExtendedGradients: SwiftUICore.TestIntents
  package static let ignoreNavigationBarDisplayMode: SwiftUICore.TestIntents
  package static let ignoreOpacity: SwiftUICore.TestIntents
  package static let useFocusNavigation: SwiftUICore.TestIntents
  package static let includeScrollEnvironment: SwiftUICore.TestIntents
  package static let includeFocusableBorder: SwiftUICore.TestIntents
  package static let includeListTypeSelect: SwiftUICore.TestIntents
  package static let includeSystemMenuItemDetails: SwiftUICore.TestIntents
  package static let includePlaceholderStyling: SwiftUICore.TestIntents
  package static let isolateSheetSize: SwiftUICore.TestIntents
  package static let ignoreStackContent: SwiftUICore.TestIntents
  package static let includePresentationChildrenGeometry: SwiftUICore.TestIntents
  package static let includePresentationOptions: SwiftUICore.TestIntents
  package static let ignoreHoverEffects: SwiftUICore.TestIntents
  package static let ignoreToolbarContents: SwiftUICore.TestIntents
  package static let includeSemanticContext: SwiftUICore.TestIntents
  package static let includeTableHeaderStyling: SwiftUICore.TestIntents
  package static let includeBaselines: SwiftUICore.TestIntents
  package static let includeHostingViewCornerRadius: SwiftUICore.TestIntents
  package static let includeSheetPresentationProperties: SwiftUICore.TestIntents
  package static let ignoreCompositingFilters: SwiftUICore.TestIntents
  package static let includeToolbarLayoutMargins: SwiftUICore.TestIntents
  package static let includeTabViewOptions: SwiftUICore.TestIntents
  package static let includeContinuousCorners: SwiftUICore.TestIntents
  package static let includePopoverArrowDirection: SwiftUICore.TestIntents
  package static let includePopoverBackground: SwiftUICore.TestIntents
  package static let validateMenuItemActions: SwiftUICore.TestIntents
  package static let ignorePlatformSpecificStyling: SwiftUICore.TestIntents
  package typealias ArrayLiteralElement = SwiftUICore.TestIntents
  package typealias Element = SwiftUICore.TestIntents
  package typealias RawValue = Swift.UInt64
}
package struct PlatformViewTestProperties : Swift.OptionSet {
  package let rawValue: Swift.UInt64
  package init(rawValue: Swift.UInt64)
  package static let remoteEffectAuxiliaryView: SwiftUICore.PlatformViewTestProperties
  package typealias ArrayLiteralElement = SwiftUICore.PlatformViewTestProperties
  package typealias Element = SwiftUICore.PlatformViewTestProperties
  package typealias RawValue = Swift.UInt64
}
extension QuartzCore.CALayer {
  package var testProperties: SwiftUICore.PlatformViewTestProperties {
    get
    set
  }
}
final package class PreferenceBridge {
  weak final package var viewGraph: SwiftUICore.ViewGraph?
  package init()
  final package func invalidate()
  @objc deinit
  final package func wrapInputs(_ inputs: inout SwiftUICore._ViewInputs)
  final package func wrapOutputs(_ outputs: inout SwiftUICore.PreferencesOutputs, inputs: SwiftUICore._ViewInputs)
  final package func addChild(_ child: SwiftUICore.ViewGraph)
  final package func removeChild(_ child: SwiftUICore.ViewGraph)
  final package func removedStateDidChange()
  final package func addValue(_ src: AttributeGraph.AnyAttribute, for key: any SwiftUICore.AnyPreferenceKey.Type)
  final package func removeValue(_ src: AttributeGraph.AnyAttribute, for key: any SwiftUICore.AnyPreferenceKey.Type, isInvalidating: Swift.Bool = false)
  final package func updateHostValues(_ keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>)
  final package func addHostValues(_ values: AttributeGraph.WeakAttribute<SwiftUICore.PreferenceList>, for keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>)
  final package func addHostValues(_ values: AttributeGraph.OptionalAttribute<SwiftUICore.PreferenceList>, for keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>)
  final package func removeHostValues(for keys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys>, isInvalidating: Swift.Bool = false)
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct PreferredColorSchemeKey : SwiftUICore.PreferenceKey {
  public typealias Value = SwiftUICore.ColorScheme?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func reduce(value: inout SwiftUICore.PreferredColorSchemeKey.Value, nextValue: () -> SwiftUICore.PreferredColorSchemeKey.Value)
  #else
  public static func reduce(value: inout SwiftUICore.PreferredColorSchemeKey.Value, nextValue: () -> SwiftUICore.PreferredColorSchemeKey.Value)
  #endif
}
@available(*, unavailable)
extension SwiftUICore.PreferredColorSchemeKey : Swift.Sendable {
}
@_spi(Private) @available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.PreferredColorSchemeKey : SwiftUICore.HostPreferenceKey {
  @_spi(Private) public static var _isReadableByHost: Swift.Bool {
    @_spi(Private) get
  }
}
@available(iOS 13.0, macOS 11.0, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func preferredColorScheme(_ colorScheme: SwiftUICore.ColorScheme?) -> some SwiftUICore.View {
        return preference(key: PreferredColorSchemeKey.self,
            value: colorScheme)
    }
  
  #else
  @inlinable nonisolated public func preferredColorScheme(_ colorScheme: SwiftUICore.ColorScheme?) -> some SwiftUICore.View {
        return preference(key: PreferredColorSchemeKey.self,
            value: colorScheme)
    }
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Image : Swift.Equatable, Swift.Sendable {
  package var provider: SwiftUICore.AnyImageProviderBox
  package init<P>(_ provider: P) where P : SwiftUICore.ImageProvider
  package func resolve(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #else
  package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #endif
  public static func == (lhs: SwiftUICore.Image, rhs: SwiftUICore.Image) -> Swift.Bool
}
package struct ImageResolutionContext {
  package struct Options : Swift.OptionSet {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let inferSymbolRenderingMode: SwiftUICore.ImageResolutionContext.Options
    package static let isArchived: SwiftUICore.ImageResolutionContext.Options
    package static let useCatalogReferences: SwiftUICore.ImageResolutionContext.Options
    package static let animationsDisabled: SwiftUICore.ImageResolutionContext.Options
    package static let preservesVectors: SwiftUICore.ImageResolutionContext.Options
    package typealias ArrayLiteralElement = SwiftUICore.ImageResolutionContext.Options
    package typealias Element = SwiftUICore.ImageResolutionContext.Options
    package typealias RawValue = Swift.UInt8
  }
  package var environment: SwiftUICore.EnvironmentValues
  package var symbolAnimator: RenderBox.RBSymbolAnimator?
  package var textStyle: SwiftUICore.Text.Style?
  package var transaction: AttributeGraph.OptionalAttribute<SwiftUICore.Transaction>
  package var symbolRenderingMode: SwiftUICore.SymbolRenderingMode?
  package var allowedDynamicRange: SwiftUICore.Image.DynamicRange?
  package var options: SwiftUICore.ImageResolutionContext.Options
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(environment: SwiftUICore.EnvironmentValues, textStyle: SwiftUICore.Text.Style? = nil, transaction: AttributeGraph.OptionalAttribute<SwiftUICore.Transaction> = .init())
  #else
  package init(environment: SwiftUICore.EnvironmentValues, textStyle: SwiftUICore.Text.Style? = nil, transaction: AttributeGraph.OptionalAttribute<SwiftUICore.Transaction> = .init())
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var effectiveAllowedDynamicRange: SwiftUICore.Image.DynamicRange? {
    get
  }
  #else
  package var effectiveAllowedDynamicRange: SwiftUICore.Image.DynamicRange? {
    get
  }
  #endif
}
package protocol ImageProvider : Swift.Equatable {
  func resolve(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #else
  func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #endif
}
package protocol ImageStyleProtocol {
  static func _makeImageView(view: SwiftUICore._GraphValue<SwiftUICore.Image>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView {
  package struct Style : SwiftUICore.ViewInput {
    package static let defaultValue: SwiftUICore.Stack<any SwiftUICore.ImageStyleProtocol.Type>
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias Value = SwiftUICore.Stack<any SwiftUICore.ImageStyleProtocol.Type>
  }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUICore.Image>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package class AnyImageProviderBox : @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
final package class ImageProviderBox<Base> : SwiftUICore.AnyImageProviderBox, @unchecked Swift.Sendable where Base : SwiftUICore.ImageProvider {
  final package let base: Base
  @objc deinit
}
package func onNextMainRunLoop(do body: @escaping () -> Swift.Void)
extension Foundation.RunLoop {
  package static func addObserver(_ action: @escaping () -> Swift.Void)
  package static func flushObservers()
  package static func runAllowingEarlyExit(until deadline: Foundation.Date, stopCondition: () -> Swift.Bool)
  package static func runAllowingEarlyExit(until deadline: Foundation.Date)
}
package struct AccessibilityIdentifierStorage : Swift.Equatable {
  package enum Placement : Swift.Equatable {
    case assign
    case optional
    case suffix
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.AccessibilityIdentifierStorage.Placement, b: SwiftUICore.AccessibilityIdentifierStorage.Placement) -> Swift.Bool
    package var hashValue: Swift.Int {
      get
    }
  }
  package let placement: SwiftUICore.AccessibilityIdentifierStorage.Placement
  package init(_ value: Swift.String, placement: SwiftUICore.AccessibilityIdentifierStorage.Placement = .assign)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var value: Swift.String? {
    get
  }
  #else
  package var value: Swift.String? {
    get
  }
  #endif
  package static func == (a: SwiftUICore.AccessibilityIdentifierStorage, b: SwiftUICore.AccessibilityIdentifierStorage) -> Swift.Bool
}
extension SwiftUICore.AccessibilityIdentifierStorage : SwiftUICore.AccessibilityCombinable {
  package mutating func merge(with child: SwiftUICore.AccessibilityIdentifierStorage) -> Swift.Bool
}
extension Swift.RangeReplaceableCollection where Self.Element == SwiftUICore.AccessibilityIdentifierStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func joined(separator: Swift.String = ".") -> SwiftUICore.AccessibilityIdentifierStorage?
  #else
  package func joined(separator: Swift.String = ".") -> SwiftUICore.AccessibilityIdentifierStorage?
  #endif
}
extension CoreFoundation.CGRect {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var x: CoreFoundation.CGFloat {
    get { return origin.x }
    set { origin.x = newValue }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var y: CoreFoundation.CGFloat {
    get { return origin.y }
    set { origin.y = newValue }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var center: CoreFoundation.CGPoint {
    get { return CGPoint(x: x + width / 2, y: y + height / 2) }
    set { x = newValue.x - width / 2; y = newValue.y - height / 2 }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package init(size: CoreFoundation.CGSize) {
        self.init(x: 0, y: 0, width: size.width, height: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package init(center: CoreFoundation.CGPoint, size: CoreFoundation.CGSize) {
        self.init(x: center.x - size.width * 0.5,
                  y: center.y - size.height * 0.5,
                  width: size.width, height: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var isFinite: Swift.Bool {
    get {
        return x.isFinite && y.isFinite && width.isFinite && height.isFinite
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func flushNullToZero() -> CoreFoundation.CGRect {
        return isNull ? .zero : self
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func offset(by offset: CoreFoundation.CGSize) -> CoreFoundation.CGRect {
        return offsetBy(dx: offset.width, dy: offset.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaledBy(x: CoreFoundation.CGFloat = 1, y: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGRect {
        if isNull || isInfinite {
            return self
        }
        return CGRect(x: self.x * x, y: self.y * y, width: width * x, height: height * y)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func scaled(by scale: CoreFoundation.CGFloat) -> CoreFoundation.CGRect {
        return self.scaledBy(x: scale, y: scale)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package func hasIntersection(_ rect: CoreFoundation.CGRect) -> Swift.Bool {
        return !intersection(rect).isEmpty
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var maxXY: CoreFoundation.CGPoint {
    get { return CGPoint(x: maxX, y: maxY) }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package var minXY: CoreFoundation.CGPoint {
    get { return CGPoint(x: minX, y: minY) }
  }
}
extension CoreFoundation.CGRect {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package init(position: CoreFoundation.CGPoint, size: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint) {
        self.init(x: position.x - size.width * anchor.x,
            y: position.y - size.height * anchor.y,
            width: size.width, height: size.height)
    }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package subscript(axis: SwiftUICore.Axis) -> Swift.ClosedRange<CoreFoundation.CGFloat> {
    get {
        guard !isNull else { return 0 ... 0 }
        let x0 = origin[axis], x1 = x0 + size[axis]
         
        var lower = min(x0, x1), upper = max(x0, x1)
         
         
        if !(lower <= upper) {
            (lower, upper) = (0, 0)
        }
        return ClosedRange(uncheckedBounds: (lower: lower, upper: upper))
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package subscript(edge: SwiftUICore.Edge) -> CoreFoundation.CGFloat {
    get {
        switch edge {
        case .leading: return minX
        case .trailing: return maxX
        case .top: return minY
        case .bottom: return maxY
        }
    }
  }
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @inlinable package mutating func finalizeLayoutDirection(_ layoutDirection: SwiftUICore.LayoutDirection, parentSize: CoreFoundation.CGSize) {
        guard layoutDirection == .rightToLeft else { return }
        origin.x = parentSize.width - maxX
    }
  package func distance(to other: CoreFoundation.CGRect, in axis: SwiftUICore.Axis) -> CoreFoundation.CGFloat
}
extension CoreFoundation.CGRect {
  package var cornerPoints: [CoreFoundation.CGPoint] {
    get
  }
  package init(cornerPoints p: Swift.ArraySlice<CoreFoundation.CGPoint>)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(exactCornerPoints p: [CoreFoundation.CGPoint])
  #else
  package init?(exactCornerPoints p: [CoreFoundation.CGPoint])
  #endif
  package init(cornerPoints p: [CoreFoundation.CGPoint])
  package func mapCorners(f: (inout [CoreFoundation.CGPoint]) -> Swift.Void) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGRect {
  package func distance(to point: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
  package func perpendicularDistance(to point: CoreFoundation.CGPoint) -> CoreFoundation.CGFloat
  package func containsAny(of points: [CoreFoundation.CGPoint]) -> Swift.Bool
}
package struct LoggableRect : Swift.CustomStringConvertible {
  package init(_ rect: CoreFoundation.CGRect)
  package var description: Swift.String {
    get
  }
}
extension CoreFoundation.CGRect {
  package var loggable: SwiftUICore.LoggableRect {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension CoreFoundation.CGRect : SwiftUICore.Animatable {
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGPoint.AnimatableData, CoreFoundation.CGSize.AnimatableData>
  public var animatableData: CoreFoundation.CGRect.AnimatableData {
    @inlinable get {
            return .init(origin.animatableData, size.animatableData)
        }
    @inlinable set {
            (origin.animatableData, size.animatableData)
                = (newValue.first, newValue.second)
        }
  }
}
extension CoreFoundation.CGRect : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder)
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct PhysicalButtonEvent : SwiftUICore.EventType, Swift.Equatable {
  package enum ButtonType {
    case upArrow
    case downArrow
    case leftArrow
    case rightArrow
    case select
    case menu
    case playPause
    case pageUp
    case pageDown
    case back
    package static func == (a: SwiftUICore.PhysicalButtonEvent.ButtonType, b: SwiftUICore.PhysicalButtonEvent.ButtonType) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package var hashValue: Swift.Int {
      get
    }
  }
  package var timestamp: SwiftUICore.Time
  package var phase: SwiftUICore.EventPhase
  package var binding: SwiftUICore.EventBinding?
  package var type: SwiftUICore.PhysicalButtonEvent.ButtonType
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(timestamp: SwiftUICore.Time, phase: SwiftUICore.EventPhase, binding: SwiftUICore.EventBinding? = nil, type: SwiftUICore.PhysicalButtonEvent.ButtonType)
  #else
  package init(timestamp: SwiftUICore.Time, phase: SwiftUICore.EventPhase, binding: SwiftUICore.EventBinding? = nil, type: SwiftUICore.PhysicalButtonEvent.ButtonType)
  #endif
  package static func == (a: SwiftUICore.PhysicalButtonEvent, b: SwiftUICore.PhysicalButtonEvent) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  nonisolated public func gesture<T>(_ gesture: T, including mask: SwiftUICore.GestureMask = .all) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func highPriorityGesture<T>(_ gesture: T, including mask: SwiftUICore.GestureMask = .all) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func simultaneousGesture<T>(_ gesture: T, including mask: SwiftUICore.GestureMask = .all) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  @_alwaysEmitIntoClient nonisolated public func gesture<T>(_ gesture: T, isEnabled: Swift.Bool) -> some SwiftUICore.View where T : SwiftUICore.Gesture {
        self.gesture(gesture, including: isEnabled ? .all : .subviews)
    }
  
  @_alwaysEmitIntoClient nonisolated public func highPriorityGesture<T>(_ gesture: T, isEnabled: Swift.Bool) -> some SwiftUICore.View where T : SwiftUICore.Gesture {
        highPriorityGesture(gesture, including: isEnabled ? .all : .subviews)
    }
  
  @_alwaysEmitIntoClient nonisolated public func simultaneousGesture<T>(_ gesture: T, isEnabled: Swift.Bool) -> some SwiftUICore.View where T : SwiftUICore.Gesture {
        simultaneousGesture(gesture, including: isEnabled ? .all : .subviews)
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func gesture<T>(_ gesture: T, name: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func highPriorityGesture<T>(_ gesture: T, name: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
  nonisolated public func simultaneousGesture<T>(_ gesture: T, name: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUICore.View where T : SwiftUICore.Gesture
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct GestureMask : Swift.OptionSet {
  public let rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public static let none: SwiftUICore.GestureMask
  public static let gesture: SwiftUICore.GestureMask
  public static let subviews: SwiftUICore.GestureMask
  public static let all: SwiftUICore.GestureMask
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUICore.GestureMask
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUICore.GestureMask
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.UInt32
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ScaleEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var scale: CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.UnitPoint
  @inlinable @_Concurrency.MainActor @preconcurrency public init(scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) {
        self.scale = scale
        self.anchor = anchor
    }
  @_Concurrency.MainActor @preconcurrency public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  public typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGSize.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore._ScaleEffect.AnimatableData {
    get
    set
  }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._ScaleEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func == (a: SwiftUICore._ScaleEffect, b: SwiftUICore._ScaleEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func scaleEffect(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return modifier(_ScaleEffect(scale: scale, anchor: anchor))
    }
  
  @inlinable nonisolated public func scaleEffect(_ s: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return scaleEffect(CGSize(width: s, height: s), anchor: anchor)
    }
  
  @inlinable nonisolated public func scaleEffect(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.View {
        return scaleEffect(CGSize(width: x, height: y), anchor: anchor)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AnyTransition {
  public static var scale: SwiftUICore.AnyTransition {
    get
  }
  public static func scale(scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transition where Self == SwiftUICore.ScaleTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var scale: SwiftUICore.ScaleTransition {
    get { Self(1e-5) }
  }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func scale(_ scale: Swift.Double, anchor: SwiftUICore.UnitPoint = .center) -> Self {
        Self(scale, anchor: anchor)
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_Concurrency.MainActor @preconcurrency public struct ScaleTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var scale: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.UnitPoint
  @_Concurrency.MainActor @preconcurrency public init(_ scale: Swift.Double, anchor: SwiftUICore.UnitPoint = .center)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUICore.ScaleTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ScaleTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUICore.ScaleTransition : Swift.Sendable {
}
extension SwiftUICore._ScaleEffect : SwiftUICore.ProtobufMessage {
  @_Concurrency.MainActor @preconcurrency package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_Concurrency.MainActor @preconcurrency package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func safeAreaInset<V>(edge: SwiftUICore.VerticalEdge, alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(vertical: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
  #else
  @inlinable nonisolated public func safeAreaInset<V>(edge: SwiftUICore.VerticalEdge, alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(vertical: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func safeAreaInset<V>(edge: SwiftUICore.HorizontalEdge, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(horizontal: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
  #else
  @inlinable nonisolated public func safeAreaInset<V>(edge: SwiftUICore.HorizontalEdge, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        modifier(_InsetViewModifier(
            content: content(), edge: Edge(horizontal: edge),
            regions: .container, spacing: spacing,
            alignmentKey: alignment.key))
    }
  
  #endif
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "safeAreaInset(edge:alignment:spacing:content:)")
  @_alwaysEmitIntoClient nonisolated public func inset<V>(edge: SwiftUICore.VerticalEdge, alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        safeAreaInset(edge: edge, alignment: alignment,
            spacing: spacing, content: content)
    }
  
  #else
  @_spi(Private) @available(*, deprecated, renamed: "safeAreaInset(edge:alignment:spacing:content:)")
  @_alwaysEmitIntoClient nonisolated public func inset<V>(edge: SwiftUICore.VerticalEdge, alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        safeAreaInset(edge: edge, alignment: alignment,
            spacing: spacing, content: content)
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "safeAreaInset(edge:alignment:spacing:content:)")
  @_alwaysEmitIntoClient nonisolated public func inset<V>(edge: SwiftUICore.HorizontalEdge, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        safeAreaInset(edge: edge, alignment: alignment,
            spacing: spacing, content: content)
    }
  
  #else
  @_spi(Private) @available(*, deprecated, renamed: "safeAreaInset(edge:alignment:spacing:content:)")
  @_alwaysEmitIntoClient nonisolated public func inset<V>(edge: SwiftUICore.HorizontalEdge, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        safeAreaInset(edge: edge, alignment: alignment,
            spacing: spacing, content: content)
    }
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _InsetViewModifier<Content> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Content : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var content: Content
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var properties: (regions: SwiftUICore.SafeAreaRegions, spacing: CoreFoundation.CGFloat?, edge: SwiftUICore.Edge, alignmentKey: SwiftUICore.AlignmentKey)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency package init(content: Content, edge: SwiftUICore.Edge, regions: SwiftUICore.SafeAreaRegions, spacing: CoreFoundation.CGFloat?, alignmentKey: SwiftUICore.AlignmentKey) {
        self.content = content
        properties = (regions, spacing, edge, alignmentKey)
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency package init(content: Content, edge: SwiftUICore.Edge, regions: SwiftUICore.SafeAreaRegions, spacing: CoreFoundation.CGFloat?, alignmentKey: SwiftUICore.AlignmentKey) {
        self.content = content
        properties = (regions, spacing, edge, alignmentKey)
    }
  #endif
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUICore._InsetViewModifier<Content>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUICore._InsetViewModifier : Swift.Sendable {
}
extension SwiftUICore.Color {
  package func tintAdjustmentMode(_ mode: SwiftUICore.TintAdjustmentMode) -> SwiftUICore.Color
  package var tintAdjusted: SwiftUICore.Color {
    get
  }
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func tintAdjustmentMode(_ tintAdjustmentMode: SwiftUICore.TintAdjustmentMode?) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency package func tintAdjustmentMode(_ tintAdjustmentMode: SwiftUICore.TintAdjustmentMode?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var tintAdjustmentMode: SwiftUICore.TintAdjustmentMode? {
    get
    set
  }
  #else
  package var tintAdjustmentMode: SwiftUICore.TintAdjustmentMode? {
    get
    set
  }
  #endif
  package var effectiveTintAdjustmentMode: SwiftUICore.TintAdjustmentMode {
    get
  }
}
package enum TintAdjustmentMode : Swift.Equatable, Swift.Hashable {
  case normal
  case desaturated
  package static func == (a: SwiftUICore.TintAdjustmentMode, b: SwiftUICore.TintAdjustmentMode) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
package enum ScrollCoordinateSpace {
  package static let vertical: SwiftUICore.CoordinateSpace.ID
  package static let horizontal: SwiftUICore.CoordinateSpace.ID
  package static let all: SwiftUICore.CoordinateSpace.ID
  package static let content: SwiftUICore.CoordinateSpace.ID
}
extension SwiftUICore.CoordinateSpace {
  package static var verticalScrollView: SwiftUICore.CoordinateSpace {
    get
  }
  package static var horizontalScrollView: SwiftUICore.CoordinateSpace {
    get
  }
  package static var scrollView: SwiftUICore.CoordinateSpace {
    get
  }
  package static var scrollViewContent: SwiftUICore.CoordinateSpace {
    get
  }
}
extension SwiftUICore.CoordinateSpace.Name {
  package static var verticalScrollView: SwiftUICore.CoordinateSpace.Name {
    get
  }
  package static var horizontalScrollView: SwiftUICore.CoordinateSpace.Name {
    get
  }
  package static var scrollView: SwiftUICore.CoordinateSpace.Name {
    get
  }
  package static var scrollViewContent: SwiftUICore.CoordinateSpace.Name {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.CoordinateSpaceProtocol where Self == SwiftUICore.NamedCoordinateSpace {
  public static func scrollView(axis: SwiftUICore.Axis) -> Self
  public static var scrollView: SwiftUICore.NamedCoordinateSpace {
    get
  }
  package static var scrollViewContent: SwiftUICore.NamedCoordinateSpace {
    get
  }
}
package struct DynamicLayoutMap {
  package var sortedArray: [SwiftUICore.LayoutProxyAttributes]
  package var sortedSeed: Swift.UInt32
  package init()
  package init(map: [(id: SwiftUICore.DynamicContainerID, value: SwiftUICore.LayoutProxyAttributes)], sortedArray: [SwiftUICore.LayoutProxyAttributes] = [LayoutProxyAttributes](), sortedSeed: Swift.UInt32 = 0 as UInt32)
  package subscript(id: SwiftUICore.DynamicContainerID) -> SwiftUICore.LayoutProxyAttributes {
    get
    set
  }
  package mutating func remove(uniqueId: Swift.UInt32)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public enum RoundedCornerStyle : Swift.Sendable {
  case circular
  case continuous
  public static func == (a: SwiftUICore.RoundedCornerStyle, b: SwiftUICore.RoundedCornerStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
package struct FixedRoundedRect : Swift.Equatable {
  package var rect: CoreFoundation.CGRect
  package var cornerSize: CoreFoundation.CGSize
  package var style: SwiftUICore.RoundedCornerStyle
  package init(_ rect: CoreFoundation.CGRect, cornerSize: CoreFoundation.CGSize, style: SwiftUICore.RoundedCornerStyle)
  package init(_ rect: CoreFoundation.CGRect)
  package init(_ rect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle)
  package var isRounded: Swift.Bool {
    get
  }
  package var isUniform: Swift.Bool {
    get
  }
  package var needsContinuousCorners: Swift.Bool {
    get
  }
  package var clampedCornerSize: CoreFoundation.CGSize {
    get
  }
  package var clampedCornerRadius: CoreFoundation.CGFloat {
    get
  }
  package func withTemporaryPath<R>(_ body: (RenderBox.RBPath) -> R) -> R
  package func contains(_ point: CoreFoundation.CGPoint) -> Swift.Bool
  package func applying(_ m: CoreFoundation.CGAffineTransform) -> SwiftUICore.FixedRoundedRect
  package func contains(_ rhs: SwiftUICore.FixedRoundedRect) -> Swift.Bool
  package func contains(rect: CoreFoundation.CGRect) -> Swift.Bool
  package func contains(path: SwiftUICore.Path, offsetBy delta: CoreFoundation.CGSize) -> Swift.Bool
  package func hasIntersection(_ rect: CoreFoundation.CGRect) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func insetBy(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat) -> SwiftUICore.FixedRoundedRect?
  #else
  package func insetBy(dx: CoreFoundation.CGFloat, dy: CoreFoundation.CGFloat) -> SwiftUICore.FixedRoundedRect?
  #endif
  package var cgPath: CoreGraphics.CGPath {
    get
  }
  @usableFromInline
  package static func == (a: SwiftUICore.FixedRoundedRect, b: SwiftUICore.FixedRoundedRect) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.FixedRoundedRect : Swift.Sendable {
}
extension SwiftUICore.FixedRoundedRect : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.RoundedCornerStyle : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct RectangleCornerRadii : Swift.Equatable, SwiftUICore.Animatable {
  @usableFromInline
  package var topLeft: CoreFoundation.CGFloat
  @usableFromInline
  package var topRight: CoreFoundation.CGFloat
  @usableFromInline
  package var bottomRight: CoreFoundation.CGFloat
  @usableFromInline
  package var bottomLeft: CoreFoundation.CGFloat
  @_alwaysEmitIntoClient public var topLeading: CoreFoundation.CGFloat {
    get { topLeft }
    set { topLeft = newValue }
  }
  @_alwaysEmitIntoClient public var bottomLeading: CoreFoundation.CGFloat {
    get { bottomLeft }
    set { bottomLeft = newValue }
  }
  @_alwaysEmitIntoClient public var bottomTrailing: CoreFoundation.CGFloat {
    get { bottomRight }
    set { bottomRight = newValue }
  }
  @_alwaysEmitIntoClient public var topTrailing: CoreFoundation.CGFloat {
    get { topRight }
    set { topRight = newValue }
  }
  @usableFromInline
  package init(topLeft: CoreFoundation.CGFloat, topRight: CoreFoundation.CGFloat, bottomRight: CoreFoundation.CGFloat, bottomLeft: CoreFoundation.CGFloat)
  @_alwaysEmitIntoClient public init(topLeading: CoreFoundation.CGFloat = 0, bottomLeading: CoreFoundation.CGFloat = 0, bottomTrailing: CoreFoundation.CGFloat = 0, topTrailing: CoreFoundation.CGFloat = 0) {
        self.init(
            topLeft: topLeading, topRight: topTrailing,
            bottomRight: bottomTrailing, bottomLeft: bottomLeading)
    }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  public var animatableData: SwiftUICore.RectangleCornerRadii.AnimatableData {
    get
    set
  }
  public static func == (a: SwiftUICore.RectangleCornerRadii, b: SwiftUICore.RectangleCornerRadii) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen public struct Animation : Swift.Equatable, Swift.Sendable {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<A>(_ base: A) where A : SwiftUICore.CustomAnimation
  package init<A>(_ base: A) where A : SwiftUICore.InternalCustomAnimation
  internal var box: SwiftUICore.AnimationBoxBase
  package var codableValue: any SwiftUICore.CustomAnimation {
    get
  }
  public static func == (lhs: SwiftUICore.Animation, rhs: SwiftUICore.Animation) -> Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func `as`<A>(_ type: A.Type) -> A? where A : SwiftUICore.CustomAnimation
  #else
  package func `as`<A>(_ type: A.Type) -> A? where A : SwiftUICore.CustomAnimation
  #endif
  package enum Function {
    case linear(duration: Swift.Double)
    case circularEaseIn(duration: Swift.Double)
    case circularEaseOut(duration: Swift.Double)
    case circularEaseInOut(duration: Swift.Double)
    case bezier(duration: Swift.Double, cp1: CoreFoundation.CGPoint, cp2: CoreFoundation.CGPoint)
    case spring(duration: Swift.Double, mass: Swift.Double, stiffness: Swift.Double, damping: Swift.Double, initialVelocity: Swift.Double = 0)
    case customFunction((Swift.Double, inout SwiftUICore.AnimationContext<Swift.Double>) -> Swift.Double?)
    indirect case delay(Swift.Double, SwiftUICore.Animation.Function)
    indirect case speed(Swift.Double, SwiftUICore.Animation.Function)
    indirect case `repeat`(count: Swift.Double, autoreverses: Swift.Bool, SwiftUICore.Animation.Function)
    package static func custom<T>(_ anim: T) -> SwiftUICore.Animation.Function where T : SwiftUICore.CustomAnimation
  }
  package var function: SwiftUICore.Animation.Function {
    get
  }
}
extension SwiftUICore.Animation.Function {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var bezierForm: (duration: Swift.Double, cp1: CoreFoundation.CGPoint, cp2: CoreFoundation.CGPoint)? {
    get
  }
  #else
  package var bezierForm: (duration: Swift.Double, cp1: CoreFoundation.CGPoint, cp2: CoreFoundation.CGPoint)? {
    get
  }
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation : Swift.Hashable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  public func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  @_specialize(exported: false, kind: partial, where V == Swift.Double)
  @_specialize(exported: false, kind: partial, where V == SwiftUICore.AnimatablePair<SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>)
  public func animate<V>(value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #else
  public func velocity<V>(value: V, time: Foundation.TimeInterval, context: SwiftUICore.AnimationContext<V>) -> V? where V : SwiftUICore.VectorArithmetic
  #endif
  public func shouldMerge<V>(previous: SwiftUICore.Animation, value: V, time: Foundation.TimeInterval, context: inout SwiftUICore.AnimationContext<V>) -> Swift.Bool where V : SwiftUICore.VectorArithmetic
  public var base: any SwiftUICore.CustomAnimation {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Animation : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomReflectable {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var customMirror: Swift.Mirror {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal class AnimationBoxBase : @unchecked Swift.Sendable {
  @objc @usableFromInline
  deinit
}
package enum _ConcatenatedCollectionIndexRepresentation<I1, I2> where I1 : Swift.Comparable, I2 : Swift.Comparable {
  case first(I1)
  case second(I2)
}
package struct ConcatenatedCollectionIndex<C1, C2> : Swift.Comparable where C1 : Swift.Collection, C2 : Swift.Collection {
  package init(first i: C1.Index)
  package init(second i: C2.Index)
  package let _position: SwiftUICore._ConcatenatedCollectionIndexRepresentation<C1.Index, C2.Index>
  package static func < (lhs: SwiftUICore.ConcatenatedCollectionIndex<C1, C2>, rhs: SwiftUICore.ConcatenatedCollectionIndex<C1, C2>) -> Swift.Bool
  package static func == (lhs: SwiftUICore.ConcatenatedCollectionIndex<C1, C2>, rhs: SwiftUICore.ConcatenatedCollectionIndex<C1, C2>) -> Swift.Bool
}
package struct ConcatenatedCollection<C1, C2> : Swift.Collection where C1 : Swift.Collection, C2 : Swift.Collection, C1.Element == C2.Element {
  package let _base1: C1
  package let _base2: C2
  package init(_base1: C1, base2: C2)
  package typealias Index = SwiftUICore.ConcatenatedCollectionIndex<C1, C2>
  package var startIndex: SwiftUICore.ConcatenatedCollection<C1, C2>.Index {
    get
  }
  package var endIndex: SwiftUICore.ConcatenatedCollection<C1, C2>.Index {
    get
  }
  package subscript(i: SwiftUICore.ConcatenatedCollection<C1, C2>.Index) -> C1.Element {
    get
  }
  package func index(after i: SwiftUICore.ConcatenatedCollection<C1, C2>.Index) -> SwiftUICore.ConcatenatedCollection<C1, C2>.Index
  package typealias Element = C1.Element
  package typealias Indices = Swift.DefaultIndices<SwiftUICore.ConcatenatedCollection<C1, C2>>
  package typealias Iterator = Swift.IndexingIterator<SwiftUICore.ConcatenatedCollection<C1, C2>>
  package typealias SubSequence = Swift.Slice<SwiftUICore.ConcatenatedCollection<C1, C2>>
}
extension SwiftUICore.ConcatenatedCollection : Swift.BidirectionalCollection, Swift.RandomAccessCollection where C1 : Swift.RandomAccessCollection, C2 : Swift.RandomAccessCollection {
  package func index(before i: SwiftUICore.ConcatenatedCollection<C1, C2>.Index) -> SwiftUICore.ConcatenatedCollection<C1, C2>.Index
  package func index(_ i: SwiftUICore.ConcatenatedCollection<C1, C2>.Index, offsetBy n: Swift.Int) -> SwiftUICore.ConcatenatedCollection<C1, C2>.Index
  package func _offsetForward(_ i: SwiftUICore.ConcatenatedCollection<C1, C2>.Index, by n: Swift.Int) -> SwiftUICore.ConcatenatedCollection<C1, C2>.Index
  package func _offsetBackward(_ i: SwiftUICore.ConcatenatedCollection<C1, C2>.Index, by n: Swift.Int) -> SwiftUICore.ConcatenatedCollection<C1, C2>.Index
}
package func concatenate<C1, C2>(_ first: C1, _ second: C2) -> SwiftUICore.ConcatenatedCollection<C1, C2> where C1 : Swift.Collection, C2 : Swift.Collection, C1.Element == C2.Element
extension Swift.Collection {
  package func partitionPoint(where predicate: (Self.Element) throws -> Swift.Bool) rethrows -> Self.Index
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func tint<S>(_ tint: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return environment(\.tint, tint.map(AnyShapeStyle.init))
    }
  
  #else
  @inlinable nonisolated public func tint<S>(_ tint: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        return environment(\.tint, tint.map(AnyShapeStyle.init))
    }
  
  #endif
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TintPlacement : Swift.Hashable {
  @_spi(Private) @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static var switchThumb: SwiftUICore.TintPlacement {
    @_spi(Private) get
  }
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public static func == (a: SwiftUICore.TintPlacement, b: SwiftUICore.TintPlacement) -> Swift.Bool
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.TintPlacement : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable nonisolated public func tint<S>(_ tint: S?, for placement: SwiftUICore.TintPlacement) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        transformEnvironment(\.placementTint) { value in
            if let tint {
                value[placement] = .init(tint)
            }
        }
    }
  
  #else
  @_spi(Private) @inlinable nonisolated public func tint<S>(_ tint: S?, for placement: SwiftUICore.TintPlacement) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        transformEnvironment(\.placementTint) { value in
            if let tint {
                value[placement] = .init(tint)
            }
        }
    }
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_disfavoredOverload nonisolated public func tint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View {
        environment(\.tintColor, tint)
    }
  
  #else
  @inlinable @_disfavoredOverload nonisolated public func tint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View {
        environment(\.tintColor, tint)
    }
  
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  package var tint: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #else
  @usableFromInline
  package var tint: SwiftUICore.AnyShapeStyle? {
    get
    set
  }
  #endif
  @_spi(Private) @usableFromInline
  package var placementTint: [SwiftUICore.TintPlacement : SwiftUICore.AnyShapeStyle] {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  package var tintColor: SwiftUICore.Color? {
    get
    set
  }
  #else
  @usableFromInline
  package var tintColor: SwiftUICore.Color? {
    get
    set
  }
  #endif
  package var resolvedTintColor: SwiftUICore.Color.Resolved {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeStyle where Self == SwiftUICore.TintShapeStyle {
  @_alwaysEmitIntoClient public static var tint: SwiftUICore.TintShapeStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
public struct TintShapeStyle : SwiftUICore.ShapeStyle {
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  public init()
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
package struct AccessibilityActivationPointStorage : Swift.Equatable {
  package var activate: SwiftUICore.AccessibilityActivationPoint.Location?
  package var drag: [SwiftUICore.AccessibilityActivationPoint]
  package var drop: [SwiftUICore.AccessibilityActivationPoint]
  package init()
  package init(kind: SwiftUICore.AccessibilityActivationKind.RawValue, point: SwiftUICore.AccessibilityActivationPoint.Location)
  package static var defaultDrag: SwiftUICore.AccessibilityActivationPointStorage {
    get
  }
  package static var defaultDrop: SwiftUICore.AccessibilityActivationPointStorage {
    get
  }
  package static func == (a: SwiftUICore.AccessibilityActivationPointStorage, b: SwiftUICore.AccessibilityActivationPointStorage) -> Swift.Bool
}
extension SwiftUICore.AccessibilityActivationPointStorage : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityActivationPointStorage) -> Swift.Bool
}
package struct AccessibilityActivationPoint : Swift.Equatable {
  package enum Location : Swift.Equatable {
    case point(CoreFoundation.CGPoint)
    case unitPoint(SwiftUICore.UnitPoint)
    case automatic
    package static func == (a: SwiftUICore.AccessibilityActivationPoint.Location, b: SwiftUICore.AccessibilityActivationPoint.Location) -> Swift.Bool
  }
  package var location: SwiftUICore.AccessibilityActivationPoint.Location
  package var description: SwiftUICore.Text
  package static func == (a: SwiftUICore.AccessibilityActivationPoint, b: SwiftUICore.AccessibilityActivationPoint) -> Swift.Bool
}
package struct AccessibilityActivationKind {
  package enum RawValue : Swift.Equatable {
    case activate
    case drag(SwiftUICore.Text)
    case drop(SwiftUICore.Text)
    package static var drag: SwiftUICore.AccessibilityActivationKind.RawValue {
      get
    }
    package static var drop: SwiftUICore.AccessibilityActivationKind.RawValue {
      get
    }
    package static func == (a: SwiftUICore.AccessibilityActivationKind.RawValue, b: SwiftUICore.AccessibilityActivationKind.RawValue) -> Swift.Bool
  }
  package var rawValue: SwiftUICore.AccessibilityActivationKind.RawValue
  package init(rawValue: SwiftUICore.AccessibilityActivationKind.RawValue)
  package static let `default`: SwiftUICore.AccessibilityActivationKind
}
extension SwiftUICore.AccessibilityActivationKind {
  package static var defaultDescriptor: Swift.String {
    get
  }
}
extension SwiftUICore.AccessibilityActivationPoint.Location : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
package struct ReuseTrace {
  package static func register(graph: AttributeGraph.Graph)
  @inline(__always) package static var isEnabled: Swift.Bool {
    get
  }
  package static var recorder: SwiftUICore.ReuseTrace.Recorder?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func traceReuseFailure(_ name: Swift.UnsafePointer<Swift.CChar>)
  #else
  @inline(__always) package static func traceReuseFailure(_ name: Swift.UnsafePointer<Swift.CChar>)
  #endif
  @inline(__always) package static func traceReuseInternalFailure()
  @inline(__always) package static func traceReuseViewInputsDifferentFailure()
  @inline(__always) package static func traceReuseSkippedNotIdle(_ subgraph: AttributeGraph.Subgraph)
  @inline(__always) package static func traceReuseItemUnplaced(_ subgraph: AttributeGraph.Subgraph)
  @inline(__always) package static func traceCacheItemRecycled(_ subgraph: AttributeGraph.Subgraph)
  @inline(__always) package static func traceReuseCacheItemPlaced(_ subgraph: AttributeGraph.Subgraph)
  @inline(__always) package static func traceReuseCacheItemFailure(_ subgraph: AttributeGraph.Subgraph)
  @inline(__always) package static func traceReuseCacheItemAdded(_ itemReuseIdentifier: Swift.Int, _ subgraph: AttributeGraph.Subgraph)
  @inline(__always) package static func traceMismatchedReuseIDFailure(_ itemReuseIdentifier: Swift.Int, _ subgraph: AttributeGraph.Subgraph)
  @inline(__always) package static func traceReuseIdentifier(_ itemReuseIdentifier: Swift.Int)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func traceReuseTypeComparisonFailure(_ baseType: (any Any.Type)?, _ candidateType: (any Any.Type)?)
  #else
  @inline(__always) package static func traceReuseTypeComparisonFailure(_ baseType: (any Any.Type)?, _ candidateType: (any Any.Type)?)
  #endif
  @inline(__always) package static func traceReuseUnaryElementExpectedFailure(_ elementType: any Any.Type)
  @inline(__always) package static func traceReuseInvalidSubgraphFailure(_ typeFoundInvalid: any Any.Type)
  @inline(__always) package static func traceReuseIncompatibleListsFailure(_ baseList: any Any.Type, _ candidateList: any Any.Type)
  @inline(__always) package static func traceReuseBodyMismatchedFailure()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inline(__always) package static func traceNeverMadeReusableFailure(_ valueType: (any Any.Type)?)
  #else
  @inline(__always) package static func traceNeverMadeReusableFailure(_ valueType: (any Any.Type)?)
  #endif
  @inline(__always) package static func traceReusePreventedFailure(_ preventingType: any Any.Type)
  final package class Recorder {
    @objc deinit
  }
}
@_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ReuseTraceInternal : Swift.Sendable {
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct CacheItemSubgraphData {
    @_spi(ReuseTracing) public let subgraph: Swift.UnsafeRawPointer
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct CacheItemAllData {
    @_spi(ReuseTracing) public let reuseIdentifier: Swift.Int64
    @_spi(ReuseTracing) public let subgraph: Swift.UnsafeRawPointer
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct IdentifierData {
    @_spi(ReuseTracing) public let reuseIdentifier: Swift.Int
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct TypeComparisonFailure {
    @_spi(ReuseTracing) public let baseType: (any Any.Type)?
    @_spi(ReuseTracing) public let candidateType: (any Any.Type)?
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct UnaryElementFailure {
    @_spi(ReuseTracing) public let elementType: (any Any.Type)?
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct PreventingTypeFailure {
    @_spi(ReuseTracing) public let preventingType: any Any.Type
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct InvalidSubgraphFailure {
    @_spi(ReuseTracing) public let typeFoundInvalid: any Any.Type
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct IncompatibleListsFailure {
    @_spi(ReuseTracing) public let baseList: any Any.Type
    @_spi(ReuseTracing) public let candidateList: any Any.Type
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct BodyFailure {
    @_spi(ReuseTracing) public let baseBody: any Any.Type
    @_spi(ReuseTracing) public let candidateBody: any Any.Type
  }
  @_spi(ReuseTracing) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @frozen public struct NeverMadeReusableFailure {
    @_spi(ReuseTracing) public let valueType: (any Any.Type)?
  }
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.CacheItemSubgraphData : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.CacheItemAllData : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.IdentifierData : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.TypeComparisonFailure : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.UnaryElementFailure : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.PreventingTypeFailure : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.InvalidSubgraphFailure : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.IncompatibleListsFailure : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.BodyFailure : Swift.Sendable {
}
@_spi(ReuseTracing) @available(*, unavailable)
extension SwiftUICore.ReuseTraceInternal.NeverMadeReusableFailure : Swift.Sendable {
}
extension Foundation.FormatStyle {
  package func timeZone(_ timeZone: Foundation.TimeZone) -> Self
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Transaction {
  public var tracksVelocity: Swift.Bool {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.Timer {
  public static func timer(countingDownIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1)) -> SwiftUICore.SystemFormatStyle.Timer
  public static func timer(countingUpIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1)) -> SwiftUICore.SystemFormatStyle.Timer
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct Timer : Swift.Sendable {
    public typealias FormatInput = Foundation.Date
    public init(countingDownIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1))
    public init(countingUpIn interval: Swift.Range<Foundation.Date>, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 3, maxPrecision: Swift.Duration = .seconds(1))
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Timer : Foundation.FormatStyle {
  public func format(_ input: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.Timer
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.SystemFormatStyle.Timer, b: SwiftUICore.SystemFormatStyle.Timer) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Timer : Foundation.DiscreteFormatStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(before input: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(before input: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(after input: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(after input: Foundation.Date) -> Foundation.Date?
  #endif
}
extension SwiftUICore.SystemFormatStyle.Timer : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> SwiftUICore.SystemFormatStyle.Timer
}
extension SwiftUICore.SystemFormatStyle.Timer : SwiftUICore.ContentTransitionProvidingFormatStyle {
  package func contentTransition<S>(for source: S) -> SwiftUICore.ContentTransition where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension SwiftUICore.SystemFormatStyle.Timer : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, SwiftUICore.SystemFormatStyle.Timer>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension SwiftUICore.SystemFormatStyle.Timer : SwiftUICore.InterfaceIdiomDependentFormatStyle {
  package func interfaceIdiom(_ idiom: SwiftUICore.AnyInterfaceIdiom) -> SwiftUICore.SystemFormatStyle.Timer
}
extension SwiftUICore.SystemFormatStyle.Timer : SwiftUICore.VariablePrecisionDiscreteFormatStyle {
  package var precisionTransition: SwiftUICore.TimeDataFormatting.FormatTransition<Foundation.Date> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.FormatStyle where Self == SwiftUICore.SystemFormatStyle.Stopwatch {
  public static func stopwatch(startingAt startDate: Foundation.Date, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 4, maxPrecision: Swift.Duration = .milliseconds(10)) -> SwiftUICore.SystemFormatStyle.Stopwatch
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle {
  public struct Stopwatch : Swift.Sendable {
    public typealias FormatInput = Foundation.Date
    public init(startingAt startDate: Foundation.Date, showsHours: Swift.Bool = true, maxFieldCount: Swift.Int = 4, maxPrecision: Swift.Duration = .milliseconds(10))
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Stopwatch : Foundation.FormatStyle {
  public func format(_ input: Foundation.Date) -> Foundation.AttributedString
  public func locale(_ locale: Foundation.Locale) -> SwiftUICore.SystemFormatStyle.Stopwatch
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUICore.SystemFormatStyle.Stopwatch, b: SwiftUICore.SystemFormatStyle.Stopwatch) -> Swift.Bool
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias FormatOutput = Foundation.AttributedString
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.SystemFormatStyle.Stopwatch : Foundation.DiscreteFormatStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(before input: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(before input: Foundation.Date) -> Foundation.Date?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func discreteInput(after input: Foundation.Date) -> Foundation.Date?
  #else
  public func discreteInput(after input: Foundation.Date) -> Foundation.Date?
  #endif
}
extension SwiftUICore.SystemFormatStyle.Stopwatch : SwiftUICore.UpdateFrequencyDependentFormatStyle {
  package func updateFrequency(_ frequency: SwiftUICore.TimeDataFormatting.UpdateFrequency) -> SwiftUICore.SystemFormatStyle.Stopwatch
}
extension SwiftUICore.SystemFormatStyle.Stopwatch : SwiftUICore.SafelySerializableDiscreteFormatStyle {
  package static func representation<S>(of resolvable: SwiftUICore.TimeDataFormatting.Resolvable<S, SwiftUICore.SystemFormatStyle.Stopwatch>, for version: SwiftUICore.ArchivedViewInput.DeploymentVersion) -> any SwiftUICore.ResolvableStringAttributeRepresentation where S : SwiftUICore.TimeDataSourceStorage, S.Value == Foundation.Date
}
extension SwiftUICore.SystemFormatStyle.Stopwatch : SwiftUICore.VariablePrecisionDiscreteFormatStyle {
  package var precisionTransition: SwiftUICore.TimeDataFormatting.FormatTransition<Foundation.Date> {
    get
  }
}
extension SwiftUICore.SystemFormatStyle.Stopwatch : SwiftUICore.StyledFormatStyle {
  package mutating func makePlatformAttributes(resolver: inout SwiftUICore.PlatformAttributeResolver)
}
extension SwiftUICore.SystemFormatStyle {
  package enum SuperscriptEffect : Swift.Codable, Swift.Hashable {
    case unresolved
    case resolved(SwiftUICore.CodableNSAttributes)
    package init()
    package func callAsFunction(_ string: inout Foundation.AttributedString, locale: Foundation.Locale)
    package mutating func makePlatformAttributes(resolver: inout SwiftUICore.PlatformAttributeResolver)
    package func hash(into hasher: inout Swift.Hasher)
    package static func == (a: SwiftUICore.SystemFormatStyle.SuperscriptEffect, b: SwiftUICore.SystemFormatStyle.SuperscriptEffect) -> Swift.Bool
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
}
package struct AccessibilityNodeAttachment {
  package enum Storage {
    case codable(SwiftUICore.CodableAccessibilityAttachmentStorage)
    case attachment(SwiftUICore.AccessibilityAttachment)
  }
  package enum Kind : Swift.Codable {
    case standard
    case placeholder
    package static func == (a: SwiftUICore.AccessibilityNodeAttachment.Kind, b: SwiftUICore.AccessibilityNodeAttachment.Kind) -> Swift.Bool
    package func hash(into hasher: inout Swift.Hasher)
    package func encode(to encoder: any Swift.Encoder) throws
    package var hashValue: Swift.Int {
      get
    }
    package init(from decoder: any Swift.Decoder) throws
  }
  package var storage: SwiftUICore.AccessibilityNodeAttachment.Storage
  package var createsNode: Swift.Bool
  package var kind: SwiftUICore.AccessibilityNodeAttachment.Kind
  package func makeAttachment<A>(with applicator: A.Type) -> SwiftUICore.AccessibilityAttachment where A : SwiftUICore.AccessibilityPlatformPropertyApplicator
  package init(_ attachment: SwiftUICore.AccessibilityAttachment, platformStorage: SwiftUICore.AccessibilityPlatformPropertyStorage, in environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom, createsNode: Swift.Bool, kind: SwiftUICore.AccessibilityNodeAttachment.Kind, encode: Swift.Bool)
}
extension SwiftUICore.AccessibilityNodeAttachment : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.AccessibilityNodeAttachment.Kind : SwiftUICore.ProtobufEnum {
  package var protobufValue: Swift.UInt {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init?(protobufValue value: Swift.UInt)
  #else
  package init?(protobufValue value: Swift.UInt)
  #endif
}
package struct AccessibilityPlatformPropertyStorage {
  package var explicitRole: Swift.String?
  package var explicitSubrole: Swift.String?
  package var explicitTraits: SwiftUICore.CodableAccessibilityUIKitTraits?
  #if compiler(>=5.3) && $NoncopyableGenerics
  package init(explicitRole: Swift.String? = nil, explicitSubrole: Swift.String? = nil, explicitTraits: SwiftUICore.CodableAccessibilityUIKitTraits? = nil)
  #else
  package init(explicitRole: Swift.String? = nil, explicitSubrole: Swift.String? = nil, explicitTraits: SwiftUICore.CodableAccessibilityUIKitTraits? = nil)
  #endif
}
package protocol AccessibilityPlatformPropertyApplicator {
  static func apply(_ storage: SwiftUICore.AccessibilityPlatformPropertyStorage, to properties: inout SwiftUICore.AccessibilityProperties)
}
package struct CodableAccessibilityAttachmentStorage : SwiftUICore.ProtobufMessage {
  package struct VBase {
  }
  package struct V2 {
  }
  package struct V3 {
  }
  package init(_ attachment: SwiftUICore.AccessibilityAttachment, platformStorage: SwiftUICore.AccessibilityPlatformPropertyStorage, in environment: SwiftUICore.EnvironmentValues, idiom: SwiftUICore.AnyInterfaceIdiom)
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.CodableAccessibilityAttachmentStorage.VBase : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.CodableAccessibilityAttachmentStorage.V2 : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.CodableAccessibilityAttachmentStorage.V3 : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
extension SwiftUICore.AccessibilityAttachment {
  package init<A>(_ storage: SwiftUICore.CodableAccessibilityAttachmentStorage, applicator: A.Type) where A : SwiftUICore.AccessibilityPlatformPropertyApplicator
}
package struct CodableAccessibilityUIKitTraits {
  package var removed: Swift.UInt64
  package var added: Swift.UInt64
  package init(removed: Swift.UInt64 = 0, added: Swift.UInt64 = 0)
}
extension SwiftUICore.CodableAccessibilityUIKitTraits : SwiftUICore.ProtobufMessage {
  package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct _HueRotationEffect : SwiftUICore.RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var angle: SwiftUICore.Angle
  @inlinable @_Concurrency.MainActor @preconcurrency public init(angle: SwiftUICore.Angle) {
        self.angle = angle
    }
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUICore.Angle.AnimatableData {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUICore._HueRotationEffect, b: SwiftUICore._HueRotationEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.Angle.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func hueRotation(_ angle: SwiftUICore.Angle) -> some SwiftUICore.View {
        return modifier(_HueRotationEffect(angle: angle))
    }
  
}
package protocol ViewGraphFeature {
  mutating func modifyViewInputs(inputs: inout SwiftUICore._ViewInputs, graph: SwiftUICore.ViewGraph)
  mutating func modifyViewOutputs(outputs: inout SwiftUICore._ViewOutputs, inputs: SwiftUICore._ViewInputs, graph: SwiftUICore.ViewGraph)
  mutating func uninstantiate(graph: SwiftUICore.ViewGraph)
  mutating func isHiddenForReuseDidChange(graph: SwiftUICore.ViewGraph)
  #if compiler(>=5.3) && $NoncopyableGenerics
  mutating func allowsAsyncUpdate(graph: SwiftUICore.ViewGraph) -> Swift.Bool?
  #else
  mutating func allowsAsyncUpdate(graph: SwiftUICore.ViewGraph) -> Swift.Bool?
  #endif
  mutating func needsUpdate(graph: SwiftUICore.ViewGraph) -> Swift.Bool
  mutating func update(graph: SwiftUICore.ViewGraph)
}
extension SwiftUICore.ViewGraphFeature {
  package mutating func modifyViewInputs(inputs: inout SwiftUICore._ViewInputs, graph: SwiftUICore.ViewGraph)
  package mutating func modifyViewOutputs(outputs: inout SwiftUICore._ViewOutputs, inputs: SwiftUICore._ViewInputs, graph: SwiftUICore.ViewGraph)
  package mutating func uninstantiate(graph: SwiftUICore.ViewGraph)
  package mutating func isHiddenForReuseDidChange(graph: SwiftUICore.ViewGraph)
  #if compiler(>=5.3) && $NoncopyableGenerics
  package mutating func allowsAsyncUpdate(graph: SwiftUICore.ViewGraph) -> Swift.Bool?
  #else
  package mutating func allowsAsyncUpdate(graph: SwiftUICore.ViewGraph) -> Swift.Bool?
  #endif
  package mutating func needsUpdate(graph: SwiftUICore.ViewGraph) -> Swift.Bool
  package mutating func update(graph: SwiftUICore.ViewGraph)
}
package struct ViewRendererHostProperties : Swift.OptionSet {
  package let rawValue: Swift.UInt16
  package init(rawValue: Swift.UInt16)
  package static let rootView: SwiftUICore.ViewRendererHostProperties
  package static let environment: SwiftUICore.ViewRendererHostProperties
  package static let focusedValues: SwiftUICore.ViewRendererHostProperties
  package static let transform: SwiftUICore.ViewRendererHostProperties
  package static let size: SwiftUICore.ViewRendererHostProperties
  package static let safeArea: SwiftUICore.ViewRendererHostProperties
  package static let scrollableContainerSize: SwiftUICore.ViewRendererHostProperties
  package static let focusStore: SwiftUICore.ViewRendererHostProperties
  package static let accessibilityFocusStore: SwiftUICore.ViewRendererHostProperties
  package static let focusedItem: SwiftUICore.ViewRendererHostProperties
  package static let accessibilityFocus: SwiftUICore.ViewRendererHostProperties
  package static let all: SwiftUICore.ViewRendererHostProperties
  package typealias ArrayLiteralElement = SwiftUICore.ViewRendererHostProperties
  package typealias Element = SwiftUICore.ViewRendererHostProperties
  package typealias RawValue = Swift.UInt16
}
package enum ViewRenderingPhase {
  case none
  case rendering
  case renderingAsync
  package static func == (a: SwiftUICore.ViewRenderingPhase, b: SwiftUICore.ViewRenderingPhase) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUICore.ViewRenderingPhase : Swift.Sendable {
}
package protocol ViewRendererHost : SwiftUICore.ViewGraphDelegate {
  var viewGraph: SwiftUICore.ViewGraph { get }
  var currentTimestamp: SwiftUICore.Time { get set }
  var propertiesNeedingUpdate: SwiftUICore.ViewRendererHostProperties { get set }
  var renderingPhase: SwiftUICore.ViewRenderingPhase { get set }
  var externalUpdateCount: Swift.Int { get set }
  func updateRootView()
  func updateEnvironment()
  func updateFocusedItem()
  func updateFocusedValues()
  func updateTransform()
  func updateSize()
  func updateSafeArea()
  func updateScrollableContainerSize()
  func updateFocusStore()
  func updateAccessibilityFocus()
  func updateAccessibilityFocusStore()
  func updateAccessibilityEnvironment()
  func requestUpdate(after delay: Swift.Double)
  #if compiler(>=5.3) && $NoncopyableGenerics
  func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #else
  func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #endif
  func didRender()
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ViewRendererHost {
  package var isRendering: Swift.Bool {
    get
  }
  package func initializeViewGraph()
  package func invalidate()
  package static func makeRootView<V>(_ view: V) -> SwiftUICore.ModifiedContent<V, SwiftUICore.HitTestBindingModifier> where V : SwiftUICore.View
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func updateViewGraph<T>(body: (SwiftUICore.ViewGraph) -> T) -> T
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func graphDidChange()
  package func didRender()
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func preferencesDidChange()
  package func invalidateProperties(_ props: SwiftUICore.ViewRendererHostProperties, mayDeferUpdate: Swift.Bool = true)
  package func updateGraph()
  package func updateTransform()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func render(interval: Swift.Double = 0, updateDisplayList: Swift.Bool = true, targetTimestamp: SwiftUICore.Time? = nil)
  #else
  package func render(interval: Swift.Double = 0, updateDisplayList: Swift.Bool = true, targetTimestamp: SwiftUICore.Time? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func renderAsync(interval: Swift.Double = 0, targetTimestamp: SwiftUICore.Time?) -> SwiftUICore.Time?
  #else
  package func renderAsync(interval: Swift.Double = 0, targetTimestamp: SwiftUICore.Time?) -> SwiftUICore.Time?
  #endif
  package func advanceTimeForTest(interval: Swift.Double)
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func preferenceValue<K>(_ key: K.Type) -> K.Value where K : SwiftUICore.HostPreferenceKey
  package func idealSize() -> CoreFoundation.CGSize
  package func sizeThatFits(_ proposal: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #else
  package func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #else
  package func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #endif
  package func alignment(of guide: SwiftUICore.HorizontalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  package func alignment(of guide: SwiftUICore.VerticalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  package var centersRootView: Swift.Bool {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var responderNode: SwiftUICore.ResponderNode? {
    get
  }
  #else
  package var responderNode: SwiftUICore.ResponderNode? {
    get
  }
  #endif
  package var isRootHost: Swift.Bool {
    get
  }
  package func performExternalUpdate(_ update: () -> Swift.Void)
  package func updateFocusedItem()
  package func updateFocusedValues()
  package func updateFocusStore()
  package func updateAccessibilityFocus()
  package func updateAccessibilityFocusStore()
  package func updateAccessibilityEnvironment()
}
package let hostingViewCoordinateSpace: SwiftUICore.CoordinateSpace.ID
extension SwiftUICore.ViewRendererHost {
  package var nextGestureUpdateTime: SwiftUICore.Time {
    get
  }
  package func sendEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType], rootNode: SwiftUICore.ResponderNode, at time: SwiftUICore.Time) -> SwiftUICore.GesturePhase<Swift.Void>
  package func resetEvents()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func gestureCategory() -> SwiftUICore.GestureCategory?
  #else
  package func gestureCategory() -> SwiftUICore.GestureCategory?
  #endif
  package func setInheritedPhase(_ phase: SwiftUICore._GestureInputs.InheritedPhase)
}
extension SwiftUICore.ViewRendererHost {
  package func sendTestEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType])
  package func resetTestEvents()
}
extension SwiftUICore.ViewGraph {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package static var viewRendererHost: (any SwiftUICore.ViewRendererHost)? {
    get
  }
  #else
  package static var viewRendererHost: (any SwiftUICore.ViewRendererHost)? {
    get
  }
  #endif
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var preferenceBridge: SwiftUICore.PreferenceBridge? {
    get
    set
  }
  #else
  package var preferenceBridge: SwiftUICore.PreferenceBridge? {
    get
    set
  }
  #endif
}
extension SwiftUICore.ViewRendererHost {
  package func rootContentPath(kind: SwiftUICore.ContentShapeKinds) -> SwiftUICore.Path
}
extension SwiftUICore.ViewRendererHost {
  package func startProfiling()
  package func stopProfiling()
  package func resetProfile()
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func archiveJSON(name: Swift.String? = nil)
  #else
  package func archiveJSON(name: Swift.String? = nil)
  #endif
}
final package class EmptyViewRendererHost : SwiftUICore.ViewRendererHost {
  final package let viewGraph: SwiftUICore.ViewGraph
  final package var propertiesNeedingUpdate: SwiftUICore.ViewRendererHostProperties
  final package var renderingPhase: SwiftUICore.ViewRenderingPhase
  final package var externalUpdateCount: Swift.Int
  final package var currentTimestamp: SwiftUICore.Time
  package init(environment: SwiftUICore.EnvironmentValues = EnvironmentValues())
  final package func requestUpdate(after delay: Swift.Double)
  final package func updateRootView()
  final package func updateEnvironment()
  final package func updateSize()
  final package func updateSafeArea()
  final package func updateScrollableContainerSize()
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #else
  final package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #endif
  final package func forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  @objc deinit
}
package protocol ViewGraphDelegate : SwiftUICore.GraphDelegate {
  #if compiler(>=5.3) && $NoncopyableGenerics
  func `as`<T>(_ type: T.Type) -> T?
  #else
  func `as`<T>(_ type: T.Type) -> T?
  #endif
  func modifyViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  func updateViewGraph<T>(body: (SwiftUICore.ViewGraph) -> T) -> T
  func rootTransform() -> SwiftUICore.ViewTransform
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ViewGraphDelegate {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) package func `as`<T>(_ type: T.Type) -> T?
  #else
  @_spi(ForSwiftUIOnly) package func `as`<T>(_ type: T.Type) -> T?
  #endif
  @_spi(ForSwiftUIOnly) package func modifyViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  @_spi(ForSwiftUIOnly) public func updateGraph<T>(body: (SwiftUICore.GraphHost) -> T) -> T
  @_spi(ForSwiftUIOnly) package func rootTransform() -> SwiftUICore.ViewTransform
}
final package class ViewGraph : SwiftUICore.GraphHost {
  package struct Outputs : Swift.OptionSet {
    package let rawValue: Swift.UInt8
    package init(rawValue: Swift.UInt8)
    package static let displayList: SwiftUICore.ViewGraph.Outputs
    package static let platformItemList: SwiftUICore.ViewGraph.Outputs
    package static let viewResponders: SwiftUICore.ViewGraph.Outputs
    package static let layout: SwiftUICore.ViewGraph.Outputs
    package static let focus: SwiftUICore.ViewGraph.Outputs
    package static let all: SwiftUICore.ViewGraph.Outputs
    package static let defaults: SwiftUICore.ViewGraph.Outputs
    package typealias ArrayLiteralElement = SwiftUICore.ViewGraph.Outputs
    package typealias Element = SwiftUICore.ViewGraph.Outputs
    package typealias RawValue = Swift.UInt8
  }
  weak final package var delegate: (any SwiftUICore.ViewGraphDelegate)?
  final package var centersRootView: Swift.Bool
  final package let rootView: AttributeGraph.AnyAttribute
  @AttributeGraph.Attribute @_projectedValueProperty($transform) final package var transform: SwiftUICore.ViewTransform {
    get
    set
    _modify
  }
  final package var $transform: AttributeGraph.Attribute<SwiftUICore.ViewTransform> {
    get
    set
  }
  @AttributeGraph.Attribute @_projectedValueProperty($zeroPoint) final package var zeroPoint: SwiftUICore.ViewOrigin {
    get
  }
  final package var $zeroPoint: AttributeGraph.Attribute<SwiftUICore.ViewOrigin> {
    get
  }
  @AttributeGraph.Attribute @_projectedValueProperty($proposedSize) final package var proposedSize: SwiftUICore.ViewSize {
    get
  }
  final package var $proposedSize: AttributeGraph.Attribute<SwiftUICore.ViewSize> {
    get
  }
  @AttributeGraph.Attribute @_projectedValueProperty($safeAreaInsets) final package var safeAreaInsets: SwiftUICore._SafeAreaInsetsModifier {
    get
  }
  final package var $safeAreaInsets: AttributeGraph.Attribute<SwiftUICore._SafeAreaInsetsModifier> {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($gestureDebug) final package var gestureDebug: SwiftUICore.GestureDebug.Data? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($gestureDebug) final package var gestureDebug: SwiftUICore.GestureDebug.Data? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var $gestureDebug: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Data>? {
    get
    set
  }
  #else
  final package var $gestureDebug: AttributeGraph.Attribute<SwiftUICore.GestureDebug.Data>? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($gestureCategory) final package var gestureCategory: SwiftUICore.GestureCategory? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($gestureCategory) final package var gestureCategory: SwiftUICore.GestureCategory? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var $gestureCategory: AttributeGraph.Attribute<SwiftUICore.GestureCategory>? {
    get
    set
  }
  #else
  final package var $gestureCategory: AttributeGraph.Attribute<SwiftUICore.GestureCategory>? {
    get
    set
  }
  #endif
  @AttributeGraph.Attribute @_projectedValueProperty($gesturePreferenceKeys) final package var gesturePreferenceKeys: SwiftUICore.PreferenceKeys {
    get
    set
    _modify
  }
  final package var $gesturePreferenceKeys: AttributeGraph.Attribute<SwiftUICore.PreferenceKeys> {
    get
    set
  }
  @AttributeGraph.Attribute @_projectedValueProperty($defaultLayoutComputer) final package var defaultLayoutComputer: SwiftUICore.LayoutComputer {
    get
    set
    _modify
  }
  final package var $defaultLayoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer> {
    get
    set
  }
  final package var sizeThatFitsObservers: SwiftUICore.SizeThatFitsObservers
  final package var accessibilityEnabled: Swift.Bool
  final package var requestedOutputs: SwiftUICore.ViewGraph.Outputs {
    get
    set
  }
  package struct NextUpdate {
    package var time: SwiftUICore.Time {
      get
    }
    package var interval: Swift.Double {
      get
    }
    package var reasons: Swift.Set<Swift.UInt32> {
      get
    }
    package mutating func at(_ next: SwiftUICore.Time)
    package mutating func maxVelocity(_ velocity: CoreFoundation.CGFloat)
    #if compiler(>=5.3) && $NoncopyableGenerics
    package mutating func interval(_ interval: Swift.Double, reason: Swift.UInt32? = nil)
    #else
    package mutating func interval(_ interval: Swift.Double, reason: Swift.UInt32? = nil)
    #endif
  }
  final package var nextUpdate: (views: SwiftUICore.ViewGraph.NextUpdate, gestures: SwiftUICore.ViewGraph.NextUpdate)
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var preferenceBridge: SwiftUICore.PreferenceBridge? {
    get
    set
  }
  #else
  final package var preferenceBridge: SwiftUICore.PreferenceBridge? {
    get
    set
  }
  #endif
  package static var current: SwiftUICore.ViewGraph {
    get
  }
  package init<Root>(rootViewType: Root.Type = Root.self, requestedOutputs: SwiftUICore.ViewGraph.Outputs = Outputs.defaults) where Root : SwiftUICore.View
  @objc deinit
  #if compiler(>=5.3) && $NoncopyableGenerics
  override final public var graphDelegate: (any SwiftUICore.GraphDelegate)? {
    get
  }
  #else
  override final public var graphDelegate: (any SwiftUICore.GraphDelegate)? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  override final public var parentHost: SwiftUICore.GraphHost? {
    get
  }
  #else
  override final public var parentHost: SwiftUICore.GraphHost? {
    get
  }
  #endif
  final package func append<T>(feature: T) where T : SwiftUICore.ViewGraphFeature
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package subscript<T>(feature: T.Type) -> Swift.UnsafeMutablePointer<T>? where T : SwiftUICore.ViewGraphFeature {
    get
  }
  #else
  final package subscript<T>(feature: T.Type) -> Swift.UnsafeMutablePointer<T>? where T : SwiftUICore.ViewGraphFeature {
    get
  }
  #endif
  override final public func instantiateOutputs()
  override final public func uninstantiateOutputs()
  override final public func timeDidChange()
  override final public func isHiddenForReuseDidChange()
}
extension SwiftUICore.ViewGraph {
  final package func setRootView<Root>(_ view: Root) where Root : SwiftUICore.View
  final package func setSize(_ size: SwiftUICore.ViewSize)
  final package func setProposedSize(_ size: CoreFoundation.CGSize)
  final package var size: SwiftUICore.ViewSize {
    get
  }
  @discardableResult
  final package func setSafeAreaInsets(_ insets: SwiftUICore.EdgeInsets) -> Swift.Bool
  @discardableResult
  final package func setSafeAreaInsets(_ elts: [SwiftUICore.SafeAreaInsets.Element]) -> Swift.Bool
  final package func setScrollableContainerSize(_ size: SwiftUICore.ViewSize)
  @discardableResult
  final package func invalidateTransform() -> Swift.Bool
}
extension SwiftUICore.ViewGraph {
  final package var updateRequiredMainThread: Swift.Bool {
    get
  }
  final package func updateOutputs(at time: SwiftUICore.Time)
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func updateOutputsAsync(at time: SwiftUICore.Time) -> (list: SwiftUICore.DisplayList, version: SwiftUICore.DisplayList.Version)?
  #else
  final package func updateOutputsAsync(at time: SwiftUICore.Time) -> (list: SwiftUICore.DisplayList, version: SwiftUICore.DisplayList.Version)?
  #endif
  final package func displayList() -> (SwiftUICore.DisplayList, SwiftUICore.DisplayList.Version)
}
package struct SizeThatFitsMeasurer : SwiftUICore.ViewGraphGeometryMeasurer {
  package static func measure(given proposal: SwiftUICore._ProposedSize, in graph: SwiftUICore.ViewGraph) -> CoreFoundation.CGSize
  package static let invalidValue: CoreFoundation.CGSize
  package typealias Proposal = SwiftUICore._ProposedSize
  package typealias Size = CoreFoundation.CGSize
}
package typealias SizeThatFitsObservers = SwiftUICore.ViewGraphGeometryObservers<SwiftUICore.SizeThatFitsMeasurer>
extension SwiftUICore.ViewGraph {
  final package func sizeThatFits(_ proposal: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #else
  final package func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #else
  final package func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat?
  #endif
  final package func alignment(of guide: SwiftUICore.VerticalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  final package func alignment(of guide: SwiftUICore.HorizontalAlignment, at size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  final package func viewDebugData() -> [SwiftUICore._ViewDebug.Data]
}
extension SwiftUICore.ViewGraph {
  final package func invalidatePreferenceBridge()
}
extension SwiftUICore.ViewGraph {
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package var responderNode: SwiftUICore.ResponderNode? {
    get
  }
  #else
  final package var responderNode: SwiftUICore.ResponderNode? {
    get
  }
  #endif
  final package func setInheritedPhase(_ phase: SwiftUICore._GestureInputs.InheritedPhase)
  final package func sendEvents(_ events: [SwiftUICore.EventID : any SwiftUICore.EventType], rootNode: SwiftUICore.ResponderNode, at time: SwiftUICore.Time) -> SwiftUICore.GesturePhase<Swift.Void>
  final package func resetEvents()
}
package struct RootGeometry : AttributeGraph.Rule, SwiftUICore.AsyncAttribute {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($layoutDirection) package var layoutDirection: SwiftUICore.LayoutDirection? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($layoutDirection) package var layoutDirection: SwiftUICore.LayoutDirection? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $layoutDirection: AttributeGraph.Attribute<SwiftUICore.LayoutDirection>? {
    get
    set
  }
  #else
  package var $layoutDirection: AttributeGraph.Attribute<SwiftUICore.LayoutDirection>? {
    get
    set
  }
  #endif
  @AttributeGraph.Attribute @_projectedValueProperty($proposedSize) package var proposedSize: SwiftUICore.ViewSize {
    get
    nonmutating set
    nonmutating _modify
  }
  package var $proposedSize: AttributeGraph.Attribute<SwiftUICore.ViewSize> {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($safeAreaInsets) package var safeAreaInsets: SwiftUICore._SafeAreaInsetsModifier? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($safeAreaInsets) package var safeAreaInsets: SwiftUICore._SafeAreaInsetsModifier? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $safeAreaInsets: AttributeGraph.Attribute<SwiftUICore._SafeAreaInsetsModifier>? {
    get
    set
  }
  #else
  package var $safeAreaInsets: AttributeGraph.Attribute<SwiftUICore._SafeAreaInsetsModifier>? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($childLayoutComputer) package var childLayoutComputer: SwiftUICore.LayoutComputer? {
    get
  }
  #else
  @AttributeGraph.OptionalAttribute @_projectedValueProperty($childLayoutComputer) package var childLayoutComputer: SwiftUICore.LayoutComputer? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var $childLayoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #else
  package var $childLayoutComputer: AttributeGraph.Attribute<SwiftUICore.LayoutComputer>? {
    get
    set
  }
  #endif
  package init(layoutDirection: AttributeGraph.OptionalAttribute<SwiftUICore.LayoutDirection> = .init(), proposedSize: AttributeGraph.Attribute<SwiftUICore.ViewSize>, safeAreaInsets: AttributeGraph.OptionalAttribute<SwiftUICore._SafeAreaInsetsModifier> = .init(), childLayoutComputer: AttributeGraph.OptionalAttribute<SwiftUICore.LayoutComputer> = .init())
  package var value: SwiftUICore.ViewGeometry {
    get
  }
  package typealias Value = SwiftUICore.ViewGeometry
}
extension AttributeGraph.Graph {
  package func viewGraph() -> SwiftUICore.ViewGraph
}
package struct AttributeCountInfoKey : SwiftUICore.HostPreferenceKey {
  package static var defaultValue: SwiftUICore.AttributeCountTestInfo
  package static func reduce(value: inout SwiftUICore.AttributeCountTestInfo, nextValue: () -> SwiftUICore.AttributeCountTestInfo)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Value = SwiftUICore.AttributeCountTestInfo
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.View {
  @inlinable @_disfavoredOverload nonisolated public func transition(_ t: SwiftUICore.AnyTransition) -> some SwiftUICore.View {
        return _trait(TransitionTraitKey.self, t)
    }
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func transition<T>(_ transition: T) -> some SwiftUICore.View where T : SwiftUICore.Transition {
        self.transition(AnyTransition(transition))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal struct TransitionTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.AnyTransition {
    get { .opacity }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.AnyTransition
}
@available(*, unavailable)
extension SwiftUICore.TransitionTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@usableFromInline
internal struct CanTransitionTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUICore.CanTransitionTraitKey : Swift.Sendable {
}
extension SwiftUICore.ViewTraitCollection {
  package var canTransition: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.ViewTraitCollection {
  package var transition: SwiftUICore.AnyTransition {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func optionalTransition(ignoringIdentity: Swift.Bool) -> SwiftUICore.AnyTransition?
  #else
  package func optionalTransition(ignoringIdentity: Swift.Bool) -> SwiftUICore.AnyTransition?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func optionalTransition() -> SwiftUICore.AnyTransition?
  #else
  package func optionalTransition() -> SwiftUICore.AnyTransition?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EventModifiers : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.ResizingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.ResizingMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ZStackLayout : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ZStackLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Alignment : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollPhase : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ScrollPhase : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.Equatable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.RawRepresentable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.HorizontalDirection.Set : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.Equatable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.RawRepresentable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.VerticalDirection.Set : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OffsetEffect : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
extension SwiftUICore._ColorMonochromeEffect._Resolved : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 7.0)
extension SwiftUICore._ColorMonochromeEffect._Resolved : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VStackLayout : Swift.Sendable {}
extension SwiftUICore._VStackLayout : SwiftUICore._VariadicView_UnaryViewRoot {}
extension SwiftUICore._VStackLayout : SwiftUICore._VariadicView_ViewRoot {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VStackLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Edge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalEdge.Set : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalEdge.Set : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FixedSizeLayout : Swift.Sendable {}
extension SwiftUICore._FixedSizeLayout : SwiftUICore.Animatable {}
extension SwiftUICore._FixedSizeLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._RotationEffect : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "will be removed")
extension SwiftUICore._ForegroundColorModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Namespace.ID : Swift.Sendable {}
@_spi(ForSwiftUIOnly) extension SwiftUICore.CAHostingLayer : SwiftUICore.GraphDelegate {}
@_spi(ForUIKitOnly) @_spi(ForAppKitOnly) extension SwiftUICore.CAHostingLayer : SwiftUICore._BenchmarkHost {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EdgeInsets : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineScheduleMode : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TimelineScheduleMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Gradient.Stop : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Axis.Set : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PaddingLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PaddingLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._PaddingLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlendModeEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlendModeEffect : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 12.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 8.0)
extension SwiftUICore._ExtendedBlendModeEffect : SwiftUICore.Animatable {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 12.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 8.0)
extension SwiftUICore._ExtendedBlendModeEffect : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 12.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 8.0)
extension SwiftUICore._ExtendedBlendModeEffect : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrixEffect : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrixEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMatrixEffect : Swift.Sendable {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 10.0)
extension SwiftUICore._PremultipliedColorMatrixEffect : SwiftUICore.Animatable {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 10.0)
extension SwiftUICore._PremultipliedColorMatrixEffect : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 14.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 17.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 10.0)
extension SwiftUICore._PremultipliedColorMatrixEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContrastEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContrastEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContrastEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Orientation : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Orientation : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MatchedGeometryProperties : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._MatchedGeometryEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.OpenURLAction : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.RGBColorSpace : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Color.RGBColorSpace : Swift.Hashable {}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityAnnouncementPriority : Swift.Equatable {}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityAnnouncementPriority : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlurEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlurEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BlurEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProjectionTransform : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorInvertEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorInvertEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorInvertEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._TraitWritingModifier : SwiftUICore.ViewModifier {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ConditionalTraitWritingModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerViewModifier : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerViewModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerViewModifier : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerColorMatrixEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundLayerColorMatrixEffect : Swift.Sendable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._ForegroundLayerLevelViewModifier : SwiftUICore.Animatable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._ForegroundLayerLevelViewModifier : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._ForegroundLayerLevelColorMatrixEffect : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._ForegroundLayerLevelColorMatrixEffect.Options : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GrayscaleEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GrayscaleEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GrayscaleEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._Rotation3DEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OpacityEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OpacityEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OpacityEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ShadowEffect._Resolved : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ShadowEffect._Resolved : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorRenderingMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BrightnessEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BrightnessEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BrightnessEffect : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GeometryGroupEffect : SwiftUICore.Animatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GeometryGroupEffect : SwiftUICore.ViewModifier {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._GeometryGroupEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UnitPoint : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HStackLayout : Swift.Sendable {}
extension SwiftUICore._HStackLayout : SwiftUICore._VariadicView_UnaryViewRoot {}
extension SwiftUICore._HStackLayout : SwiftUICore._VariadicView_ViewRoot {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HStackLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._CompositingGroupEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._CompositingGroupEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._CompositingGroupEffect : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityHeadingLevel : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._EndedGesture : SwiftUICore.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ChangedGesture : SwiftUICore.Gesture {}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityDataSeriesConfiguration.DataSeriesType : Swift.Equatable {}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityDataSeriesConfiguration.DataSeriesType : Swift.Hashable {}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AccessibilityDataSeriesConfiguration.DataSeriesType : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.FillStyle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.BlendMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.BlendMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Interpolation : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.Interpolation : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore.Shader : SwiftUICore.ShapeStyle {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore._ShaderFilterEffect : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.BlendMode : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.ClipOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.ShadowOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.BlurOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.FilterOptions : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GraphicsContext.GradientOptions : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContentMode : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AspectRatioLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AspectRatioLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AspectRatioLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RoundedCornerStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RoundedCornerStyle : Swift.Hashable {}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.DateStyle.UnitsConfiguration.Style : Swift.Hashable {}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.DateStyle.UnitsConfiguration.Style : Swift.RawRepresentable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.FontAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute : Swift.Sendable {}
@_spi(_) @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "Use StrikethroughStyleAttribute")
extension Foundation.AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute : Swift.Sendable {}
@_spi(_) @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(*, deprecated, message: "Use UnderlineStyleAttribute")
extension Foundation.AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute : Swift.Sendable {}
@_spi(Private) @available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.EncapsulationAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.KerningAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.TrackingAttribute : Swift.Sendable {}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute : Swift.Sendable {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.TextScaleAttribute : Swift.Sendable {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension Foundation.AttributeScopes.SwiftUIAttributes.CustomContainerAttribute : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._OverlayPreferenceModifier : SwiftUICore.ViewModifier {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackgroundPreferenceModifier : SwiftUICore.ViewModifier {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ProposedViewSize : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.TruncationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.TruncationMode : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Case : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Case : Swift.Hashable {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FillMaskEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.StrokeStyle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.Weight : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UserInterfaceSizeClass : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.UserInterfaceSizeClass : Swift.Hashable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._EnvironmentBackgroundStyleModifier : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundStyleModifier : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundStyleModifier2 : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ForegroundStyleModifier3 : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeRole : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ShapeRole : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._LuminanceToAlphaEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._LuminanceToAlphaEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._LuminanceToAlphaEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._MapGesture : SwiftUICore.Gesture {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Path.Element : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VAlignment : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VAlignment : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._VAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AlignmentLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AlignmentLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._AlignmentLayout : Swift.Sendable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LuminanceCurveEffect : SwiftUICore.Animatable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.LuminanceCurveEffect : SwiftUICore.ViewModifier {}
@_spi(DisplayList_ViewSystem) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.PlatformViewDefinition.ViewKind : Swift.Equatable {}
@_spi(DisplayList_ViewSystem) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.PlatformViewDefinition.ViewKind : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.HorizontalAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.VerticalAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.AlignmentKey : Swift.Sendable {}
@_spi(Private_Scroll) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ScrollClipEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.TextStyle : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.TextStyle : Swift.Hashable {}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.VariationAxisIdentifier : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font._StylisticAlternative : Swift.RawRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.Leading : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Font.Leading : Swift.Hashable {}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.GestureResponderExclusionPolicy : Swift.Equatable {}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.GestureResponderExclusionPolicy : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FrameLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FrameLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FrameLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FlexFrameLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FlexFrameLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._FlexFrameLayout : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._TextRendererViewModifier : SwiftUICore.ViewModifier {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Text.Layout.DrawingOptions : Swift.Sendable {}
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated, introduced: 6.0, renamed: "WatchDisplayVariant")
@available(visionOS, unavailable)
extension SwiftUICore._DeviceVariant : Swift.Hashable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 8.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.WatchDisplayVariant : Swift.Equatable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 8.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.WatchDisplayVariant : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyView : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContainerShapeModifier : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Prominence : Swift.Equatable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Prominence : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorMatrix : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ViewDebug.Property : Swift.RawRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackdropEffect : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackdropEffectPlaceholder : SwiftUICore.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._BackdropEffectPlaceholder : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyAnimatableData : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.MeshGradient : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.EmptyModifier : Swift.Sendable {}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EventSourceType : Swift.Equatable {}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.EventSourceType : Swift.Hashable {}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
@_originallyDefinedIn(module: "SwiftUI", visionOS 2.0)
extension SwiftUICore.ResponderVisitorResult : Swift.Hashable {}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ContentTransition.Options : Swift.Sendable {}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContentTransitionModifier : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContentTransitionGroup : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ContentTransitionGroup : Swift.Sendable {}
@_spi(Testing) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TestIDView : SwiftUICore.View {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase : Swift.Equatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TransitionPhase : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SaturationEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SaturationEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SaturationEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.TextAlignment : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Angle : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaIgnoringLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaIgnoringLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaIgnoringLayout : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaRegionsIgnoringLayout : SwiftUICore.Animatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaRegionsIgnoringLayout : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._SafeAreaRegionsIgnoringLayout : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.TemplateRenderingMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Image.TemplateRenderingMode : Swift.Hashable {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.DisplayGamut : Swift.Equatable {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.DisplayGamut : Swift.Hashable {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.DisplayGamut : Swift.RawRepresentable {}
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@available(iOS, unavailable)
@available(macCatalyst, introduced: 13.0, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `EnvironmentValues.appearsActive` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.ControlActiveState : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMultiplyEffect._Resolved : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ColorMultiplyEffect._Resolved : SwiftUICore.ViewModifier {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.Canvas : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ClipEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ClipEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ClipEffect : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.SafeAreaRegions : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorScheme : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorScheme : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorSchemeContrast : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.ColorSchemeContrast : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.GestureMask : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._ScaleEffect : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore.RectangleCornerRadii : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HueRotationEffect : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HueRotationEffect : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_originallyDefinedIn(module: "SwiftUI", iOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", macOS 15.0)
@_originallyDefinedIn(module: "SwiftUI", tvOS 18.0)
@_originallyDefinedIn(module: "SwiftUI", watchOS 11.0)
extension SwiftUICore._HueRotationEffect : Swift.Sendable {}
