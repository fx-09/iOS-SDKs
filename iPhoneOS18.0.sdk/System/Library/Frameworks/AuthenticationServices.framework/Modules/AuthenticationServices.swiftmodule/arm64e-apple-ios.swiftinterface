// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.3.38 clang-1600.0.20.6)
// swift-module-flags: -target arm64e-apple-ios18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-bare-slash-regex -user-module-version 7619.1.15.10.1 -module-name AuthenticationServices
@_exported import AuthenticationServices
import CryptoKit
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import Security
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASPasskeyAssertionCredentialExtensionInput {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput? {
    get
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput? {
    get
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput? = nil, prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput? = nil)
  #else
  public init(largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput? = nil, prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput? = nil)
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.__ASPasskeyAssertionCredentialExtensionInput {
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASPasskeyAssertionCredentialExtensionOutput {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput? {
    get
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionOutput? {
    get
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionOutput? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput? = nil, prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionOutput? = nil)
  #else
  public init(largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput? = nil, prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionOutput? = nil)
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.__ASPasskeyAssertionCredentialExtensionOutput {
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASPasskeyRegistrationCredentialExtensionOutput {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput? {
    get
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput? {
    get
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput? = nil, prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput? = nil)
  #else
  public init(largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput? = nil, prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput? = nil)
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.__ASPasskeyRegistrationCredentialExtensionOutput {
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput? {
    get
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput? {
    get
  }
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationInput? {
    get
    set
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationInput? {
    get
    set
  }
  #endif
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput {
  public static var read: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput {
    get
  }
  public static func write(_ data: Foundation.Data) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput
  public enum Operation {
    case read
    case write(Foundation.Data)
  }
  public var operation: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput.Operation
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput {
  public static var supportRequired: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput {
    get
  }
  public static var supportPreferred: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput {
    get
  }
  public enum SupportRequirement {
    case required
    case preferred
    public static func == (a: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput.SupportRequirement, b: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput.SupportRequirement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var supportRequirement: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput.SupportRequirement
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func read(data: Foundation.Data?) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput
  #else
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func read(data: Foundation.Data?) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput
  #endif
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func write(success: Swift.Bool) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput
  public enum OperationResult {
    case read(data: Foundation.Data?)
    case write(success: Swift.Bool)
  }
  public var result: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput.OperationResult
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput {
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var supported: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput {
    get
  }
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var unsupported: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput {
    get
  }
  public var isSupported: Swift.Bool
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput? {
    get
    set
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput? {
    get
    set
  }
  #endif
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput? {
    get
    set
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput? {
    get
    set
  }
  #endif
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput? {
    get
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationOutput? {
    get
  }
  #endif
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput? {
    get
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobAssertionOutput? {
    get
  }
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialPRFAssertionInput {
  public struct InputValues {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(saltInput1: Foundation.Data, saltInput2: Foundation.Data? = nil)
    #else
    public init(saltInput1: Foundation.Data, saltInput2: Foundation.Data? = nil)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public static func saltInput1(_ saltInput1: Foundation.Data, saltInput2: Foundation.Data? = nil) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues
    #else
    public static func saltInput1(_ saltInput1: Foundation.Data, saltInput2: Foundation.Data? = nil) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues
    #endif
    public var saltInput1: Foundation.Data
    public var saltInput2: Foundation.Data?
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func inputValues(_ inputValues: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues, perCredentialInputValues: [Foundation.Data : AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues]? = nil) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput
  #else
  public static func inputValues(_ inputValues: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues, perCredentialInputValues: [Foundation.Data : AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues]? = nil) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput
  #endif
  public static func perCredentialInputValues(_ perCredentialInputValues: [Foundation.Data : AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues]) -> AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput
  public let inputValues: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues?
  public let perCredentialInputValues: [Foundation.Data : AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput.InputValues]?
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialPRFAssertionOutput {
  public let first: CryptoKit.SymmetricKey
  public let second: CryptoKit.SymmetricKey?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(first: CryptoKit.SymmetricKey, second: CryptoKit.SymmetricKey?)
  #else
  public init(first: CryptoKit.SymmetricKey, second: CryptoKit.SymmetricKey?)
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialPRFRegistrationInput {
  public static var checkForSupport: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationInput {
    get
  }
  public let shouldCheckForSupport: Swift.Bool
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASAuthorizationPublicKeyCredentialPRFRegistrationOutput {
  public static var supported: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput {
    get
  }
  public static var unsupported: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationOutput {
    get
  }
  public let isSupported: Swift.Bool
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.__ASAuthorizationPublicKeyCredentialPRFRegistrationInput {
  @objc public static var checkForSupport: AuthenticationServices.__ASAuthorizationPublicKeyCredentialPRFRegistrationInput {
    @objc get
  }
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASPasskeyCredentialRequestParameters {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var extensionInput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionInput? {
    get
  }
  #else
  public var extensionInput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionInput? {
    get
  }
  #endif
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorization : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorizationAppleIDCredential : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorizationAppleIDProvider : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorizationAppleIDRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorizationOpenIDRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorizationPasswordProvider : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorizationPasswordRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSingleSignOnCredential : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSingleSignOnProvider : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSingleSignOnRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASPasswordCredential : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialProvider : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPublicKeyCredentialParameters : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertion : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialProvider : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistration : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest : @unchecked Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension AuthenticationServices.ASAuthorizationRequest : @unchecked Swift.Sendable {
}
@available(macOS 13.3, macCatalyst 16.4, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ASAuthorizationWebBrowserPlatformPublicKeyCredential : Swift.Sendable {
  public let name: Swift.String
  @available(macOS 14.0, macCatalyst 17.0, *)
  public let customTitle: Swift.String
  public let relyingParty: Swift.String
  public let credentialID: Foundation.Data
  public let userHandle: Foundation.Data
  public let providerName: Swift.String
}
@available(macOS 13.3, macCatalyst 16.4, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension AuthenticationServices.ASAuthorizationWebBrowserPublicKeyCredentialManager {
  public func platformCredentials(forRelyingParty relyingParty: Swift.String) async -> [AuthenticationServices.ASAuthorizationWebBrowserPlatformPublicKeyCredential]
}
@available(macOS 13.5, macCatalyst 16.6, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationWebBrowserPlatformPublicKeyCredentialRegistrationRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #else
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #endif
}
@available(macOS 13.5, macCatalyst 16.6, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationWebBrowserPlatformPublicKeyCredentialAssertionRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #else
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #endif
}
@available(macOS 13.5, macCatalyst 16.6, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ASAuthorizationWebBrowserPlatformPublicKeyCredentialProvider {
  func createCredentialRegistrationRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData, name: Swift.String, userID: Foundation.Data) -> AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest
  @available(macOS 15.0, iOS 18.0, *)
  func createCredentialRegistrationRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData, name: Swift.String, userID: Foundation.Data, requestStyle: AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest.RequestStyle) -> AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest
  func createCredentialAssertionRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData) -> AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest
}
@available(macOS 13.5, macCatalyst 16.6, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialProvider : AuthenticationServices.ASAuthorizationWebBrowserPlatformPublicKeyCredentialProvider {
  public func createCredentialRegistrationRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData, name: Swift.String, userID: Foundation.Data) -> AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest
  public func createCredentialAssertionRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData) -> AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest
  @available(macOS 15.0, iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public func createCredentialRegistrationRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData, name: Swift.String, userID: Foundation.Data, requestStyle: AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest.RequestStyle) -> AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest
}
@available(macOS 14.4, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension AuthenticationServices.ASAuthorizationWebBrowserSecurityKeyPublicKeyCredentialAssertionRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #else
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #endif
}
@available(macOS 14.4, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension AuthenticationServices.ASAuthorizationWebBrowserSecurityKeyPublicKeyCredentialRegistrationRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #else
  public var clientData: AuthenticationServices.ASPublicKeyCredentialClientData? {
    get
  }
  #endif
}
@available(macOS 14.4, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ASAuthorizationWebBrowserSecurityKeyPublicKeyCredentialProvider {
  func createCredentialRegistrationRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData, displayName: Swift.String, name: Swift.String, userID: Foundation.Data) -> AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest
  func createCredentialAssertionRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData) -> AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest
}
@available(macOS 14.4, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialProvider : AuthenticationServices.ASAuthorizationWebBrowserSecurityKeyPublicKeyCredentialProvider {
  public func createCredentialRegistrationRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData, displayName: Swift.String, name: Swift.String, userID: Foundation.Data) -> AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest
  public func createCredentialAssertionRequest(clientData: AuthenticationServices.ASPublicKeyCredentialClientData) -> AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionOutput? {
    get
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionOutput? {
    get
  }
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASPasskeyAssertionCredential {
  #if compiler(>=5.3) && $NoncopyableGenerics
  convenience public init(userHandle: Foundation.Data, relyingParty: Swift.String, signature: Foundation.Data, clientDataHash: Foundation.Data, authenticatorData: Foundation.Data, credentialID: Foundation.Data, extensionOutput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionOutput?)
  #else
  convenience public init(userHandle: Foundation.Data, relyingParty: Swift.String, signature: Foundation.Data, clientDataHash: Foundation.Data, authenticatorData: Foundation.Data, credentialID: Foundation.Data, extensionOutput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionOutput?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var extensionOutput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionOutput? {
    get
    set
  }
  #else
  public var extensionOutput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionOutput? {
    get
    set
  }
  #endif
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASPasskeyCredentialIdentity {
  #if compiler(>=5.3) && $NoncopyableGenerics
  convenience public init(relyingPartyIdentifier: Swift.String, userName: Swift.String, credentialID: Foundation.Data, userHandle: Foundation.Data, recordIdentifier: Swift.String? = nil)
  #else
  convenience public init(relyingPartyIdentifier: Swift.String, userName: Swift.String, credentialID: Foundation.Data, userHandle: Foundation.Data, recordIdentifier: Swift.String? = nil)
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ASPasskeyRegistrationCredentialExtensionInput {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput? {
    get
  }
  #else
  public var largeBlob: AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationInput? {
    get
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFRegistrationInput? {
    get
  }
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.__ASPasskeyRegistrationCredentialExtensionInput {
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ASPasskeyCredentialExtensionInput {
  case none
  case assertion(AuthenticationServices.ASPasskeyAssertionCredentialExtensionInput)
  case registration(AuthenticationServices.ASPasskeyRegistrationCredentialExtensionInput)
}
@available(iOS 17.0, macOS 14.0, *)
extension AuthenticationServices.ASPasskeyCredentialRequest {
  convenience public init(credentialIdentity: AuthenticationServices.ASPasskeyCredentialIdentity, clientDataHash: Foundation.Data, userVerificationPreference: AuthenticationServices.ASAuthorizationPublicKeyCredentialUserVerificationPreference, supportedAlgorithms: [AuthenticationServices.ASCOSEAlgorithmIdentifier])
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  convenience public init(credentialIdentity: AuthenticationServices.ASPasskeyCredentialIdentity, clientDataHash: Foundation.Data, userVerificationPreference: AuthenticationServices.ASAuthorizationPublicKeyCredentialUserVerificationPreference, supportedAlgorithms: [AuthenticationServices.ASCOSEAlgorithmIdentifier], extensionInput: AuthenticationServices.ASPasskeyRegistrationCredentialExtensionInput?)
  #else
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  convenience public init(credentialIdentity: AuthenticationServices.ASPasskeyCredentialIdentity, clientDataHash: Foundation.Data, userVerificationPreference: AuthenticationServices.ASAuthorizationPublicKeyCredentialUserVerificationPreference, supportedAlgorithms: [AuthenticationServices.ASCOSEAlgorithmIdentifier], extensionInput: AuthenticationServices.ASPasskeyRegistrationCredentialExtensionInput?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  convenience public init(credentialIdentity: AuthenticationServices.ASPasskeyCredentialIdentity, clientDataHash: Foundation.Data, userVerificationPreference: AuthenticationServices.ASAuthorizationPublicKeyCredentialUserVerificationPreference, supportedAlgorithms: [AuthenticationServices.ASCOSEAlgorithmIdentifier], extensionInput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionInput?)
  #else
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  convenience public init(credentialIdentity: AuthenticationServices.ASPasskeyCredentialIdentity, clientDataHash: Foundation.Data, userVerificationPreference: AuthenticationServices.ASAuthorizationPublicKeyCredentialUserVerificationPreference, supportedAlgorithms: [AuthenticationServices.ASCOSEAlgorithmIdentifier], extensionInput: AuthenticationServices.ASPasskeyAssertionCredentialExtensionInput?)
  #endif
  public var supportedAlgorithms: [AuthenticationServices.ASCOSEAlgorithmIdentifier] {
    get
  }
  @available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var extensionInput: AuthenticationServices.ASPasskeyCredentialExtensionInput {
    get
  }
}
@available(macOS 14.4, iOS 17.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASCredentialIdentityStore {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func credentialIdentities(forService serviceIdentifier: AuthenticationServices.ASCredentialServiceIdentifier? = nil, credentialIdentityTypes: AuthenticationServices.ASCredentialIdentityStore.IdentityTypes = []) async -> [any AuthenticationServices.ASCredentialIdentity]
  #else
  public func credentialIdentities(forService serviceIdentifier: AuthenticationServices.ASCredentialServiceIdentifier? = nil, credentialIdentityTypes: AuthenticationServices.ASCredentialIdentityStore.IdentityTypes = []) async -> [any AuthenticationServices.ASCredentialIdentity]
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASPasskeyRegistrationCredential {
  #if compiler(>=5.3) && $NoncopyableGenerics
  convenience public init(relyingParty: Swift.String, clientDataHash: Foundation.Data, credentialID: Foundation.Data, attestationObject: Foundation.Data, extensionOutput: AuthenticationServices.ASPasskeyRegistrationCredentialExtensionOutput?)
  #else
  convenience public init(relyingParty: Swift.String, clientDataHash: Foundation.Data, credentialID: Foundation.Data, attestationObject: Foundation.Data, extensionOutput: AuthenticationServices.ASPasskeyRegistrationCredentialExtensionOutput?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var extensionOutput: AuthenticationServices.ASPasskeyRegistrationCredentialExtensionOutput? {
    get
    set
  }
  #else
  public var extensionOutput: AuthenticationServices.ASPasskeyRegistrationCredentialExtensionOutput? {
    get
    set
  }
  #endif
}
@available(macOS 13.5, macCatalyst 16.6, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ASPublicKeyCredentialClientData : Swift.Sendable {
  public enum CrossOriginValue : Swift.Sendable {
    case crossOrigin
    case sameOriginWithAncestors
    public static func == (a: AuthenticationServices.ASPublicKeyCredentialClientData.CrossOriginValue, b: AuthenticationServices.ASPublicKeyCredentialClientData.CrossOriginValue) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var challenge: Foundation.Data
  public var origin: Swift.String
  public var topOrigin: Swift.String?
  public var crossOrigin: AuthenticationServices.ASPublicKeyCredentialClientData.CrossOriginValue?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(challenge: Foundation.Data, origin: Swift.String, topOrigin: Swift.String? = nil, crossOrigin: AuthenticationServices.ASPublicKeyCredentialClientData.CrossOriginValue? = nil)
  #else
  public init(challenge: Foundation.Data, origin: Swift.String, topOrigin: Swift.String? = nil, crossOrigin: AuthenticationServices.ASPublicKeyCredentialClientData.CrossOriginValue? = nil)
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput? {
    get
    set
  }
  #else
  public var prf: AuthenticationServices.ASAuthorizationPublicKeyCredentialPRFAssertionInput? {
    get
    set
  }
  #endif
}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput.SupportRequirement : Swift.Equatable {}
@available(macOS 14.0, iOS 17.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension AuthenticationServices.ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput.SupportRequirement : Swift.Hashable {}
@available(macOS 13.5, macCatalyst 16.6, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension AuthenticationServices.ASPublicKeyCredentialClientData.CrossOriginValue : Swift.Equatable {}
@available(macOS 13.5, macCatalyst 16.6, iOS 17.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension AuthenticationServices.ASPublicKeyCredentialClientData.CrossOriginValue : Swift.Hashable {}
