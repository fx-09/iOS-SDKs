// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.3.38 clang-1600.0.20.6)
// swift-module-flags: -target arm64-apple-ios18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -enable-experimental-feature Macros -enable-experimental-feature ExtensionMacros -enable-experimental-feature IsolatedAny -enable-bare-slash-regex -user-module-version 6.0.70.5.103 -module-name SwiftUI -package-name SwiftUI
@_spi(SceneConnectionOptionDefinition) @_spi(SceneConnectionOptionDefinition_SwiftUIBridging) @_spi(Uniquely) @_spi(AnimationBridging) @_spi(UICollectionLayoutList) @_spi(MasteredOut) @_spi(UITrait) @_spi(UIIntelligenceSupport) @_spi(ForSwiftUIOnly) import Accessibility
@_spiOnly import AttributeGraph
@_spi(ObservableObject) import Combine
import CoreData
@_spi(Private) import CoreFoundation
@_exported import CoreGraphics
@_exported @_spi(Transferable) @_spi(Private) import CoreTransferable
import Darwin
@_exported @_spi(ResourceSymbols) @_spi(Previews) @_spi(SceneConnectionOptionDefinition) @_spi(SceneConnectionOptionDefinition_SwiftUIBridging) @_spi(Uniquely) @_spi(AnimationBridging) @_spi(UICollectionLayoutList) @_spi(MasteredOut) @_spi(UITrait) @_spi(InReview) @_spi(UIIntelligenceSupport) @_spi(ForSwiftUIOnly) import DeveloperToolsSupport
@_spi(AttributedString) import Foundation
@_spiOnly import MobileGestaltPrivate
@_spiOnly import UIFoundation_Private.NSCustomTextRendering
@_spiOnly import UIFoundation_Private.NSEmojiImageTextAttachment
@_spiOnly import UIFoundation_Private.NSTextAnimationProvider
import OSLog
@_spi(AttributedString) @_spi(SwiftUI) import Observation
@_spiOnly import RecapPerformanceTesting.RPTTestParameters
@_spiOnly import RecapPerformanceTesting
@_spiOnly import RenderBox
import Spatial
@_spi(Reflection) import Swift
@_exported import SwiftUI
@_exported @_spi(ForSwiftUIOnly) @_spi(Private) @_spi(ClarityBoard) @_spi(Testing) @_spi(UIFrameworks) @_spi(RemoteEffects) @_spi(CustomHoverEffects) @_spi(DisplayList_ViewSystem) @_spi(SystemUI) @_spi(DoNotImport) import SwiftUICore
@_spi(Private) import Symbols
@_spiOnly import UIFoundation_Private
@_spiOnly @_spi(UIIntelligenceElementCollector) import UIIntelligenceSupport
@_spi(SceneConnectionOptionDefinition) @_spi(SceneConnectionOptionDefinition_SwiftUIBridging) @_spi(Uniquely) @_spi(AnimationBridging) @_spi(UICollectionLayoutList) @_spi(MasteredOut) @_spi(UITrait) @_spi(UIIntelligenceSupport) @_spi(ForSwiftUIOnly) import UIKit
@_spiOnly import UIKit_Private
@_spiOnly @_spi(Private) import UIKit_Private
@_spiOnly import UIKit_Private.UITabBarControllerSidebar_Private
@_spiOnly import UIKit_Private.UITabBarController_Private
@_spiOnly import UIKit_Private.UITab_Private
@_spiOnly import UIKit_Private.UIViewController_UniquelyiPad
@_spi(Private) import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import simd
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityValue(_ valueDescription: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityValue<S>(_ value: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  @_spi(Uniquely) nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_spi(Uniquely) nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_spi(Uniquely) @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityValue(_ valueDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityValue(_ valueKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityValue<S>(_ value: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func accessibilityValue(_ value: Swift.Int) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityValue(percentage value: Swift.Double) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) nonisolated public func accessibilityValue(_ value: Swift.Int) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityValue(percentage value: Swift.Double) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func accessibilityValue<T>(_ value: T, from lowerBound: T? = nil, to upperBound: T? = nil, description: SwiftUICore.Text? = nil) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where T : Swift.Numeric
  #else
  @_spi(Private) nonisolated public func accessibilityValue<T>(_ value: T, from lowerBound: T? = nil, to upperBound: T? = nil, description: SwiftUICore.Text? = nil) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where T : Swift.Numeric
  #endif
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func accessibilityValue<T>(_ value: T, from lowerBound: T? = nil, to upperBound: T? = nil, description: SwiftUICore.Text? = nil) -> SwiftUICore.ModifiedContent<Content, Modifier> where T : Swift.Numeric
  #else
  @_spi(Private) nonisolated public func accessibilityValue<T>(_ value: T, from lowerBound: T? = nil, to upperBound: T? = nil, description: SwiftUICore.Text? = nil) -> SwiftUICore.ModifiedContent<Content, Modifier> where T : Swift.Numeric
  #endif
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  nonisolated public func accessibility(value: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityValue(_:)")
  nonisolated public func accessibility(value: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var accessibilityLargeContentViewerEnabled: Swift.Bool {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var _accessibilityLargeContentViewerEnabled: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func accessibilityShowsLargeContentViewer<V>(@SwiftUICore.ViewBuilder _ largeContentView: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func accessibilityShowsLargeContentViewer() -> some SwiftUICore.View
  
}
@_spi(DoNotImportVariadicView) @available(*, deprecated, message: "Use Group(subviewsOf:) and check if the collection is empty instead. This API does not report empty when the view is not statically known to be empty.")
@_Concurrency.MainActor @preconcurrency public struct AsOptional<Base, Result> : SwiftUICore.View, SwiftUICore.PrimitiveView, SwiftUICore.MultiView where Base : SwiftUICore.View, Result : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImportVariadicView) nonisolated public init(_ view: Base, @SwiftUICore.ViewBuilder transform: @escaping (Base?) -> Result)
  #else
  @_spi(DoNotImportVariadicView) nonisolated public init(_ view: Base, @SwiftUICore.ViewBuilder transform: @escaping (Base?) -> Result)
  #endif
  @_spi(DoNotImportVariadicView) nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.AsOptional<Base, Result>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @_spi(DoNotImportVariadicView) @available(*, deprecated, message: "Use Group(subviewsOf:) and check if the collection is empty instead. This API does not report empty when the view is not statically known to be empty.")
  @available(iOS, introduced: 13.0, message: "Use Group(subviewsOf:) and check if the collection is empty instead. This API does not report empty when the view is not statically known to be empty.")
  @available(tvOS, introduced: 13.0, message: "Use Group(subviewsOf:) and check if the collection is empty instead. This API does not report empty when the view is not statically known to be empty.")
  @available(watchOS, introduced: 6.0, message: "Use Group(subviewsOf:) and check if the collection is empty instead. This API does not report empty when the view is not statically known to be empty.")
  @available(macOS, introduced: 10.15, message: "Use Group(subviewsOf:) and check if the collection is empty instead. This API does not report empty when the view is not statically known to be empty.")
  public typealias Body = Swift.Never
}
@_spi(DoNotImportVariadicView) @available(*, unavailable)
extension SwiftUI.AsOptional : Swift.Sendable {
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #endif
}
extension SwiftUI.TextField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput?>, format: F, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput>, format: F, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where F : Foundation.ParseableFormatStyle, F.FormatOutput == Swift.String
  #endif
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text?)
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
  #endif
}
extension SwiftUI.TextField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: {})
    }
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onCommit: @escaping () -> Swift.Void) {
        self.init(
            titleKey, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:value:formatter:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, formatter: Foundation.Formatter, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, value: value, formatter: formatter,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerContent {
  @_spi(Private) public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> SwiftUI._OnHoverPickerContent<Self>
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _OnHoverPickerContent<Base> : SwiftUI.PickerContent where Base : SwiftUI.PickerContent {
  @_spi(Private) public typealias SelectionValue = Base.SelectionValue
  @_spi(Private) public var _identifiedView: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 16.0)
  @available(watchOS, unavailable, introduced: 9.0)
  public typealias Body = SwiftUI._OnHoverPickerContent<Base>
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 16.0)
  @available(watchOS, unavailable, introduced: 9.0)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI21_OnHoverPickerContentV15_identifiedViewQrvp", 0) __<Base>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._OnHoverPickerContent : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct RichTextEditor : SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public init(text: SwiftUICore.Binding<Foundation.AttributedString>)
  @_spi(DoNotImport) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14RichTextEditorV4bodyQrvp", 0) __
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.RichTextEditor : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SceneRestorationBehavior : Swift.Sendable {
  public static let automatic: SwiftUI.SceneRestorationBehavior
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let disabled: SwiftUI.SceneRestorationBehavior
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Scene {
  nonisolated public func restorationBehavior(_ behavior: SwiftUI.SceneRestorationBehavior) -> some SwiftUI.Scene
  
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "SceneRestorationBehavior")
public struct StateRestorationBehavior : Swift.Sendable {
  @_spi(DoNotImport) public static let automatic: SwiftUI.StateRestorationBehavior
  @_spi(DoNotImport) public static let enabled: SwiftUI.StateRestorationBehavior
  @_spi(DoNotImport) public static let disabled: SwiftUI.StateRestorationBehavior
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) @available(*, deprecated, renamed: "restorationBehavior(_:)")
  nonisolated public func stateRestorationBehavior(_ behavior: SwiftUI.StateRestorationBehavior) -> some SwiftUI.Scene
  
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 7.0, deprecated: 100000.0)
@available(visionOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.CarouselTabViewStyle {
  @_alwaysEmitIntoClient public static var carousel: SwiftUI.CarouselTabViewStyle {
    get { .init() }
  }
  @_spi(Private) @available(watchOS 9.0, *)
  public static func carousel(crownIndicatorMode: SwiftUI.CarouselTabViewStyle.CrownIndicatorMode) -> SwiftUI.CarouselTabViewStyle
  @_spi(Private) @available(watchOS 10.0, *)
  public static func carousel(pagingStyle: SwiftUI.CarouselTabViewStyle.PagingStyle) -> SwiftUI.CarouselTabViewStyle
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 7.0, deprecated: 100000.0, renamed: "VerticalTabViewStyle")
@available(visionOS, unavailable)
public struct CarouselTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  @_spi(Private) @available(watchOS 9.0, *)
  public init(crownIndicatorMode: SwiftUI.CarouselTabViewStyle.CrownIndicatorMode)
  @_spi(Private) @available(watchOS 10.0, *)
  public init(pagingStyle: SwiftUI.CarouselTabViewStyle.PagingStyle)
  @_spi(Private) @available(watchOS 9.0, *)
  public struct CrownIndicatorMode {
    @_spi(Private) public static let `default`: SwiftUI.CarouselTabViewStyle.CrownIndicatorMode
    @_spi(Private) public static let pageDots: SwiftUI.CarouselTabViewStyle.CrownIndicatorMode
    @_spi(Private) public static let system: SwiftUI.CarouselTabViewStyle.CrownIndicatorMode
  }
  @_spi(Private) @available(watchOS 10.0, *)
  public struct PagingStyle {
    @_spi(Private) public static let `default`: SwiftUI.CarouselTabViewStyle.PagingStyle
    @_spi(Private) public static let blur: SwiftUI.CarouselTabViewStyle.PagingStyle
    @_spi(Private) public static let rotate: SwiftUI.CarouselTabViewStyle.PagingStyle
    @_spi(Private) public static let plain: SwiftUI.CarouselTabViewStyle.PagingStyle
  }
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.CarouselTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.CarouselTabViewStyle : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CarouselTabViewStyle.CrownIndicatorMode : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CarouselTabViewStyle.PagingStyle : Swift.Sendable {
}
@_spi(SwiftDataDocuments) @objc @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency open class PlatformDocument : UIKit.UIDocument {
  @_spi(SwiftDataDocuments) @_Concurrency.MainActor @preconcurrency final public let documentBox: any SwiftUI.ObservableDocumentBox
  @_spi(SwiftDataDocuments) @_Concurrency.MainActor @preconcurrency required public init(fileURL url: Foundation.URL, documentBoxType: any SwiftUI.ObservableDocumentBox.Type)
  @_spi(SwiftDataDocuments) @objc deinit
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitDynamicPropertyCache {
  @_spi(ForMapKitOnly) public struct Fields {
  }
  @_spi(ForMapKitOnly) public static func fields(of type: any Any.Type) -> SwiftUI.MapKitDynamicPropertyCache.Fields
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitDynamicPropertyCache : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitDynamicPropertyCache.Fields : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public protocol MapKitBodyAccessor {
  associatedtype Container
  associatedtype Body
  @_spi(ForMapKitOnly) func updateBody(of value: Self.Container, changed: Swift.Bool)
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.MapKitBodyAccessor {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) public func makeBody(container: SwiftUICore._GraphValue<Self.Container>, inputs: inout SwiftUI.MapKitGraphInputs, fields: SwiftUI.MapKitDynamicPropertyCache.Fields) -> (SwiftUICore._GraphValue<Self.Body>, SwiftUI.MapKitDynamicPropertyBuffer?)
  #else
  @_spi(ForMapKitOnly) public func makeBody(container: SwiftUICore._GraphValue<Self.Container>, inputs: inout SwiftUI.MapKitGraphInputs, fields: SwiftUI.MapKitDynamicPropertyCache.Fields) -> (SwiftUICore._GraphValue<Self.Body>, SwiftUI.MapKitDynamicPropertyBuffer?)
  #endif
  @_spi(ForMapKitOnly) public func setBody(_ body: () -> Self.Body)
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitDynamicPropertyBuffer {
  @_spi(ForMapKitOnly) public func traceMountedProperties<T>(to graphValue: SwiftUICore._GraphValue<T>, fields: SwiftUI.MapKitDynamicPropertyCache.Fields)
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitDynamicPropertyBuffer : Swift.Sendable {
}
@available(iOS 16.4, tvOS 16.4, *)
@available(macOS, unavailable)
extension SwiftUI.UIHostingController {
  @available(iOS 16.4, tvOS 16.4, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var safeAreaRegions: SwiftUICore.SafeAreaRegions {
    get
    set
  }
}
@_spi(ForWeatherOnly) extension SwiftUICore.View {
  @_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public func navigationSplitColumnWidth(_ width: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public func navigationSplitColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public func navigationSplitColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func navigationSplitViewColumnWidth(_ width: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func navigationSplitViewColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #else
  nonisolated public func navigationSplitViewColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
public protocol LazyLayoutReuseIdleValue {
  @_spi(Private) static var timeToLive: Swift.Int { get }
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
  nonisolated public func lazyLayoutReuseIdle<V>(_ idle: V.Type = V.self) -> some SwiftUICore.View where V : SwiftUI.LazyLayoutReuseIdleValue
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(@SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #else
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #endif
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen public enum AccessibilityLabeledPairRole {
  case label
  case content
  public static func == (a: SwiftUI.AccessibilityLabeledPairRole, b: SwiftUI.AccessibilityLabeledPairRole) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityLabeledPairRole : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLinkedGroup<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View where ID : Swift.Hashable
  
  nonisolated public func accessibilityLabeledPair<ID>(role: SwiftUI.AccessibilityLabeledPairRole, id: ID, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View where ID : Swift.Hashable
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MenuButton<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  nonisolated public init(label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS, unavailable, introduced: 13.0, message: "Use `Menu` instead.")
  @available(tvOS, unavailable, introduced: 13.0, message: "Use `Menu` instead.")
  @available(watchOS, unavailable, introduced: 6.0, message: "Use `Menu` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
  @available(visionOS, unavailable, message: "Use `Menu` instead.")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10MenuButtonV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.MenuButton : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `Menu` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuButton where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
@frozen internal struct LimitedAvailabilityTableColumnContent<TableRowValue, TableColumnSortComparator> : SwiftUI.TableColumnContent where TableRowValue : Swift.Identifiable, TableColumnSortComparator : Foundation.SortComparator {
  public typealias TableRowValue = TableRowValue
  public typealias TableColumnSortComparator = TableColumnSortComparator
  public typealias TableColumnBody = Swift.Never
  internal let storage: SwiftUI.LimitedAvailabilityTableColumnContentStorageBase<TableRowValue, TableColumnSortComparator>
  @usableFromInline
  internal init(erasing: some TableColumnContent<TableRowValue, TableColumnSortComparator>)
  public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityTableColumnContent<TableRowValue, TableColumnSortComparator>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int? {
        return nil
    }
  #else
  @_alwaysEmitIntoClient public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int? {
        return nil
    }
  #endif
  public var tableColumnBody: Swift.Never {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityTableColumnContent : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal class LimitedAvailabilityTableColumnContentStorageBase<TableRowValue, TableColumnSortComparator> where TableRowValue : Swift.Identifiable, TableColumnSortComparator : Foundation.SortComparator {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityTableColumnContentStorageBase : Swift.Sendable {
}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public enum _DigitalCrownDecelerationRate {
  @_spi(Private) case immediate
  @_spi(Private) case fast
  @_spi(Private) case normal
  @_spi(Private) public static func == (a: SwiftUI._DigitalCrownDecelerationRate, b: SwiftUI._DigitalCrownDecelerationRate) -> Swift.Bool
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DigitalCrownDecelerationRate : Swift.Sendable {
}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct _DigitalCrownConfiguration {
  @_spi(Private) public var crownHapticsConfiguration: SwiftUI._CrownHapticsConfiguration {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) public var _isScrollIndicatorAlwaysOnScreen: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) public var _onlyUseMinorDetents: Swift.Bool
  @_spi(Private) public var _decelerationRate: SwiftUI._DigitalCrownDecelerationRate
  @_spi(Private) public var _hapticsStrength: SwiftUI._CrownHapticsConfiguration.Notch.Strength
  @_spi(Private) public var isContinuous: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) public var shouldShowScrollIndicator: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) public var isHapticFeedbackEnabled: Swift.Bool
  @_spi(Private) public var rotationalSensitivity: SwiftUI.DigitalCrownRotationalSensitivity
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_disfavoredOverload public init(minValue: Swift.Double, maxValue: Swift.Double, stride: Swift.Double.Stride? = nil)
  #else
  @_spi(Private) @_disfavoredOverload public init(minValue: Swift.Double, maxValue: Swift.Double, stride: Swift.Double.Stride? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public init(minValue: Swift.Double, maxValue: Swift.Double, stride: Swift.Double.Stride? = nil, isRubberBandingEnabled: Swift.Bool? = nil)
  #else
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public init(minValue: Swift.Double, maxValue: Swift.Double, stride: Swift.Double.Stride? = nil, isRubberBandingEnabled: Swift.Bool? = nil)
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DigitalCrownConfiguration : Swift.Sendable {
}
@_spi(Private) @available(macCatalyst 16.2, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func navigationSplitViewOpaqueBackground() -> some SwiftUICore.View {
        _trait(NavigationSplitViewOpaqueBackgroundTraitKey.self, true)
    }
  
}
@available(macCatalyst 16.2, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct NavigationSplitViewOpaqueBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(macCatalyst 16.2, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.NavigationSplitViewOpaqueBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func handGestureShortcut(_ shortcut: SwiftUI.HandGestureShortcut, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@available(visionOS, unavailable)
public struct HandGestureShortcut : Swift.Sendable, Swift.Equatable {
  public static let primaryAction: SwiftUI.HandGestureShortcut
  public static func == (a: SwiftUI.HandGestureShortcut, b: SwiftUI.HandGestureShortcut) -> Swift.Bool
}
@_spi(Widget) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.View {
  @_spi(Widget) nonisolated public func addingHandGestureShortcutPlatformLayer() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public enum PlatterButtonType : Swift.Sendable {
  @_spi(Private) case roundedRectangle
  @_spi(Private) case ultraRoundedRectangle
  @_spi(Private) case customRoundedRectangle(CoreFoundation.CGFloat)
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PlatterButtonStyleView<Background> : SwiftUICore.View where Background : SwiftUICore.ShapeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) nonisolated public init(configuration: SwiftUI.ButtonStyleConfiguration, background: Background, foregroundColor: SwiftUICore.Color, type: SwiftUI.PlatterButtonType, includesPadding: Swift.Bool)
  @_spi(Private) @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22PlatterButtonStyleViewV4bodyQrvp", 0) __<Background>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PlatterButtonStyleView : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PlatterShadowedContent<Content, Shape> : SwiftUICore.View where Content : SwiftUICore.View, Shape : SwiftUICore.InsettableShape {
  @_spi(Private) nonisolated public init(shape: Shape, isPressed: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22PlatterShadowedContentV4bodyQrvp", 0) __<Content, Shape>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PlatterShadowedContent : Swift.Sendable {
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Settings<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 11.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8SettingsV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.Settings : Swift.Sendable {
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
public protocol _PerformanceTest : SwiftUICore._Test {
  var name: Swift.String { get }
  func runTest(host: any SwiftUICore._BenchmarkHost, options: [Swift.AnyHashable : Any])
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__App {
  public static func _registerPerformanceTests(_ tests: [any SwiftUI._PerformanceTest])
}
@available(iOS 13.0, macOS 12.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._BenchmarkHost {
  public func _started(test: any SwiftUI._PerformanceTest)
  public func _finished(test: any SwiftUI._PerformanceTest)
  public func _failed(test: any SwiftUI._PerformanceTest)
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Scene {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func extendedLaunchTestName(_ name: Swift.String?) -> some SwiftUI.Scene
  
  #else
  @_spi(Private) nonisolated public func extendedLaunchTestName(_ name: Swift.String?) -> some SwiftUI.Scene
  
  #endif
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct FinishLaunchTestAction {
  @_spi(Private) public func callAsFunction()
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.FinishLaunchTestAction : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var finishLaunchTest: SwiftUI.FinishLaunchTestAction {
    @_spi(Private) get
  }
}
@_spi(Private) @objc @_inheritsConvenienceInitializers @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public class ClarityUIWindowScene : UIKit.UIWindowScene {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(session: UIKit.UISceneSession, connectionOptions: UIKitCore.UIScene.ConnectionOptions)
  @_spi(Private) @objc deinit
}
@available(iOS 17.0, macOS 13.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowResizability : Swift.Sendable {
  public static var automatic: SwiftUI.WindowResizability {
    get
    set
  }
  public static var contentSize: SwiftUI.WindowResizability {
    get
    set
  }
  public static var contentMinSize: SwiftUI.WindowResizability {
    get
    set
  }
}
@available(iOS 17.0, macOS 13.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowResizability(_ resizability: SwiftUI.WindowResizability) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum __App {
}
@available(*, unavailable)
extension SwiftUI.__App : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.__App {
  public static func run<V>(_ rootView: V) -> Swift.Never where V : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol ListStyle {
  static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ListValue<Style, SelectionValue> where Style : SwiftUI.ListStyle, SelectionValue : Swift.Hashable {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var content: some SwiftUICore.View {
    get
  }
}
@available(*, unavailable)
extension SwiftUI._ListValue : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func listStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ListStyle
  
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func drawsRowSeparators(_ drawsRowSeparators: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyControlWidgetConfiguration : SwiftUI.ControlWidgetConfiguration {
  public typealias Body = Swift.Never
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(*, unavailable)
extension SwiftUI.EmptyControlWidgetConfiguration : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowLevel : Swift.Sendable, Swift.Hashable {
  public static var automatic: SwiftUI.WindowLevel {
    get
  }
  public static var desktop: SwiftUI.WindowLevel {
    get
  }
  public static var floating: SwiftUI.WindowLevel {
    get
  }
  public static var normal: SwiftUI.WindowLevel {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.WindowLevel, b: SwiftUI.WindowLevel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowLevel(_ level: SwiftUI.WindowLevel) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._TestApp {
  public func run() -> Swift.Never
}
@_spi(ForAVKitOnly) @available(iOS 17.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(ForAVKitOnly) nonisolated public func avKitOnCaptureButtonPress(isEnabled: Swift.Bool = true, perform action: @escaping (SwiftUI.AVKitPressableCaptureButton, SwiftUI.AVKitPressableCaptureButton.Phase) -> Swift.Void) -> some SwiftUICore.View
  
}
@_spi(ForAVKitOnly) @available(iOS 17.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct AVKitPressableCaptureButton : Swift.Equatable, Swift.Hashable {
  @_spi(ForAVKitOnly) public static let primary: SwiftUI.AVKitPressableCaptureButton
  @_spi(ForAVKitOnly) public static let secondary: SwiftUI.AVKitPressableCaptureButton
  @_spi(ForAVKitOnly) public enum Phase : Swift.Equatable {
    @_spi(ForAVKitOnly) case began
    @_spi(ForAVKitOnly) case changed
    @_spi(ForAVKitOnly) case ended
    @_spi(ForAVKitOnly) case cancelled
    @_spi(ForAVKitOnly) case unknown
    @_spi(ForAVKitOnly) public func hash(into hasher: inout Swift.Hasher)
    @_spi(ForAVKitOnly) public static func == (a: SwiftUI.AVKitPressableCaptureButton.Phase, b: SwiftUI.AVKitPressableCaptureButton.Phase) -> Swift.Bool
    @_spi(ForAVKitOnly) public var hashValue: Swift.Int {
      @_spi(ForAVKitOnly) get
    }
  }
  @_spi(ForAVKitOnly) public static func == (a: SwiftUI.AVKitPressableCaptureButton, b: SwiftUI.AVKitPressableCaptureButton) -> Swift.Bool
  @_spi(ForAVKitOnly) public func hash(into hasher: inout Swift.Hasher)
  @_spi(ForAVKitOnly) public var hashValue: Swift.Int {
    @_spi(ForAVKitOnly) get
  }
}
@_spi(ForAVKitOnly) @available(*, unavailable)
extension SwiftUI.AVKitPressableCaptureButton : Swift.Sendable {
}
@_spi(ForAVKitOnly) @available(*, unavailable)
extension SwiftUI.AVKitPressableCaptureButton.Phase : Swift.Sendable {
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributedString {
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func transformingEquivalentAttributes(from scopeFrom: Swift.KeyPath<Foundation.AttributeScopes, Foundation.AttributeScopes.UIKitAttributes.Type>, to scopeTo: Swift.KeyPath<Foundation.AttributeScopes, Foundation.AttributeScopes.SwiftUIAttributes.Type>) -> Foundation.AttributedString
}
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
extension Foundation.AttributedSubstring {
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  public func transformingEquivalentAttributes(from scopeFrom: Swift.KeyPath<Foundation.AttributeScopes, Foundation.AttributeScopes.UIKitAttributes.Type>, to scopeTo: Swift.KeyPath<Foundation.AttributeScopes, Foundation.AttributeScopes.SwiftUIAttributes.Type>) -> Foundation.AttributedString
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `View.confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
public struct ActionSheet {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, buttons: [SwiftUI.ActionSheet.Button] = [.cancel()])
  #else
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, buttons: [SwiftUI.ActionSheet.Button] = [.cancel()])
  #endif
  public typealias Button = SwiftUI.Alert.Button
}
@available(*, unavailable)
extension SwiftUI.ActionSheet : Swift.Sendable {
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  nonisolated public func actionSheet<T>(item: SwiftUICore.Binding<T?>, content: (T) -> SwiftUI.ActionSheet) -> some SwiftUICore.View where T : Swift.Identifiable
  
  #else
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  nonisolated public func actionSheet<T>(item: SwiftUICore.Binding<T?>, content: (T) -> SwiftUI.ActionSheet) -> some SwiftUICore.View where T : Swift.Identifiable
  
  #endif
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting::actions:)`instead.")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `confirmationDialog(title:isPresented:titleVisibility:presenting:actions:)`instead.")
  nonisolated public func actionSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, content: () -> SwiftUI.ActionSheet) -> some SwiftUICore.View
  
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where RowValue == C.TableRowValue, Sort == C.TableColumnSortComparator, C : SwiftUI.TableColumnContent {
        content
    }
  #else
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where RowValue == C.TableRowValue, Sort == C.TableColumnSortComparator, C : SwiftUI.TableColumnContent {
        content
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildIf<C>(_ content: C?) -> C? where RowValue == C.TableRowValue, C : SwiftUI.TableColumnContent, C.TableColumnSortComparator == Swift.Never {
        content
    }
  #else
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildIf<C>(_ content: C?) -> C? where RowValue == C.TableRowValue, C : SwiftUI.TableColumnContent, C.TableColumnSortComparator == Swift.Never {
        content
    }
  #endif
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, Sort == T.TableColumnSortComparator, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == F.TableColumnSortComparator, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == Swift.Never, T.TableRowValue == F.TableRowValue, F.TableColumnSortComparator == Swift.Never {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, Sort == T.TableColumnSortComparator, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == F.TableColumnSortComparator, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where RowValue == T.TableRowValue, T : SwiftUI.TableColumnContent, F : SwiftUI.TableColumnContent, T.TableColumnSortComparator == Swift.Never, T.TableRowValue == F.TableRowValue, F.TableColumnSortComparator == Swift.Never {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
}
@available(iOS 17.5, macOS 14.5, visionOS 1.2, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.TableColumnContent<RowValue, Sort>) -> some SwiftUI.TableColumnContent<RowValue, Sort> {
        if #unavailable(iOS 17.5, macOS 14.5, visionOS 1.2) {
            return TupleTableColumnContent((), valueType: RowValue.self, sortType: Sort.self)
        } else {
            return LimitedAvailabilityTableColumnContent<_, _>(erasing: content)
        }
    }
  
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildLimitedAvailability(_ content: any SwiftUI.TableColumnContent<RowValue, Swift.Never>) -> some SwiftUI.TableColumnContent<RowValue, Swift.Never> {
        if #unavailable(iOS 17.5, macOS 14.5, visionOS 1.2) {
            return TupleTableColumnContent((), valueType: RowValue.self, sortType: Never.self)
        } else {
            return LimitedAvailabilityTableColumnContent<_, _>(erasing: content)
        }
    }
  
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._ConditionalContent : SwiftUI.TableColumnContent where TrueContent : SwiftUI.TableColumnContent, FalseContent : SwiftUI.TableColumnContent {
  public typealias TableRowValue = TrueContent.TableRowValue
  public typealias TableColumnSortComparator = TrueContent.TableColumnSortComparator
  public typealias TableRowBody = Swift.Never
  public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias TableColumnBody = Swift.Never
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.TableColumnContent where Wrapped : SwiftUI.TableColumnContent {
  public typealias TableRowValue = Wrapped.TableRowValue
  public typealias TableColumnSortComparator = Wrapped.TableColumnSortComparator
  public typealias TableRowBody = Swift.Never
  public static func _makeContent(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableColumnBody = Swift.Never
}
#else
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.TableColumnContent where Wrapped : SwiftUI.TableColumnContent {
  public typealias TableRowValue = Wrapped.TableRowValue
  public typealias TableColumnSortComparator = Wrapped.TableColumnSortComparator
  public typealias TableRowBody = Swift.Never
  public static func _makeContent(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableColumnBody = Swift.Never
}
#endif
@_spi(DoNotImport) @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyTableColumnContent<Value> : SwiftUI.TableColumnContent where Value : Swift.Identifiable {
  @_spi(DoNotImport) public typealias TableRowValue = Value
  @_spi(DoNotImport) public typealias TableColumnSortComparator = Swift.Never
  @_spi(DoNotImport) public typealias TableColumnBody = Swift.Never
  @_spi(DoNotImport) public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.EmptyTableColumnContent<Value>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  @_spi(DoNotImport) public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.EmptyTableColumnContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLabel<V>(@SwiftUICore.ViewBuilder content: (_ label: SwiftUICore.PlaceholderContentView<Self>) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  @_spi(Uniquely) nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_spi(Uniquely) nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_spi(Uniquely) @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityLabel(_ label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityLabel<S>(_ label: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityLabel(_ label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityLabel<S>(_ label: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AnyTransition {
  public static var slide: SwiftUICore.AnyTransition {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition where Self == SwiftUI.SlideTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var slide: SwiftUI.SlideTransition {
    get { Self() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct SlideTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.SlideTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15SlideTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SlideTransition : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
public struct SensoryFeedback : Swift.Equatable, Swift.Sendable {
  public static let success: SwiftUI.SensoryFeedback
  public static let warning: SwiftUI.SensoryFeedback
  public static let error: SwiftUI.SensoryFeedback
  public static let selection: SwiftUI.SensoryFeedback
  public static let increase: SwiftUI.SensoryFeedback
  public static let decrease: SwiftUI.SensoryFeedback
  public static let start: SwiftUI.SensoryFeedback
  public static let stop: SwiftUI.SensoryFeedback
  public static let alignment: SwiftUI.SensoryFeedback
  public static let levelChange: SwiftUI.SensoryFeedback
  @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
  public static let pathComplete: SwiftUI.SensoryFeedback
  public static let impact: SwiftUI.SensoryFeedback
  public static func impact(weight: SwiftUI.SensoryFeedback.Weight = .medium, intensity: Swift.Double = 1.0) -> SwiftUI.SensoryFeedback
  public static func impact(flexibility: SwiftUI.SensoryFeedback.Flexibility, intensity: Swift.Double = 1.0) -> SwiftUI.SensoryFeedback
  public struct Weight : Swift.Equatable, Swift.Sendable {
    public static let light: SwiftUI.SensoryFeedback.Weight
    public static let medium: SwiftUI.SensoryFeedback.Weight
    public static let heavy: SwiftUI.SensoryFeedback.Weight
    public static func == (a: SwiftUI.SensoryFeedback.Weight, b: SwiftUI.SensoryFeedback.Weight) -> Swift.Bool
  }
  public struct Flexibility : Swift.Equatable, Swift.Sendable {
    public static let rigid: SwiftUI.SensoryFeedback.Flexibility
    public static let solid: SwiftUI.SensoryFeedback.Flexibility
    public static let soft: SwiftUI.SensoryFeedback.Flexibility
    public static func == (a: SwiftUI.SensoryFeedback.Flexibility, b: SwiftUI.SensoryFeedback.Flexibility) -> Swift.Bool
  }
  public static func == (a: SwiftUI.SensoryFeedback, b: SwiftUI.SensoryFeedback) -> Swift.Bool
}
@available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.ColumnNavigationViewStyle {
  @_alwaysEmitIntoClient public static var columns: SwiftUI.ColumnNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
public struct ColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {
  @usableFromInline
  internal init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(tvOS, unavailable, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(watchOS, unavailable, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI25ColumnNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(tvOS, unavailable, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(watchOS, unavailable, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI25ColumnNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ColumnNavigationViewStyle : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @_spi(Testing) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var isInExpandedSplitView: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @_spi(Private) @_spi(ForShortcutsOnly) @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func prefersExpandedSidebars(_ prefers: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._TestApp {
  public func runBenchmarks(_ benchmarks: [any SwiftUICore._Benchmark]) -> Swift.Never
}
extension SwiftUICore._TestApp {
  @available(iOS 14.0, macOS 12.0, tvOS 14.0, watchOS 7.0, *)
  public func runPerformanceTests(_ tests: [any SwiftUI._PerformanceTest]) -> Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneInputs {
}
@available(*, unavailable)
extension SwiftUI._SceneInputs : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var accessibilityEnabledTechnologies: SwiftUI.AccessibilityTechnologies {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityVoiceOverEnabled: Swift.Bool {
    get
  }
  public var accessibilitySwitchControlEnabled: Swift.Bool {
    get
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var accessibilityFullKeyboardAccessEnabled: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public var accessibilityVoiceControlEnabled: Swift.Bool {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var accessibilityHoverTextEnabled: Swift.Bool {
    @_spi(Private) get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var accessibilityAssistiveAccessEnabled: Swift.Bool {
    get
  }
}
@_spi(Private_Menu) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private_Menu) nonisolated public func indentationLevel(_ indentationLevel: Swift.Int) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.DefaultButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct DefaultButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultButtonStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func automaticButtonStyle(_ style: some ButtonStyle) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func automaticButtonStyle(_ style: some PrimitiveButtonStyle) -> some SwiftUICore.View
  
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.WheelPickerStyle {
  @_alwaysEmitIntoClient public static var wheel: SwiftUI.WheelPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct WheelPickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.WheelPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.WheelPickerStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowInsetsTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.EdgeInsets? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.EdgeInsets? {
    get { nil }
  }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.EdgeInsets?
}
@available(*, unavailable)
extension SwiftUI.ListRowInsetsTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func listRowInsets(_ insets: SwiftUICore.EdgeInsets?) -> some SwiftUICore.View {
        return _trait(ListRowInsetsTraitKey.self, insets)
    }
  
  #else
  @inlinable nonisolated public func listRowInsets(_ insets: SwiftUICore.EdgeInsets?) -> some SwiftUICore.View {
        return _trait(ListRowInsetsTraitKey.self, insets)
    }
  
  #endif
}
@_spi(Private) @available(iOS 18.0, visionOS 2.0, tvOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func dialogColorScheme(_ colorScheme: SwiftUICore.ColorScheme?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func dialogColorScheme(_ colorScheme: SwiftUICore.ColorScheme?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
@_spi_available(visionOS, introduced: 1.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func dialogIcon(_ icon: SwiftUICore.Image?) -> some SwiftUICore.View
  
  #else
  nonisolated public func dialogIcon(_ icon: SwiftUICore.Image?) -> some SwiftUICore.View
  
  #endif
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func dialogIcon(_ icon: SwiftUICore.Image?) -> some SwiftUI.Scene
  
  #else
  nonisolated public func dialogIcon(_ icon: SwiftUICore.Image?) -> some SwiftUI.Scene
  
  #endif
}
@_spi(Private) @available(iOS 18.0, visionOS 2.0, watchOS 11.0, tvOS 18.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func dialogTint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func dialogTint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `View.alert(title:isPresented:presenting::actions:) instead.")
public struct Alert {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, dismissButton: SwiftUI.Alert.Button? = nil)
  #else
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, dismissButton: SwiftUI.Alert.Button? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button)
  #else
  public init(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  @available(visionOS, unavailable)
  public static func sideBySideButtons(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button) -> SwiftUI.Alert
  #else
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  @available(visionOS, unavailable)
  public static func sideBySideButtons(title: SwiftUICore.Text, message: SwiftUICore.Text? = nil, primaryButton: SwiftUI.Alert.Button, secondaryButton: SwiftUI.Alert.Button) -> SwiftUI.Alert
  #endif
  public struct Button {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public static func `default`(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #else
    public static func `default`(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public static func cancel(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #else
    public static func cancel(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public static func cancel(_ action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #else
    public static func cancel(_ action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public static func destructive(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #else
    public static func destructive(_ label: SwiftUICore.Text, action: (() -> Swift.Void)? = {}) -> SwiftUI.Alert.Button
    #endif
  }
}
@available(*, unavailable)
extension SwiftUI.Alert : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.Alert.Button : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  nonisolated public func alert<Item>(item: SwiftUICore.Binding<Item?>, content: (Item) -> SwiftUI.Alert) -> some SwiftUICore.View where Item : Swift.Identifiable
  
  #else
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  nonisolated public func alert<Item>(item: SwiftUICore.Binding<Item?>, content: (Item) -> SwiftUI.Alert) -> some SwiftUICore.View where Item : Swift.Identifiable
  
  #endif
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use `alert(title:isPresented:presenting::actions:) instead.")
  nonisolated public func alert(isPresented: SwiftUICore.Binding<Swift.Bool>, content: () -> SwiftUI.Alert) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ToggleStyle where Self == SwiftUI.ButtonToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var button: SwiftUI.ButtonToggleStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ButtonToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ButtonToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, watchOS 9.0, macOS 12.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17ButtonToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ButtonToggleStyle : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var isToggleOn: Swift.Bool? {
    get
  }
  #else
  @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var isToggleOn: Swift.Bool? {
    get
  }
  #endif
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransitionStyle instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol PresentationTransitionStyle {
  @_spi(Uniquely) func _makePresentationTransition() -> SwiftUI._PresentationTransitionOutputs
}
extension SwiftUICore.View {
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransitionStyle instead")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func presentationTransitionStyle(_ style: some PresentationTransitionStyle) -> some SwiftUICore.View
  
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransitionStyle instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _PresentationTransitionOutputs {
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI._PresentationTransitionOutputs : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransitionStyle instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct AutomaticPresentationTransitionStyle : SwiftUI.PresentationTransitionStyle {
  @_spi(Uniquely) public func _makePresentationTransition() -> SwiftUI._PresentationTransitionOutputs
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.AutomaticPresentationTransitionStyle : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransitionStyle instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PresentationTransitionStyle where Self == SwiftUI.AutomaticPresentationTransitionStyle {
  @_spi(Uniquely) public static var automatic: SwiftUI.AutomaticPresentationTransitionStyle {
    @_spi(Uniquely) get
  }
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransitionStyle instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ZoomPresentationTransitionStyle : SwiftUI.PresentationTransitionStyle {
  @_spi(Uniquely) public func _makePresentationTransition() -> SwiftUI._PresentationTransitionOutputs
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.ZoomPresentationTransitionStyle : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransitionStyle instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PresentationTransitionStyle where Self == SwiftUI.ZoomPresentationTransitionStyle {
  @_spi(Uniquely) public static func zoom(sourceID: some Hashable) -> SwiftUI.ZoomPresentationTransitionStyle
}
#if compiler(>=5.3) && $RetroactiveAttribute
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._Velocity : @retroactive SwiftUICore.Animatable where Value : SwiftUICore.Animatable {
  public typealias AnimatableData = Value.AnimatableData
  public var animatableData: SwiftUICore._Velocity<Value>.AnimatableData {
    @inlinable get { return valuePerSecond.animatableData }
    @inlinable set { valuePerSecond.animatableData = newValue }
  }
}
#else
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore._Velocity : SwiftUICore.Animatable where Value : SwiftUICore.Animatable {
  public typealias AnimatableData = Value.AnimatableData
  public var animatableData: SwiftUICore._Velocity<Value>.AnimatableData {
    @inlinable get { return valuePerSecond.animatableData }
    @inlinable set { valuePerSecond.animatableData = newValue }
  }
}
#endif
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ArchivableMutation : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ArchivableMutation : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ArchivableMutationHandler {
  @_spi(Private) public var action: (SwiftUI.ArchivableMutation, SwiftUICore.Transaction) -> Swift.Void
  @_spi(Private) public init(action: @escaping (SwiftUI.ArchivableMutation, SwiftUICore.Transaction) -> Swift.Void)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ArchivableMutationHandler : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var archivableMutationHandler: SwiftUI.ArchivableMutationHandler? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #else
  @_spi(Private) public var archivableMutationHandler: SwiftUI.ArchivableMutationHandler? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Table<Value, Rows, Columns> : SwiftUICore.View, SwiftUICore.PrimitiveView, SwiftUICore.MultiView where Value == Rows.TableRowValue, Rows : SwiftUI.TableRowContent, Columns : SwiftUI.TableColumnContent, Rows.TableRowValue == Columns.TableRowValue {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.Table<Value, Rows, Columns>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.Table : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  @_alwaysEmitIntoClient nonisolated public init(of valueType: Value.Type, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) {
         
        self.init(columns: columns, rows: rows)
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) {
         
        self.init(selection: selection, columns: columns, rows: rows)
    }
  #else
  @_alwaysEmitIntoClient nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) {
         
        self.init(selection: selection, columns: columns, rows: rows)
    }
  #endif
  @_alwaysEmitIntoClient nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) {
         
        self.init(selection: selection, columns: columns, rows: rows)
    }
  nonisolated public init<Sort>(sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  @_alwaysEmitIntoClient nonisolated public init<Sort>(of valueType: Value.Type, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared {
        self.init(sortOrder: sortOrder, columns: columns, rows: rows)
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Sort>(selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #else
  nonisolated public init<Sort>(selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared {
        self.init(
            selection: selection,
            sortOrder: sortOrder,
            columns: columns,
            rows: rows)
    }
  #else
  @_alwaysEmitIntoClient nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared {
        self.init(
            selection: selection,
            sortOrder: sortOrder,
            columns: columns,
            rows: rows)
    }
  #endif
  nonisolated public init<Sort>(selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  @_alwaysEmitIntoClient nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared {
        self.init(
            selection: selection,
            sortOrder: sortOrder,
            columns: columns,
            rows: rows)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  nonisolated public init<Data>(_ data: Data, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #else
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #endif
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data, Sort>(_ data: Data, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #else
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #endif
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  nonisolated public init(of valueType: Value.Type, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #else
  nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #endif
  nonisolated public init(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  nonisolated public init<Sort>(of valueType: Value.Type = Value.self, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Sort>(of valueType: Value.Type = Value.self, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #else
  nonisolated public init<Sort>(of valueType: Value.Type = Value.self, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #endif
  nonisolated public init<Sort>(of valueType: Value.Type = Value.self, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  nonisolated public init<Data>(_ data: Data, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #else
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #endif
  nonisolated public init<Data>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  nonisolated public init<Data, Sort>(_ data: Data, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #else
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #endif
  nonisolated public init<Data, Sort>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableForEachContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Value, Data?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #else
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Value, Data?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #else
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Value.ID?>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #else
  nonisolated public init<Data>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Columns.TableRowValue == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #else
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #else
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #else
  nonisolated public init<Data, Sort>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>? = nil, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns) where Rows == SwiftUI.TableOutlineGroupContent<Data>, Data : Swift.RandomAccessCollection, Sort : Foundation.SortComparator, Columns.TableRowValue == Data.Element, Data.Element == Sort.Compared
  #endif
}
@_spi(Private) @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<Sort>(of valueType: Value.Type, sortOrder: SwiftUICore.Binding<[Sort]>?, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>?, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #else
  @_spi(Private) nonisolated public init<Sort>(of valueType: Value.Type, sortOrder: SwiftUICore.Binding<[Sort]>?, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>?, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>?, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>?, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #else
  @_spi(Private) nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, sortOrder: SwiftUICore.Binding<[Sort]>?, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>?, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>?, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>?, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #else
  @_spi(Private) nonisolated public init<Sort>(of valueType: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, sortOrder: SwiftUICore.Binding<[Sort]>?, columnCustomization: SwiftUICore.Binding<SwiftUI.TableColumnCustomization<Value>>?, @SwiftUI.TableColumnBuilder<Value, Sort> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows) where Sort : Foundation.SortComparator, Columns.TableRowValue == Sort.Compared
  #endif
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableOutlineGroupContent<Data> : SwiftUI.TableRowContent where Data : Swift.RandomAccessCollection, Data.Element : Swift.Identifiable {
  public typealias TableRowValue = Data.Element
  public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI24TableOutlineGroupContentV12tableRowBodyQrvp", 0) __<Data>
}
@available(*, unavailable)
extension SwiftUI.TableOutlineGroupContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableForEachContent<Data> : SwiftUI.TableRowContent where Data : Swift.RandomAccessCollection, Data.Element : Swift.Identifiable {
  public typealias TableRowValue = Data.Element
  public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI19TableForEachContentV12tableRowBodyQrvp", 0) __<Data>
}
@available(*, unavailable)
extension SwiftUI.TableForEachContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Table {
  @_spi(Private) @available(iOS, deprecated, renamed: "init(of:columns:rows:)")
  @available(macOS, deprecated, renamed: "init(of:columns:rows:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init(for value: Value.Type, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, deprecated, renamed: "init(of:selection:columns:rows:)")
  @available(macOS, deprecated, renamed: "init(of:selection:columns:rows:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init(for value: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #else
  @_spi(Private) @available(iOS, deprecated, renamed: "init(of:selection:columns:rows:)")
  @available(macOS, deprecated, renamed: "init(of:selection:columns:rows:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init(for value: Value.Type, selection: SwiftUICore.Binding<Value.ID?>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
  #endif
  @_spi(Private) @available(iOS, deprecated, renamed: "init(of:selection:columns:rows:)")
  @available(macOS, deprecated, renamed: "init(of:selection:columns:rows:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init(for value: Value.Type, selection: SwiftUICore.Binding<Swift.Set<Value.ID>>, @SwiftUI.TableColumnBuilder<Value, Swift.Never> columns: () -> Columns, @SwiftUI.TableRowBuilder<Value> rows: () -> Rows)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct LabelGroup<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_spi(Private) nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10LabelGroupV4bodyQrvp", 0) __<Content>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LabelGroup : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct DefaultDateProgressLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultDateProgressLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultDateProgressLabel : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView {
  nonisolated public init(timerInterval: Swift.ClosedRange<Foundation.Date>, countsDown: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel)
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView {
  @_spi(_) @available(*, deprecated, renamed: "init(timerInterval:countsDown:label:currentValueLabel:)")
  nonisolated public init(interval: Swift.ClosedRange<Foundation.Date>, countdown: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView where CurrentValueLabel == SwiftUI.DefaultDateProgressLabel {
  nonisolated public init(timerInterval: Swift.ClosedRange<Foundation.Date>, countsDown: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label)
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView where CurrentValueLabel == SwiftUI.DefaultDateProgressLabel {
  @_spi(_) @available(*, deprecated, renamed: "init(timerInterval:countsDown:label:)")
  nonisolated public init(interval: Swift.ClosedRange<Foundation.Date>, countdown: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUI.DefaultDateProgressLabel {
  nonisolated public init(timerInterval: Swift.ClosedRange<Foundation.Date>, countsDown: Swift.Bool = true)
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ProgressView where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUI.DefaultDateProgressLabel {
  @_spi(_) @available(*, deprecated, renamed: "init(timerInterval:countsDown:)")
  nonisolated public init(interval: Swift.ClosedRange<Foundation.Date>, countdown: Swift.Bool = true)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.DefaultLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct DefaultLabelStyle : SwiftUI.LabelStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultLabelStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultLabelStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  public var supportsMultipleWindows: Swift.Bool {
    get
  }
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUICore.Font {
  @_spi(Private) public static let clarityUINavigationTitle: SwiftUICore.Font
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func alternatingRowBackgrounds(_ behavior: SwiftUI.AlternatingRowBackgroundBehavior = .enabled) -> some SwiftUICore.View
  
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct AlternatingRowBackgroundBehavior : Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.AlternatingRowBackgroundBehavior
  public static let enabled: SwiftUI.AlternatingRowBackgroundBehavior
  public static let disabled: SwiftUI.AlternatingRowBackgroundBehavior
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.AlternatingRowBackgroundBehavior, b: SwiftUI.AlternatingRowBackgroundBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @_spi(DoNotImport) public var alternatingRowBackgroundBehavior: SwiftUI.AlternatingRowBackgroundBehavior {
    @_spi(DoNotImport) get
    @_spi(DoNotImport) set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) public var alternatingRowBackgroundColors: [SwiftUICore.Color]? {
    @_spi(DoNotImport) get
    @_spi(DoNotImport) set
  }
  #else
  @_spi(DoNotImport) public var alternatingRowBackgroundColors: [SwiftUICore.Color]? {
    @_spi(DoNotImport) get
    @_spi(DoNotImport) set
  }
  #endif
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func alternatingRowBackgroundColors(_ even: SwiftUICore.Color, _ odd: SwiftUICore.Color) -> some SwiftUICore.View
  
}
@_spi(Private) extension SwiftUICore.View {
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 14.0, message: "Use alternatingRowBackgrounds(_:) instead")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func alternatesRowBackgrounds(_ alternatesRowBackgrounds: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public protocol ScrollTargetBehavior {
  func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: Self.TargetContext)
  typealias TargetContext = SwiftUI.ScrollTargetBehaviorContext
  static func _makeInputs(_ behavior: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ScrollTargetBehavior {
  public static func _makeInputs(_ behavior: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._ViewInputs)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ScrollTargetBehavior {
  public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
@_spi(ForSwiftChartsOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ScrollDecelerationRate : Swift.Equatable {
  @_spi(ForSwiftChartsOnly) public static var automatic: SwiftUI.ScrollDecelerationRate {
    @_spi(ForSwiftChartsOnly) get
  }
  @_spi(ForSwiftChartsOnly) @available(macOS, unavailable)
  public static var fast: SwiftUI.ScrollDecelerationRate {
    @_spi(ForSwiftChartsOnly) get
  }
  @_spi(ForSwiftChartsOnly) public static var standard: SwiftUI.ScrollDecelerationRate {
    @_spi(ForSwiftChartsOnly) get
  }
  @_spi(ForSwiftChartsOnly) public static func == (a: SwiftUI.ScrollDecelerationRate, b: SwiftUI.ScrollDecelerationRate) -> Swift.Bool
}
@_spi(ForSwiftChartsOnly) @available(*, unavailable)
extension SwiftUI.ScrollDecelerationRate : Swift.Sendable {
}
@_spi(ForSwiftChartsOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ScrollTargetBehaviorDecelerationContext {
  @_spi(ForSwiftChartsOnly) public var defaultDecelerationRate: SwiftUI.ScrollDecelerationRate {
    get
  }
  @_spi(ForSwiftChartsOnly) public var axes: SwiftUICore.Axis.Set {
    get
  }
  @_spi(ForSwiftChartsOnly) public var environment: SwiftUICore.EnvironmentValues {
    get
  }
}
@_spi(ForSwiftChartsOnly) @available(*, unavailable)
extension SwiftUI.ScrollTargetBehaviorDecelerationContext : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _ScrollTargetBehaviorEnvironmentContext {
}
@available(*, unavailable)
extension SwiftUI._ScrollTargetBehaviorEnvironmentContext : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@dynamicMemberLookup public struct ScrollTargetBehaviorContext {
  public var originalTarget: SwiftUICore.ScrollTarget {
    get
    @_spi(Private) set
  }
  public var velocity: CoreFoundation.CGVector {
    get
    @_spi(Private) set
  }
  public var contentSize: CoreFoundation.CGSize {
    get
    @_spi(Private) set
  }
  public var containerSize: CoreFoundation.CGSize {
    get
    @_spi(Private) set
  }
  public var axes: SwiftUICore.Axis.Set {
    get
    @_spi(Private) set
  }
  public subscript<T>(dynamicMember keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> T {
    get
  }
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use containerSize")
  @available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use containerSize")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use containerSize")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, message: "Use containerSize")
  public var viewportSize: CoreFoundation.CGSize {
    get
    set
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollTargetBehaviorContext : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollTargetBehavior(_ behavior: some ScrollTargetBehavior) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(ForSwiftChartsOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollDeceleration(_ deceleration: SwiftUI.ScrollDecelerationRate, axes: SwiftUICore.Axis.Set) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollTargetLayout(isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollTarget(isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public struct DismissAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  public var dismiss: SwiftUI.DismissAction {
    get
  }
  public var isPresented: Swift.Bool {
    get
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ShapeStyle {
  @_spi(Private) public func mix<S>(_ other: S, by progress: Swift.Double) -> some SwiftUICore.ShapeStyle where S : SwiftUICore.ShapeStyle
  
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) @_Concurrency.MainActor @preconcurrency public static func mapKitMakeSelectionEnabled<V>(forType: V.Type, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._GraphValue<(V) -> Swift.Bool>? where V : Swift.Hashable
  #else
  @_spi(ForMapKitOnly) @_Concurrency.MainActor @preconcurrency public static func mapKitMakeSelectionEnabled<V>(forType: V.Type, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._GraphValue<(V) -> Swift.Bool>? where V : Swift.Hashable
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 17.0, watchOS 8.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderlessButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderless: SwiftUI.BorderlessButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 17.0, watchOS 8.0, *)
@_Concurrency.MainActor @preconcurrency public struct BorderlessButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderlessButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 17.0, watchOS 8.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21BorderlessButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessButtonStyle : Swift.Sendable {
}
@_spi(UIFrameworks) extension SwiftUI.BorderlessButtonStyle : SwiftUI.ButtonStyleConvertible {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var buttonStyleRepresentation: some SwiftUI.ButtonStyle {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) @available(iOS 16.0, tvOS 17.0, watchOS 9.0, macOS 13.0, *)
  public typealias ButtonStyleRepresentation = @_opaqueReturnTypeOf("$s7SwiftUI21BorderlessButtonStyleV06buttonE14RepresentationQrvp", 0) __
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
public struct _WidgetInputs {
}
@available(*, unavailable)
extension SwiftUI._WidgetInputs : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func containerRelativeFrame(_ axes: SwiftUICore.Axis.Set, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func containerRelativeFrame(_ axes: SwiftUICore.Axis.Set, count: Swift.Int, span: Swift.Int = 1, spacing: CoreFoundation.CGFloat, alignment: SwiftUICore.Alignment = .center) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func containerRelativeFrame(_ axes: SwiftUICore.Axis.Set, alignment: SwiftUICore.Alignment = .center, _ length: @escaping (CoreFoundation.CGFloat, SwiftUICore.Axis) -> CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DynamicTableRowContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) nonisolated public func onDelete(perform action: Swift.Optional<(Foundation.IndexSet) -> Swift.Void>) -> SwiftUICore.ModifiedContent<Self, SwiftUI.OnDeleteTableRowModifier>
  #else
  @_spi(DoNotImport) nonisolated public func onDelete(perform action: Swift.Optional<(Foundation.IndexSet) -> Swift.Void>) -> SwiftUICore.ModifiedContent<Self, SwiftUI.OnDeleteTableRowModifier>
  #endif
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OnDeleteTableRowModifier : SwiftUI._TableRowContentModifier {
  @_spi(DoNotImport) public var body: some SwiftUI._TableRowContentModifier {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24OnDeleteTableRowModifierV4bodyQrvp", 0) __
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.OnDeleteTableRowModifier : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @_spi(DoNotImport) public func deleteDisabled(_ isDisabled: Swift.Bool) -> some SwiftUI.TableRowContent<Self.TableRowValue>
  
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DeleteDisabledTableRowModifier : SwiftUI._TableRowContentModifier {
  @_spi(DoNotImport) public var body: some SwiftUI._TableRowContentModifier {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI30DeleteDisabledTableRowModifierV4bodyQrvp", 0) __
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.DeleteDisabledTableRowModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @_spi(Private) @available(*, deprecated, message: "Use one or more navigationDestination modifiers instead")
  nonisolated public func navigationDestinations<D>(@SwiftUI.NavigationDestinationBuilder _ destinations: () -> D) -> some SwiftUICore.View where D : SwiftUI.NavigationDestination
  
  nonisolated public func navigationDestination<D, C>(for data: D.Type, @SwiftUICore.ViewBuilder destination: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Hashable, C : SwiftUICore.View
  
  @_spi(_) @available(*, deprecated, renamed: "navigationDestination(for:destination:)")
  nonisolated public func navigationDestination<D, C>(presenting data: D.Type, @SwiftUICore.ViewBuilder destination: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Hashable, C : SwiftUICore.View
  
  nonisolated public func navigationDestination<V>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func navigationDestination<D, C>(item: SwiftUICore.Binding<Swift.Optional<D>>, @SwiftUICore.ViewBuilder destination: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Hashable, C : SwiftUICore.View
  
  #else
  nonisolated public func navigationDestination<D, C>(item: SwiftUICore.Binding<Swift.Optional<D>>, @SwiftUICore.ViewBuilder destination: @escaping (D) -> C) -> some SwiftUICore.View where D : Swift.Hashable, C : SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func navigationDestinationScope() -> some SwiftUICore.View
  
}
@_spi(ToolbarForEach) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ForEach : SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent {
  @_spi(ToolbarForEach) nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @_spi(ToolbarForEach) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(ToolbarForEach) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ForEach : SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent {
}
@_spi(ToolbarForEach) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ForEach where Content : SwiftUI.ToolbarContent {
  @_spi(ToolbarForEach) public init(_ data: Data, @SwiftUI.ToolbarContentBuilder content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element : Swift.Identifiable
  @_spi(ToolbarForEach) public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ToolbarContentBuilder content: @escaping (Data.Element) -> Content)
  @_spi(ToolbarForEach) @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUI.ToolbarContentBuilder content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int
}
@_spi(ToolbarForEach) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ForEach where Content : SwiftUI.CustomizableToolbarContent {
  @_spi(ToolbarForEach) public init(_ data: Data, @SwiftUI.ToolbarContentBuilder content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element : Swift.Identifiable
  @_spi(ToolbarForEach) public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.ToolbarContentBuilder content: @escaping (Data.Element) -> Content)
  @_spi(ToolbarForEach) @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUI.ToolbarContentBuilder content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct _ScrollableLayoutView<Data, Layout> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Data : Swift.RandomAccessCollection, Layout : SwiftUI._ScrollableLayout, Data.Element : SwiftUICore.View, Data.Index : Swift.Hashable {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._ScrollableLayoutView<Data, Layout>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ScrollableLayoutView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayoutView : SwiftUI._ScrollableContentProvider {
  @_Concurrency.MainActor @preconcurrency public var scrollableContent: SwiftUI._ScrollableLayoutView<Data, Layout> {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #else
  @_Concurrency.MainActor @preconcurrency public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._ScrollableLayoutView<Data, Layout>>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ScrollableContent = SwiftUI._ScrollableLayoutView<Data, Layout>
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MenuBarExtra<Label, Content> : SwiftUI.Scene where Label : SwiftUICore.View, Content : SwiftUICore.View {
  nonisolated public init(isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 13.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12MenuBarExtraV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.MenuBarExtra : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtra where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtra where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, isInserted: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PlaybackButton : SwiftUICore.View {
  @_spi(Private) public enum State : Swift.Codable, Swift.Equatable, Swift.Sendable {
    @_spi(Private) case unplayed
    @_spi(Private) case playing
    @_spi(Private) case paused(Foundation.Date)
    @_spi(Private) public static func == (a: SwiftUI.PlaybackButton.State, b: SwiftUI.PlaybackButton.State) -> Swift.Bool
    @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
    @_spi(Private) public init(from decoder: any Swift.Decoder) throws
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(AppIntent) nonisolated public init(interval: Swift.ClosedRange<Foundation.Date>?, state: SwiftUI.PlaybackButton.State, systemImage: Swift.String? = nil, alignment: SwiftUICore.Alignment = .center, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void)
  #else
  @_spi(AppIntent) nonisolated public init(interval: Swift.ClosedRange<Foundation.Date>?, state: SwiftUI.PlaybackButton.State, systemImage: Swift.String? = nil, alignment: SwiftUICore.Alignment = .center, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(AppIntent) @available(*, deprecated, renamed: "init(interval:state:systemImage:alignment:lnAction:perform:)")
  @_disfavoredOverload nonisolated public init(interval: Swift.ClosedRange<Foundation.Date>, state: SwiftUI.PlaybackButton.State, playSystemImage: Swift.String? = nil, pauseSystemImage: Swift.String? = nil, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void)
  #else
  @_spi(AppIntent) @available(*, deprecated, renamed: "init(interval:state:systemImage:alignment:lnAction:perform:)")
  @_disfavoredOverload nonisolated public init(interval: Swift.ClosedRange<Foundation.Date>, state: SwiftUI.PlaybackButton.State, playSystemImage: Swift.String? = nil, pauseSystemImage: Swift.String? = nil, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void)
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14PlaybackButtonV4bodyQrvp", 0) __
}
@_spi(Private) @available(tvOS, unavailable)
extension SwiftUI.PlaybackButton : SwiftUICore.ConditionallyArchivableView {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var archivedBody: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  public typealias ArchivedBody = @_opaqueReturnTypeOf("$s7SwiftUI14PlaybackButtonV12archivedBodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PlaybackButton : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func playbackButtonTapArea(_ length: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func playbackButtonProgress(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct ListRowPlatterColorTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.Color? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.Color? {
    get { nil }
  }
  #endif
  @available(watchOS 6.0, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(visionOS, unavailable)
  internal typealias Value = SwiftUICore.Color?
}
@available(*, unavailable)
extension SwiftUI.ListRowPlatterColorTraitKey : Swift.Sendable {
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "listItemTint(_:)")
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable nonisolated public func listRowPlatterColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View {
        _trait(ListRowPlatterColorTraitKey.self, color)
    }
  
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "listItemTint(_:)")
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable nonisolated public func listRowPlatterColor(_ color: SwiftUICore.Color?) -> some SwiftUICore.View {
        _trait(ListRowPlatterColorTraitKey.self, color)
    }
  
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationSplitViewStyle where Self == SwiftUI.BalancedNavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var balanced: SwiftUI.BalancedNavigationSplitViewStyle {
    get
  }
  @_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  @_Concurrency.MainActor @preconcurrency public static var tiled: SwiftUI.BalancedNavigationSplitViewStyle {
    get
  }
}
@_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
public typealias TiledNavigationSplitStyle = SwiftUI.BalancedNavigationSplitViewStyle
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct BalancedNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BalancedNavigationSplitViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI32BalancedNavigationSplitViewStyleV8makeBody13configurationQrAA0defG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BalancedNavigationSplitViewStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.FormStyle where Self == SwiftUI.ColumnsFormStyle {
  @_Concurrency.MainActor @preconcurrency public static var columns: SwiftUI.ColumnsFormStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct ColumnsFormStyle : SwiftUI.FormStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ColumnsFormStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ColumnsFormStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ColumnsFormStyle : Swift.Sendable {
}
extension SwiftUICore.HorizontalAlignment {
  @_spi(Private) @available(iOS 16.0, macOS 12.0, tvOS 16.0, watchOS 9.0, *)
  public static let formDetailLeading: SwiftUICore.HorizontalAlignment
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textSelection<S>(_ selectability: S) -> some SwiftUICore.View where S : SwiftUICore.TextSelectability
  
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.LazyPageTabViewStyle {
  @_spi(Private) public static var lazyPage: SwiftUI.LazyPageTabViewStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct LazyPageTabViewStyle : SwiftUI.TabViewStyle {
  @_spi(Private) public init()
  @_spi(Private) nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.LazyPageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  @_spi(Private) nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.LazyPageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LazyPageTabViewStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum AccessibilityAdjustmentDirection : Swift.Sendable {
  case increment
  case decrement
  public static func == (a: SwiftUI.AccessibilityAdjustmentDirection, b: SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAdjustableAction(_ handler: @escaping (SwiftUI.AccessibilityAdjustmentDirection) -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Text {
  public func accessibilityTextContentType(_ value: SwiftUICore.AccessibilityTextContentType) -> SwiftUICore.Text
  public func accessibilityHeading(_ level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUICore.Text
  public func accessibilityLabel(_ label: SwiftUICore.Text) -> SwiftUICore.Text
  public func accessibilityLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.Text
  @_disfavoredOverload public func accessibilityLabel<S>(_ label: S) -> SwiftUICore.Text where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityTextContentType(_ value: SwiftUICore.AccessibilityTextContentType) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityHeading(_ level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityTextContentType(_ textContentType: SwiftUICore.AccessibilityTextContentType) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityHeading(_ level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.PickerContent {
  @_spi(Private) public func disabled(_ isDisabled: Swift.Bool) -> SwiftUI._DisabledPickerContent<Self>
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _DisabledPickerContent<Base> : SwiftUI.PickerContent where Base : SwiftUI.PickerContent {
  @_spi(Private) public typealias SelectionValue = Base.SelectionValue
  @_spi(Private) public var _identifiedView: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = SwiftUI._DisabledPickerContent<Base>
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI22_DisabledPickerContentV15_identifiedViewQrvp", 0) __<Base>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DisabledPickerContent : Swift.Sendable {
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUICore.Image {
  public init(uiImage: UIKit.UIImage)
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension UIKit.UIImage : @retroactive SwiftUICore.ImageProvider {
  package func resolve(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #else
  package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #endif
}
#else
extension UIKit.UIImage : SwiftUICore.ImageProvider {
  package func resolve(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #else
  package func resolveNamedImage(in context: SwiftUICore.ImageResolutionContext) -> SwiftUICore.Image.NamedResolved?
  #endif
}
#endif
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func allowsWindowActivationEvents(_ value: Swift.Bool? = true) -> some SwiftUICore.View
  
  #else
  nonisolated public func allowsWindowActivationEvents(_ value: Swift.Bool? = true) -> some SwiftUICore.View
  
  #endif
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var allowsWindowActivationEvents: Swift.Bool? {
    get
  }
  #else
  package var allowsWindowActivationEvents: Swift.Bool? {
    get
  }
  #endif
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(*, deprecated, message: "Use 'View.allowsWindowActivationEvents(_:)' instead.")
  nonisolated public func acceptsActivatingEvents(_ value: Swift.Bool? = true) -> some SwiftUICore.View
  
  #else
  @_spi(DoNotImport) @available(*, deprecated, message: "Use 'View.allowsWindowActivationEvents(_:)' instead.")
  nonisolated public func acceptsActivatingEvents(_ value: Swift.Bool? = true) -> some SwiftUICore.View
  
  #endif
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(*, deprecated, message: "Use 'View.allowsWindowActivationEvents(_:)' instead.")
  public var acceptsActivatingEvents: Swift.Bool? {
    @_spi(DoNotImport) get
  }
  #else
  @_spi(DoNotImport) @available(*, deprecated, message: "Use 'View.allowsWindowActivationEvents(_:)' instead.")
  public var acceptsActivatingEvents: Swift.Bool? {
    @_spi(DoNotImport) get
  }
  #endif
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ControlWidgetTemplateModifier_V1 {
  associatedtype Body : SwiftUI.ControlWidgetTemplate_V1
  @_spi(Widget) func body(content: Self.Content) -> Self.Body
  @_spi(Widget) typealias Content = SwiftUI.ControlWidgetTemplateModifier_Content_V1<Self>
  @_spi(Widget) static func _makeControlTemplate(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) static var _controlType: Swift.UInt { get }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetTemplateModifier_V1 {
  @_spi(Widget) public static func _makeControlTemplate(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) public static var _controlType: Swift.UInt {
    @_spi(Widget) get
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetTemplateModifier_V1 where Self.Body == Swift.Never {
  @_spi(Widget) public func body(content: Self.Content) -> Self.Body
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate_V1 {
  @_spi(Widget) public static func _makeControlTemplate(modifier: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetTemplate_V1>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = Swift.Never
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetTemplate_V1 {
  @_spi(Widget) @inlinable public func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetTemplate_V1 where Content : SwiftUI.ControlWidgetTemplate_V1, Modifier : SwiftUI.ControlWidgetTemplateModifier_V1 {
  @_spi(Widget) public static var _controlType: Swift.UInt {
    @_spi(Widget) get
  }
  @_spi(Widget) public static func _makeControlTemplate(control: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) public var body: Swift.Never {
    @_spi(Widget) get
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetTemplateModifier_V1 where Content : SwiftUI.ControlWidgetTemplateModifier_V1, Modifier : SwiftUI.ControlWidgetTemplateModifier_V1 {
  @_spi(Widget) public static func _makeControlTemplate(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ControlWidgetTemplateModifier_Content_V1<Modifier> : SwiftUI.ControlWidgetTemplate_V1 where Modifier : SwiftUI.ControlWidgetTemplateModifier_V1 {
  @_spi(Widget) public static var _controlType: Swift.UInt {
    @_spi(Widget) get
  }
  @_spi(Widget) public static func _makeControlTemplate(control: SwiftUICore._GraphValue<SwiftUI.ControlWidgetTemplateModifier_Content_V1<Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = Swift.Never
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.ControlWidgetTemplateModifier_Content_V1 : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.DefaultTextFieldStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.DefaultTextFieldStyle._Label>) -> SwiftUI.DefaultTextFieldStyle._Body
  @_Concurrency.MainActor @preconcurrency public struct _Body : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21DefaultTextFieldStyleV5_BodyV4bodyQrvp", 0) __
  }
}
@available(*, unavailable)
extension SwiftUI.DefaultTextFieldStyle : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DefaultTextFieldStyle._Body : Swift.Sendable {
}
@_spi(CustomHoverEffects) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Shape {
  @_spi(CustomHoverEffects) public func aligned(_ anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.Shape
  
  @_spi(CustomHoverEffects) public func _aligned(_ anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.Shape
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct WindowGroup<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  nonisolated public init(id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:id:makeContent:)")
  @_disfavoredOverload nonisolated public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:id:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:id:makeContent:)")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(makeContent:)")
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @_disfavoredOverload nonisolated public init(_ title: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(macOS, introduced: 11.0, deprecated: 15.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 18.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 11.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "init(_:makeContent:)", message: "Use the initializer which takes an escaping view builder instead.")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11WindowGroupV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.WindowGroup : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabForEach<Data, ID, TabValue, Content> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, TabValue : Swift.Hashable {
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.TabForEach : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabForEach : SwiftUI.TabContent where TabValue == Content.TabValue, Content : SwiftUI.TabContent {
  @_spi(Uniquely) public typealias TabValue = Content.TabValue
  @_spi(Uniquely) @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUICore.ForEach<Data, ID, Content._IdentifiedView> {
    @_spi(Uniquely) get
  }
  @_spi(Uniquely) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = SwiftUI.TabForEach<Data, ID, TabValue, Content>
  @_spi(Uniquely) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = SwiftUICore.ForEach<Data, ID, Content._IdentifiedView>
}
@_spi(Uniquely) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabForEach where Content : SwiftUI.TabContent {
  @_spi(Uniquely) public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<TabValue> content: @escaping (Data.Element) -> Content)
}
@_spi(Uniquely) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabForEach where ID == Data.Element.ID, Content : SwiftUI.TabContent, Data.Element : Swift.Identifiable {
  @_spi(Uniquely) public init(_ data: Data, @SwiftUI.TabContentBuilder<TabValue> content: @escaping (Data.Element) -> Content)
}
@_spi(Uniquely) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUI.TabContent {
  @_spi(Uniquely) @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<TabValue> content: @escaping (Swift.Int) -> Content)
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use Animatable directly")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use Animatable directly")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use Animatable directly")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use Animatable directly")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use Animatable directly")
public protocol AnimatableModifier : SwiftUICore.Animatable, SwiftUICore.ViewModifier {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AnimatableModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ViewModifier where Self : SwiftUICore.Animatable {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func sensoryFeedback<T>(_ feedback: SwiftUI.SensoryFeedback, trigger: T) -> some SwiftUICore.View where T : Swift.Equatable
  
  nonisolated public func sensoryFeedback<T>(_ feedback: SwiftUI.SensoryFeedback, trigger: T, condition: @escaping (_ oldValue: T, _ newValue: T) -> Swift.Bool) -> some SwiftUICore.View where T : Swift.Equatable
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func sensoryFeedback<T>(trigger: T, _ feedback: @escaping (_ oldValue: T, _ newValue: T) -> SwiftUI.SensoryFeedback?) -> some SwiftUICore.View where T : Swift.Equatable
  
  #else
  nonisolated public func sensoryFeedback<T>(trigger: T, _ feedback: @escaping (_ oldValue: T, _ newValue: T) -> SwiftUI.SensoryFeedback?) -> some SwiftUICore.View where T : Swift.Equatable
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.FillShapeStyle {
  @_alwaysEmitIntoClient public static var fill: SwiftUI.FillShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct FillShapeStyle : SwiftUICore.ShapeStyle {
  @_alwaysEmitIntoClient public init() {}
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  #else
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreFoundation.CGPoint) -> Swift.Bool) -> some SwiftUICore.View
  
  #else
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreFoundation.CGPoint) -> Swift.Bool) -> some SwiftUICore.View
  
  #endif
  nonisolated public func onDrop(of supportedContentTypes: [UniformTypeIdentifiers.UTType], delegate: any SwiftUI.DropDelegate) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, isEnabled: Swift.Bool, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: @escaping (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, isEnabled: Swift.Bool, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: @escaping (Swift.Bool) -> Swift.Void = { _ in }, dropProposal: @escaping (_ dragProposals: [SwiftUI.DropProposal], _ contentTypes: Swift.Set<UniformTypeIdentifiers.UTType>, _ location: CoreFoundation.CGPoint) -> SwiftUI.DropProposal) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func listRowDropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T]) -> Swift.Bool) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop<Preview>(of supportedContentTypes: [UniformTypeIdentifiers.UTType], delegate: any SwiftUI.DropDelegate, _ preview: @escaping (_ for: [UniformTypeIdentifiers.UTType], _ defaultPreview: SwiftUI.DefaultDragDropPreview?) -> SwiftUI.DropPreview<Preview>?) -> some SwiftUICore.View where Preview : SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop<Preview>(of supportedContentTypes: [UniformTypeIdentifiers.UTType], delegate: any SwiftUI.DropDelegate, _ preview: @escaping (_ for: [UniformTypeIdentifiers.UTType], _ defaultPreview: SwiftUI.DefaultDragDropPreview?) -> SwiftUI.DropPreview<Preview>?) -> some SwiftUICore.View where Preview : SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropPreview<Preview> where Preview : SwiftUICore.View {
  @_spi(Private) public var center: CoreFoundation.CGPoint
  @_spi(Private) public init(center: CoreFoundation.CGPoint, @SwiftUICore.ViewBuilder _ content: () -> Preview)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func view() -> Preview?
  #else
  @_spi(Private) public func view() -> Preview?
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DropPreview : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultDragDropPreview {
  @_spi(Private) public var center: CoreFoundation.CGPoint {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DefaultDragDropPreview : Swift.Sendable {
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropInfo {
  public var location: CoreFoundation.CGPoint {
    get
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  public var localDragContexts: [Any] {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  public func hasItemsConforming(to contentTypes: [UniformTypeIdentifiers.UTType]) -> Swift.Bool
  @available(iOS 14.0, macOS 11.0, *)
  public func itemProviders(for contentTypes: [UniformTypeIdentifiers.UTType]) -> [Foundation.NSItemProvider]
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  public func setDropTargetLocation(_ location: CoreFoundation.CGPoint?, at index: Swift.Int)
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  public func setDropTargetLocation(_ location: CoreFoundation.CGPoint?, at index: Swift.Int)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  public func setDropTargetTransform(_ transform: CoreFoundation.CGAffineTransform?, at index: Swift.Int)
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  public func setDropTargetTransform(_ transform: CoreFoundation.CGAffineTransform?, at index: Swift.Int)
  #endif
}
@available(*, unavailable)
extension SwiftUI.DropInfo : Swift.Sendable {
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol DropDelegate {
  @_Concurrency.MainActor @preconcurrency func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency func performDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency func dropEntered(info: SwiftUI.DropInfo)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  #else
  @_Concurrency.MainActor @preconcurrency func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  #endif
  @_Concurrency.MainActor @preconcurrency func dropExited(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropDelegate {
  @_Concurrency.MainActor @preconcurrency public func validateDrop(info: SwiftUI.DropInfo) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func dropEntered(info: SwiftUI.DropInfo)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  #else
  @_Concurrency.MainActor @preconcurrency public func dropUpdated(info: SwiftUI.DropInfo) -> SwiftUI.DropProposal?
  #endif
  @_Concurrency.MainActor @preconcurrency public func dropExited(info: SwiftUI.DropInfo)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol DropDelegate_Private : SwiftUI.DropDelegate {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func dropAnimationCompleted()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func dropConcluded(info: SwiftUI.DropInfo)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func dropEnded(info: SwiftUI.DropInfo)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropDelegate_Private {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func dropAnimationCompleted()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func dropConcluded(info: SwiftUI.DropInfo)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func dropEnded(info: SwiftUI.DropInfo)
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum DropOperation : Swift.Sendable {
  case cancel
  case forbidden
  case copy
  case move
  public static func == (a: SwiftUI.DropOperation, b: SwiftUI.DropOperation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DropProposal : Swift.Sendable {
  public let operation: SwiftUI.DropOperation
  public init(operation: SwiftUI.DropOperation)
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  #else
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreFoundation.CGPoint) -> Swift.Bool) -> some SwiftUICore.View
  
  #else
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], isTargeted: SwiftUICore.Binding<Swift.Bool>?, perform action: @escaping (_ providers: [Foundation.NSItemProvider], _ location: CoreFoundation.CGPoint) -> Swift.Bool) -> some SwiftUICore.View
  
  #endif
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrop(of supportedTypes: [Swift.String], delegate: any SwiftUI.DropDelegate) -> some SwiftUICore.View
  
}
@available(iOS, introduced: 13.4, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Provide `UTType`s as the `types` instead.")
extension SwiftUI.DropInfo {
  public func hasItemsConforming(to types: [Swift.String]) -> Swift.Bool
  public func itemProviders(for types: [Swift.String]) -> [Foundation.NSItemProvider]
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func invalidatableContent(_ invalidatable: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct ModalLink<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_spi(Private) nonisolated public init(@SwiftUICore.ViewBuilder presenting: @escaping () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI9ModalLinkV4bodyQrvp", 0) __<Label, Content>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ModalLink : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ModalLink where Label == SwiftUICore.Text {
  @_spi(Private) nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder presenting: @escaping () -> Content)
  @_spi(Private) @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder presenting: @escaping () -> Content) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Gesture {
  @inlinable public func sequenced<Other>(before other: Other) -> SwiftUI.SequenceGesture<Self, Other> where Other : SwiftUICore.Gesture {
        return SequenceGesture(self, other)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct SequenceGesture<First, Second> : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture where First : SwiftUICore.Gesture, Second : SwiftUICore.Gesture {
  @frozen public enum Value {
    case first(First.Value)
    case second(First.Value, Second.Value?)
  }
  public var first: First
  public var second: Second
  @inlinable public init(_ first: First, _ second: Second) {
        (self.first, self.second) = (first, second)
    }
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.SequenceGesture<First, Second>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.SequenceGesture<First, Second>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SequenceGesture.Value : Swift.Sendable where First.Value : Swift.Sendable, Second.Value : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SequenceGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SequenceGesture.Value : Swift.Equatable where First.Value : Swift.Equatable, Second.Value : Swift.Equatable {
  public static func == (a: SwiftUI.SequenceGesture<First, Second>.Value, b: SwiftUI.SequenceGesture<First, Second>.Value) -> Swift.Bool
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SheetBehavior {
  @_spi(Private) public static var sheet: SwiftUI.SheetBehavior {
    @_spi(Private) get
  }
  @_spi(Private) public static var navigationSplitViewForm: SwiftUI.SheetBehavior {
    @_spi(Private) get
  }
  @_spi(Private) public static var form: SwiftUI.SheetBehavior {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SheetBehavior : Swift.Sendable {
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func sheetBehavior(_ behavior: SwiftUI.SheetBehavior) -> some SwiftUICore.View
  
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PrototypePrintingCommands : SwiftUI.Commands {
  @_spi(DoNotImport) nonisolated public init()
  @_spi(DoNotImport) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(macOS 14.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25PrototypePrintingCommandsV4bodyQrvp", 0) __
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.PrototypePrintingCommands : Swift.Sendable {
}
@_spi(CustomHoverEffects) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(CustomHoverEffects) @_Concurrency.MainActor @preconcurrency public func _hoverEffect(_ effect: some CustomHoverEffect) -> some SwiftUICore.View
  
  @_spi(CustomHoverEffects) @_Concurrency.MainActor @preconcurrency public func _hoverEffect(_ effect: some CustomHoverEffect, isEnabled: Swift.Bool) -> some SwiftUICore.View
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(CustomHoverEffects) @_Concurrency.MainActor @preconcurrency public func _hoverEffect(_ effect: (SwiftUICore.EmptyHoverEffect) -> some CustomHoverEffect) -> some SwiftUICore.View
  
  @_spi(CustomHoverEffects) @_Concurrency.MainActor @preconcurrency public func _hoverEffect(isEnabled: Swift.Bool, effect: (SwiftUICore.EmptyHoverEffect) -> some CustomHoverEffect) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ListStyle where Self == SwiftUI.DefaultListStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.DefaultListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.DefaultListStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DismissBehavior : Swift.Sendable {
  public static let interactive: SwiftUI.DismissBehavior
  public static let destructive: SwiftUI.DismissBehavior
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Transaction {
  public var dismissBehavior: SwiftUI.DismissBehavior {
    get
    set
  }
}
extension SwiftUICore._TestApp {
  @_spi(ForSwiftUITestingOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func registerCoreProviders()
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_silgen_name("SwiftUIGlueClass")
public func SwiftUIGlueClass() -> SwiftUICore.CoreGlue.Type
@_spi(ForSwiftUIOnly) @_inheritsConvenienceInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@objc(SwiftUIGlue) final public class SwiftUIGlue : SwiftUICore.CoreGlue {
  @_spi(ForSwiftUIOnly) override final public func maxVelocity(_ value: CoreFoundation.CGFloat)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override final public func nextUpdate(nextTime: SwiftUICore.Time, interval: Swift.Double, reason: Swift.UInt32?)
  #else
  @_spi(ForSwiftUIOnly) override final public func nextUpdate(nextTime: SwiftUICore.Time, interval: Swift.Double, reason: Swift.UInt32?)
  #endif
  @_spi(ForSwiftUIOnly) override final public func hasTestHost() -> Swift.Bool
  @_spi(ForSwiftUIOnly) override final public func isInstantiated(graph: AttributeGraph.Graph) -> Swift.Bool
  @_spi(ForSwiftUIOnly) override final public var defaultImplicitRootType: SwiftUICore.CoreGlue.DefaultImplicitRootTypeResult {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) override final public var defaultSpacing: CoreFoundation.CGSize {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) override final public func makeDefaultLayoutComputer() -> SwiftUICore.CoreGlue.MakeDefaultLayoutComputerResult
  @_spi(ForSwiftUIOnly) override final public func makeDefaultLayoutComputer(graph: AttributeGraph.Graph) -> SwiftUICore.CoreGlue.MakeDefaultLayoutComputerResult
  @_spi(ForSwiftUIOnly) override final public func startChildGeometries(_ params: SwiftUICore.CoreGlue.StartChildGeometriesParameters)
  @_spi(ForSwiftUIOnly) override final public func endChildGeometries(_ params: SwiftUICore.CoreGlue.EndChildGeometriesParameters)
  @_spi(ForSwiftUIOnly) override final public func makeLayoutView<L>(root: SwiftUICore._GraphValue<L>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs where L : SwiftUICore.Layout
  @_spi(ForSwiftUIOnly) override final public func addDisplayListTreeValue(outputs: inout SwiftUICore._ViewOutputs)
  @_spi(ForSwiftUIOnly) override final public func updateData(_ data: inout SwiftUICore._ViewDebug.Data, value: AttributeGraph.TreeValue)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override final public func makeForEachView<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(ForSwiftUIOnly) override final public func makeForEachView<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override final public func makeForEachViewList<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(ForSwiftUIOnly) override final public func makeForEachViewList<D, ID, C>(view: SwiftUICore._GraphValue<SwiftUICore.ForEach<D, ID, C>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs? where D : Swift.RandomAccessCollection, ID : Swift.Hashable, C : SwiftUICore.View
  #endif
  @_spi(ForSwiftUIOnly) override final public func defaultOpenURLAction(env: SwiftUICore.EnvironmentValues) -> SwiftUICore.OpenURLAction
  @_spi(ForSwiftUIOnly) @objc override dynamic public init()
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUI.SwiftUIGlue : Swift.Sendable {
}
@_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_silgen_name("SwiftUIGlue2Class")
public func SwiftUIGlue2Class() -> SwiftUICore.CoreGlue2.Type
@_spi(ForSwiftUIOnly) @_inheritsConvenienceInitializers @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@objc(SwiftUIGlue2) final public class SwiftUIGlue2 : SwiftUICore.CoreGlue2 {
  @_spi(ForSwiftUIOnly) override final public func initializeTestApp()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override final public func isStatusBarHidden() -> Swift.Bool?
  #else
  @_spi(ForSwiftUIOnly) override final public func isStatusBarHidden() -> Swift.Bool?
  #endif
  @_spi(ForSwiftUIOnly) override final public func configureDefaultEnvironment(_ env: inout SwiftUICore.EnvironmentValues)
  @_spi(ForSwiftUIOnly) override final public func makeRootView(base: SwiftUICore.AnyView, rootFocusScope: SwiftUICore.Namespace.ID) -> SwiftUICore.AnyView
  @_spi(ForSwiftUIOnly) override final public var systemDefaultDynamicTypeSize: SwiftUICore.DynamicTypeSize {
    @_spi(ForSwiftUIOnly) get
  }
  @_spi(ForSwiftUIOnly) override final public var codableAttachmentCellType: SwiftUICore.CoreGlue2.CodableAttachmentCellTypeResult {
    @_spi(ForSwiftUIOnly) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForSwiftUIOnly) override final public func linkURL(_ params: SwiftUICore.CoreGlue2.LinkURLParameters) -> Foundation.URL?
  #else
  @_spi(ForSwiftUIOnly) override final public func linkURL(_ params: SwiftUICore.CoreGlue2.LinkURLParameters) -> Foundation.URL?
  #endif
  @_spi(ForSwiftUIOnly) override final public func transformingEquivalentAttributes(_ attributedString: Foundation.AttributedString) -> Foundation.AttributedString
  @_spi(ForSwiftUIOnly) @objc(makeSummarySymbolHostIsOn:font:foregroundColor:) override final public func makeSummarySymbolHost(isOn: Swift.Bool, font: CoreText.CTFont, foregroundColor: CoreGraphics.CGColor) -> Swift.AnyObject
  @_spi(ForSwiftUIOnly) @objc override dynamic public init()
  @_spi(ForSwiftUIOnly) @objc deinit
}
@_spi(ForSwiftUIOnly) @available(*, unavailable)
extension SwiftUI.SwiftUIGlue2 : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor public protocol PreviewModifier {
  associatedtype Context = Swift.Void
  associatedtype Body : SwiftUICore.View
  typealias Content = SwiftUI.PreviewModifierContent
  @_Concurrency.MainActor static func makeSharedContext() async throws -> Self.Context
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor func body(content: Self.Content, context: Self.Context) -> Self.Body
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.PreviewModifier where Self.Context == () {
  @_Concurrency.MainActor public static func makeSharedContext() async throws -> Self.Context
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct PreviewModifierContent : SwiftUICore.View {
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.PreviewModifierContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension DeveloperToolsSupport.PreviewTrait where T == DeveloperToolsSupport.Preview.ViewTraits {
  @_Concurrency.MainActor public static func modifier(_ modifier: some PreviewModifier) -> DeveloperToolsSupport.PreviewTrait<T>
}
@_spi(Previews) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct PreviewModifierViewModifier<Modifier> : SwiftUICore.ViewModifier where Modifier : SwiftUI.PreviewModifier {
  @_spi(Previews) nonisolated public init(modifier: Modifier, context: Modifier.Context)
  @_spi(Previews) @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.PreviewModifierViewModifier<Modifier>.Content) -> some SwiftUICore.View
  
  @_spi(Previews) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI019PreviewModifierViewD0V4body7contentQrAA01_eD8_ContentVyACyxGG_tF", 0) __<Modifier>
}
@_spi(Previews) @available(*, unavailable)
extension SwiftUI.PreviewModifierViewModifier : Swift.Sendable {
}
@_spi(Previews) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor public struct PreviewModifierTrait : DeveloperToolsSupport.PreviewTraitProtocol {
  @_spi(Previews) @_Concurrency.MainActor public var value: [any SwiftUI.PreviewModifier]
  @_spi(Previews) @_Concurrency.MainActor public static var defaultValue: [any SwiftUI.PreviewModifier] {
    @_spi(Previews) get
  }
  @_spi(Previews) @_Concurrency.MainActor public static func combine(_ lhs: [any SwiftUI.PreviewModifier], _ rhs: [any SwiftUI.PreviewModifier]) -> [any SwiftUI.PreviewModifier]
  @_spi(Previews) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Value = [any SwiftUI.PreviewModifier]
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUI.CustomizableToolbarContent {
  @_spi(_) public func visibility(_ visibility: SwiftUI.Visibility) -> some SwiftUI.CustomizableToolbarContent
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.View {
  @_spi(_) nonisolated public func toolbarItemVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func listRowHoverEffect(_ effect: SwiftUI.HoverEffect?) -> some SwiftUICore.View
  
  #else
  nonisolated public func listRowHoverEffect(_ effect: SwiftUI.HoverEffect?) -> some SwiftUICore.View
  
  #endif
  nonisolated public func listRowHoverEffectDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(_) @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct ListRowHoverEffectTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @usableFromInline
  internal static var defaultValue: SwiftUI.HoverEffect? {
    @_spi(_) get
  }
  #else
  @_spi(_) @usableFromInline
  internal static var defaultValue: SwiftUI.HoverEffect? {
    @_spi(_) get
  }
  #endif
  @_spi(_) @available(visionOS 1.0, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  internal typealias Value = SwiftUI.HoverEffect?
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.ListRowHoverEffectTraitKey : Swift.Sendable {
}
@_spi(_) @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct ListRowHoverEffectEnabledTraitKey : SwiftUICore._ViewTraitKey {
  @_spi(_) @usableFromInline
  internal static var defaultValue: Swift.Bool {
    @_spi(_) get
  }
  @_spi(_) @available(visionOS 1.0, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  internal typealias Value = Swift.Bool
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.ListRowHoverEffectEnabledTraitKey : Swift.Sendable {
}
@_spi(_) @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct IgnoreListRowHoverEffectTraitsKey : SwiftUICore._ViewTraitKey {
  @_spi(_) @usableFromInline
  internal static var defaultValue: Swift.Bool {
    @_spi(_) get
  }
  @_spi(_) @available(visionOS 1.0, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  internal typealias Value = Swift.Bool
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.IgnoreListRowHoverEffectTraitsKey : Swift.Sendable {
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ScaleHoverEffect : SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public init(from inactiveScale: Swift.Double, to activeScale: Swift.Double, anchor: SwiftUICore.UnitPoint = .center)
  @_spi(CustomHoverEffects) public func body(content: SwiftUI.ScaleHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
  @available(iOS, unavailable, introduced: 18.0)
  @available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ScaleHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@_spi(CustomHoverEffects) @available(*, unavailable)
extension SwiftUI.ScaleHoverEffect : Swift.Sendable {
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.ScaleHoverEffect {
  @_spi(CustomHoverEffects) public static func scaleEffect(from inactiveScale: Swift.Double, to activeScale: Swift.Double, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUI.ScaleHoverEffect
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public func scaleEffect(from inactiveScale: Swift.Double, to activeScale: Swift.Double, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.CustomHoverEffect
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _CommandsInputs {
}
@available(*, unavailable)
extension SwiftUI._CommandsInputs : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _CommandsOutputs {
}
@available(*, unavailable)
extension SwiftUI._CommandsOutputs : Swift.Sendable {
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func findNavigator(isPresented: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  nonisolated public func findDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func replaceDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency public func _onEnvironmentChange<Value>(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>, perform action: @escaping (_ newValue: Value) -> Swift.Void) -> some SwiftUICore.View where Value : Swift.Equatable
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public func _onEnvironmentChange<Value>(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>, perform action: @escaping (_ oldValue: Value?, _ newValue: Value) -> Swift.Void) -> some SwiftUICore.View where Value : Swift.Equatable
  
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency public func _onEnvironmentChange<Value>(_ keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, Value>, perform action: @escaping (_ oldValue: Value?, _ newValue: Value) -> Swift.Void) -> some SwiftUICore.View where Value : Swift.Equatable
  
  #endif
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct WindowVisibilityToggle<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  nonisolated public init(windowID: Swift.String) where Label == SwiftUI.DefaultWindowVisibilityToggleLabel
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22WindowVisibilityToggleV4bodyQrvp", 0) __<Label>
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowVisibilityToggle {
  @_spi(DoNotImport) nonisolated public init(windowID: Swift.String, @SwiftUICore.ViewBuilder label: @escaping (Swift.Bool) -> Label)
}
@available(*, unavailable)
extension SwiftUI.WindowVisibilityToggle : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultWindowVisibilityToggleLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI34DefaultWindowVisibilityToggleLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultWindowVisibilityToggleLabel : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(*, deprecated, renamed: "WindowVisibilityToggle")
@_Concurrency.MainActor @preconcurrency public struct WindowVisibilityButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public init(windowID: Swift.String) where Label == SwiftUI.DefaultWindowVisibilityButtonLabel
  @_spi(DoNotImport) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(*, deprecated, renamed: "WindowVisibilityToggle")
  @available(iOS, unavailable, introduced: 13.0, renamed: "WindowVisibilityToggle")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "WindowVisibilityToggle")
  @available(watchOS, unavailable, introduced: 6.0, renamed: "WindowVisibilityToggle")
  @available(macOS, introduced: 15.0, renamed: "WindowVisibilityToggle")
  @available(visionOS, unavailable, renamed: "WindowVisibilityToggle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22WindowVisibilityButtonV4bodyQrvp", 0) __<Label>
}
@_spi(DoNotImport) @available(*, unavailable)
@available(*, deprecated, renamed: "WindowVisibilityToggle")
extension SwiftUI.WindowVisibilityButton : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(*, deprecated, renamed: "DefaultWindowVisibilityToggleLabel")
@_Concurrency.MainActor @preconcurrency public struct DefaultWindowVisibilityButtonLabel : SwiftUICore.View {
  @_spi(DoNotImport) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(*, deprecated, renamed: "DefaultWindowVisibilityToggleLabel")
  @available(iOS, unavailable, introduced: 13.0, renamed: "DefaultWindowVisibilityToggleLabel")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "DefaultWindowVisibilityToggleLabel")
  @available(watchOS, unavailable, introduced: 6.0, renamed: "DefaultWindowVisibilityToggleLabel")
  @available(macOS, introduced: 15.0, renamed: "DefaultWindowVisibilityToggleLabel")
  @available(visionOS, unavailable, renamed: "DefaultWindowVisibilityToggleLabel")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI34DefaultWindowVisibilityButtonLabelV4bodyQrvp", 0) __
}
@_spi(DoNotImport) @available(*, unavailable)
@available(*, deprecated, renamed: "DefaultWindowVisibilityToggleLabel")
extension SwiftUI.DefaultWindowVisibilityButtonLabel : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Text {
  public func speechAlwaysIncludesPunctuation(_ value: Swift.Bool = true) -> SwiftUICore.Text
  public func speechSpellsOutCharacters(_ value: Swift.Bool = true) -> SwiftUICore.Text
  public func speechAdjustedPitch(_ value: Swift.Double) -> SwiftUICore.Text
  public func speechAnnouncementsQueued(_ value: Swift.Bool = true) -> SwiftUICore.Text
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func speechAlwaysIncludesPunctuation(_ value: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func speechSpellsOutCharacters(_ value: Swift.Bool = true) -> some SwiftUICore.View
  
  nonisolated public func speechAdjustedPitch(_ value: Swift.Double) -> some SwiftUICore.View
  
  nonisolated public func speechAnnouncementsQueued(_ value: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Text {
  @_spi(Private) public func speechAnnouncementsPriority(_ value: SwiftUICore.AccessibilityAnnouncementPriority = .default) -> SwiftUICore.Text
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func speechAnnouncementsPriority(_ value: SwiftUICore.AccessibilityAnnouncementPriority = .default) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var sceneSession: UIKit.UISceneSession? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #else
  @_spi(Private) public var sceneSession: UIKit.UISceneSession? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AlignmentWritingModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public let key: SwiftUICore.AlignmentKey
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal let computeValue: (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(key: SwiftUICore.AlignmentKey, computeValue: @escaping (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat) {
        self.key = key
        self.computeValue = computeValue
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AlignmentWritingModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._AlignmentWritingModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func alignmentGuide(_ g: SwiftUICore.HorizontalAlignment, computeValue: @escaping (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
  @inlinable nonisolated public func alignmentGuide(_ g: SwiftUICore.VerticalAlignment, computeValue: @escaping (SwiftUICore.ViewDimensions) -> CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return modifier(
            _AlignmentWritingModifier(key: g.key, computeValue: computeValue))
    }
  
}
extension SwiftUI._UIHostingView : SwiftUICore.ViewRendererHost, SwiftUICore.EventGraphHost {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func `as`<T>(_ type: T.Type) -> T?
  #else
  @_Concurrency.MainActor @preconcurrency package func `as`<T>(_ type: T.Type) -> T?
  #endif
  @_Concurrency.MainActor @preconcurrency package func updateRootView()
  @_Concurrency.MainActor @preconcurrency package func updateEnvironment()
  @_Concurrency.MainActor @preconcurrency package func updateFocusedItem()
  @_Concurrency.MainActor @preconcurrency package func updateFocusedValues()
  @_Concurrency.MainActor @preconcurrency package func updateFocusStore()
  @_Concurrency.MainActor @preconcurrency package func updateTransform()
  @_Concurrency.MainActor @preconcurrency package func updateSize()
  @_Concurrency.MainActor @preconcurrency package func updateSafeArea()
  @_Concurrency.MainActor @preconcurrency package func updateScrollableContainerSize()
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public func beginTransaction()
  @_Concurrency.MainActor @preconcurrency package func requestUpdate(after delay: Swift.Double)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #else
  @_Concurrency.MainActor @preconcurrency package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #endif
  @_Concurrency.MainActor @preconcurrency package func didRender()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency package var focusedResponder: SwiftUICore.ResponderNode? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency package var focusedResponder: SwiftUICore.ResponderNode? {
    get
  }
  #endif
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public func preferencesDidChange()
}
extension SwiftUI._UIHostingView {
  @_Concurrency.MainActor @preconcurrency package func rootTransform() -> SwiftUICore.ViewTransform
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func horizontalAlignment(_ guide: SwiftUICore.HorizontalAlignment) -> CoreFoundation.CGFloat
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func verticalAlignment(_ guide: SwiftUICore.VerticalAlignment) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency package func updateAccessibilityFocusStore()
  @_Concurrency.MainActor @preconcurrency package func updateAccessibilityFocus()
  @_Concurrency.MainActor @preconcurrency package func updateAccessibilityEnvironment()
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public func _makeUIHostingView<Content>(_ view: Content) -> ObjectiveC.NSObject where Content : SwiftUICore.View
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public protocol DividerStyle {
  associatedtype Body : SwiftUICore.View
  @_spi(Private) @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @_spi(Private) typealias Configuration = SwiftUI.DividerStyleConfiguration
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct DividerStyleConfiguration {
  @_spi(Private) public var orientation: SwiftUICore.Axis
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DividerStyleConfiguration : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func dividerStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.DividerStyle
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowBackgroundDragBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUI.Scene
  
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) @available(*, deprecated, message: "Use 'Scene.windowBackgroundDragBehavior(_:)' instead.")
  nonisolated public func windowDragArea(_ area: SwiftUI.WindowDragArea) -> some SwiftUI.Scene
  
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(*, deprecated, message: "Use 'Scene.windowBackgroundDragBehavior(_:)' instead.")
public struct WindowDragArea : Swift.Sendable {
  @_spi(DoNotImport) @available(*, deprecated, message: "Use 'Scene.windowBackgroundDragBehavior(_:)' instead.")
  public static let automatic: SwiftUI.WindowDragArea
  @_spi(DoNotImport) @available(*, deprecated, message: "Use 'Scene.windowBackgroundDragBehavior(_:)' instead.")
  public static let toolbarOrBackground: SwiftUI.WindowDragArea
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.4, *)
  @available(watchOS, unavailable)
  nonisolated public func searchScopes<V, S>(_ scope: SwiftUICore.Binding<V>, @SwiftUICore.ViewBuilder scopes: () -> S) -> some SwiftUICore.View where V : Swift.Hashable, S : SwiftUICore.View
  
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct SearchScopeActivation {
  public static var automatic: SwiftUI.SearchScopeActivation {
    get
  }
  @available(tvOS, unavailable)
  public static var onTextEntry: SwiftUI.SearchScopeActivation {
    get
  }
  @available(tvOS, unavailable)
  public static var onSearchPresentation: SwiftUI.SearchScopeActivation {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.SearchScopeActivation : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, *)
  @available(watchOS, unavailable)
  nonisolated public func searchScopes<V, S>(_ scope: SwiftUICore.Binding<V>, activation: SwiftUI.SearchScopeActivation, @SwiftUICore.ViewBuilder _ scopes: () -> S) -> some SwiftUICore.View where V : Swift.Hashable, S : SwiftUICore.View
  
  @_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
  @available(watchOS, unavailable)
  nonisolated public func searchScopes(_ scope: SwiftUICore.Binding<some Hashable>, isActive: Swift.Bool, @SwiftUICore.ViewBuilder scopes: () -> some View) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(Private_Search) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func searchScopeBar(isActive: Swift.Bool, @SwiftUICore.ViewBuilder _ scopeBar: () -> some View) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(Private_Search) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func searchScopeBar(isActive: Swift.Bool, visibility: SwiftUI.Visibility, @SwiftUICore.ViewBuilder _ scopeBar: () -> some View) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct PlatformViewHitTestFilterGesture<WrappedGesture> : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture where WrappedGesture : SwiftUICore.Gesture {
  @_spi(Private) public typealias PlatformView = UIKit.UIView
  @_spi(Private) public struct Value {
    @_spi(Private) public var gestureValue: WrappedGesture.Value
    @_spi(Private) public var view: SwiftUI.PlatformViewHitTestFilterGesture<WrappedGesture>.PlatformView
    @_spi(Private) public var location: CoreFoundation.CGPoint
  }
  @_spi(Private) public init(_ wrapped: WrappedGesture, filter: @escaping ((SwiftUI.PlatformViewHitTestFilterGesture<WrappedGesture>.PlatformView, CoreFoundation.CGPoint) -> Swift.Bool))
  @_spi(Private) package var internalBody: some SwiftUICore.Gesture<SwiftUI.PlatformViewHitTestFilterGesture<WrappedGesture>.Value> {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
  @_spi(Private) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI32PlatformViewHitTestFilterGestureV12internalBodyQrvp", 0) __<WrappedGesture>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PlatformViewHitTestFilterGesture : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PlatformViewHitTestFilterGesture.Value : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func pointerVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
  @_spi(_) @available(*, deprecated, renamed: "pointerVisibility(_:)")
  nonisolated public func pointer(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct TabView<SelectionValue, Content> : SwiftUICore.View where SelectionValue : Swift.Hashable, Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(macOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(tvOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(watchOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>?, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @available(iOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(macOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(tvOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  @available(watchOS, deprecated: 100000.0, message: "Use TabContentBuilder-based TabView initializers instead")
  nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>?, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public init<C>(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> C) where Content == SwiftUI.TabContentBuilder<SelectionValue>.Content<C>, C : SwiftUI.TabContent
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 7.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7TabViewV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(*, unavailable)
extension SwiftUI.TabView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.TabView where SelectionValue == Swift.Int {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabView {
  nonisolated public init<C>(@SwiftUI.TabContentBuilder<Swift.Never> content: () -> C) where SelectionValue == Swift.Never, Content == SwiftUI.TabContentBuilder<Swift.Never>.Content<C>, C : SwiftUI.TabContent
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct SymbolEffect : Swift.Equatable {
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func speed(_ speed: Swift.Double) -> SwiftUI.SymbolEffect
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func repeatCount(_ value: Swift.Double?) -> SwiftUI.SymbolEffect
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func repeatCount(_ value: Swift.Double?) -> SwiftUI.SymbolEffect
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func repeatDelay(_ value: Swift.Double?) -> SwiftUI.SymbolEffect
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func repeatDelay(_ value: Swift.Double?) -> SwiftUI.SymbolEffect
  #endif
  @_spi(Private) public struct PulseConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.PulseConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) @available(*, deprecated, message: "no longer supported")
    public static var slow: SwiftUI.SymbolEffect.PulseConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) @available(*, deprecated, message: "no longer supported")
    public static var fast: SwiftUI.SymbolEffect.PulseConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var byLayer: SwiftUI.SymbolEffect.PulseConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var wholeSymbol: SwiftUI.SymbolEffect.PulseConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var byLayer: SwiftUI.SymbolEffect.PulseConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var wholeSymbol: SwiftUI.SymbolEffect.PulseConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.PulseConfiguration, b: SwiftUI.SymbolEffect.PulseConfiguration) -> Swift.Bool
  }
  @_spi(Private) public static func pulse(_ config: SwiftUI.SymbolEffect.PulseConfiguration = .default) -> SwiftUI.SymbolEffect
  @_spi(Private) public static var pulse: SwiftUI.SymbolEffect {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct BreatheConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.BreatheConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var onlyScale: SwiftUI.SymbolEffect.BreatheConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var wholeSymbol: SwiftUI.SymbolEffect.BreatheConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var byLayer: SwiftUI.SymbolEffect.BreatheConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var wholeSymbol: SwiftUI.SymbolEffect.BreatheConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.BreatheConfiguration, b: SwiftUI.SymbolEffect.BreatheConfiguration) -> Swift.Bool
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func breathe(_ config: SwiftUI.SymbolEffect.BreatheConfiguration = .default) -> SwiftUI.SymbolEffect
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static var breathe: SwiftUI.SymbolEffect {
    @_spi(Private) get
  }
  @_spi(Private) public struct BounceConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.BounceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var up: SwiftUI.SymbolEffect.BounceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var down: SwiftUI.SymbolEffect.BounceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var byLayer: SwiftUI.SymbolEffect.BounceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var wholeSymbol: SwiftUI.SymbolEffect.BounceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var byLayer: SwiftUI.SymbolEffect.BounceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var wholeSymbol: SwiftUI.SymbolEffect.BounceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.BounceConfiguration, b: SwiftUI.SymbolEffect.BounceConfiguration) -> Swift.Bool
  }
  @_spi(Private) public static func bounce<T>(_ config: SwiftUI.SymbolEffect.BounceConfiguration = .default, value: T) -> SwiftUI.SymbolEffect where T : Swift.Equatable
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func bounce(_ config: SwiftUI.SymbolEffect.BounceConfiguration = .default) -> SwiftUI.SymbolEffect
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct WiggleConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.WiggleConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func linear(angle: SwiftUICore.Angle) -> SwiftUI.SymbolEffect.WiggleConfiguration
    @_spi(Private) public static var rotational: SwiftUI.SymbolEffect.WiggleConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public func continuous(_ enabled: Swift.Bool = true) -> SwiftUI.SymbolEffect.WiggleConfiguration
    @_spi(Private) public func byLayer(_ enabled: Swift.Bool) -> SwiftUI.SymbolEffect.WiggleConfiguration
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.WiggleConfiguration, b: SwiftUI.SymbolEffect.WiggleConfiguration) -> Swift.Bool
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func wiggle(_ config: SwiftUI.SymbolEffect.WiggleConfiguration = .default) -> SwiftUI.SymbolEffect
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func wiggle<T>(_ config: SwiftUI.SymbolEffect.WiggleConfiguration = .default, value: T) -> SwiftUI.SymbolEffect where T : Swift.Equatable
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public struct RotateConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.RotateConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var clockwise: SwiftUI.SymbolEffect.RotateConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var counterClockwise: SwiftUI.SymbolEffect.RotateConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public func continuous(_ enabled: Swift.Bool = true) -> SwiftUI.SymbolEffect.RotateConfiguration
    @_spi(Private) public func byLayer(_ enabled: Swift.Bool) -> SwiftUI.SymbolEffect.RotateConfiguration
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.RotateConfiguration, b: SwiftUI.SymbolEffect.RotateConfiguration) -> Swift.Bool
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func rotate(_ config: SwiftUI.SymbolEffect.RotateConfiguration = .default) -> SwiftUI.SymbolEffect
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public static func rotate<T>(_ config: SwiftUI.SymbolEffect.RotateConfiguration = .default, value: T) -> SwiftUI.SymbolEffect where T : Swift.Equatable
  @_spi(Private) public struct VariableColorConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.VariableColorConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var cumulative: SwiftUI.SymbolEffect.VariableColorConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var sequential: SwiftUI.SymbolEffect.VariableColorConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var reversing: SwiftUI.SymbolEffect.VariableColorConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var nonReversing: SwiftUI.SymbolEffect.VariableColorConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var hideOn: SwiftUI.SymbolEffect.VariableColorConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var hideOff: SwiftUI.SymbolEffect.VariableColorConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.VariableColorConfiguration, b: SwiftUI.SymbolEffect.VariableColorConfiguration) -> Swift.Bool
  }
  @_spi(Private) public static func variableColor(_ config: SwiftUI.SymbolEffect.VariableColorConfiguration = .default) -> SwiftUI.SymbolEffect
  @_spi(Private) public struct ScaleConfiguration : Swift.Equatable {
    @_spi(Private) public static var none: SwiftUI.SymbolEffect.ScaleConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var up: SwiftUI.SymbolEffect.ScaleConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var down: SwiftUI.SymbolEffect.ScaleConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var byLayer: SwiftUI.SymbolEffect.ScaleConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var wholeSymbol: SwiftUI.SymbolEffect.ScaleConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.ScaleConfiguration, b: SwiftUI.SymbolEffect.ScaleConfiguration) -> Swift.Bool
  }
  @_spi(Private) public static func scale(_ config: SwiftUI.SymbolEffect.ScaleConfiguration) -> SwiftUI.SymbolEffect
  @_spi(Private) @_alwaysEmitIntoClient public static var scaleUp: SwiftUI.SymbolEffect {
    @_spi(Private) get { scale(.up) }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static var scaleDown: SwiftUI.SymbolEffect {
    @_spi(Private) get { scale(.down) }
  }
  @_spi(Private) public struct HiddenConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.HiddenConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var down: SwiftUI.SymbolEffect.HiddenConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var up: SwiftUI.SymbolEffect.HiddenConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var byLayer: SwiftUI.SymbolEffect.HiddenConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var wholeSymbol: SwiftUI.SymbolEffect.HiddenConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var byLayer: SwiftUI.SymbolEffect.HiddenConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var wholeSymbol: SwiftUI.SymbolEffect.HiddenConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.HiddenConfiguration, b: SwiftUI.SymbolEffect.HiddenConfiguration) -> Swift.Bool
  }
  @_spi(Private) public static func hidden(_ isHidden: Swift.Bool = true, _ config: SwiftUI.SymbolEffect.HiddenConfiguration = .default) -> SwiftUI.SymbolEffect
  @_spi(Private) public struct ReplaceConfiguration : Swift.Equatable {
    @_spi(Private) public static var `default`: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var up: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var down: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var offUp: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var byLayer: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static var wholeSymbol: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var byLayer: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public var wholeSymbol: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public var noSlashes: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public var noBadges: SwiftUI.SymbolEffect.ReplaceConfiguration {
      @_spi(Private) get
    }
    @_spi(Private) public static func == (a: SwiftUI.SymbolEffect.ReplaceConfiguration, b: SwiftUI.SymbolEffect.ReplaceConfiguration) -> Swift.Bool
  }
  @_spi(Private) public static func == (a: SwiftUI.SymbolEffect, b: SwiftUI.SymbolEffect) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.PulseConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.BreatheConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.BounceConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.WiggleConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.RotateConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.VariableColorConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.ScaleConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.HiddenConfiguration : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.ReplaceConfiguration : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func symbolEffect(_ effect: SwiftUI.SymbolEffect?) -> some SwiftUICore.View {
        return modifier(_SymbolEffectModifier(effect: effect))
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func symbolEffect(_ effect: SwiftUI.SymbolEffect?) -> some SwiftUICore.View {
        return modifier(_SymbolEffectModifier(effect: effect))
    }
  
  #endif
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func symbolEffects(_ effects: [SwiftUI.SymbolEffect]) -> some SwiftUICore.View {
        return modifier(_SymbolEffectsModifier(effects: effects))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func symbolEffectsRemoved(_ isEnabled: Swift.Bool = true) -> some SwiftUICore.View {
        return modifier(_SymbolEffectsRemovedModifier(isEnabled: isEnabled))
    }
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SymbolEffectModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency package var effect: SwiftUI.SymbolEffect?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency package init(effect: SwiftUI.SymbolEffect?)
  #else
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency package init(effect: SwiftUI.SymbolEffect?)
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._SymbolEffectModifier>, inputs: inout SwiftUICore._GraphInputs)
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SymbolEffectsModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var effects: [SwiftUI.SymbolEffect]
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(effects: [SwiftUI.SymbolEffect]) {
        self.effects = effects
    }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._SymbolEffectsModifier>, inputs: inout SwiftUICore._GraphInputs)
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SymbolEffectsRemovedModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var isEnabled: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(isEnabled: Swift.Bool) { self.isEnabled = isEnabled }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._SymbolEffectsRemovedModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._SymbolEffectModifier : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._SymbolEffectsModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition where Self == SwiftUI.SymbolEffect.HiddenTransition {
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func symbolHidden(_ config: SwiftUI.SymbolEffect.HiddenConfiguration = .default) -> SwiftUI.SymbolEffect.HiddenTransition {
        return .init(config: config)
    }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.SymbolEffect {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public struct HiddenTransition : SwiftUICore.Transition {
    @_spi(Private) @_Concurrency.MainActor @preconcurrency public var config: SwiftUI.SymbolEffect.HiddenConfiguration
    @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(config: SwiftUI.SymbolEffect.HiddenConfiguration)
    @_spi(Private) @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.SymbolEffect.HiddenTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
    
    @_spi(Private) @_Concurrency.MainActor @preconcurrency public static let properties: SwiftUICore.TransitionProperties
    @_spi(Private) @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
    @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12SymbolEffectV16HiddenTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyAEG_AA0F5PhaseOtF", 0) __
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SymbolEffect.HiddenTransition : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ContentTransition {
  @_spi(Private) public static func symbolReplace(_ config: SwiftUI.SymbolEffect.ReplaceConfiguration = .default) -> SwiftUICore.ContentTransition
}
@_spi(Private) extension SwiftUI.SymbolEffect : SwiftUICore.ProtobufMessage {
  @_spi(Private) package func encode(to encoder: inout SwiftUICore.ProtobufEncoder) throws
  @_spi(Private) package init(from decoder: inout SwiftUICore.ProtobufDecoder) throws
}
@_spi(Private) extension SwiftUI.SymbolEffect {
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var isIndefinite: Swift.Bool {
    @_spi(Private) get
  }
}
@available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct TextInputDictationBehavior : Swift.Equatable, Swift.Sendable {
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let automatic: SwiftUI.TextInputDictationBehavior
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static func inline(activation: SwiftUI.TextInputDictationActivation) -> SwiftUI.TextInputDictationBehavior
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let preventDictation: SwiftUI.TextInputDictationBehavior
  public static func == (a: SwiftUI.TextInputDictationBehavior, b: SwiftUI.TextInputDictationBehavior) -> Swift.Bool
}
@available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct TextInputDictationActivation : Swift.Equatable, Swift.Sendable {
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let onSelect: SwiftUI.TextInputDictationActivation
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let onLook: SwiftUI.TextInputDictationActivation
  public static func == (a: SwiftUI.TextInputDictationActivation, b: SwiftUI.TextInputDictationActivation) -> Swift.Bool
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ColorPickerStyle {
  associatedtype Body : SwiftUICore.View
  @_spi(UIFrameworks) @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @_spi(UIFrameworks) typealias Configuration = SwiftUI.ColorPickerStyleConfiguration
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ColorPickerStyleConfiguration {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  @_spi(UIFrameworks) public let label: SwiftUI.ColorPickerStyleConfiguration.Label
  @_spi(UIFrameworks) public var supportsOpacity: Swift.Bool
  @_spi(UIFrameworks) @SwiftUICore.Binding @_projectedValueProperty($color) public var color: UIKit.UIColor {
    @_spi(UIFrameworks) get
    @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating set
    @_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating _modify
  }
  @_spi(UIFrameworks) public var $color: SwiftUICore.Binding<UIKit.UIColor> {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) public init(color: SwiftUICore.Binding<UIKit.UIColor>, supportsOpacity: Swift.Bool)
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.ColorPickerStyleConfiguration : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.ColorPickerStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(UIFrameworks) nonisolated public func colorPickerStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ColorPickerStyle
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func selectionDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View {
        _trait(IsSelectionEnabledTraitKey.self, !isDisabled)
    }
  
}
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func selectionDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUI.TableRowContent<Self.TableRowValue>
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
internal struct IsSelectionEnabledTraitKey : SwiftUICore._ViewTraitKey {
  @usableFromInline
  internal static let defaultValue: Swift.Bool
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsSelectionEnabledTraitKey : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public var _defaultSwiftUIActivityEnvironmentLoggingEnabled: Swift.Bool
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func userActivity(_ activityType: Swift.String, isActive: Swift.Bool = true, _ update: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func userActivity<P>(_ activityType: Swift.String, element: P?, _ update: @escaping (P, Foundation.NSUserActivity) -> ()) -> some SwiftUICore.View
  
  #else
  nonisolated public func userActivity<P>(_ activityType: Swift.String, element: P?, _ update: @escaping (P, Foundation.NSUserActivity) -> ()) -> some SwiftUICore.View
  
  #endif
  nonisolated public func onContinueUserActivity(_ activityType: Swift.String, perform action: @escaping (Foundation.NSUserActivity) -> ()) -> some SwiftUICore.View
  
  nonisolated public func onOpenURL(perform action: @escaping (Foundation.URL) -> ()) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onOpenURL(perform action: @escaping (Foundation.URL, SwiftUI.OpenURLOptions?) -> ()) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onOpenURL(perform action: @escaping (Foundation.URL, SwiftUI.OpenURLOptions?) -> ()) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func handlesExternalEvents(preferring: Swift.Set<Swift.String>, allowing: Swift.Set<Swift.String>) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct OpenURLOptions {
  @_spi(Private) public var uiSceneOpenURLOptions: UIKit.UIScene.OpenURLOptions
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.OpenURLOptions : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazyVStack<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyVStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyVStack : Swift.Sendable {
}
extension Foundation.IndexPath {
  package var flatIndex: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var parent: Foundation.IndexPath? {
    get
  }
  #else
  package var parent: Foundation.IndexPath? {
    get
  }
  #endif
  package func isParent(of indexPath: Foundation.IndexPath) -> Swift.Bool
  package func isChild(of indexPath: Foundation.IndexPath) -> Swift.Bool
  package func isAncestor(of indexPath: Foundation.IndexPath) -> Swift.Bool
  package func isDescendant(of indexPath: Foundation.IndexPath) -> Swift.Bool
  package func isSiblingOf(of indexPath: Foundation.IndexPath) -> Swift.Bool
  package func sibling(atOffset delta: Swift.Int) -> Foundation.IndexPath
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DisclosureGroupStyle where Self == SwiftUI.AutomaticDisclosureGroupStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticDisclosureGroupStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AutomaticDisclosureGroupStyle : SwiftUI.DisclosureGroupStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticDisclosureGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI29AutomaticDisclosureGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticDisclosureGroupStyle : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct LimitedAvailabilityCommandContent : SwiftUI.Commands {
  @_Concurrency.MainActor @preconcurrency internal let storage: SwiftUI.LimitedAvailabilityCommandContentStorageBase
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init<C>(erasing commands: C) where C : SwiftUI.Commands
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityCommandContent>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @available(iOS 17.5, macOS 14.5, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityCommandContent : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal class LimitedAvailabilityCommandContentStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityCommandContentStorageBase : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct TouchBar<Content> where Content : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
  public init(id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(*, unavailable)
extension SwiftUI.TouchBar : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public enum TouchBarItemPresence : Swift.Sendable {
  case required(_: Swift.String)
  case `default`(_: Swift.String)
  case optional(_: Swift.String)
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func touchBar<Content>(_ touchBar: SwiftUI.TouchBar<Content>) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func touchBar<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _TouchBarModifier<Content> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Content : SwiftUICore.View {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._TouchBarModifier<Content>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TouchBarModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore.VisualEffect {
  public func colorEffect(_ shader: SwiftUICore.Shader, isEnabled: Swift.Bool = true) -> some SwiftUICore.VisualEffect
  
  public func distortionEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.VisualEffect
  
  public func layerEffect(_ shader: SwiftUICore.Shader, maxSampleOffset: CoreFoundation.CGSize, isEnabled: Swift.Bool = true) -> some SwiftUICore.VisualEffect
  
}
#if compiler(>=5.3) && $RetroactiveAttribute
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore._ShaderFilterEffect : @retroactive SwiftUICore.VisualEffect {
  @_Concurrency.MainActor @preconcurrency public static func _makeVisualEffect(effect: SwiftUICore._GraphValue<SwiftUICore._ShaderFilterEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
  @_spi_available(watchOS, introduced: 10.0)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
#else
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@_spi_available(watchOS, introduced: 10.0)
extension SwiftUICore._ShaderFilterEffect : SwiftUICore.VisualEffect {
  @_Concurrency.MainActor @preconcurrency public static func _makeVisualEffect(effect: SwiftUICore._GraphValue<SwiftUICore._ShaderFilterEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
  @_spi_available(watchOS, introduced: 10.0)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
#endif
@available(iOS 14.0, macOS 10.15, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.SidebarListStyle {
  @_alwaysEmitIntoClient public static var sidebar: SwiftUI.SidebarListStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 10.15, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
public struct SidebarListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.SidebarListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.SidebarListStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, introduced: 14.0, deprecated: 16.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(macOS, introduced: 11.0, deprecated: 13.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(tvOS, introduced: 14.0, deprecated: 16.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(watchOS, introduced: 7.0, deprecated: 9.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func accessibilityFocusable<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View where ID : Swift.Hashable
  
}
@_spi(Private) @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
public struct AccessibilityRequestFocusAction {
  @_spi(Private) public func callAsFunction<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID) where ID : Swift.Hashable
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.AccessibilityRequestFocusAction : Swift.Sendable {
}
@_spi(Private) @available(iOS, introduced: 14.0, deprecated: 16.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(macOS, introduced: 11.0, deprecated: 13.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(tvOS, introduced: 14.0, deprecated: 16.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
@available(watchOS, introduced: 7.0, deprecated: 9.0, message: "Use AccessibilityFocusState<T> and View/accessibilityFocused(_:equals:) or View/accessibilityFocused(_:)")
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var requestAccessibilityFocus: SwiftUI.AccessibilityRequestFocusAction {
    @_spi(Private) get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityHint(_ hint: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityHint<S>(_ hint: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  @_spi(Uniquely) nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_spi(Uniquely) nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_spi(Uniquely) @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHint(_ hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityHint<S>(_ hint: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityHint(_ hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityHint(_ hintKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityHint<S>(_ hint: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct OffsetShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: Content
  @_Concurrency.MainActor @preconcurrency public var offset: CoreFoundation.CGSize
  @inlinable nonisolated public init(shape: Content, offset: CoreFoundation.CGSize) {
        self.shape = shape
        self.offset = offset
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Content.AnimatableData, CoreFoundation.CGSize.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI.OffsetShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI.OffsetShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.OffsetShape : SwiftUICore.InsettableShape where Content : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> SwiftUI.OffsetShape<Content.InsetShape> {
        return shape.inset(by: amount).offset(offset)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = SwiftUI.OffsetShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct ScaledShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: Content
  @_Concurrency.MainActor @preconcurrency public var scale: CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.UnitPoint
  @inlinable nonisolated public init(shape: Content, scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) {
        self.shape = shape
        self.scale = scale
        self.anchor = anchor
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Content.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGSize.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI.ScaledShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI.ScaledShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct RotatedShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: Content
  @_Concurrency.MainActor @preconcurrency public var angle: SwiftUICore.Angle
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.UnitPoint
  @inlinable nonisolated public init(shape: Content, angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) {
        self.shape = shape
        self.angle = angle
        self.anchor = anchor
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<Content.AnimatableData, SwiftUICore.AnimatablePair<SwiftUICore.Angle.AnimatableData, SwiftUICore.UnitPoint.AnimatableData>>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI.RotatedShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI.RotatedShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.RotatedShape : SwiftUICore.InsettableShape where Content : SwiftUICore.InsettableShape {
  @inlinable @_Concurrency.MainActor @preconcurrency public func inset(by amount: CoreFoundation.CGFloat) -> SwiftUI.RotatedShape<Content.InsetShape> {
        return shape.inset(by: amount).rotation(angle, anchor: anchor)
    }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias InsetShape = SwiftUI.RotatedShape<Content.InsetShape>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct TransformedShape<Content> : SwiftUICore.Shape where Content : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: Content
  @_Concurrency.MainActor @preconcurrency public var transform: CoreFoundation.CGAffineTransform
  @inlinable nonisolated public init(shape: Content, transform: CoreFoundation.CGAffineTransform) {
        self.shape = shape
        self.transform = transform
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = Content.AnimatableData
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI.TransformedShape<Content>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI.TransformedShape<Content>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Shape {
  @inlinable public func offset(_ offset: CoreFoundation.CGSize) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: offset)
    }
  @inlinable public func offset(_ offset: CoreFoundation.CGPoint) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(
            shape: self, offset: CGSize(width: offset.x, height: offset.y))
    }
  @inlinable public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUI.OffsetShape<Self> {
        return OffsetShape(shape: self, offset: .init(width: x, height: y))
    }
  @inlinable public func scale(x: CoreFoundation.CGFloat = 1, y: CoreFoundation.CGFloat = 1, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUI.ScaledShape<Self> {
        return ScaledShape(shape: self,
            scale: CGSize(width: x, height: y), anchor: anchor)
    }
  @inlinable public func scale(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUI.ScaledShape<Self> {
        return self.scale(x: scale, y: scale, anchor: anchor)
    }
  @inlinable public func rotation(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> SwiftUI.RotatedShape<Self> {
        return RotatedShape(shape: self, angle: angle, anchor: anchor)
    }
  @inlinable public func transform(_ transform: CoreFoundation.CGAffineTransform) -> SwiftUI.TransformedShape<Self> {
        return TransformedShape(shape: self, transform: transform)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct SubscriptionView<PublisherType, Content> : SwiftUICore.PrimitiveView, SwiftUICore.View where PublisherType : Combine.Publisher, Content : SwiftUICore.View, PublisherType.Failure == Swift.Never {
  @_Concurrency.MainActor @preconcurrency public var content: Content
  @_Concurrency.MainActor @preconcurrency public var publisher: PublisherType
  @_Concurrency.MainActor @preconcurrency public var action: (PublisherType.Output) -> Swift.Void
  @inlinable nonisolated public init(content: Content, publisher: PublisherType, action: @escaping (PublisherType.Output) -> Swift.Void) {
        self.content = content
        self.publisher = publisher
        self.action = action
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.SubscriptionView<PublisherType, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.SubscriptionView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func onReceive<P>(_ publisher: P, perform action: @escaping (P.Output) -> Swift.Void) -> some SwiftUICore.View where P : Combine.Publisher, P.Failure == Swift.Never {
        SubscriptionView(content: self, publisher: publisher, action: action)
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol MenuStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.MenuStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct MenuStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  @_spi(Private) public var label: SwiftUI.MenuStyleConfiguration.Label {
    get
  }
  @_spi(Private) public var content: SwiftUI.MenuStyleConfiguration.Content {
    get
  }
  @_spi(Private) @available(tvOS 17.0, *)
  public var primaryAction: (() -> Swift.Void)?
  @_spi(Private) @available(tvOS 17.0, *)
  public var onPresentationChanged: ((Swift.Bool) -> Swift.Void)?
}
@available(*, unavailable)
extension SwiftUI.MenuStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.MenuStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.MenuStyleConfiguration.Content : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func menuStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.MenuStyle
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct OpenWindowAction {
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  public struct SharingBehavior : Swift.Sendable {
    public static let requested: SwiftUI.OpenWindowAction.SharingBehavior
    public static let required: SwiftUI.OpenWindowAction.SharingBehavior
  }
  @_spi(DoNotImport) public struct Destination : Swift.Sendable {
    @_spi(DoNotImport) public static let automatic: SwiftUI.OpenWindowAction.Destination
    @_spi(DoNotImport) public static let sharingSession: SwiftUI.OpenWindowAction.Destination
  }
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_spi(_) @available(*, deprecated, renamed: "callAsFunction(value:)")
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(presenting value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor public func callAsFunction<D>(value: D, sharingBehavior: SwiftUI.OpenWindowAction.SharingBehavior) async throws where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_spi(DoNotImport) @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(*, deprecated, renamed: "callAsFunction(value:sharingBehavior:)")
  @_Concurrency.MainActor public func callAsFunction<D>(value: D, destination: SwiftUI.OpenWindowAction.Destination) async throws where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(id: Swift.String)
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor public func callAsFunction(id: Swift.String, sharingBehavior: SwiftUI.OpenWindowAction.SharingBehavior) async throws
  @_spi(DoNotImport) @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(*, deprecated, renamed: "callAsFunction(id:sharingBehavior:)")
  @_Concurrency.MainActor public func callAsFunction(id: Swift.String, destination: SwiftUI.OpenWindowAction.Destination) async throws
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(id: Swift.String, value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_spi(_) @available(*, deprecated, renamed: "callAsFunction(id:value:)")
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(id: Swift.String, presenting value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @_Concurrency.MainActor public func callAsFunction<D>(id: Swift.String, value: D, sharingBehavior: SwiftUI.OpenWindowAction.SharingBehavior) async throws where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_spi(DoNotImport) @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(*, deprecated, renamed: "callAsFunction(id:value:sharingBehavior:)")
  @_Concurrency.MainActor public func callAsFunction<D>(id: Swift.String, value: D, destination: SwiftUI.OpenWindowAction.Destination) async throws where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var openWindow: SwiftUI.OpenWindowAction {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct ToolbarItemGroup<Content> : SwiftUI.ToolbarContent where Content : SwiftUICore.View {
  nonisolated public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItemGroup<Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @_Concurrency.MainActor @preconcurrency public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItemGroup<Content>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ToolbarItemGroup : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ToolbarItemGroup {
  nonisolated public init<C, L>(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> C, @SwiftUICore.ViewBuilder label: () -> L) where Content == SwiftUI.LabeledToolbarItemGroupContent<C, L>, C : SwiftUICore.View, L : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct LabeledToolbarItemGroupContent<Content, Label> : SwiftUICore.View where Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI30LabeledToolbarItemGroupContentV4bodyQrvp", 0) __<Content, Label>
}
@available(*, unavailable)
extension SwiftUI.LabeledToolbarItemGroupContent : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func systemColorScheme() -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, *)
  nonisolated public func systemColorScheme(_ isEnabled: Swift.Bool) -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WorldAlignmentBehavior : Swift.Equatable, Swift.Sendable {
  public static var automatic: SwiftUI.WorldAlignmentBehavior {
    get
  }
  public static var adaptive: SwiftUI.WorldAlignmentBehavior {
    get
  }
  public static var gravityAligned: SwiftUI.WorldAlignmentBehavior {
    get
  }
  @_spi(DoNotImport) @available(*, deprecated, renamed: "gravityAligned")
  public static var floor: SwiftUI.WorldAlignmentBehavior {
    get
  }
  public static func == (a: SwiftUI.WorldAlignmentBehavior, b: SwiftUI.WorldAlignmentBehavior) -> Swift.Bool
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func volumeWorldAlignment(_ behavior: SwiftUI.WorldAlignmentBehavior) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _FlipForRTLEffect : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool
  @inlinable nonisolated public init(isEnabled: Swift.Bool) {
        self.isEnabled = isEnabled
    }
  nonisolated public static func == (a: SwiftUI._FlipForRTLEffect, b: SwiftUI._FlipForRTLEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func flipsForRightToLeftLayoutDirection(_ enabled: Swift.Bool) -> some SwiftUICore.View {
        modifier(_FlipForRTLEffect(isEnabled: enabled))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlipForRTLEffect {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._FlipForRTLEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public struct OpenDocumentAction {
  @_Concurrency.MainActor public func callAsFunction(at url: Foundation.URL) async throws
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct NewDocumentAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(_ newDocument: @autoclosure @escaping () -> D) where D : SwiftUI.FileDocument
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(_ newDocument: @escaping () -> D) where D : SwiftUI.ReferenceFileDocument
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.NewDocumentAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(contentType: UniformTypeIdentifiers.UTType)
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.NewDocumentAction {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SwiftDataDocuments) @_Concurrency.MainActor @preconcurrency public func callAsFunction(contentType: UniformTypeIdentifiers.UTType, prepareNewDocument: @escaping ((inout (any SwiftUI.NewDocumentProvider)?) -> Swift.Void))
  #else
  @_spi(SwiftDataDocuments) @_Concurrency.MainActor @preconcurrency public func callAsFunction(contentType: UniformTypeIdentifiers.UTType, prepareNewDocument: @escaping ((inout (any SwiftUI.NewDocumentProvider)?) -> Swift.Void))
  #endif
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var newDocument: SwiftUI.NewDocumentAction {
    get
  }
  public var openDocument: SwiftUI.OpenDocumentAction {
    get
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.TitleBarWindowStyle {
  @_alwaysEmitIntoClient public static var titleBar: SwiftUI.TitleBarWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct TitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
  @_spi(Private) public func configureWindow(_ window: Swift.AnyObject)
}
@available(*, unavailable)
extension SwiftUI.TitleBarWindowStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol TextEditorStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.TextEditorStyleConfiguration
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
public struct TextEditorStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI.TextEditorStyleConfiguration : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textEditorStyle(_ style: some TextEditorStyle) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct TextEditor : SwiftUICore.View {
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>)
  #else
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>)
  #endif
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public init(_ configuration: SwiftUI.TextEditorStyleConfiguration)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @_spi_available(tvOS, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10TextEditorV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.TextEditor : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextEditor {
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection>)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ToggleStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ToggleStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ToggleStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.ToggleStyleConfiguration.Label
  @SwiftUICore.Binding @_projectedValueProperty($isOn) public var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isOn: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var isMixed: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ToggleStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ToggleStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func toggleStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ToggleStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableContentProvider {
  public func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> SwiftUI._ScrollViewRoot<Self>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct _ScrollViewRoot<P> : SwiftUICore.View where P : SwiftUI._ScrollableContentProvider {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15_ScrollViewRootV4bodyQrvp", 0) __<P>
}
@available(*, unavailable)
extension SwiftUI._ScrollViewRoot : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.BorderedButtonMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderedButton: SwiftUI.BorderedButtonMenuStyle {
    get { .init() }
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct BorderedButtonMenuStyle : SwiftUI.MenuStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, introduced: 14.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(tvOS, unavailable, introduced: 17.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(watchOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  @available(visionOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.bordered).")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23BorderedButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedButtonMenuStyle : Swift.Sendable {
}
@_spi(Private) @available(tvOS 18.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI._ServicesButtonMenuStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static var _servicesButton: SwiftUI._ServicesButtonMenuStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(tvOS 18.0, *)
@available(macOS, unavailable)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _ServicesButtonMenuStyle : SwiftUI.MenuStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(tintOpacity: CoreFoundation.CGFloat = 0.2)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI._ServicesButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(tvOS 18.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable)
  @available(macOS, unavailable, introduced: 11.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24_ServicesButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._ServicesButtonMenuStyle : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(Private) nonisolated public func windowShouldClose(_ handler: @escaping () -> Swift.Bool) -> some SwiftUI.Scene
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func fillMask<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        _fillMask(style)
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OutlineGroup<Data, ID, Parent, Leaf, Subgroup> where Data : Swift.RandomAccessCollection, ID : Swift.Hashable {
}
@available(*, unavailable)
extension SwiftUI.OutlineGroup : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren>, Data.Element : Swift.Identifiable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  #else
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  #else
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Testing) public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  #else
  @_spi(Testing) public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement : Swift.Identifiable, DataElement == Data.Element
  #endif
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren> {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
  #else
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
  #else
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUICore.ViewBuilder content: @escaping (DataElement) -> Leaf) where DataElement == Data.Element
  #endif
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup : SwiftUICore.View where Parent : SwiftUICore.View, Leaf : SwiftUICore.View, Subgroup : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12OutlineGroupVA2A4ViewR0_AaDR1_AaDR2_rlE4bodyQrvp", 0) __<Data, ID, Parent, Leaf, Subgroup>
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren>, Data.Element : Swift.Identifiable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<C, E>(_ root: SwiftUICore.Binding<E>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
  #else
  public init<C, E>(_ root: SwiftUICore.Binding<E>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<C, E>(_ data: SwiftUICore.Binding<C>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
  #else
  public init<C, E>(_ data: SwiftUICore.Binding<C>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, ID == E.ID, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E : Swift.Identifiable, E == C.Element
  #endif
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where Parent : SwiftUICore.View, Parent == Leaf, Subgroup == SwiftUI.DisclosureGroup<Parent, SwiftUI.OutlineSubgroupChildren> {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<C, E>(_ root: SwiftUICore.Binding<E>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
  #else
  public init<C, E>(_ root: SwiftUICore.Binding<E>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<C, E>(_ data: SwiftUICore.Binding<C>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
  #else
  public init<C, E>(_ data: SwiftUICore.Binding<C>, id: Swift.KeyPath<E, ID>, children: Swift.WritableKeyPath<E, C?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<E>) -> Leaf) where Data == SwiftUICore.Binding<C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, E == C.Element
  #endif
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct OutlineSubgroupChildren : SwiftUICore.View {
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.OutlineSubgroupChildren : Swift.Sendable {
}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public enum _CrownHapticsConfiguration {
  @_spi(Private) case none
  @_spi(Private) case infiniteScrolling
  @_spi(Private) case finiteScrolling(CoreFoundation.CGFloat, CoreFoundation.CGFloat)
  @_spi(Private) case platters([SwiftUI._CrownHapticsConfiguration.Notch])
  @_spi(Private) case mixed([SwiftUI._CrownHapticsConfiguration.Notch])
  @_spi(Private) case dynamicPlatters(() -> [SwiftUI._CrownHapticsConfiguration.Notch])
  @_spi(Private) public struct Notch {
    @_spi(Private) public enum Strength {
      @_spi(Private) case weak
      @_spi(Private) case standard
      @_spi(Private) case strong
      @_spi(Private) public static func == (a: SwiftUI._CrownHapticsConfiguration.Notch.Strength, b: SwiftUI._CrownHapticsConfiguration.Notch.Strength) -> Swift.Bool
      @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) public var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) public enum RestingPosition {
      @_spi(Private) case center
      @_spi(Private) case from
      @_spi(Private) case to
      @_spi(Private) public static func == (a: SwiftUI._CrownHapticsConfiguration.Notch.RestingPosition, b: SwiftUI._CrownHapticsConfiguration.Notch.RestingPosition) -> Swift.Bool
      @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
      @_spi(Private) public var hashValue: Swift.Int {
        @_spi(Private) get
      }
    }
    @_spi(Private) public init(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, strength: SwiftUI._CrownHapticsConfiguration.Notch.Strength)
    @_spi(Private) public init(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, restingPosition: SwiftUI._CrownHapticsConfiguration.Notch.RestingPosition, strength: SwiftUI._CrownHapticsConfiguration.Notch.Strength)
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.Strength : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.RestingPosition : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._CrownHapticsConfiguration : Swift.Sendable {
}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public protocol _CrownHapticsConfigurationProvider {
  @_spi(Private) func makeConfiguration() -> SwiftUI._CrownHapticsConfiguration
}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI._CrownHapticsConfigurationProvider {
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func notchRadius(forHeight notchHeight: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumn<RowValue, Sort, Content, Label> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator, Content : SwiftUICore.View, Label : SwiftUICore.View {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TableColumn<RowValue, Sort, Content, Label>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableColumnBody = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TableColumn : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where RowValue == Sort.Compared, Label == SwiftUICore.Text {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, sortUsing comparator: Sort, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, sortUsing comparator: Sort, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, sortUsing comparator: Sort, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where Sort == Swift.Never, Label == SwiftUICore.Text {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUICore.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>) where Content == SwiftUICore.Text
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func width(_ width: CoreFoundation.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  #else
  public func width(_ width: CoreFoundation.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func width(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat? = nil, max: CoreFoundation.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  #else
  public func width(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat? = nil, max: CoreFoundation.CGFloat? = nil) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
  #endif
  @available(*, deprecated, message: "Please pass one or more parameters to modify a column's width.")
  @_alwaysEmitIntoClient public func width() -> SwiftUI.TableColumn<RowValue, Sort, Content, Label> { self }
  @_spi(Private) public func fixedToHeaderWidth() -> SwiftUI.TableColumn<RowValue, Sort, Content, Label>
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
  #else
  public func hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) @_disfavoredOverload public func hoverEffect<E>(_ effect: E, isEnabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect where E : SwiftUICore.CustomHoverEffect
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func _hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup?, isEnabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func _hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup?, isEnabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
  #endif
  @_spi(CustomHoverEffects) public func _hoverEffect<E>(_ effect: E, isEnabled: Swift.Bool) -> some SwiftUICore.CustomHoverEffect where E : SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) public func combined<E>(with effect: E) -> some SwiftUICore.CustomHoverEffect where E : SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) public func _combined<E>(with effect: E) -> some SwiftUICore.CustomHoverEffect where E : SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) public func _combined(with hoverEffect: SwiftUI.HoverEffect) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) public func _hoverEffect<E>(_ hoverEffect: E) -> some SwiftUICore.CustomHoverEffect where E : SwiftUICore.CustomHoverEffect
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
  nonisolated public func textSizing(_ textSizing: SwiftUICore.Text.Sizing) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.PlaybackButtonStyle where Self == SwiftUI.PillPlaybackButtonStyle {
  @_spi(Private) public static func pill(dateStyle: SwiftUICore.Text.DateStyle) -> Self
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct PillPlaybackButtonStyle : SwiftUI.PlaybackButtonStyle {
  @_spi(Private) public var _storage: SwiftUI.PlaybackButton._StyleStorage {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PillPlaybackButtonStyle : Swift.Sendable {
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  nonisolated public func gaugeIndicatorDotTint<S>(_ tint: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  nonisolated public func gaugeIndicatorDotTint<S>(_ tint: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #endif
}
@_spi(Private_Selection) extension SwiftUICore.View {
  @_spi(Private_Selection) nonisolated public func selectable(_ id: some Hashable) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _SceneOutputs {
}
@available(*, unavailable)
extension SwiftUI._SceneOutputs : Swift.Sendable {
}
@_spi(Private) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public enum PathToken : Swift.Sendable, Swift.Codable, Swift.Equatable {
  @_spi(Private) case navigationPath(data: Foundation.Data)
  @_spi(Private) case pathTokens([Foundation.Data])
  @_spi(Private) public static func == (a: SwiftUI.PathToken, b: SwiftUI.PathToken) -> Swift.Bool
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(DoNotImport) @available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "_Stage and its APIs will be removed soon. Use ImmersiveSpace APIs instead as soon as possible – see rdar://100803900")
@_Concurrency.MainActor public struct DismissStageAction {
  @_spi(DoNotImport) @_Concurrency.MainActor public func callAsFunction() async
}
@_spi(DoNotImport) @available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "_Stage and its APIs will be removed soon. Use ImmersiveSpace APIs instead as soon as possible – see rdar://100803900")
extension SwiftUICore.EnvironmentValues {
  @_spi(DoNotImport) public var dismissStage: SwiftUI.DismissStageAction {
    @_spi(DoNotImport) get
  }
}
extension SwiftUICore.View {
  @available(iOS 13.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func statusBarHidden(_ hidden: Swift.Bool = true) -> some SwiftUICore.View {
        statusBar(hidden: hidden)
    }
  
  @available(iOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public func _statusBarHidden(_ hidden: Swift.Bool = true) -> some SwiftUICore.View {
        _statusBar(hidden: hidden)
    }
  
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "statusBarHidden(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "statusBarHidden(_:)")
  nonisolated public func statusBar(hidden: Swift.Bool) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "_statusBarHidden(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "_statusBarHidden(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "_statusBarHidden(_:)")
  @_Concurrency.MainActor @preconcurrency public func _statusBar(hidden: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  public func draggable<T>(_ payload: @autoclosure @escaping () -> T) -> some SwiftUI.TableRowContent<Self.TableRowValue> where T : CoreTransferable.Transferable
  
  public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T]) -> Swift.Void) -> some SwiftUI.TableRowContent<Self.TableRowValue> where T : CoreTransferable.Transferable
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DynamicTableRowContent {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (Swift.Int, [T]) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.OnInsertTableRowModifier> where T : CoreTransferable.Transferable
  @available(*, unavailable, message: "Unavailable for DynamicTableRowContent, use `dropDestination(for:action:)` instead.")
  public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func itemProvider(_ action: (() -> Foundation.NSItemProvider?)?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.ItemProviderTableRowModifier>
  #else
  public func itemProvider(_ action: (() -> Foundation.NSItemProvider?)?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.ItemProviderTableRowModifier>
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DynamicTableRowContent {
  public func onInsert(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.OnInsertTableRowModifier>
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ItemProviderTableRowModifier : SwiftUI._TableRowContentModifier {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28ItemProviderTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.ItemProviderTableRowModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct OnInsertTableRowModifier : SwiftUI._TableRowContentModifier {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24OnInsertTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.OnInsertTableRowModifier : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func keyboardType(_ type: UIKit.UIKeyboardType) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct KeyboardType {
  @_spi(Private) public static let none: SwiftUI.KeyboardType
  @_spi(Private) public static let asciiCapable: SwiftUI.KeyboardType
  @_spi(Private) public static let numbersAndPunctuation: SwiftUI.KeyboardType
  @_spi(Private) public static let url: SwiftUI.KeyboardType
  @_spi(Private) public static let numberPad: SwiftUI.KeyboardType
  @_spi(Private) public static let phonePad: SwiftUI.KeyboardType
  @_spi(Private) public static let namePhonePad: SwiftUI.KeyboardType
  @_spi(Private) public static let emailAddress: SwiftUI.KeyboardType
  @_spi(Private) public static let decimalPad: SwiftUI.KeyboardType
  @_spi(Private) public static let webSearch: SwiftUI.KeyboardType
  @_spi(Private) public static let asciiCapableNumberPad: SwiftUI.KeyboardType
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.KeyboardType : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var keyboardType: SwiftUI.KeyboardType {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct TextInputDictation : Swift.Equatable {
  @_spi(Private) public static let disabled: SwiftUI.TextInputDictation
  @_spi(Private) public static func enabled(forceSpelling: Swift.Bool = false, preferOnline: Swift.Bool = false) -> SwiftUI.TextInputDictation
  @_spi(Private) public static func == (a: SwiftUI.TextInputDictation, b: SwiftUI.TextInputDictation) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.TextInputDictation : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func textInputDictation(_ dictation: SwiftUI.TextInputDictation?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func textInputDictation(_ dictation: SwiftUI.TextInputDictation?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use textInputAutocapitalization(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use textInputAutocapitalization(_:)")
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use textInputAutocapitalization(_:)")
  nonisolated public func autocapitalization(_ style: UIKit.UITextAutocapitalizationType) -> some SwiftUICore.View
  
}
@available(iOS 15.0, tvOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextInputAutocapitalization {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ type: UIKit.UITextAutocapitalizationType)
  #else
  public init?(_ type: UIKit.UITextAutocapitalizationType)
  #endif
}
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func textInputAutocapitalization(_ autocapitalization: SwiftUI.TextInputAutocapitalization?) -> some SwiftUICore.View
  
  #else
  nonisolated public func textInputAutocapitalization(_ autocapitalization: SwiftUI.TextInputAutocapitalization?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct TextInputAutocapitalization : Swift.Sendable {
  public static var never: SwiftUI.TextInputAutocapitalization {
    get
  }
  public static var words: SwiftUI.TextInputAutocapitalization {
    get
  }
  public static var sentences: SwiftUI.TextInputAutocapitalization {
    get
  }
  public static var characters: SwiftUI.TextInputAutocapitalization {
    get
  }
}
extension SwiftUICore.View {
  @_spi(Private) @available(macOS 12.3, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func textFieldScrollingDisabled(_ scrollDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 18.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func submitsOnReturn(_ submitsOnReturn: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@_spi_available(tvOS, introduced: 18.0)
public struct DragGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, Swift.Sendable {
    public var time: Foundation.Date
    public var location: CoreFoundation.CGPoint
    public var startLocation: CoreFoundation.CGPoint
    public var translation: CoreFoundation.CGSize {
      get
    }
    @_alwaysEmitIntoClient public var velocity: CoreFoundation.CGSize {
      get {
            let predicted = predictedEndLocation
            return CGSize(
                width: 4.0 * (predicted.x - location.x),
                height: 4.0 * (predicted.y - location.y))
        }
    }
    public var predictedEndLocation: CoreFoundation.CGPoint {
      get
    }
    public var predictedEndTranslation: CoreFoundation.CGSize {
      get
    }
    public static func == (a: SwiftUI.DragGesture.Value, b: SwiftUI.DragGesture.Value) -> Swift.Bool
  }
  public var minimumDistance: CoreFoundation.CGFloat
  public var coordinateSpace: SwiftUICore.CoordinateSpace
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, unavailable)
  @_disfavoredOverload public init(minimumDistance: CoreFoundation.CGFloat = 10, coordinateSpace: SwiftUICore.CoordinateSpace = .local)
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @_spi_available(tvOS, introduced: 18.0)
  public init(minimumDistance: CoreFoundation.CGFloat = 10, coordinateSpace: some CoordinateSpaceProtocol = .local)
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.DragGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.DragGesture.Value>
  package var internalBody: some SwiftUICore.Gesture<SwiftUI.DragGesture.Value> {
    get
  }
  @available(iOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias Body = Swift.Never
  @available(iOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI11DragGestureV12internalBodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DragGesture : Swift.Sendable {
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.DragGesture {
  @_spi(UIFrameworks) public init(minimumDistance: CoreFoundation.CGFloat = 10, coordinateSpace coordinateSpaceProtocol: some CoordinateSpaceProtocol = .local, allowedDirections: SwiftUI._EventDirections)
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowStyle {
  associatedtype _Body : SwiftUICore.View
  @_spi(Private) func configureWindow(_ window: Swift.AnyObject)
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle {
  @_spi(Private) public func configureWindow(_ window: Swift.AnyObject)
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func presentedWindowStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.WindowStyle
  
}
extension SwiftUI.Scene {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environment<K>(key: K.Type = K.self, value: K.Value) -> some SwiftUI.Scene where K : SwiftUICore.EnvironmentKey
  
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol PickerContent {
  associatedtype SelectionValue : Swift.Hashable = Self.Body.SelectionValue
  associatedtype _IdentifiedView : SwiftUICore.View = SwiftUI._PickerContentBodyAdaptor<Self>
  @_spi(_) var _identifiedView: Self._IdentifiedView { get }
  associatedtype Body : SwiftUI.PickerContent
  @_spi(_) @SwiftUI.PickerBuilder<Self.SelectionValue> @preconcurrency @_Concurrency.MainActor var body: Self.Body { get }
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.PickerContent where Self._IdentifiedView == SwiftUI._PickerContentBodyAdaptor<Self> {
  @_spi(_) public var _identifiedView: SwiftUI._PickerContentBodyAdaptor<Self> {
    @_spi(_) get
  }
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct _PickerContentBodyAdaptor<C> : SwiftUICore.View where C : SwiftUI.PickerContent {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: C.Body._IdentifiedView {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = C.Body._IdentifiedView
}
@_spi(_) @available(*, unavailable)
extension SwiftUI._PickerContentBodyAdaptor : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_functionBuilder public struct PickerBuilder<SelectionValue> where SelectionValue : Swift.Hashable {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public struct Content<C> : SwiftUICore.View where C : SwiftUI.PickerContent {
    @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      @_spi(_) get
    }
    @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13PickerBuilderV7ContentV4bodyQrvp", 0) __<SelectionValue, C>
  }
  @_spi(_) @_Concurrency.MainActor @preconcurrency public struct ContentWithFooter<C, Footer> : SwiftUICore.View where C : SwiftUI.PickerContent, Footer : SwiftUICore.View {
    @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      @_spi(_) get
    }
    @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13PickerBuilderV17ContentWithFooterV4bodyQrvp", 0) __<SelectionValue, C, Footer>
  }
  @_spi(_) @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where SelectionValue == Content.SelectionValue, Content : SwiftUI.PickerContent {
        content
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> Content where SelectionValue == Content.SelectionValue, Content : SwiftUI.PickerContent {
        content
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where SelectionValue == Content.SelectionValue, Content : SwiftUI.PickerContent {
        content
    }
  #else
  @_spi(_) @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where SelectionValue == Content.SelectionValue, Content : SwiftUI.PickerContent {
        content
    }
  #endif
  @_spi(_) @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where SelectionValue == T.SelectionValue, T : SwiftUI.PickerContent, F : SwiftUI.PickerContent, T.SelectionValue == F.SelectionValue {
        .init(storage: .trueContent(first))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where SelectionValue == T.SelectionValue, T : SwiftUI.PickerContent, F : SwiftUI.PickerContent, T.SelectionValue == F.SelectionValue {
        .init(storage: .falseContent(second))
    }
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.PickerBuilder.Content : Swift.Sendable {
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.PickerBuilder : Swift.Sendable {
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.PickerBuilder.ContentWithFooter : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._ConditionalContent : SwiftUI.PickerContent where TrueContent : SwiftUI.PickerContent, FalseContent : SwiftUI.PickerContent, TrueContent.SelectionValue == FalseContent.SelectionValue {
  @_spi(_) public typealias SelectionValue = TrueContent.SelectionValue
  @_spi(_) @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  @_spi(_) public var _identifiedView: SwiftUICore._ConditionalContent<TrueContent._IdentifiedView, FalseContent._IdentifiedView> {
    @_spi(_) get
  }
  @_spi(_) public typealias Body = SwiftUICore._ConditionalContent<TrueContent, FalseContent>
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore._ConditionalContent<TrueContent, FalseContent> {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias _IdentifiedView = SwiftUICore._ConditionalContent<TrueContent._IdentifiedView, FalseContent._IdentifiedView>
}
#if compiler(>=5.3) && $NoncopyableGenerics
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.PickerContent where Wrapped : SwiftUI.PickerContent {
  @_spi(_) public typealias SelectionValue = Wrapped.SelectionValue
  @_spi(_) @inlinable public var _identifiedView: Wrapped._IdentifiedView? {
    @_spi(_) get {
        map(\._identifiedView)
    }
  }
  @_spi(_) public typealias Body = Swift.Optional<Wrapped>
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: Swift.Optional<Wrapped> {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias _IdentifiedView = Wrapped._IdentifiedView?
}
#else
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.PickerContent where Wrapped : SwiftUI.PickerContent {
  @_spi(_) public typealias SelectionValue = Wrapped.SelectionValue
  @_spi(_) @inlinable public var _identifiedView: Wrapped._IdentifiedView? {
    @_spi(_) get {
        map(\._identifiedView)
    }
  }
  @_spi(_) public typealias Body = Swift.Optional<Wrapped>
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: Swift.Optional<Wrapped> {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias _IdentifiedView = Wrapped._IdentifiedView?
}
#endif
@_spi(_) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.ForEach : SwiftUI.PickerContent where Content : SwiftUI.PickerContent {
  @_spi(_) public typealias SelectionValue = Content.SelectionValue
  @_spi(_) public init<SV>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.PickerBuilder<SV> content: @escaping (Data.Element) -> Content) where SV == Content.SelectionValue
  @_spi(_) public var _identifiedView: SwiftUICore.ForEach<Data, ID, Content._IdentifiedView> {
    @_spi(_) get
  }
  @_spi(_) public typealias Body = SwiftUICore.ForEach<Data, ID, Content>
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.ForEach<Data, ID, Content> {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias _IdentifiedView = SwiftUICore.ForEach<Data, ID, Content._IdentifiedView>
}
@_spi(_) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.ForEach where ID == Data.Element.ID, Content : SwiftUI.PickerContent, Data.Element : Swift.Identifiable {
  @_spi(_) public init<SV>(_ data: Data, @SwiftUI.PickerBuilder<SV> content: @escaping (Data.Element) -> Content) where SV == Content.SelectionValue
}
@_spi(_) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.ForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUI.PickerContent {
  @_spi(_) @_semantics("swiftui.requires_constant_range") public init<SV>(_ data: Swift.Range<Swift.Int>, @SwiftUI.PickerBuilder<SV> content: @escaping (Swift.Int) -> Content) where SV == Content.SelectionValue
}
@_spi(_) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.Group : SwiftUI.PickerContent where Content : SwiftUI.PickerContent {
  @_spi(_) public typealias SelectionValue = Content.SelectionValue
  @_spi(_) @inlinable public init<SV>(@SwiftUI.PickerBuilder<SV> content: () -> Content) where SV == Content.SelectionValue {
        self = Self._make(content: content())
    }
  @_spi(_) @inlinable public var _identifiedView: Content._IdentifiedView {
    @_spi(_) get {
        content._identifiedView
    }
  }
  @_spi(_) public typealias Body = SwiftUICore.Group<Content>
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.Group<Content> {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias _IdentifiedView = Content._IdentifiedView
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Section : SwiftUI.PickerContent where Parent : SwiftUICore.View, Content : SwiftUI.PickerContent, Footer : SwiftUICore.View {
  @_spi(_) public typealias SelectionValue = Content.SelectionValue
  @_spi(_) public var _identifiedView: some SwiftUICore.View {
    @_spi(_) get
  }
  @_spi(_) public typealias Body = SwiftUI.Section<Parent, Content, Footer>
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: SwiftUI.Section<Parent, Content, Footer> {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI7SectionVA2A4ViewRzAA13PickerContentR_AaDR0_rlE011_identifiedD0Qrvp", 0) __<Parent, Content, Footer>
}
@_spi(_) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.Section where Parent == SwiftUICore.EmptyView, Content : SwiftUI.PickerContent, Footer == SwiftUICore.EmptyView {
  @_spi(_) public init<SV>(@SwiftUI.PickerBuilder<SV> content: () -> Content) where SV == Content.SelectionValue
}
@_spi(_) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUI.PickerContent, Footer == SwiftUICore.EmptyView {
  @_spi(_) public init<SV>(@SwiftUI.PickerBuilder<SV> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Parent) where SV == Content.SelectionValue
}
@_spi(_) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.Section where Parent == SwiftUICore.Text, Content : SwiftUI.PickerContent, Footer == SwiftUICore.EmptyView {
  @_spi(_) @_disfavoredOverload public init<S, SV>(_ title: S, @SwiftUI.PickerBuilder<SV> content: () -> Content) where S : Swift.StringProtocol, SV == Content.SelectionValue
  @_spi(_) public init<SV>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.PickerBuilder<SV> content: () -> Content) where SV == Content.SelectionValue
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct _TuplePickerContent<T, U> where T : Swift.Hashable {
  @_spi(_) public typealias SelectionValue = T
  @_spi(_) public let _identifiedView: SwiftUICore.TupleView<U>
  @_spi(_) @inlinable internal init(_ content: U) { _identifiedView = .init(content) }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = SwiftUI._TuplePickerContent<T, U>
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias _IdentifiedView = SwiftUICore.TupleView<U>
}
@_spi(_) @available(*, unavailable)
extension SwiftUI._TuplePickerContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func onTest(_ testName: SwiftUI.PPTTestCase.Name, handler: @escaping (SwiftUI.PPTTestCase) -> ()) -> some SwiftUICore.View
  
}
extension SwiftUI.FocusedValue {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(_ objectType: Value.Type) where Value : AnyObject, Value : Observation.Observable
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func focusedValue<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable
  
  #else
  nonisolated public func focusedValue<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient nonisolated public func focusedSceneValue<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable {
        focusedSceneValue(T.focusedValueKey, object)
    }
  
  #else
  @_alwaysEmitIntoClient nonisolated public func focusedSceneValue<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable {
        focusedSceneValue(T.focusedValueKey, object)
    }
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension Observation.Observable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  internal static var focusedValueKey: Swift.WritableKeyPath<SwiftUI.FocusedValues, Self?> {
    get
  }
  #else
  @usableFromInline
  internal static var focusedValueKey: Swift.WritableKeyPath<SwiftUI.FocusedValues, Self?> {
    get
  }
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.AnyGradient {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(colors: [SwiftUICore.Color], locations: [Swift.Float]? = nil, interpolations: [(Swift.Float, Swift.Float, Swift.Float, Swift.Float)]? = nil)
  #else
  @_spi(Private) public init(colors: [SwiftUICore.Color], locations: [Swift.Float]? = nil, interpolations: [(Swift.Float, Swift.Float, Swift.Float, Swift.Float)]? = nil)
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func sharingPicker<I1, I2, I3>(isPresented: SwiftUICore.Binding<Swift.Bool>, item: I1, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<I2, I3>) -> some SwiftUICore.View where I1 : CoreTransferable.Transferable, I2 : CoreTransferable.Transferable, I3 : CoreTransferable.Transferable
  
  #else
  @_spi(Private) nonisolated public func sharingPicker<I1, I2, I3>(isPresented: SwiftUICore.Binding<Swift.Bool>, item: I1, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<I2, I3>) -> some SwiftUICore.View where I1 : CoreTransferable.Transferable, I2 : CoreTransferable.Transferable, I3 : CoreTransferable.Transferable
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func sharingPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func sharingPicker(isPresented: SwiftUICore.Binding<Swift.Bool>, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@dynamicMemberLookup @propertyWrapper public struct Bindable<Value> {
  public var wrappedValue: Value
  public var projectedValue: SwiftUI.Bindable<Value> {
    get
  }
  @available(*, unavailable, message: "The wrapped value must be an object that conforms to Observable")
  public init(wrappedValue: Value)
  @available(*, unavailable, message: "The wrapped value must be an object that conforms to Observable")
  public init(projectedValue: SwiftUI.Bindable<Value>)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Bindable where Value : AnyObject {
  public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<Value, Subject>) -> SwiftUICore.Binding<Subject> {
    get
  }
}
extension SwiftUI.Bindable where Value : Combine.ObservableObject {
  @available(*, unavailable, message: "@Bindable only works with Observable types. For ObservableObject types, use @ObservedObject instead.")
  public init(wrappedValue: Value)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Bindable where Value : AnyObject, Value : Observation.Observable {
  public init(wrappedValue: Value)
  public init(_ wrappedValue: Value)
  public init(projectedValue: SwiftUI.Bindable<Value>)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Bindable : Swift.Identifiable where Value : Swift.Identifiable {
  public var id: Value.ID {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ID = Value.ID
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Bindable : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @frozen public struct GestureState<Value> : SwiftUICore.DynamicProperty {
  fileprivate var state: SwiftUICore.State<Value>
  fileprivate let reset: (SwiftUICore.Binding<Value>) -> Swift.Void
  public init(wrappedValue: Value)
  @_alwaysEmitIntoClient public init(initialValue: Value) {
        self.init(wrappedValue: initialValue, resetTransaction: Transaction())
    }
  public init(wrappedValue: Value, resetTransaction: SwiftUICore.Transaction)
  @_alwaysEmitIntoClient public init(initialValue: Value, resetTransaction: SwiftUICore.Transaction) {
      self.init(wrappedValue: initialValue, resetTransaction: resetTransaction)
    }
  public init(wrappedValue: Value, reset: @escaping (Value, inout SwiftUICore.Transaction) -> Swift.Void)
  @_alwaysEmitIntoClient public init(initialValue: Value, reset: @escaping (Value, inout SwiftUICore.Transaction) -> Swift.Void) {
      self.init(wrappedValue: initialValue, reset: reset)
    }
  public var wrappedValue: Value {
    get
  }
  public var projectedValue: SwiftUI.GestureState<Value> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GestureState : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.GestureState where Value : Swift.ExpressibleByNilLiteral {
  public init(resetTransaction: SwiftUICore.Transaction = Transaction())
  public init(reset: @escaping (Value, inout SwiftUICore.Transaction) -> Swift.Void)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Gesture {
  @inlinable public func updating<State>(_ state: SwiftUI.GestureState<State>, body: @escaping (Self.Value, inout State, inout SwiftUICore.Transaction) -> Swift.Void) -> SwiftUI.GestureStateGesture<Self, State> {
        return .init(base: self, state: state, body: body)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen public struct GestureStateGesture<Base, State> : SwiftUICore.Gesture, SwiftUICore.PrimitiveGesture where Base : SwiftUICore.Gesture {
  public typealias Value = Base.Value
  public var base: Base
  public var state: SwiftUI.GestureState<State>
  public var body: (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUICore.Transaction) -> Swift.Void
  @inlinable public init(base: Base, state: SwiftUI.GestureState<State>, body: @escaping (SwiftUI.GestureStateGesture<Base, State>.Value, inout State, inout SwiftUICore.Transaction) -> Swift.Void) {
        self.base = base
        self.state = state
        self.body = body
    }
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.GestureStateGesture<Base, State>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.GestureStateGesture<Base, State>.Value>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.GestureStateGesture : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var effectiveForegroundColor: SwiftUICore.Color? {
    get
  }
  #else
  @_spi(Private) public var effectiveForegroundColor: SwiftUICore.Color? {
    get
  }
  #endif
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration_V1 {
  @_spi(Widget) nonisolated public func preference<K>(key _: K.Type = K.self, value: K.Value) -> some SwiftUI.ControlWidgetConfiguration_V1 where K : SwiftUICore.PreferenceKey
  
  @_spi(Widget) nonisolated public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.ControlWidgetConfiguration_V1 where K : SwiftUICore.PreferenceKey
  
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@_spi_available(tvOS, introduced: 18.0)
@_Concurrency.MainActor @preconcurrency public struct Slider<Label, ValueLabel> : SwiftUICore.View where Label : SwiftUICore.View, ValueLabel : SwiftUICore.View {
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  nonisolated public init(_ configuration: SwiftUI.SliderStyleConfiguration) where Label == SwiftUI.SliderStyleConfiguration.Label, ValueLabel == SwiftUI.SliderStyleConfiguration.ValueLabel
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6SliderV4bodyQrvp", 0) __<Label, ValueLabel>
}
@available(*, unavailable)
extension SwiftUI.Slider : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.Slider {
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            onEditingChanged: onEditingChanged,
            minimumValueLabel: minimumValueLabel(),
            maximumValueLabel: maximumValueLabel(),
            label: label)
    }
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> ValueLabel, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            minimumValueLabel: minimumValueLabel(),
            maximumValueLabel: maximumValueLabel(),
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.Slider where ValueLabel == SwiftUICore.EmptyView {
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.Slider where Label == SwiftUICore.EmptyView, ValueLabel == SwiftUICore.EmptyView {
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.Slider {
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:minimumValueLabel:maximumValueLabel:onEditingChanged:)")
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.Slider where ValueLabel == SwiftUICore.EmptyView {
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @available(tvOS, unavailable)
  @available(iOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Slider(value:in:step:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct _SymmetricallyScaledText : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView {
  @_Concurrency.MainActor @preconcurrency public var source: SwiftUICore.Text
  @_Concurrency.MainActor @preconcurrency public var reference: SwiftUICore.Text
  nonisolated public init(source: SwiftUICore.Text, reference: SwiftUICore.Text)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._SymmetricallyScaledText>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._SymmetricallyScaledText : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func exportableToServices<T>(_ payload: @autoclosure @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func exportableToServices<T>(_ payload: @autoclosure @escaping () -> [T], onEdit: @escaping ([T]) -> Swift.Bool) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
extension SwiftUICore.View {
  @_spi(_) @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use exportableToServices(_:).")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func exportableToServices<T>(payload: @autoclosure @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @_spi(_) @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use exportableToServices(_:onEdit:).")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func exportableToServices<T>(payload: @autoclosure @escaping () -> [T], onEdit: @escaping ([T]) -> Swift.Bool) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func importableFromServices<T>(for payloadType: T.Type = T.self, action: @escaping ([T]) -> Swift.Bool) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func exportsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onExport: @escaping () -> [Foundation.NSItemProvider]) -> some SwiftUICore.View
  
  nonisolated public func exportsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onExport: @escaping () -> [Foundation.NSItemProvider], onEdit: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
  nonisolated public func importsItemProviders(_ contentTypes: [UniformTypeIdentifiers.UTType], onImport: @escaping ([Foundation.NSItemProvider]) -> Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnCustomization<RowValue> : Swift.Equatable, Swift.Sendable, Swift.Codable where RowValue : Swift.Identifiable {
  public init()
  public subscript(visibility id: Swift.String) -> SwiftUI.Visibility {
    get
    set
  }
  public mutating func resetOrder()
  public static func == (a: SwiftUI.TableColumnCustomization<RowValue>, b: SwiftUI.TableColumnCustomization<RowValue>) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.SceneStorage {
  public init<RowValue>(wrappedValue: Value = TableColumnCustomization<RowValue>(), _ key: Swift.String) where Value == SwiftUI.TableColumnCustomization<RowValue>, RowValue : Swift.Identifiable
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.AppStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<RowValue>(wrappedValue: Value = TableColumnCustomization<RowValue>(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TableColumnCustomization<RowValue>, RowValue : Swift.Identifiable
  #else
  public init<RowValue>(wrappedValue: Value = TableColumnCustomization<RowValue>(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TableColumnCustomization<RowValue>, RowValue : Swift.Identifiable
  #endif
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_spi_available(iOS, introduced: 17.0)
@_spi_available(tvOS, introduced: 17.0)
@_spi_available(watchOS, introduced: 10.0)
@_spi_available(visionOS, introduced: 1.0)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.DefaultWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultWindowToolbarStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_spi_available(iOS, introduced: 17.0)
@_spi_available(tvOS, introduced: 17.0)
@_spi_available(watchOS, introduced: 10.0)
@_spi_available(visionOS, introduced: 1.0)
public struct DefaultWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  @_spi(Private) public func configureWindowToolbar(_ window: Swift.AnyObject)
}
@available(*, unavailable)
extension SwiftUI.DefaultWindowToolbarStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct ProgressView<Label, CurrentValueLabel> : SwiftUICore.View where Label : SwiftUICore.View, CurrentValueLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12ProgressViewV4bodyQrvp", 0) __<Label, CurrentValueLabel>
}
@available(*, unavailable)
extension SwiftUI.ProgressView : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView where CurrentValueLabel == SwiftUICore.EmptyView {
  nonisolated public init() where Label == SwiftUICore.EmptyView
  nonisolated public init(@SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey) where Label == SwiftUICore.Text
  @_disfavoredOverload nonisolated public init<S>(_ title: S) where Label == SwiftUICore.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(value: V?, total: V = 1.0) where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  #else
  nonisolated public init<V>(value: V?, total: V = 1.0) where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(value: V?, total: V = 1.0, @SwiftUICore.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  #else
  nonisolated public init<V>(value: V?, total: V = 1.0, @SwiftUICore.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(value: V?, total: V = 1.0, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where V : Swift.BinaryFloatingPoint
  #else
  nonisolated public init<V>(value: V?, total: V = 1.0, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where V : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: V?, total: V = 1.0) where Label == SwiftUICore.Text, CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  #else
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: V?, total: V = 1.0) where Label == SwiftUICore.Text, CurrentValueLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: V?, total: V = 1.0) where Label == SwiftUICore.Text, CurrentValueLabel == SwiftUICore.EmptyView, S : Swift.StringProtocol, V : Swift.BinaryFloatingPoint
  #else
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: V?, total: V = 1.0) where Label == SwiftUICore.Text, CurrentValueLabel == SwiftUICore.EmptyView, S : Swift.StringProtocol, V : Swift.BinaryFloatingPoint
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  nonisolated public init(_ progress: Foundation.Progress) where Label == SwiftUICore.EmptyView, CurrentValueLabel == SwiftUICore.EmptyView
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressView {
  nonisolated public init(_ configuration: SwiftUI.ProgressViewStyleConfiguration) where Label == SwiftUI.ProgressViewStyleConfiguration.Label, CurrentValueLabel == SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct LabeledContent<Label, Content> {
}
@available(*, unavailable)
extension SwiftUI.LabeledContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14LabeledContentVA2A4ViewRzAaDR_rlE4bodyQrvp", 0) __<Label, Content>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent where Label == SwiftUICore.Text, Content : SwiftUICore.View {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent where Label == SwiftUICore.Text, Content == SwiftUICore.Text {
  public init<S>(_ titleKey: SwiftUICore.LocalizedStringKey, value: S) where S : Swift.StringProtocol
  @_disfavoredOverload public init<S1, S2>(_ title: S1, value: S2) where S1 : Swift.StringProtocol, S2 : Swift.StringProtocol
  public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
  public init<S, F>(_ title: S, value: F.FormatInput, format: F) where S : Swift.StringProtocol, F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContent where Label == SwiftUI.LabeledContentStyleConfiguration.Label, Content == SwiftUI.LabeledContentStyleConfiguration.Content {
  public init(_ configuration: SwiftUI.LabeledContentStyleConfiguration)
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) public var mapKitTint: SwiftUICore.AnyShapeStyle? {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
  #else
  @_spi(ForMapKitOnly) public var mapKitTint: SwiftUICore.AnyShapeStyle? {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) public var mapKitTintColor: SwiftUICore.Color? {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
  #else
  @_spi(ForMapKitOnly) public var mapKitTintColor: SwiftUICore.Color? {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var _tintColor: SwiftUICore.Color? {
    get
    set
  }
  #else
  @_spi(Private) public var _tintColor: SwiftUICore.Color? {
    get
    set
  }
  #endif
}
#if compiler(>=5.3) && $RetroactiveAttribute
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Color : @retroactive CoreTransferable.Transferable {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Representation = @_opaqueReturnTypeOf("$s7SwiftUI5ColorV22transferRepresentationQrvpZ", 0) __
}
#else
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Color : CoreTransferable.Transferable {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Representation = @_opaqueReturnTypeOf("$s7SwiftUI5ColorV22transferRepresentationQrvpZ", 0) __
}
#endif
@_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._IntelligenceSupport {
  @_spi(_) @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SummarySymbolHost : SwiftUI._UIHostingView<SwiftUICore._IntelligenceSupport.AnimatingSummarySymbol> {
    @_spi(_) @objc @_Concurrency.MainActor @preconcurrency public var isOn: Swift.Bool {
      @_spi(_) @objc get
      @_spi(_) @objc set
    }
    @_spi(_) @objc @_Concurrency.MainActor @preconcurrency public var font: CoreText.CTFont {
      @_spi(_) @objc get
      @_spi(_) @objc set
    }
    @_spi(_) @objc @_Concurrency.MainActor @preconcurrency public var foregroundColor: CoreGraphics.CGColor {
      @_spi(_) @objc get
      @_spi(_) @objc set
    }
    @_spi(_) @objc @_Concurrency.MainActor @preconcurrency public var baseline: CoreFoundation.CGFloat {
      @_spi(_) @objc get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(_) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    #else
    @_spi(_) @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    #endif
    @_spi(_) @_Concurrency.MainActor @preconcurrency required public init(rootView: SwiftUICore._IntelligenceSupport.AnimatingSummarySymbol)
    @_spi(_) @objc deinit
  }
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public protocol IndexViewStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _makeBody(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._IndexViewStyleConfiguration
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func indexViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.IndexViewStyle
  
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct _IndexViewStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI._IndexViewStyleConfiguration : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyWidgetConfiguration : SwiftUI.WidgetConfiguration {
  @inlinable nonisolated public init() {}
  nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUI.EmptyWidgetConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Section : SwiftUI.TableRowContent where Parent : SwiftUI.TableRowContent, Content : SwiftUI.TableRowContent, Footer : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.Section<Parent, Content, Footer>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @_spi(Private) public init<V, H>(header: H, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, H>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, H : SwiftUICore.View
  public init<V, H>(@SwiftUI.TableRowBuilder<V> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> H) where Parent == SwiftUI.TableHeaderRowContent<V, H>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, H : SwiftUICore.View
  public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue
  @_disfavoredOverload public init<V, S>(_ title: S, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, S : Swift.StringProtocol
  public init<V>(@SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.EmptyTableRowContent<V>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Section where Parent : SwiftUI.TableRowContent, Content : SwiftUI.TableRowContent {
  public init<V, H>(isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUI.TableRowBuilder<V> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> H) where Parent == SwiftUI.TableHeaderRowContent<V, H>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, H : SwiftUICore.View
  public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue
  @_disfavoredOverload public init<V, S>(_ title: S, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUI.TableRowBuilder<V> content: () -> Content) where Parent == SwiftUI.TableHeaderRowContent<V, SwiftUICore.Text>, Footer == SwiftUI.EmptyTableRowContent<V>, V == Content.TableRowValue, S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct EmptyTableRowContent<Value> where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.EmptyTableRowContent<Value>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.EmptyTableRowContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableHeaderRowContent<Value, Content> : SwiftUI.TableRowContent where Value : Swift.Identifiable, Content : SwiftUICore.View {
  public typealias TableRowValue = Value
  public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI21TableHeaderRowContentV05tableE4BodyQrvp", 0) __<Value, Content>
}
@available(*, unavailable)
extension SwiftUI.TableHeaderRowContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, message: "Use navigationDestination(isPresented:content:)")
  nonisolated public func presentationLink<T, V>(isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #else
  @_spi(Private) @available(*, deprecated, message: "Use navigationDestination(isPresented:content:)")
  nonisolated public func presentationLink<T, V>(isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #endif
  @_spi(Private) @available(*, deprecated, renamed: "navigationDestination(isPresented:content:)")
  nonisolated public func presentationLink<V>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func menuOrder(_ order: SwiftUI.MenuOrder) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct MenuOrder : Swift.Equatable, Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.MenuOrder
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let priority: SwiftUI.MenuOrder
  public static let fixed: SwiftUI.MenuOrder
  public static func == (a: SwiftUI.MenuOrder, b: SwiftUI.MenuOrder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  public var menuOrder: SwiftUI.MenuOrder {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.PlaceholderTextShapeStyle {
  @_alwaysEmitIntoClient public static var placeholder: SwiftUI.PlaceholderTextShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct PlaceholderTextShapeStyle : SwiftUICore.ShapeStyle {
  @_alwaysEmitIntoClient public init() {}
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol TabViewStyle {
  static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _TabViewValue<Style, SelectionValue> where Style : SwiftUI.TabViewStyle, SelectionValue : Swift.Hashable {
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var content: some SwiftUICore.View {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var selection: SwiftUICore.Binding<SelectionValue>? {
    get
  }
  #else
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var selection: SwiftUICore.Binding<SelectionValue>? {
    get
  }
  #endif
}
@available(*, unavailable)
extension SwiftUI._TabViewValue : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func tabViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.TabViewStyle
  
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func materialBackedBorderedButtons() -> some SwiftUICore.View
  
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowFlexibility {
  @_spi(Private) public static var automatic: SwiftUI.WindowFlexibility
  @_spi(Private) public static var constrainedToContent: SwiftUI.WindowFlexibility
  @_spi(Private) public static var constrainedToContentMinimum: SwiftUI.WindowFlexibility
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WindowFlexibility : Swift.Sendable {
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(Private) @available(*, deprecated, renamed: "windowResizability(_:)")
  nonisolated public func windowFlexibility(_ flexibility: SwiftUI.WindowFlexibility) -> some SwiftUI.Scene
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ContentMarginProxy : Swift.Equatable {
  @_spi(Private) public func margins(for placement: SwiftUI.ContentMarginPlacement, in edges: SwiftUICore.Edge.Set, allowAutomatic: Swift.Bool = true) -> SwiftUICore.EdgeInsets
  @_spi(Private) public static func == (a: SwiftUI.ContentMarginProxy, b: SwiftUI.ContentMarginProxy) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ContentMarginProxy : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var contentMarginProxy: SwiftUI.ContentMarginProxy {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ insets: SwiftUICore.EdgeInsets, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat?, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func contentMargins(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat?, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  #endif
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func contentMargins(_ length: CoreFoundation.CGFloat, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "contentMargins()")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "contentMargins()")
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func contentMargin(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "contentMargins()")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "contentMargins()")
  nonisolated public func contentMargin(_ edges: SwiftUICore.Edge.Set = .all, _ insets: SwiftUICore.EdgeInsets, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "contentMargins()")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "contentMargins()")
  nonisolated public func contentMargin(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat?, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "contentMargins()")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "contentMargins()")
  nonisolated public func contentMargin(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat?, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
  #endif
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "contentMargins()")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "contentMargins()")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "contentMargins()")
  nonisolated public func contentMargin(_ length: CoreFoundation.CGFloat, for placement: SwiftUI.ContentMarginPlacement = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, watchOS 10.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@usableFromInline
internal enum SectionIndexLabel {
  case text(SwiftUICore.Text)
  case image(SwiftUICore.Image)
}
@available(*, unavailable)
extension SwiftUI.SectionIndexLabel : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, watchOS 10.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@usableFromInline
internal struct SectionIndexLabelKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient internal static var defaultValue: SwiftUI.SectionIndexLabel? {
    get { nil }
  }
  #else
  @_alwaysEmitIntoClient internal static var defaultValue: SwiftUI.SectionIndexLabel? {
    get { nil }
  }
  #endif
  @available(iOS 18.0, watchOS 10.0, macOS 15.0, visionOS 2.0, *)
  @usableFromInline
  @available(tvOS, unavailable, introduced: 13.0)
  internal typealias Value = SwiftUI.SectionIndexLabel?
}
@available(*, unavailable)
extension SwiftUI.SectionIndexLabelKey : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 10.0, visionOS 2.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listSectionIndexLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View {
        _trait(SectionIndexLabelKey.self, label.map { .text($0) })
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listSectionIndexLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View {
        _trait(SectionIndexLabelKey.self, label.map { .text($0) })
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listSectionIndexLabel(_ labelKey: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View {
        _trait(SectionIndexLabelKey.self, labelKey.map { .text(Text($0)) })
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listSectionIndexLabel(_ labelKey: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View {
        _trait(SectionIndexLabelKey.self, labelKey.map { .text(Text($0)) })
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func listSectionIndexLabel<S>(_ label: S?) -> some SwiftUICore.View where S : Swift.StringProtocol {
        _trait(SectionIndexLabelKey.self, label.map { .text(Text($0)) })
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func listSectionIndexLabel<S>(_ label: S?) -> some SwiftUICore.View where S : Swift.StringProtocol {
        _trait(SectionIndexLabelKey.self, label.map { .text(Text($0)) })
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func listSectionIndexLabel(_ label: SwiftUICore.Image?) -> some SwiftUICore.View {
        _trait(SectionIndexLabelKey.self, label.map { .image($0) })
    }
  
  #else
  @_spi(Private) @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func listSectionIndexLabel(_ label: SwiftUICore.Image?) -> some SwiftUICore.View {
        _trait(SectionIndexLabelKey.self, label.map { .image($0) })
    }
  
  #endif
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "SectionIndexLabelKey")
@usableFromInline
internal struct SectionIndexTitleKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.Text? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.Text? {
    get { nil }
  }
  #endif
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0, renamed: "SectionIndexLabelKey")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "SectionIndexLabelKey")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "SectionIndexLabelKey")
  @available(macOS, unavailable, introduced: 10.15, renamed: "SectionIndexLabelKey")
  internal typealias Value = SwiftUICore.Text?
}
@available(*, unavailable)
extension SwiftUI.SectionIndexTitleKey : Swift.Sendable {
}
@_spi(Private) @available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "listSectionIndexLabel(_:)")
  nonisolated public func listSectionIndexTitle(_ title: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(*, deprecated, renamed: "listSectionIndexLabel(_:)")
  nonisolated public func listSectionIndexTitle(_ title: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "listSectionIndexLabel(_:)")
  nonisolated public func listSectionIndexTitle(_ titleKey: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(*, deprecated, renamed: "listSectionIndexLabel(_:)")
  nonisolated public func listSectionIndexTitle(_ titleKey: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, renamed: "listSectionIndexLabel(_:)")
  @_disfavoredOverload nonisolated public func listSectionIndexTitle<S>(_ title: S?) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  #else
  @_spi(Private) @available(*, deprecated, renamed: "listSectionIndexLabel(_:)")
  @_disfavoredOverload nonisolated public func listSectionIndexTitle<S>(_ title: S?) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  #endif
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol DisclosureGroupStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.DisclosureGroupStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisclosureGroupStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.DisclosureGroupStyleConfiguration.Label
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI.DisclosureGroupStyleConfiguration.Content
  @SwiftUICore.Binding @_projectedValueProperty($isExpanded) public var isExpanded: Swift.Bool {
    get
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating set
    @available(iOS 16.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating _modify
  }
  public var $isExpanded: SwiftUICore.Binding<Swift.Bool> {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroupStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroupStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroupStyleConfiguration.Label : Swift.Sendable {
}
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func disclosureGroupStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.DisclosureGroupStyle
  
}
@available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var isSceneCaptured: Swift.Bool {
    get
    set
  }
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore._ViewListOutputs {
  @_spi(ForMapKitOnly) public static func mapKitUnaryViewList<V>(view: SwiftUICore._GraphValue<V>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where V : SwiftUICore.View
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func defaultFocus<V>(_ binding: SwiftUI.FocusState<V>.Binding, _ value: V, priority: SwiftUI.DefaultFocusEvaluationPriority = .automatic) -> some SwiftUICore.View where V : Swift.Hashable
  
  @_spi(Private) @available(iOS, introduced: 16.0, deprecated: 17.0, message: "use View.defaultFocus(_:_:priority:)")
  @available(macOS, introduced: 13.0, deprecated: 14.0, message: "use View.defaultFocus(_:_:priority:)")
  @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "use View.defaultFocus(_:_:priority:)")
  @available(watchOS, introduced: 9.0, deprecated: 10.0, message: "use View.defaultFocus(_:_:priority:)")
  @_Concurrency.MainActor @preconcurrency public func _defaultFocus<V>(_ binding: SwiftUI.FocusState<V>.Binding, _ value: V, priority: SwiftUI.DefaultFocusEvaluationPriority = .automatic) -> some SwiftUICore.View where V : Swift.Hashable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct DefaultFocusEvaluationPriority : Swift.Sendable {
  public static let automatic: SwiftUI.DefaultFocusEvaluationPriority
  public static let userInitiated: SwiftUI.DefaultFocusEvaluationPriority
}
extension SwiftUICore.View {
  @available(iOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload nonisolated public func onContinuousHover(coordinateSpace: SwiftUICore.CoordinateSpace = .local, perform action: @escaping (SwiftUI.HoverPhase) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
  @available(watchOS, unavailable)
  nonisolated public func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (SwiftUI.HoverPhase) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, *)
@available(watchOS, unavailable)
@frozen public enum HoverPhase : Swift.Equatable {
  case active(CoreFoundation.CGPoint)
  case ended
  public static func == (a: SwiftUI.HoverPhase, b: SwiftUI.HoverPhase) -> Swift.Bool
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowInteractionBehavior : Swift.Sendable {
  public static let automatic: SwiftUI.WindowInteractionBehavior
  public static let enabled: SwiftUI.WindowInteractionBehavior
  public static let disabled: SwiftUI.WindowInteractionBehavior
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func windowDismissBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
  nonisolated public func windowMinimizeBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
  nonisolated public func windowResizeBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
  nonisolated public func windowFullScreenBehavior(_ behavior: SwiftUI.WindowInteractionBehavior) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Scene {
  nonisolated public func windowManagerRole(_ role: SwiftUI.WindowManagerRole) -> some SwiftUI.Scene
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct WindowManagerRole : Swift.Sendable {
  public static let automatic: SwiftUI.WindowManagerRole
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let principal: SwiftUI.WindowManagerRole
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let associated: SwiftUI.WindowManagerRole
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(DoNotImport) @available(*, deprecated, message: "Use the modifier which takes a WindowInteractionBehavior instead.")
  @_disfavoredOverload nonisolated public func windowDismissBehavior(_ behavior: SwiftUI.WindowBehavior) -> some SwiftUICore.View
  
  @_spi(DoNotImport) @available(*, deprecated, message: "Use the modifier which takes a WindowInteractionBehavior instead.")
  @_disfavoredOverload nonisolated public func windowResizeBehavior(_ behavior: SwiftUI.WindowBehavior) -> some SwiftUICore.View
  
  @_spi(DoNotImport) @available(*, deprecated, renamed: "windowMinimizeBehavior(_:)")
  nonisolated public func windowDockBehavior(_ behavior: SwiftUI.WindowBehavior) -> some SwiftUICore.View
  
  @_spi(DoNotImport) @available(*, deprecated, message: "Use the modifier which takes a WindowInteractionBehavior instead.")
  @_disfavoredOverload nonisolated public func windowFullScreenBehavior(_ behavior: SwiftUI.WindowFullScreenBehavior) -> some SwiftUICore.View
  
  @_spi(DoNotImport) @available(*, deprecated, renamed: "Scene.windowManagerRole(_:)")
  nonisolated public func windowStageManagerBehavior(_ behavior: SwiftUI.WindowStageManagerBehavior) -> some SwiftUICore.View
  
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "WindowInteractionBehavior")
public struct WindowBehavior : Swift.Sendable {
  @_spi(DoNotImport) public static let automatic: SwiftUI.WindowBehavior
  @_spi(DoNotImport) public static let enabled: SwiftUI.WindowBehavior
  @_spi(DoNotImport) public static let disabled: SwiftUI.WindowBehavior
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "Use WindowInteractionBehavior or WindowManagerRole instead.")
public struct WindowFullScreenBehavior : Swift.Sendable {
  @_spi(DoNotImport) public static let automatic: SwiftUI.WindowFullScreenBehavior
  @_spi(DoNotImport) public static let enabled: SwiftUI.WindowFullScreenBehavior
  @_spi(DoNotImport) public static let disabled: SwiftUI.WindowFullScreenBehavior
  @_spi(DoNotImport) public static let associated: SwiftUI.WindowFullScreenBehavior
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "WindowManagerRole")
public struct WindowStageManagerBehavior : Swift.Sendable {
  @_spi(DoNotImport) public static let automatic: SwiftUI.WindowStageManagerBehavior
  @_spi(DoNotImport) public static let primary: SwiftUI.WindowStageManagerBehavior
  @_spi(DoNotImport) public static let auxiliary: SwiftUI.WindowStageManagerBehavior
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.LabeledContentStyle where Self == SwiftUI.AutomaticLabeledContentStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticLabeledContentStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticLabeledContentStyle : SwiftUI.LabeledContentStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticLabeledContentStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28AutomaticLabeledContentStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticLabeledContentStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func symbolEffect<T>(_ effect: T, options: Symbols.SymbolEffectOptions = .default, isActive: Swift.Bool = true) -> some SwiftUICore.View where T : Symbols.IndefiniteSymbolEffect, T : Symbols.SymbolEffect {
        return modifier(_IndefiniteSymbolEffectModifier(
            effect: effect, options: options, isActive: isActive))
    }
  
  @_alwaysEmitIntoClient nonisolated public func symbolEffect<T, U>(_ effect: T, options: Symbols.SymbolEffectOptions = .default, value: U) -> some SwiftUICore.View where T : Symbols.DiscreteSymbolEffect, T : Symbols.SymbolEffect, U : Swift.Equatable {
        return modifier(_DiscreteSymbolEffectModifier(
            effect: effect, options: options, value: value))
    }
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func symbolEffect<T>(_ effect: T, options: Symbols.SymbolEffectOptions = .default, when condition: Swift.Bool) -> some SwiftUICore.View where T : Symbols.DiscreteSymbolEffect, T : Symbols.SymbolEffect {
        return modifier(_ConditionalSymbolEffectModifier(
            effect: effect, options: options, condition: condition))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _IndefiniteSymbolEffectModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var options: Symbols.SymbolEffectOptions
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var isActive: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init<T>(effect: T, options: Symbols.SymbolEffectOptions, isActive: Swift.Bool) where T : Symbols.IndefiniteSymbolEffect, T : Symbols.SymbolEffect {
        self.config = effect.configuration
        self.options = options
        self.isActive = isActive
    }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._IndefiniteSymbolEffectModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._IndefiniteSymbolEffectModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _DiscreteSymbolEffectModifier<T> : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier where T : Swift.Equatable {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var options: Symbols.SymbolEffectOptions
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var value: T
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init<U>(effect: U, options: Symbols.SymbolEffectOptions, value: T) where U : Symbols.DiscreteSymbolEffect, U : Symbols.SymbolEffect {
        config = effect.configuration
        self.options = options
        self.value = value
    }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._DiscreteSymbolEffectModifier<T>>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DiscreteSymbolEffectModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ConditionalSymbolEffectModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var options: Symbols.SymbolEffectOptions
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var condition: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init<U>(effect: U, options: Symbols.SymbolEffectOptions, condition: Swift.Bool) where U : Symbols.DiscreteSymbolEffect, U : Symbols.SymbolEffect {
        config = effect.configuration
        self.options = options
        self.condition = condition
    }
  @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._ConditionalSymbolEffectModifier>, inputs: inout SwiftUICore._GraphInputs)
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ConditionalSymbolEffectModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition where Self == SwiftUI.SymbolEffectTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func symbolEffect<T>(_ effect: T, options: Symbols.SymbolEffectOptions = .default) -> SwiftUI.SymbolEffectTransition where T : Symbols.SymbolEffect, T : Symbols.TransitionSymbolEffect {
        return SymbolEffectTransition(effect: effect, options: options)
    }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var symbolEffect: SwiftUI.SymbolEffectTransition {
    get {
        return symbolEffect(.automatic)
    }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct SymbolEffectTransition : SwiftUICore.Transition {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var config: Symbols.SymbolEffectConfiguration
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var options: Symbols.SymbolEffectOptions
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init<T>(effect: T, options: Symbols.SymbolEffectOptions) where T : Symbols.SymbolEffect, T : Symbols.TransitionSymbolEffect {
        config = effect.configuration
        self.options = options
    }
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.SymbolEffectTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public static let properties: SwiftUICore.TransitionProperties
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22SymbolEffectTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0E5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SymbolEffectTransition : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ContentTransition {
  public static func symbolEffect<T>(_ effect: T, options: Symbols.SymbolEffectOptions = .default) -> SwiftUICore.ContentTransition where T : Symbols.ContentTransitionSymbolEffect, T : Symbols.SymbolEffect
  @_alwaysEmitIntoClient public static var symbolEffect: SwiftUICore.ContentTransition {
    get {
        return symbolEffect(.automatic)
    }
  }
}
extension Symbols.WiggleSymbolEffect {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_alwaysEmitIntoClient public func custom(angle: SwiftUICore.Angle) -> Symbols.WiggleSymbolEffect {
        return custom(angle: angle.degrees)
    }
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowLayout {
  @_spi(DoNotImport) static var windowLayoutProperties: SwiftUI.WindowLayoutProperties { get }
  associatedtype Cache = Swift.Void
  @_spi(DoNotImport) func makeCache(content: SwiftUI.WindowLayoutRootView, context: SwiftUI.WindowPlacementContext) -> Self.Cache
  @_spi(DoNotImport) func updateCache(_ cache: inout Self.Cache, content: SwiftUI.WindowLayoutRootView, context: SwiftUI.WindowPlacementContext)
  @_spi(DoNotImport) func windowPlacement(content: SwiftUI.WindowLayoutRootView, context: SwiftUI.WindowPlacementContext, cache: inout Self.Cache) -> SwiftUI.WindowPlacement
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) nonisolated public func windowLayout<L>(_ newWindowLayout: @autoclosure @escaping () -> L) -> some SwiftUI.Scene where L : SwiftUI.WindowLayout
  
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowLayoutProperties : Swift.Sendable {
  @_spi(DoNotImport) public var triggers: SwiftUI.WindowLayoutUpdateTriggers
  @_spi(DoNotImport) public init()
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowLayoutUpdateTriggers : Swift.OptionSet, Swift.Sendable {
  @_spi(DoNotImport) public let rawValue: Swift.Int
  @_spi(DoNotImport) public init(rawValue: Swift.Int)
  @_spi(DoNotImport) public static let initial: SwiftUI.WindowLayoutUpdateTriggers
  @_spi(DoNotImport) public static let displayConfiguration: SwiftUI.WindowLayoutUpdateTriggers
  @_spi(DoNotImport) public static let all: SwiftUI.WindowLayoutUpdateTriggers
  @_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.WindowLayoutUpdateTriggers
  @_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Element = SwiftUI.WindowLayoutUpdateTriggers
  @_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias RawValue = Swift.Int
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowLayout where Self.Cache == () {
  @_spi(DoNotImport) public func makeCache(content: SwiftUI.WindowLayoutRootView, context: SwiftUI.WindowPlacementContext) -> Self.Cache
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowLayout {
  @_spi(DoNotImport) public static var windowLayoutProperties: SwiftUI.WindowLayoutProperties {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) public func updateCache(_ cache: inout Self.Cache, content: SwiftUI.WindowLayoutRootView, context: SwiftUI.WindowPlacementContext)
}
@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
public struct SpatialEventCollection : Swift.Collection {
  @available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  public struct Event : Swift.Identifiable, Swift.Hashable {
    public struct ID : Swift.Hashable {
      @_spi(Compositor) public init(_ value: Swift.Int)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: SwiftUI.SpatialEventCollection.Event.ID, b: SwiftUI.SpatialEventCollection.Event.ID) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public func hash(into hasher: inout Swift.Hasher)
    public enum Kind : Swift.Hashable {
      case touch
      @available(visionOS 1.0, *)
      @available(iOS, unavailable)
      @available(macOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      case directPinch
      @available(visionOS 1.0, *)
      @available(iOS, unavailable)
      @available(macOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      case indirectPinch
      @available(iOS 18.0, *)
      @available(macOS, unavailable)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      case pencil
      @available(visionOS 1.0, iOS 18.0, macOS 15.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      case pointer
      public static func == (a: SwiftUI.SpatialEventCollection.Event.Kind, b: SwiftUI.SpatialEventCollection.Event.Kind) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Phase : Swift.Hashable {
      case active
      case ended
      case cancelled
      public static func == (a: SwiftUI.SpatialEventCollection.Event.Phase, b: SwiftUI.SpatialEventCollection.Event.Phase) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct InputDevicePose : Swift.Hashable {
      public var altitude: SwiftUICore.Angle
      public var azimuth: SwiftUICore.Angle
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: SwiftUI.SpatialEventCollection.Event.InputDevicePose, b: SwiftUI.SpatialEventCollection.Event.InputDevicePose) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public var id: SwiftUI.SpatialEventCollection.Event.ID
    public var timestamp: Foundation.TimeInterval
    public var kind: SwiftUI.SpatialEventCollection.Event.Kind
    public var location: CoreFoundation.CGPoint
    public var phase: SwiftUI.SpatialEventCollection.Event.Phase
    public var modifierKeys: SwiftUICore.EventModifiers
    #if compiler(>=5.3) && $NoncopyableGenerics
    @available(visionOS 1.0, iOS 18.0, *)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var inputDevicePose: SwiftUI.SpatialEventCollection.Event.InputDevicePose? {
      get
      set
    }
    #else
    @available(visionOS 1.0, iOS 18.0, *)
    @available(macOS, unavailable)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public var inputDevicePose: SwiftUI.SpatialEventCollection.Event.InputDevicePose? {
      get
      set
    }
    #endif
    public static func == (a: SwiftUI.SpatialEventCollection.Event, b: SwiftUI.SpatialEventCollection.Event) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(index: SwiftUI.SpatialEventCollection.Event.ID) -> SwiftUI.SpatialEventCollection.Event? {
    get
  }
  #else
  public subscript(index: SwiftUI.SpatialEventCollection.Event.ID) -> SwiftUI.SpatialEventCollection.Event? {
    get
  }
  #endif
  public struct Iterator : Swift.IteratorProtocol {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public mutating func next() -> SwiftUI.SpatialEventCollection.Event?
    #else
    public mutating func next() -> SwiftUI.SpatialEventCollection.Event?
    #endif
    @available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
    @available(tvOS, unavailable)
    public typealias Element = SwiftUI.SpatialEventCollection.Event
  }
  public func makeIterator() -> SwiftUI.SpatialEventCollection.Iterator
  @_spi(Compositor) public mutating func updateWithEvent(_ input: SwiftUI.SpatialEventCollection.Event)
  @_spi(Compositor) public mutating func updateAfterCallback()
  public struct Index : Swift.Comparable {
    public static func < (lhs: SwiftUI.SpatialEventCollection.Index, rhs: SwiftUI.SpatialEventCollection.Index) -> Swift.Bool
    public static func == (a: SwiftUI.SpatialEventCollection.Index, b: SwiftUI.SpatialEventCollection.Index) -> Swift.Bool
  }
  public var startIndex: SwiftUI.SpatialEventCollection.Index {
    get
  }
  public var endIndex: SwiftUI.SpatialEventCollection.Index {
    get
  }
  public subscript(position: SwiftUI.SpatialEventCollection.Index) -> SwiftUI.SpatialEventCollection.Event {
    get
  }
  public func index(after i: SwiftUI.SpatialEventCollection.Index) -> SwiftUI.SpatialEventCollection.Index
  @_spi(Compositor) public init()
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  public typealias Element = SwiftUI.SpatialEventCollection.Event
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  public typealias Indices = Swift.DefaultIndices<SwiftUI.SpatialEventCollection>
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  public typealias SubSequence = Swift.Slice<SwiftUI.SpatialEventCollection>
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Iterator : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Index : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.Kind : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.Phase : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.InputDevicePose : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SpatialEventCollection.Event.ID : Swift.Sendable {
}
@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SpatialEventCollection : Swift.Equatable {
  public static func == (lhs: SwiftUI.SpatialEventCollection, rhs: SwiftUI.SpatialEventCollection) -> Swift.Bool
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {
  public typealias _Body = Swift.Never
  public init()
  public func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<SwiftUI.WindowMenuBarExtraStyle>) -> SwiftUI._MenuBarExtraValue<SwiftUI.WindowMenuBarExtraStyle>
}
@available(*, unavailable)
extension SwiftUI.WindowMenuBarExtraStyle : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtraStyle where Self == SwiftUI.WindowMenuBarExtraStyle {
  public static var window: SwiftUI.WindowMenuBarExtraStyle {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.LinearProgressViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linear: SwiftUI.LinearProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct LinearProgressViewStyle : SwiftUI.ProgressViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearProgressViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23LinearProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinearProgressViewStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct PagingScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {
  public init()
  @_spi(ForSwiftChartsOnly) public func decelerationRate(context: SwiftUI.ScrollTargetBehaviorDecelerationContext) -> SwiftUI.ScrollDecelerationRate
  public func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: SwiftUI.PagingScrollTargetBehavior.TargetContext)
  public static func _makeInputs(_ behavior: SwiftUICore._GraphValue<SwiftUI.PagingScrollTargetBehavior>, inputs: inout SwiftUICore._ViewInputs)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.PagingScrollTargetBehavior {
  public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
extension SwiftUI.ScrollTargetBehavior where Self == SwiftUI.PagingScrollTargetBehavior {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient public static var paging: SwiftUI.PagingScrollTargetBehavior {
    get { .init() }
  }
}
@available(*, unavailable)
extension SwiftUI.PagingScrollTargetBehavior : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ViewAlignedScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {
  public struct LimitBehavior {
    public static var automatic: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    public static var always: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public static var alwaysByFew: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public var alwaysByOne: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
    public static var never: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior {
      get
    }
  }
  public init(limitBehavior: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior = .automatic)
  public func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: SwiftUI.ViewAlignedScrollTargetBehavior.TargetContext)
  public static func _makeInputs(_ behavior: SwiftUICore._GraphValue<SwiftUI.ViewAlignedScrollTargetBehavior>, inputs: inout SwiftUICore._ViewInputs)
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use limitBehavior")
  @available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use limitBehavior")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use limitBehavior")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, message: "Use limitBehavior")
  public init(limit: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ViewAlignedScrollTargetBehavior {
  public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext)
}
extension SwiftUI.ScrollTargetBehavior where Self == SwiftUI.ViewAlignedScrollTargetBehavior {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient public static var viewAligned: SwiftUI.ViewAlignedScrollTargetBehavior {
    get { .init() }
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient public static func viewAligned(limitBehavior: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior) -> Self {
        .init(limitBehavior: limitBehavior)
    }
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use limitBehavior")
  @available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use limitBehavior")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use limitBehavior")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, message: "Use limitBehavior")
  @_alwaysEmitIntoClient public static func viewAligned(limit: SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior) -> Self {
        .init(limitBehavior: limit)
    }
}
@available(*, unavailable)
extension SwiftUI.ViewAlignedScrollTargetBehavior : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ViewAlignedScrollTargetBehavior.LimitBehavior : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen public struct AnyScrollTargetBehavior : SwiftUI.ScrollTargetBehavior {
  public var base: (any SwiftUI.ScrollTargetBehavior)
  @inlinable public init(_ base: some ScrollTargetBehavior) {
        self.base = base
    }
  @inlinable public func updateTarget(_ target: inout SwiftUICore.ScrollTarget, context: SwiftUI.AnyScrollTargetBehavior.TargetContext) {
        base.updateTarget(&target, context: context)
    }
  @inlinable public func _updateEnvironment(_ env: inout SwiftUICore.EnvironmentValues, context: SwiftUI._ScrollTargetBehaviorEnvironmentContext) {
        base._updateEnvironment(&env, context: context)
    }
}
@available(*, unavailable)
extension SwiftUI.AnyScrollTargetBehavior : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
final public class _ArchivedViewHost<Content, Delegate> : SwiftUICore.AnyArchivedViewHost, SwiftUICore.ViewRendererHost where Content : SwiftUICore.View, Delegate : SwiftUICore._ArchivedViewHostDelegate {
  @_spi(Private) final package let viewGraph: SwiftUICore.ViewGraph
  @_spi(Private) final package var propertiesNeedingUpdate: SwiftUICore.ViewRendererHostProperties
  @_spi(Private) final package var renderingPhase: SwiftUICore.ViewRenderingPhase
  @_spi(Private) final package var currentTimestamp: SwiftUICore.Time
  @_spi(Private) final package var externalUpdateCount: Swift.Int
  @_spi(Private) final public var content: Content {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var environment: SwiftUICore.EnvironmentValues {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var size: CoreFoundation.CGSize {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var safeAreaInsets: SwiftUICore.EdgeInsets {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var auxiliaryData: Foundation.Data?
  @_spi(Private) final public var delegate: Delegate
  @_spi(Private) final public var encodesCustomFontsAsURLs: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var encodesPreciseTextLayout: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var allowedImageTypes: Swift.Set<UniformTypeIdentifiers.UTType>
  @_spi(Private) final public var defaultImageType: UniformTypeIdentifiers.UTType?
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @available(*, deprecated, message: "no longer supported")
  final public var encodingStyle: SwiftUI._ArchivedViewStates.EncodingStyle {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  final public var encodesStableDisplayListIdentifiers: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  final public var encodesAssetCatalogReferences: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  final public var deploymentVersion: SwiftUI._ArchivedViewStates.DeploymentVersion {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) public init(content: Content, delegate: Delegate)
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  final public func modifyViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) final public func archiveIfChanged() throws -> Foundation.Data?
  #else
  @_spi(Private) final public func archiveIfChanged() throws -> Foundation.Data?
  #endif
  @_spi(Private) final public func archiveStates(count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws -> Foundation.Data
  @_spi(Private) final public func archiveStates(to file: Foundation.FileHandle, count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws
  @_spi(Private) final public func archiveStates(to url: Foundation.URL, count: Swift.Int, body: (Swift.Int) -> Swift.Void) throws
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  final public func archiveStates<S>(_ states: inout S) throws -> Foundation.Data where S : SwiftUICore.ArchivedViewHostStates
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  final public func archiveStates<S>(_ states: inout S, to file: Foundation.FileHandle) throws where S : SwiftUICore.ArchivedViewHostStates
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  final public func archiveStates<S>(_ states: inout S, to url: Foundation.URL) throws where S : SwiftUICore.ArchivedViewHostStates
  @_spi(Private) final public func forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  final public func applyMutation(_ mutation: SwiftUI.ArchivableMutation) throws
  @_spi(Private) final package func filteredImage(_ image: CoreGraphics.CGImage) throws -> CoreGraphics.CGImage
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) final package func imageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #else
  @_spi(Private) final package func imageType(for image: CoreGraphics.CGImage) -> UniformTypeIdentifiers.UTType?
  #endif
  @_spi(Private) final package func failedToEncodeView(type: any Any.Type)
  @_spi(Private) final public func reset()
  @_spi(Private) final package func requestUpdate(after delay: Swift.Double)
  @_spi(Private) final package func updateRootView()
  @_spi(Private) final package func updateEnvironment()
  @_spi(Private) final package func updateSize()
  @_spi(Private) final package func updateSafeArea()
  @_spi(Private) final package func updateScrollableContainerSize()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) final package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #else
  @_spi(Private) final package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #endif
  @_spi(Private) @objc deinit
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._ArchivedViewHost : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ArchivedViewHost {
  @_spi(Private) final public func preferenceValue<K>(for key: K.Type) -> K.Value where K : SwiftUICore.HostPreferenceKey
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._ArchivedViewHost {
  @_spi(Private) final public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
extension SwiftUI.TabContent {
  @available(iOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func customizationBehavior(_ behavior: SwiftUI.TabCustomizationBehavior, for placements: SwiftUI.AdaptableTabBarPlacement...) -> some SwiftUI.TabContent<Self.TabValue>
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func customizationID(_ id: Swift.String) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabCustomizationBehavior : Swift.Equatable {
  public static var automatic: SwiftUI.TabCustomizationBehavior {
    get
  }
  @_spi_available(macOS, introduced: 15.0)
  @_spi_available(tvOS, introduced: 18.0)
  @_spi_available(watchOS, introduced: 11.0)
  public static var reorderable: SwiftUI.TabCustomizationBehavior {
    get
  }
  @_spi_available(macOS, introduced: 15.0)
  @_spi_available(tvOS, introduced: 18.0)
  @_spi_available(watchOS, introduced: 11.0)
  public static var disabled: SwiftUI.TabCustomizationBehavior {
    get
  }
  public static func == (a: SwiftUI.TabCustomizationBehavior, b: SwiftUI.TabCustomizationBehavior) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.TabCustomizationBehavior : Swift.Sendable {
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlWidget {
  @_Concurrency.MainActor @preconcurrency init()
  associatedtype Body : SwiftUI.ControlWidgetConfiguration
  @SwiftUI.ControlWidgetConfigurationBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@_spi(_) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LeadingAlignedDisclosureGroupStyle : SwiftUI.DisclosureGroupStyle {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(_) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LeadingAlignedDisclosureGroupStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI34LeadingAlignedDisclosureGroupStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.LeadingAlignedDisclosureGroupStyle : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DisclosureGroupStyle where Self == SwiftUI.LeadingAlignedDisclosureGroupStyle {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public static var leadingAligned: SwiftUI.LeadingAlignedDisclosureGroupStyle {
    @_spi(_) get
  }
}
extension SwiftUICore.AnyTransition {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let verticalDisclosure: SwiftUICore.AnyTransition
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Group {
  @_spi(_) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "init(subviewsOf:transform:)")
  @available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "init(subviewsOf:transform:)")
  @available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "init(subviewsOf:transform:)")
  @available(watchOS, introduced: 11.0, deprecated: 11.0, renamed: "init(subviewsOf:transform:)")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "init(subviewsOf:transform:)")
  public init<Base, Result>(elementsOf view: Base, @SwiftUICore.ViewBuilder transform: @escaping (SwiftUI.SubviewsCollection) -> Result) where Content == SwiftUI.GroupElementsOfContent<Base, Result>, Base : SwiftUICore.View, Result : SwiftUICore.View
  public init<Base, Result>(subviewsOf view: Base, @SwiftUICore.ViewBuilder transform: @escaping (SwiftUI.SubviewsCollection) -> Result) where Content == SwiftUI.GroupElementsOfContent<Base, Result>, Base : SwiftUICore.View, Result : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct GroupElementsOfContent<Subviews, Content> : SwiftUICore.View where Subviews : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22GroupElementsOfContentV4bodyQrvp", 0) __<Subviews, Content>
}
@available(*, unavailable)
extension SwiftUI.GroupElementsOfContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SubviewsCollection : Swift.RandomAccessCollection {
  public func index(before i: Swift.Int) -> Swift.Int
  public func index(after i: Swift.Int) -> Swift.Int
  public subscript(index: Swift.Int) -> SwiftUI.Subview {
    get
  }
  public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUI.SubviewsCollectionSlice {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUI.Subview
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.SubviewsCollection>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias SubSequence = SwiftUI.SubviewsCollectionSlice
}
@available(*, unavailable)
extension SwiftUI.SubviewsCollection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.SubviewsCollection : SwiftUICore.View, SwiftUICore.MultiView, SwiftUICore.PrimitiveView {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.SubviewsCollection>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SubviewsCollectionSlice : Swift.RandomAccessCollection {
  public subscript(index: Swift.Int) -> SwiftUI.Subview {
    get
  }
  public subscript(bounds: Swift.Range<Swift.Int>) -> SwiftUI.SubviewsCollectionSlice {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUI.Subview
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.SubviewsCollectionSlice>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias SubSequence = SwiftUI.SubviewsCollectionSlice
}
@available(*, unavailable)
extension SwiftUI.SubviewsCollectionSlice : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.SubviewsCollectionSlice : SwiftUICore.View, SwiftUICore.MultiView, SwiftUICore.PrimitiveView {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.SubviewsCollectionSlice>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func layoutDirectionBehavior(_ behavior: SwiftUICore.LayoutDirectionBehavior) -> some SwiftUICore.View {
        modifier(_LayoutDirectionBehaviorEffect(behavior: behavior))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _LayoutDirectionBehaviorEffect : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var behavior: SwiftUICore.LayoutDirectionBehavior
  @inlinable nonisolated public init(behavior: SwiftUICore.LayoutDirectionBehavior) {
        self.behavior = behavior
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._LayoutDirectionBehaviorEffect>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func onScrollTargetVisibilityChange<ID>(idType: ID.Type, threshold: Swift.Double = 0.5, _ action: @escaping ([ID]) -> Swift.Void) -> some SwiftUICore.View where ID : Swift.Hashable
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func onScrollVisibilityChange(threshold: Swift.Double = 0.5, _ action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
  @_spi(Private) @available(*, deprecated, renamed: "onScrollTargetVisibilityChange(idType:threshold:_:)")
  nonisolated public func onScrollTargetVisibilityChange<ID>(for: ID.Type, threshold: Swift.Double, _ action: @escaping ([ID]) -> Swift.Void) -> some SwiftUICore.View where ID : Swift.Hashable
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.CircularProgressViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var circular: SwiftUI.CircularProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct CircularProgressViewStyle : SwiftUI.ProgressViewStyle {
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, deprecated: 8.0, message: "Use View.controlSize(_:) instead.")
  public enum Size {
    @_spi(Private) case small
    @_spi(Private) case medium
    @_spi(Private) case large
    @_spi(Private) public static func == (a: SwiftUI.CircularProgressViewStyle.Size, b: SwiftUI.CircularProgressViewStyle.Size) -> Swift.Bool
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, deprecated: 8.0, message: "Use View.controlSize(_:) instead.")
  @_Concurrency.MainActor @preconcurrency public init(size: SwiftUI.CircularProgressViewStyle.Size)
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularProgressViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25CircularProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CircularProgressViewStyle : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CircularProgressViewStyle.Size : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct Toggle<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  nonisolated public init(isOn: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder label: () -> Label)
  @_spi(_) @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Use Toggle.init(sources:isOn:label:).")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use Toggle.init(sources:isOn:label:).")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Use Toggle.init(sources:isOn:label:).")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Use Toggle.init(sources:isOn:label:).")
  nonisolated public init<C>(isOn: C, @SwiftUICore.ViewBuilder label: () -> Label) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<Swift.Bool>
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>, @SwiftUICore.ViewBuilder label: () -> Label) where C : Swift.RandomAccessCollection
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ToggleV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Toggle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.ToggleStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  nonisolated public init(_ configuration: SwiftUI.ToggleStyleConfiguration)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Toggle where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: SwiftUICore.Binding<Swift.Bool>)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, isOn: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol
  @_spi(_) @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Use Toggle.init(_:sources:isOn).")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use Toggle.init(_:sources:isOn).")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Use Toggle.init(_:sources:isOn).")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Use Toggle.init(_:sources:isOn).")
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: C) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<Swift.Bool>
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where C : Swift.RandomAccessCollection
  @_spi(_) @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Use Toggle.init(_:sources:isOn).")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use Toggle.init(_:sources:isOn).")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Use Toggle.init(_:sources:isOn).")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Use Toggle.init(_:sources:isOn).")
  @_disfavoredOverload nonisolated public init<S, C>(_ title: S, isOn: C) where S : Swift.StringProtocol, C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<Swift.Bool>
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<S, C>(_ title: S, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where S : Swift.StringProtocol, C : Swift.RandomAccessCollection
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, isOn: SwiftUICore.Binding<Swift.Bool>) {
        self.init(isOn: isOn) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, isOn: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol {
        self.init(isOn: isOn) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where C : Swift.RandomAccessCollection {
        self.init(sources: sources, isOn: isOn) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S, C>(_ title: S, systemImage: Swift.String, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where S : Swift.StringProtocol, C : Swift.RandomAccessCollection {
        self.init(sources: sources, isOn: isOn) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, isOn: SwiftUICore.Binding<Swift.Bool>)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, isOn: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where C : Swift.RandomAccessCollection
  @_disfavoredOverload nonisolated public init<S, C>(_ title: S, image: DeveloperToolsSupport.ImageResource, sources: C, isOn: Swift.KeyPath<C.Element, SwiftUICore.Binding<Swift.Bool>>) where S : Swift.StringProtocol, C : Swift.RandomAccessCollection
}
@_spi(AppIntent) @available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Toggle {
  @_spi(AppIntent) nonisolated public init(isOn: Swift.Bool, lnAction: ObjectiveC.NSObject, @SwiftUICore.ViewBuilder label: () -> Label)
  @_spi(AppIntent) nonisolated public init(isOn: Swift.Bool, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where Sort == Foundation.KeyPathComparator<RowValue>, Label == SwiftUICore.Text {
  public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, V>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V : Swift.Comparable
  @_disfavoredOverload public init<S, V>(_ title: S, value: Swift.KeyPath<RowValue, V>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol, V : Swift.Comparable
  @available(iOS 16.6, macOS 13.5, *)
  public init<V>(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, V>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V : Swift.Comparable
  public init<V, C>(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V == C.Compared, C : Foundation.SortComparator
  @_disfavoredOverload public init<S, V, C>(_ title: S, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol, V == C.Compared, C : Foundation.SortComparator
  @available(iOS 16.6, macOS 13.5, *)
  public init<V, C>(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, V>, comparator: C, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where V == C.Compared, C : Foundation.SortComparator
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func task(priority: _Concurrency.TaskPriority = .userInitiated, @_inheritActorContext _ action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUICore.View {
        modifier(_TaskModifier(priority: priority, action: action))
    }
  
  @inlinable nonisolated public func task<T>(id value: T, priority: _Concurrency.TaskPriority = .userInitiated, @_inheritActorContext _ action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable {
        modifier(_TaskValueModifier(
            value: value, priority: priority, action: action))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TaskModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier {
  nonisolated(unsafe) public var action: @Sendable () async -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var priority: _Concurrency.TaskPriority
  @inlinable nonisolated public init(priority: _Concurrency.TaskPriority, action: @escaping @Sendable () async -> Swift.Void) {
        self.priority = priority
        self.action = action
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._TaskModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._TaskModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TaskValueModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier where Value : Swift.Equatable {
  nonisolated(unsafe) public var action: @Sendable () async -> Swift.Void
  @_Concurrency.MainActor @preconcurrency public var priority: _Concurrency.TaskPriority
  @_Concurrency.MainActor @preconcurrency public var value: Value
  @inlinable nonisolated public init(value: Value, priority: _Concurrency.TaskPriority, action: @escaping @Sendable () async -> Swift.Void) {
        self.action = action
        self.priority = priority
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._TaskValueModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._TaskValueModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TaskValueModifier : Swift.Sendable {
}
@_spi(_) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
public protocol NavigationTransitionStyle {
  @_spi(_) var _outputs: SwiftUI._NavigationTransitionStyleOutputs { get }
}
@_spi(_) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
public struct _NavigationTransitionStyleOutputs : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(_) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
  @available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
  @available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
  nonisolated public func navigationTransitionStyle(_ style: some NavigationTransitionStyle) -> some SwiftUICore.View
  
}
@_spi(_) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
public struct AutomaticNavigationTransitionStyle : SwiftUI.NavigationTransitionStyle {
  @_spi(_) public var _outputs: SwiftUI._NavigationTransitionStyleOutputs {
    @_spi(_) get
  }
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.AutomaticNavigationTransitionStyle : Swift.Sendable {
}
@_spi(_) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
extension SwiftUI.NavigationTransitionStyle where Self == SwiftUI.AutomaticNavigationTransitionStyle {
  @_spi(_) public static var automatic: SwiftUI.AutomaticNavigationTransitionStyle {
    @_spi(_) get
  }
}
@_spi(_) @available(macOS, unavailable)
@available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
public struct ZoomNavigationTransitionStyle : SwiftUI.NavigationTransitionStyle {
  @_spi(_) public var _outputs: SwiftUI._NavigationTransitionStyleOutputs {
    @_spi(_) get
  }
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.ZoomNavigationTransitionStyle : Swift.Sendable {
}
@_spi(_) @available(macOS, unavailable)
@available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use NavigationTransition instead")
extension SwiftUI.NavigationTransitionStyle where Self == SwiftUI.ZoomNavigationTransitionStyle {
  @_spi(_) public static func zoom(sourceID: some Hashable, in namespace: SwiftUICore.Namespace.ID) -> SwiftUI.ZoomNavigationTransitionStyle
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "RotateGesture")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "RotateGesture")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "RotateGesture")
public struct RotationGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  public var minimumAngleDelta: SwiftUICore.Angle
  public init(minimumAngleDelta: SwiftUICore.Angle = .degrees(1))
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.RotationGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.RotationGesture.Value>
  public typealias Value = SwiftUICore.Angle
  package var internalBody: some SwiftUICore.Gesture<SwiftUICore.Angle> {
    get
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "RotateGesture")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "RotateGesture")
  @available(watchOS, unavailable, introduced: 6.0, renamed: "RotateGesture")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "RotateGesture")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "RotateGesture")
  public typealias Body = Swift.Never
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "RotateGesture")
  @available(tvOS, unavailable, renamed: "RotateGesture")
  @available(watchOS, unavailable, renamed: "RotateGesture")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "RotateGesture")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "RotateGesture")
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI15RotationGestureV12internalBodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.RotationGesture : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct RotateGesture : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, Swift.Sendable {
    public var time: Foundation.Date
    public var rotation: SwiftUICore.Angle
    public var velocity: SwiftUICore.Angle
    public var startAnchor: SwiftUICore.UnitPoint
    public var startLocation: CoreFoundation.CGPoint
    public static func == (a: SwiftUI.RotateGesture.Value, b: SwiftUI.RotateGesture.Value) -> Swift.Bool
  }
  public var minimumAngleDelta: SwiftUICore.Angle
  public init(minimumAngleDelta: SwiftUICore.Angle = .degrees(1))
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.RotateGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.RotateGesture.Value>
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.RotateGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(*, deprecated, message: "use Animatable directly")
public protocol _AnimatableView : SwiftUICore.Animatable, SwiftUICore.View {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(*, deprecated, message: "use Animatable directly")
extension SwiftUI._AnimatableView {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View where Self : SwiftUICore.Animatable {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct TextField<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI9TextFieldV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.TextField : Swift.Sendable {
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, axis: SwiftUICore.Axis)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?, axis: SwiftUICore.Axis)
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?, axis: SwiftUICore.Axis)
  #endif
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, axis: SwiftUICore.Axis) where S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?, axis: SwiftUICore.Axis) where S : Swift.StringProtocol
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?, axis: SwiftUICore.Axis) where S : Swift.StringProtocol
  #endif
}
extension SwiftUI.TextField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?)
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
  #endif
}
extension SwiftUI.TextField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil)
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil) where S : Swift.StringProtocol
  #endif
}
@_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) nonisolated public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_spi(DoNotImport) nonisolated public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection?>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>) {
        self.init(
            titleKey, text: text, onEditingChanged: { _ in }, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>) where S : Swift.StringProtocol {
        self.init(
            title, text: text, onEditingChanged: { _ in }, onCommit: {})
    }
}
@_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil)
  #else
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil) where S : Swift.StringProtocol
  #else
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil) where S : Swift.StringProtocol
  #endif
}
@_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use the variant with Binding<TextSelection?>.")
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, selection: SwiftUICore.Binding<SwiftUI.TextSelection>, prompt: SwiftUICore.Text? = nil, axis: SwiftUICore.Axis? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextField where Label == SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) {
        self.init(
            titleKey, text: text,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) {
        self.init(
            titleKey, text: text,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, text: text,
            onEditingChanged: onEditingChanged, onCommit: {})
    }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed TextField.init(_:text:onEditingChanged:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter. Use FocusState<T> and View.focused(_:equals:) for functionality previously provided by the onEditingChanged parameter.")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(
            title, text: text,
            onEditingChanged: { _ in }, onCommit: onCommit)
    }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct IsLinkedGroupTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(watchOS 6.0, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(visionOS, unavailable)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsLinkedGroupTraitKey : Swift.Sendable {
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable @_Concurrency.MainActor @preconcurrency public func _listLinkedGroup(_ isLinked: Swift.Bool) -> some SwiftUICore.View {
        return _trait(IsLinkedGroupTraitKey.self, isLinked)
    }
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct _IsLinkedGroupTraitKey {
  public static let _linkedGroup: SwiftUI._IsLinkedGroupTraitKey
}
@available(*, unavailable)
extension SwiftUI._IsLinkedGroupTraitKey : Swift.Sendable {
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func bottomBar<C>(@SwiftUICore.ViewBuilder content: () -> C) -> some SwiftUICore.View where C : SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct SpringLoadingBehavior : Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.SpringLoadingBehavior
  public static let enabled: SwiftUI.SpringLoadingBehavior
  public static let disabled: SwiftUI.SpringLoadingBehavior
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.SpringLoadingBehavior, b: SwiftUI.SpringLoadingBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func springLoadingBehavior(_ behavior: SwiftUI.SpringLoadingBehavior) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  public var springLoadingBehavior: SwiftUI.SpringLoadingBehavior {
    get
    @_spi(DoNotImport) set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(UIFrameworks) nonisolated public func springLoaded(automaticallyEnabled: Swift.Bool = true, onActivate: @escaping () -> Swift.Void, onHighlightChange: @escaping (SwiftUI.SpringLoadingBehavior.HighlightState) -> Swift.Void = { _ in }, onEnded: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.SpringLoadingBehavior {
  @_spi(UIFrameworks) public enum HighlightState : Swift.Sendable {
    @_spi(UIFrameworks) case none
    @_spi(UIFrameworks) case standard
    @_spi(UIFrameworks) case prominent
    @_spi(UIFrameworks) public static func == (a: SwiftUI.SpringLoadingBehavior.HighlightState, b: SwiftUI.SpringLoadingBehavior.HighlightState) -> Swift.Bool
    @_spi(UIFrameworks) public func hash(into hasher: inout Swift.Hasher)
    @_spi(UIFrameworks) public var hashValue: Swift.Int {
      @_spi(UIFrameworks) get
    }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __DesignTimeSelectionIdentifier : Swift.Hashable {
  public let identifier: Swift.String
  public init(_ identifier: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.__DesignTimeSelectionIdentifier, b: SwiftUI.__DesignTimeSelectionIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.__DesignTimeSelectionIdentifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var isTabBarShowingSections: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var tabBarPlacement: SwiftUI.TabBarPlacement? {
    get
  }
  #else
  public var tabBarPlacement: SwiftUI.TabBarPlacement? {
    get
  }
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabBarPlacement : Swift.Hashable {
  public static let topBar: SwiftUI.TabBarPlacement
  public static let sidebar: SwiftUI.TabBarPlacement
  public static let bottomBar: SwiftUI.TabBarPlacement
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.TabBarPlacement, b: SwiftUI.TabBarPlacement) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TabBarPlacement : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public typealias Touch = (location: CoreFoundation.CGPoint, globalLocation: CoreFoundation.CGPoint?, timestamp: Foundation.Date)
  public func sendTouchSequence(_ touches: [Self.Touch])
  public func measureTouchSequence(host: any SwiftUICore._BenchmarkHost, _ touches: [Self.Touch]) -> [Swift.Double]
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public enum ScenePhase : Swift.Comparable {
  case background
  case inactive
  case active
  public static func == (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (a: SwiftUI.ScenePhase, b: SwiftUI.ScenePhase) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScenePhase : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.EnvironmentValues {
  public var scenePhase: SwiftUI.ScenePhase {
    get
    set
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.RadioGroupPickerStyle {
  @_alwaysEmitIntoClient public static var radioGroup: SwiftUI.RadioGroupPickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct RadioGroupPickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.RadioGroupPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.RadioGroupPickerStyle : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func horizontalRadioGroupLayout() -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.InsetListStyle {
  @_alwaysEmitIntoClient public static var inset: SwiftUI.InsetListStyle {
    get { .init() }
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient public static func inset(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.InsetListStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetListStyle : SwiftUI.ListStyle {
  public init()
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init(alternatesRowBackgrounds: Swift.Bool)
  @_spi(Shortcuts) @available(macOS 12.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init(alternatesRowBackgrounds: Swift.Bool, selectionFollowsCursor: Swift.Bool)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.InsetListStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  public var defaultMinListRowHeight: CoreFoundation.CGFloat {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var defaultMinListHeaderHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  public var defaultMinListHeaderHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public var _plainListSectionSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public var _plainListSectionSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
}
@_spi(Private) @available(iOS, introduced: 16.0, deprecated: 16.0, renamed: "scrollContentBackground")
@available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "scrollContentBackground")
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_disfavoredOverload nonisolated public func listBackground(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @_disfavoredOverload nonisolated public func listBackground(_ color: SwiftUICore.Color?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func listBackground<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #else
  @_spi(Private) nonisolated public func listBackground<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #endif
  @_spi(Private) nonisolated public func listBackground(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func listHasStackBehavior() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func listSizesToFit(maxHeight: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ListAccessoryVisibility : Swift.Equatable {
  @_spi(Private) public static let automatic: SwiftUI.ListAccessoryVisibility
  @_spi(Private) public static let editing: SwiftUI.ListAccessoryVisibility
  @_spi(Private) public static func editing(_ isEditing: Swift.Bool) -> SwiftUI.ListAccessoryVisibility
  @_spi(Private) public static let always: SwiftUI.ListAccessoryVisibility
  @_spi(Private) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let never: SwiftUI.ListAccessoryVisibility
  @_spi(Private) public static func == (a: SwiftUI.ListAccessoryVisibility, b: SwiftUI.ListAccessoryVisibility) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ListAccessoryVisibility : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable nonisolated public func listReorderControlVisibility(_ visibility: SwiftUI.ListAccessoryVisibility) -> some SwiftUICore.View {
        environment(\.listReorderControlVisibility, visibility)
    }
  
  @_spi(Private) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func listDeleteControlVisibility(_ visibility: SwiftUI.ListAccessoryVisibility) -> some SwiftUICore.View {
        environment(\.listDeleteControlVisibility, visibility)
    }
  
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @usableFromInline
  internal var listReorderControlVisibility: SwiftUI.ListAccessoryVisibility {
    get
    set
  }
  @_spi(Private) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @usableFromInline
  internal var listDeleteControlVisibility: SwiftUI.ListAccessoryVisibility {
    get
    set
  }
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultPosition(_ position: SwiftUICore.UnitPoint) -> some SwiftUI.Scene
  
}
@available(iOS 17.0, macOS 13.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultSize(_ size: CoreFoundation.CGSize) -> some SwiftUI.Scene
  
  nonisolated public func defaultSize(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> some SwiftUI.Scene
  
}
@_spi(Private) @available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func pullDownMenu<MenuItems>(menuItems: MenuItems, isPresented: SwiftUICore.Binding<Swift.Bool>, anchor: SwiftUICore.Anchor<CoreFoundation.CGRect>.Source = .bounds) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @_spi(Debugging) @_Concurrency.MainActor @preconcurrency public static var _changedProperties: [Swift.String] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func _printChanges()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ViewModifier {
  @_spi(Debugging) @_Concurrency.MainActor @preconcurrency public static var _changedProperties: [Swift.String] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func _printChanges()
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
extension SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public static func _logChanges()
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.LinkButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var link: SwiftUI.LinkButtonStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LinkButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinkButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15LinkButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinkButtonStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  #else
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  #endif
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  #else
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil) -> some SwiftUICore.View
  
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable(text: SwiftUICore.Binding<Swift.String>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen public enum Visibility : Swift.Hashable, Swift.CaseIterable {
  case automatic
  case visible
  case hidden
  public static func == (a: SwiftUI.Visibility, b: SwiftUI.Visibility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUI.Visibility]
  public static var allCases: [SwiftUI.Visibility] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUI.Visibility : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUI.CodableVisibility {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias CodingProxy = SwiftUI.CodableVisibility
}
package struct CodableVisibility : SwiftUICore.CodableProxy {
  package var base: SwiftUI.Visibility
  package init(_ base: SwiftUI.Visibility)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package typealias Base = SwiftUI.Visibility
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.AnyTransition {
  public static func push(from edge: SwiftUICore.Edge) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition where Self == SwiftUI.PushTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func push(from edge: SwiftUICore.Edge) -> Self { Self(edge: edge) }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct PushTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var edge: SwiftUICore.Edge
  @_Concurrency.MainActor @preconcurrency public init(edge: SwiftUICore.Edge)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.PushTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14PushTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PushTransition : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ForEach {
  public init<C, R>(_ data: SwiftUICore.Binding<C>, editActions: SwiftUI.EditActions<C>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> R) where Data == SwiftUI.IndexedIdentifierCollection<C, ID>, ID == C.Element.ID, Content == SwiftUI.EditableCollectionContent<R, C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, R : SwiftUICore.View, C.Element : Swift.Identifiable, C.Index : Swift.Hashable
  public init<C, R>(_ data: SwiftUICore.Binding<C>, id: Swift.KeyPath<C.Element, ID>, editActions: SwiftUI.EditActions<C>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<C.Element>) -> R) where Data == SwiftUI.IndexedIdentifierCollection<C, ID>, Content == SwiftUI.EditableCollectionContent<R, C>, C : Swift.MutableCollection, C : Swift.RandomAccessCollection, R : SwiftUICore.View, C.Index : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct EditActions<Data> : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(*, unavailable, message: "Delete is available only for collections conforming to RangeReplaceableCollection.")
  public static var delete: SwiftUI.EditActions<Data> {
    get
  }
  @available(*, unavailable, message: "Move is available only for collections conforming to MutableCollection.")
  public static var move: SwiftUI.EditActions<Data> {
    get
  }
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ArrayLiteralElement = SwiftUI.EditActions<Data>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Element = SwiftUI.EditActions<Data>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditActions where Data : Swift.RangeReplaceableCollection {
  public static var delete: SwiftUI.EditActions<Data> {
    get
  }
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditActions where Data : Swift.MutableCollection {
  public static var move: SwiftUI.EditActions<Data> {
    get
  }
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditActions where Data : Swift.MutableCollection, Data : Swift.RangeReplaceableCollection {
  public static var all: SwiftUI.EditActions<Data> {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct EditableCollectionContent<Content, Data> {
}
@available(*, unavailable)
extension SwiftUI.EditableCollectionContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.EditableCollectionContent : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25EditableCollectionContentVA2A4ViewRzrlE4bodyQrvp", 0) __<Content, Data>
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct IndexedIdentifierCollection<Base, ID> : Swift.Collection where Base : Swift.Collection, ID : Swift.Hashable {
  public struct Element {
  }
  public typealias Index = Base.Index
  public var startIndex: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index {
    get
  }
  public var endIndex: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index {
    get
  }
  public subscript(position: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index) -> SwiftUI.IndexedIdentifierCollection<Base, ID>.Element {
    get
  }
  public func index(after i: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index) -> SwiftUI.IndexedIdentifierCollection<Base, ID>.Index
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Indices = Swift.DefaultIndices<SwiftUI.IndexedIdentifierCollection<Base, ID>>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.IndexedIdentifierCollection<Base, ID>>
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.IndexedIdentifierCollection<Base, ID>>
}
@available(*, unavailable)
extension SwiftUI.IndexedIdentifierCollection.Element : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.IndexedIdentifierCollection : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.IndexedIdentifierCollection : Swift.BidirectionalCollection where Base : Swift.BidirectionalCollection {
  public func index(before i: SwiftUI.IndexedIdentifierCollection<Base, ID>.Index) -> SwiftUI.IndexedIdentifierCollection<Base, ID>.Index
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.IndexedIdentifierCollection : Swift.RandomAccessCollection where Base : Swift.RandomAccessCollection {
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUI._NavigationStackStyle where Self == SwiftUI._AutomaticNavigationStackStyle {
  @_spi(UIFrameworks) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI._AutomaticNavigationStackStyle {
    @_spi(UIFrameworks) get { .init() }
  }
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_Concurrency.MainActor @preconcurrency public struct _AutomaticNavigationStackStyle : SwiftUI._NavigationStackStyle {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI._AutomaticNavigationStackStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(UIFrameworks) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI30_AutomaticNavigationStackStyleV8makeBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI._AutomaticNavigationStackStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GeometryActionModifier<Value> : SwiftUICore.UnaryViewModifier, SwiftUICore.PrimitiveViewModifier where Value : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var value: (SwiftUICore.GeometryProxy) -> Value
  @_Concurrency.MainActor @preconcurrency public var action: (Value) -> Swift.Void
  @inlinable @_Concurrency.MainActor @preconcurrency public init(value: @escaping (SwiftUICore.GeometryProxy) -> Value, action: @escaping (Value) -> Swift.Void) {
        self.value = value
        self.action = action
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GeometryActionModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._GeometryActionModifier : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GeometryActionModifier2<Value> : SwiftUICore.UnaryViewModifier, SwiftUICore.PrimitiveViewModifier where Value : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var value: (SwiftUICore.GeometryProxy) -> Value
  @_Concurrency.MainActor @preconcurrency public var action: (Value, Value) -> Swift.Void
  @inlinable @_Concurrency.MainActor @preconcurrency public init(value: @escaping (SwiftUICore.GeometryProxy) -> Value, action: @escaping (Value, Value) -> Swift.Void) {
        self.value = value
        self.action = action
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GeometryActionModifier2<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 18.0, tvOS 18.0, watchOS 10.0, macOS 15.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._GeometryActionModifier2 : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public func onGeometryChange<T>(for type: T.Type, of transform: @escaping (SwiftUICore.GeometryProxy) -> T, action: @escaping (_ newValue: T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable {
        modifier(_GeometryActionModifier<T>(value: transform, action: action))
    }
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, *)
  nonisolated public func onGeometryChange<T>(for type: T.Type, of transform: @escaping (SwiftUICore.GeometryProxy) -> T, action: @escaping (_ oldValue: T, _ newValue: T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func onGeometryChange<T>(of value: @escaping (SwiftUICore.GeometryProxy) -> T, do action: @escaping (T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable {
        modifier(_GeometryActionModifier(value: value, action: action))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct SafeAreaPaddingModifier : SwiftUICore.ViewModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(edges: SwiftUICore.Edge.Set, insets: SwiftUICore.EdgeInsets?)
  #else
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(edges: SwiftUICore.Edge.Set, insets: SwiftUICore.EdgeInsets?)
  #endif
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func body(content: SwiftUI.SafeAreaPaddingModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @usableFromInline
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23SafeAreaPaddingModifierV4body7contentQrAA05_ViewF8_ContentVyACG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SafeAreaPaddingModifier : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func safeAreaPadding(_ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View {
        modifier(
            SafeAreaPaddingModifier(edges: .all, insets: insets)
        )
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func safeAreaPadding(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View {
        modifier(
            SafeAreaPaddingModifier(
                edges: edges,
                insets: length.map { EdgeInsets(_all: $0) }
            )
        )
    }
  
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func safeAreaPadding(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View {
        modifier(
            SafeAreaPaddingModifier(
                edges: edges,
                insets: length.map { EdgeInsets(_all: $0) }
            )
        )
    }
  
  #endif
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public func safeAreaPadding(_ length: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        safeAreaPadding(.all, length)
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentWriteConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let existingFile: Foundation.FileWrapper?
}
@available(*, unavailable)
extension SwiftUI.FileDocumentWriteConfiguration : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentReadConfiguration {
  public let contentType: UniformTypeIdentifiers.UTType
  public let file: Foundation.FileWrapper
}
@available(*, unavailable)
extension SwiftUI.FileDocumentReadConfiguration : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchFocused(_ binding: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchFocused<V>(_ binding: SwiftUI.FocusState<V>.Binding, equals value: V) -> some SwiftUICore.View where V : Swift.Hashable
  
}
extension SwiftUICore.View {
  @_spi(Private_Search) @available(iOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onSearchFocusChange(_ action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach {
  public init<V>(sectionOf view: V, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.SectionConfiguration) -> Content) where Data == SwiftUI.ForEachSectionCollection<Content>, ID == SwiftUI.SectionConfiguration.ID, Content : SwiftUICore.View, V : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ForEachSectionCollection<Content> : Swift.RandomAccessCollection where Content : SwiftUICore.View {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUI.SectionConfiguration {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUI.SectionConfiguration
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.ForEachSectionCollection<Content>>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.ForEachSectionCollection<Content>>
}
@available(*, unavailable)
extension SwiftUI.ForEachSectionCollection : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct _DocumentIntroAccessoryBuilder {
  @_spi(Private) public static func buildExpression<T>(_ expression: T) -> T where T : SwiftUI._DocumentIntroAccessory
  @_spi(Private) public static func buildEither<T>(first component: T) -> T where T : SwiftUI._DocumentIntroAccessory
  @_spi(Private) public static func buildEither<T>(second component: T) -> T where T : SwiftUI._DocumentIntroAccessory
  @_spi(Private) public static func buildPartialBlock<T>(first: T) -> T where T : SwiftUI._DocumentIntroAccessory
  @_spi(Private) public static func buildPartialBlock<T1, T2>(accumulated: T1, next: T2) -> some SwiftUI._DocumentIntroAccessory where T1 : SwiftUI._DocumentIntroAccessory, T2 : SwiftUI._DocumentIntroAccessory
  
  @_spi(Private) public static func buildBlock() -> some SwiftUI._DocumentIntroAccessory
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public static func buildOptional<T>(_ component: T?) -> any SwiftUI._DocumentIntroAccessory where T : SwiftUI._DocumentIntroAccessory
  #else
  @_spi(Private) public static func buildOptional<T>(_ component: T?) -> any SwiftUI._DocumentIntroAccessory where T : SwiftUI._DocumentIntroAccessory
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DocumentIntroAccessoryBuilder : Swift.Sendable {
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use `overlayAccessoryView` and `backgroundAccessoryView` parameters of DocumentLaunchView or DocumentGroupLaunchScene initializers instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol _DocumentIntroAccessory<Content> {
  associatedtype Content : SwiftUICore.View
  @_spi(Private) var anchor: SwiftUICore.UnitPoint { get }
  @_spi(Private) var position: SwiftUI._DocumentIntroAccessoryPosition { get }
  @_spi(Private) var content: Self.Content { get }
  @_spi(Private) func _resolve(into resolved: inout SwiftUI._ResolvedDocumentIntroAccessory)
}
#else
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use `overlayAccessoryView` and `backgroundAccessoryView` parameters of DocumentLaunchView or DocumentGroupLaunchScene initializers instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol _DocumentIntroAccessory {
  associatedtype Content : SwiftUICore.View
  @_spi(Private) var anchor: SwiftUICore.UnitPoint { get }
  @_spi(Private) var position: SwiftUI._DocumentIntroAccessoryPosition { get }
  @_spi(Private) var content: Self.Content { get }
  @_spi(Private) func _resolve(into resolved: inout SwiftUI._ResolvedDocumentIntroAccessory)
}
#endif
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use `overlayAccessoryView` and `backgroundAccessoryView` parameters of DocumentLaunchView or DocumentGroupLaunchScene initializers instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ResolvedDocumentIntroAccessory {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._ResolvedDocumentIntroAccessory : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use `overlayAccessoryView` and `backgroundAccessoryView` parameters of DocumentLaunchView or DocumentGroupLaunchScene initializers instead")
public enum _DocumentIntroAccessoryPosition : Swift.Equatable {
  @_spi(Private) case background
  @_spi(Private) case overlay
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public static func == (a: SwiftUI._DocumentIntroAccessoryPosition, b: SwiftUI._DocumentIntroAccessoryPosition) -> Swift.Bool
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DocumentIntroAccessoryPosition : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use `overlayAccessoryView` and `backgroundAccessoryView` parameters of DocumentLaunchView or DocumentGroupLaunchScene initializers instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _DocumentIntroAccessoryItem<Content> : SwiftUI._DocumentIntroAccessory where Content : SwiftUICore.View {
  @_spi(Private) public var anchor: SwiftUICore.UnitPoint
  @_spi(Private) public var position: SwiftUI._DocumentIntroAccessoryPosition
  @_spi(Private) public var content: Content
  @_spi(Private) public init(anchor: SwiftUICore.UnitPoint, position: SwiftUI._DocumentIntroAccessoryPosition = .overlay, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) public func _resolve(into resolved: inout SwiftUI._ResolvedDocumentIntroAccessory)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DocumentIntroAccessoryItem : Swift.Sendable {
}
@_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
public typealias NavigationSplitStyle = SwiftUI.NavigationSplitViewStyle
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol NavigationSplitViewStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.NavigationSplitViewStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct NavigationSplitViewStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI.NavigationSplitViewStyleConfiguration : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func navigationSplitViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.NavigationSplitViewStyle
  
  @_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public func navigationSplitStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.NavigationSplitViewStyle
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Shape {
  @_alwaysEmitIntoClient public func intersection<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeIntersection(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient public func union<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeUnion(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient public func subtracting<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeSubtraction(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient public func symmetricDifference<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeSymmetricDifference(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient public func lineIntersection<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeLineIntersection(self, other, eoFill: eoFill)
    }
  
  @_alwaysEmitIntoClient public func lineSubtraction<T>(_ other: T, eoFill: Swift.Bool = false) -> some SwiftUICore.Shape where T : SwiftUICore.Shape {
        return _ShapeLineSubtraction(self, other, eoFill: eoFill)
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeIntersection<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var lhs: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var rhs: U
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._ShapeIntersection<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._ShapeIntersection<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeUnion<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var lhs: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var rhs: U
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._ShapeUnion<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._ShapeUnion<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeSubtraction<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var lhs: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var rhs: U
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._ShapeSubtraction<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._ShapeSubtraction<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeSymmetricDifference<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var lhs: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var rhs: U
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._ShapeSymmetricDifference<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._ShapeSymmetricDifference<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeLineIntersection<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var lhs: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var rhs: U
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._ShapeLineIntersection<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._ShapeLineIntersection<T, U>, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShapeLineSubtraction<T, U> : SwiftUICore.Shape where T : SwiftUICore.Shape, U : SwiftUICore.Shape {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var lhs: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var rhs: U
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var eoFill: Swift.Bool
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(_ lhs: T, _ rhs: U, eoFill: Swift.Bool) {
        (self.lhs, self.rhs, self.eoFill) = (lhs, rhs, eoFill)
    }
  nonisolated public func path(in r: CoreFoundation.CGRect) -> SwiftUICore.Path
  nonisolated public func sizeThatFits(_ p: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  public typealias AnimatableData = SwiftUICore.AnimatablePair<T.AnimatableData, U.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._ShapeLineSubtraction<T, U>.AnimatableData {
    get
    set
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._ShapeLineSubtraction<T, U>, SwiftUICore.ForegroundStyle>
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.DefaultWindowStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DefaultWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
  @_spi(Private) public func configureWindow(_ window: Swift.AnyObject)
}
@available(*, unavailable)
extension SwiftUI.DefaultWindowStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@_spi_available(watchOS, introduced: 11.0)
extension SwiftUI.TabContent {
  nonisolated public func sectionActions<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Content : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 18.0)
public enum ControlSize : Swift.CaseIterable, Swift.Sendable {
  case mini
  case small
  case regular
  @available(macOS 11.0, *)
  case large
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
  case extraLarge
  public static var allCases: [SwiftUI.ControlSize] {
    get
  }
  public static func == (a: SwiftUI.ControlSize, b: SwiftUI.ControlSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 15.0, watchOS 9.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias AllCases = [SwiftUI.ControlSize]
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUICore.EnvironmentValues {
  public var controlSize: SwiftUI.ControlSize {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var explicitControlSize: SwiftUI.ControlSize? {
    get
    set
  }
  #else
  package var explicitControlSize: SwiftUI.ControlSize? {
    get
    set
  }
  #endif
}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUICore.View {
  @inlinable nonisolated public func controlSize(_ controlSize: SwiftUI.ControlSize) -> some SwiftUICore.View {
        return environment(\.controlSize, controlSize)
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AllowsHitTestingModifier : SwiftUICore._RendererEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var allowsHitTesting: Swift.Bool
  @inlinable @_Concurrency.MainActor @preconcurrency public init(allowsHitTesting: Swift.Bool) {
        self.allowsHitTesting = allowsHitTesting
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AllowsHitTestingModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  nonisolated public static func == (a: SwiftUI._AllowsHitTestingModifier, b: SwiftUI._AllowsHitTestingModifier) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func allowsHitTesting(_ enabled: Swift.Bool) -> some SwiftUICore.View {
        return modifier(_AllowsHitTestingModifier(allowsHitTesting: enabled))
    }
  
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
final public class WidgetHost<Content> where Content : SwiftUI.Widget {
  @_spi(Widget) public init(content: Content)
  @_spi(Widget) final public func readPreference<K>(_ key: K.Type) -> K.Value where K : SwiftUICore.PreferenceKey
  @_spi(Widget) final public func setEnvironment(_ environment: SwiftUICore.EnvironmentValues)
  @_spi(Widget) @objc deinit
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.WidgetHost : Swift.Sendable {
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
final public class WidgetBundleHost {
  @_spi(Widget) public init<B>(bundle: B) where B : SwiftUI.WidgetBundle
  @_spi(Widget) final public func readPreference<K>(_ key: K.Type) -> K.Value where K : SwiftUICore.PreferenceKey
  @_spi(Widget) final public func setEnvironment(_ environment: SwiftUICore.EnvironmentValues)
  @_spi(Widget) @objc deinit
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.WidgetBundleHost : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.LinkShapeStyle {
  @_alwaysEmitIntoClient public static var link: SwiftUI.LinkShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public struct LinkShapeStyle : SwiftUICore.ShapeStyle {
  public init()
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Resolved = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func contentShape<S>(_ kind: SwiftUICore.ContentShapeKinds, _ shape: S, eoFill: Swift.Bool = false) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        modifier(
            _ContentShapeKindModifier(shape: shape, eoFill: eoFill, kind: kind))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContentShapeKindModifier<ContentShape> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where ContentShape : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: ContentShape
  @_Concurrency.MainActor @preconcurrency public var eoFill: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var kind: SwiftUICore.ContentShapeKinds
  @inlinable nonisolated public init(shape: ContentShape, eoFill: Swift.Bool = false, kind: SwiftUICore.ContentShapeKinds) {
        self.shape = shape
        self.eoFill = eoFill
        self.kind = kind
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ContentShapeKindModifier<ContentShape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ContentShapeKindModifier : Swift.Sendable {
}
extension SwiftUI._ContentShapeKindModifier : SwiftUICore.ContentResponder {
  @_Concurrency.MainActor @preconcurrency package func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  @_Concurrency.MainActor @preconcurrency package func contentPath(size: CoreFoundation.CGSize) -> SwiftUICore.Path
  @_Concurrency.MainActor @preconcurrency package func contentPath(size: CoreFoundation.CGSize, kind: SwiftUICore.ContentShapeKinds) -> SwiftUICore.Path
}
@_spi(Private) @available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SystemPreferencesSidebarListStyle : SwiftUI.ListStyle {
  @_spi(Private) public init()
  @_spi(Private) nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.SystemPreferencesSidebarListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  @_spi(Private) nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.SystemPreferencesSidebarListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SystemPreferencesSidebarListStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct NavigationPath {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var codable: SwiftUI.NavigationPath.CodableRepresentation? {
    get
  }
  #else
  public var codable: SwiftUI.NavigationPath.CodableRepresentation? {
    get
  }
  #endif
  public init()
  public init<S>(_ elements: S) where S : Swift.Sequence, S.Element : Swift.Hashable
  public init<S>(_ elements: S) where S : Swift.Sequence, S.Element : Swift.Decodable, S.Element : Swift.Encodable, S.Element : Swift.Hashable
  public init(_ codable: SwiftUI.NavigationPath.CodableRepresentation)
  public mutating func append<V>(_ value: V) where V : Swift.Hashable
  public mutating func append<V>(_ value: V) where V : Swift.Decodable, V : Swift.Encodable, V : Swift.Hashable
  public mutating func removeLast(_ k: Swift.Int = 1)
  public struct CodableRepresentation : Swift.Codable {
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@available(*, unavailable)
extension SwiftUI.NavigationPath : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.NavigationPath.CodableRepresentation : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationPath : Swift.Equatable {
  public static func == (lhs: SwiftUI.NavigationPath, rhs: SwiftUI.NavigationPath) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationPath.CodableRepresentation : Swift.Equatable {
  public static func == (lhs: SwiftUI.NavigationPath.CodableRepresentation, rhs: SwiftUI.NavigationPath.CodableRepresentation) -> Swift.Bool
}
@_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.NavigationPath {
  @_spi(Private) public mutating func mutateWithCodableCollectionProxy(transform: (inout SwiftUI.NavigationPath.CodableCollectionProxy) -> ()) throws
  @_spi(Private) public struct CodableCollectionProxy {
  }
  @_spi(Private) public mutating func mutateWithCollectionProxy(transform: (inout SwiftUI.NavigationPath.CollectionProxy) -> ())
  @_spi(Private) public func withCollectionProxy(_ body: (SwiftUI.NavigationPath.CollectionProxy) -> ())
  @_spi(Private) public struct CollectionProxy {
  }
  @_spi(Private) public enum CollectionProxyError : Swift.Error {
    @_spi(Private) case pathContainsNoncodableElements
    @_spi(Private) public static func == (a: SwiftUI.NavigationPath.CollectionProxyError, b: SwiftUI.NavigationPath.CollectionProxyError) -> Swift.Bool
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationPath.CodableCollectionProxy : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.NavigationPath.CodableCollectionProxy : Swift.Collection, Swift.RangeReplaceableCollection {
  @_spi(Private) public typealias Element = any Swift.Codable & Swift.Hashable
  @_spi(Private) public typealias Index = Swift.Int
  @_spi(Private) public var startIndex: SwiftUI.NavigationPath.CodableCollectionProxy.Index {
    @_spi(Private) get
  }
  @_spi(Private) public var endIndex: SwiftUI.NavigationPath.CodableCollectionProxy.Index {
    @_spi(Private) get
  }
  @_spi(Private) public init()
  @_spi(Private) public func index(after position: SwiftUI.NavigationPath.CodableCollectionProxy.Index) -> SwiftUI.NavigationPath.CodableCollectionProxy.Index
  @_spi(Private) public subscript(position: SwiftUI.NavigationPath.CodableCollectionProxy.Index) -> any Swift.Codable & Swift.Hashable {
    @_spi(Private) get
  }
  @_spi(Private) public mutating func replaceSubrange<C>(_ subrange: Swift.Range<Swift.Int>, with newElements: C) where C : Swift.Collection, C.Element == any Swift.Decodable & Swift.Encodable & Swift.Hashable
  @_spi(Private) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias Indices = Swift.DefaultIndices<SwiftUI.NavigationPath.CodableCollectionProxy>
  @_spi(Private) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.NavigationPath.CodableCollectionProxy>
  @_spi(Private) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.NavigationPath.CodableCollectionProxy>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationPath.CollectionProxy : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.NavigationPath.CollectionProxy : Swift.Collection, Swift.RangeReplaceableCollection {
  @_spi(Private) public typealias Element = any Swift.Hashable
  @_spi(Private) public typealias Index = Swift.Int
  @_spi(Private) public var startIndex: SwiftUI.NavigationPath.CollectionProxy.Index {
    @_spi(Private) get
  }
  @_spi(Private) public var endIndex: SwiftUI.NavigationPath.CollectionProxy.Index {
    @_spi(Private) get
  }
  @_spi(Private) public init()
  @_spi(Private) public func index(after position: SwiftUI.NavigationPath.CollectionProxy.Index) -> SwiftUI.NavigationPath.CollectionProxy.Index
  @_spi(Private) public subscript(position: SwiftUI.NavigationPath.CollectionProxy.Index) -> any Swift.Hashable {
    @_spi(Private) get
  }
  @_spi(Private) public mutating func replaceSubrange<C>(_ subrange: Swift.Range<Swift.Int>, with newElements: C) where C : Swift.Collection, C.Element == any Swift.Hashable
  @_spi(Private) public mutating func replaceSubrange<C>(_ subrange: Swift.Range<Swift.Int>, with newElements: C) where C : Swift.Collection, C.Element == any Swift.Decodable & Swift.Encodable & Swift.Hashable
  @_spi(Private) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias Indices = Swift.DefaultIndices<SwiftUI.NavigationPath.CollectionProxy>
  @_spi(Private) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.NavigationPath.CollectionProxy>
  @_spi(Private) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, macOS 13.3, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.NavigationPath.CollectionProxy>
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
final public class ArchivedTemplateHost<Content> where Content : SwiftUICore.View {
  @_spi(Private) final package let viewGraph: SwiftUICore.ViewGraph
  @_spi(Private) final package var currentTimestamp: SwiftUICore.Time
  @_spi(Private) final package var propertiesNeedingUpdate: SwiftUICore.ViewRendererHostProperties
  @_spi(Private) final package var renderingPhase: SwiftUICore.ViewRenderingPhase
  @_spi(Private) final package var externalUpdateCount: Swift.Int
  @_spi(Private) final public var environment: SwiftUICore.EnvironmentValues {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var size: CoreFoundation.CGSize {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) final public var safeAreaInsets: SwiftUICore.EdgeInsets {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) @_Concurrency.MainActor public init(_ content: Content)
  @_spi(Private) @_Concurrency.MainActor final public func metadata() -> SwiftUI.WidgetAuxiliaryViewMetadata
  @_spi(Private) @_Concurrency.MainActor final public func preferenceValue<K>(for key: K.Type) -> K.Value where K : SwiftUICore.HostPreferenceKey
  @_spi(Private) @_Concurrency.MainActor final public var containsPrivacySensitive: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @objc deinit
}
@_spi(Private) extension SwiftUI.ArchivedTemplateHost : SwiftUICore.ViewRendererHost {
  @_spi(Private) final package func requestUpdate(after delay: Swift.Double)
  @_spi(Private) final package func updateRootView()
  @_spi(Private) final package func updateEnvironment()
  @_spi(Private) final package func updateSize()
  @_spi(Private) final package func updateSafeArea()
  @_spi(Private) final package func updateScrollableContainerSize()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) final package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #else
  @_spi(Private) final package func renderDisplayList(_ list: SwiftUICore.DisplayList, asynchronously: Swift.Bool, time: SwiftUICore.Time, nextTime: SwiftUICore.Time, targetTimestamp: SwiftUICore.Time?, version: SwiftUICore.DisplayList.Version, maxVersion: SwiftUICore.DisplayList.Version) -> SwiftUICore.Time
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ArchivedTemplateHost : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func accessibilityDataSeries(_ dataSeriesConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) public func accessibilityDataSeries(_ dataSeriesConfiguration: SwiftUICore.AccessibilityDataSeriesConfiguration) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public func withAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, completionCriteria: SwiftUI.AnimationCompletionCriteria = .logicallyComplete, _ body: () throws -> Result, completion: @escaping () -> Swift.Void) rethrows -> Result
#else
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public func withAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, completionCriteria: SwiftUI.AnimationCompletionCriteria = .logicallyComplete, _ body: () throws -> Result, completion: @escaping () -> Swift.Void) rethrows -> Result
#endif
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transaction {
  public mutating func addAnimationCompletion(criteria: SwiftUI.AnimationCompletionCriteria = .logicallyComplete, _ completion: @escaping () -> Swift.Void)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AnimationCompletionCriteria : Swift.Hashable, Swift.Sendable {
  public static let logicallyComplete: SwiftUI.AnimationCompletionCriteria
  public static let removed: SwiftUI.AnimationCompletionCriteria
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.AnimationCompletionCriteria, b: SwiftUI.AnimationCompletionCriteria) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Color.Resolved {
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 100000.0, message: "Use accessibilityName `StringInterpolation` instead.")
  @available(macOS, introduced: 14.0, deprecated: 100000.0, message: "Use accessibilityName `StringInterpolation` instead.")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, message: "Use accessibilityName `StringInterpolation` instead.")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, message: "Use accessibilityName `StringInterpolation` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use accessibilityName `StringInterpolation` instead.")
  public var accessibilityName: Swift.String {
    get
  }
}
extension SwiftUICore.View {
  @_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @available(*, deprecated, message: "Use the overload that accepts an optional axis parameter instead")
  @_disfavoredOverload nonisolated public func scrollTransition(_ configuration: SwiftUI.ScrollTransitionConfiguration = .interactive, axis: SwiftUICore.Axis = .vertical, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @available(*, deprecated, message: "Use the overload that accepts an optional axis parameter instead")
  @_disfavoredOverload nonisolated public func scrollTransition(topLeading: SwiftUI.ScrollTransitionConfiguration, bottomTrailing: SwiftUI.ScrollTransitionConfiguration, axis: SwiftUICore.Axis = .vertical, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func scrollTransition(_ configuration: SwiftUI.ScrollTransitionConfiguration = .interactive, axis: SwiftUICore.Axis? = nil, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
  #else
  nonisolated public func scrollTransition(_ configuration: SwiftUI.ScrollTransitionConfiguration = .interactive, axis: SwiftUICore.Axis? = nil, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func scrollTransition(topLeading: SwiftUI.ScrollTransitionConfiguration, bottomTrailing: SwiftUI.ScrollTransitionConfiguration, axis: SwiftUICore.Axis? = nil, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
  #else
  nonisolated public func scrollTransition(topLeading: SwiftUI.ScrollTransitionConfiguration, bottomTrailing: SwiftUI.ScrollTransitionConfiguration, axis: SwiftUICore.Axis? = nil, transition: @escaping @Sendable (SwiftUICore.EmptyVisualEffect, SwiftUI.ScrollTransitionPhase) -> some VisualEffect) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ScrollTransitionConfiguration {
  public static func animated(_ animation: SwiftUICore.Animation = .default) -> SwiftUI.ScrollTransitionConfiguration
  public static let animated: SwiftUI.ScrollTransitionConfiguration
  public static func interactive(timingCurve: SwiftUICore.UnitCurve = .easeInOut) -> SwiftUI.ScrollTransitionConfiguration
  public static let interactive: SwiftUI.ScrollTransitionConfiguration
  public static let identity: SwiftUI.ScrollTransitionConfiguration
  public func animation(_ animation: SwiftUICore.Animation) -> SwiftUI.ScrollTransitionConfiguration
  public func threshold(_ threshold: SwiftUI.ScrollTransitionConfiguration.Threshold) -> SwiftUI.ScrollTransitionConfiguration
}
@available(*, unavailable)
extension SwiftUI.ScrollTransitionConfiguration : Swift.Sendable {
}
extension SwiftUI.ScrollTransitionConfiguration {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct Threshold {
    public static let visible: SwiftUI.ScrollTransitionConfiguration.Threshold
    public static let hidden: SwiftUI.ScrollTransitionConfiguration.Threshold
    public static var centered: SwiftUI.ScrollTransitionConfiguration.Threshold {
      get
    }
    public static func visible(_ amount: Swift.Double) -> SwiftUI.ScrollTransitionConfiguration.Threshold
    public func interpolated(towards other: SwiftUI.ScrollTransitionConfiguration.Threshold, amount: Swift.Double) -> SwiftUI.ScrollTransitionConfiguration.Threshold
    public func inset(by distance: Swift.Double) -> SwiftUI.ScrollTransitionConfiguration.Threshold
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollTransitionConfiguration.Threshold : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public enum ScrollTransitionPhase {
  case topLeading
  case identity
  case bottomTrailing
  public var isIdentity: Swift.Bool {
    get
  }
  public var value: Swift.Double {
    get
  }
  public static func == (a: SwiftUI.ScrollTransitionPhase, b: SwiftUI.ScrollTransitionPhase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollTransitionPhase : Swift.Sendable {
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency package func styleContext<C, P>(_ context: C, if predicate: P) -> some SwiftUICore.View where C : SwiftUICore.StyleContext, P : SwiftUICore.ViewInputPredicate
  
  @_Concurrency.MainActor @preconcurrency package func styleContext<C, P>(_ context: C, in requiredContext: P) -> some SwiftUICore.View where C : SwiftUICore.StyleContext, P : SwiftUICore.StyleContext
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ToolbarItemPlacement {
  public static let automatic: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let principal: SwiftUI.ToolbarItemPlacement
  @available(watchOS, unavailable)
  public static let navigation: SwiftUI.ToolbarItemPlacement
  public static let primaryAction: SwiftUI.ToolbarItemPlacement
  @_spi(Private) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static func primaryAction(initialVisibility: SwiftUI.Visibility) -> SwiftUI.ToolbarItemPlacement
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let secondaryAction: SwiftUI.ToolbarItemPlacement
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let status: SwiftUI.ToolbarItemPlacement
  public static let confirmationAction: SwiftUI.ToolbarItemPlacement
  public static let cancellationAction: SwiftUI.ToolbarItemPlacement
  public static let destructiveAction: SwiftUI.ToolbarItemPlacement
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(visionOS, introduced: 1.0)
  public static let keyboard: SwiftUI.ToolbarItemPlacement
  @available(iOS 14.0, tvOS 14.0, watchOS 10.0, *)
  @backDeployed(before: iOS 17.0, tvOS 17.0)
  @available(macOS, unavailable)
  public static var topBarLeading: SwiftUI.ToolbarItemPlacement {
    get {
        .navigationBarLeading
    }
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 10.0, *)
  @backDeployed(before: iOS 17.0, tvOS 17.0)
  @available(macOS, unavailable)
  public static var topBarTrailing: SwiftUI.ToolbarItemPlacement {
    get {
        .navigationBarTrailing
    }
  }
  @available(macOS 13.0, *)
  @backDeployed(before: macOS 14.0)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static func accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarItemPlacement where ID : Swift.Hashable
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @usableFromInline
  internal static func backDeployable_accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarItemPlacement where ID : Swift.Hashable
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarLeading instead")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarLeading instead")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use topBarLeading instead")
  public static let navigationBarLeading: SwiftUI.ToolbarItemPlacement
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarTrailing instead")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "use topBarTrailing instead")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use topBarTrailing instead")
  public static let navigationBarTrailing: SwiftUI.ToolbarItemPlacement
  @_spi(Private) @available(tvOS 16.4, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let tabBarLeading: SwiftUI.ToolbarItemPlacement
  @_spi(Private) @available(tvOS 16.4, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let tabBarTrailing: SwiftUI.ToolbarItemPlacement
  @_spi(Private) @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let largeNavigationTitleAccessory: SwiftUI.ToolbarItemPlacement
  @available(watchOS 10.0, *)
  @available(macOS, unavailable)
  @_spi_available(tvOS, introduced: 18.0)
  public static let bottomBar: SwiftUI.ToolbarItemPlacement
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let _bottomBar: SwiftUI.ToolbarItemPlacement
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let bottomOrnament: SwiftUI.ToolbarItemPlacement
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "Use tabViewSidebarBottomBar() to set the bottom bar instead")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let tabSidebar: SwiftUI.ToolbarItemPlacement
}
@available(*, unavailable)
extension SwiftUI.ToolbarItemPlacement : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ToolbarItemPlacement {
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "accessoryBar")
  public init<ID>(id: ID) where ID : Swift.Hashable
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  nonisolated public func navigationBarItems<L, T>(leading: L, trailing: T) -> some SwiftUICore.View where L : SwiftUICore.View, T : SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  nonisolated public func navigationBarItems<L>(leading: L) -> some SwiftUICore.View where L : SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(_:) with navigationBarLeading or navigationBarTrailing placement")
  nonisolated public func navigationBarItems<T>(trailing: T) -> some SwiftUICore.View where T : SwiftUICore.View
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PullDownMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {
  public typealias _Body = Swift.Never
  public init()
  public func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<SwiftUI.PullDownMenuBarExtraStyle>) -> SwiftUI._MenuBarExtraValue<SwiftUI.PullDownMenuBarExtraStyle>
}
@available(*, unavailable)
extension SwiftUI.PullDownMenuBarExtraStyle : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtraStyle where Self == SwiftUI.PullDownMenuBarExtraStyle {
  public static var menu: SwiftUI.PullDownMenuBarExtraStyle {
    get
  }
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _SystemShapeStyle : SwiftUICore.ShapeStyle {
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.primary` instead.")
  public static let primaryFill: SwiftUI._SystemShapeStyle
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.secondary` instead.")
  public static let secondaryFill: SwiftUI._SystemShapeStyle
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.tertiary` instead.")
  public static let tertiaryFill: SwiftUI._SystemShapeStyle
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "Use `HierarchicalShapeStyle.quaternary` instead.")
  public static let quaternaryFill: SwiftUI._SystemShapeStyle
  nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUI._SystemShapeStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape
  @available(iOS, unavailable, introduced: 17.0, message: "Use `HierarchicalShapeStyle` instead.")
  @available(tvOS, unavailable, introduced: 17.0, message: "Use `HierarchicalShapeStyle` instead.")
  @available(watchOS, unavailable, introduced: 10.0, message: "Use `HierarchicalShapeStyle` instead.")
  @available(macOS, introduced: 14.0, deprecated: 13.0, message: "Use `HierarchicalShapeStyle` instead.")
  @available(visionOS, unavailable, message: "Use `HierarchicalShapeStyle` instead.")
  public typealias Resolved = Swift.Never
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableRow<Value> : SwiftUI.TableRowContent where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public typealias TableRowBody = Swift.Never
  public init(_ value: Value)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.TableRow<Value>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.TableRow : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@usableFromInline
internal struct TypeSelectEquivalentKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.Text? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.Text? {
    get { nil }
  }
  #endif
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.Text?
}
@available(*, unavailable)
extension SwiftUI.TypeSelectEquivalentKey : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func typeSelectEquivalent(_ text: SwiftUICore.Text?) -> some SwiftUICore.View {
        _trait(TypeSelectEquivalentKey.self, text)
    }
  
  #else
  @inlinable nonisolated public func typeSelectEquivalent(_ text: SwiftUICore.Text?) -> some SwiftUICore.View {
        _trait(TypeSelectEquivalentKey.self, text)
    }
  
  #endif
  @_alwaysEmitIntoClient nonisolated public func typeSelectEquivalent(_ stringKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View {
        typeSelectEquivalent(Text(stringKey))
    }
  
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public func typeSelectEquivalent<S>(_ string: S) -> some SwiftUICore.View where S : Swift.StringProtocol {
        typeSelectEquivalent(Text(string))
    }
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TypeSelectEquivalentTableRowModifier : SwiftUI._TableRowContentModifier {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI37_TypeSelectEquivalentTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._TypeSelectEquivalentTableRowModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func typeSelectEquivalent(_ text: SwiftUICore.Text?) -> some SwiftUI.TableRowContent<Self.TableRowValue>
  
  #else
  @_spi(Private) public func typeSelectEquivalent(_ text: SwiftUICore.Text?) -> some SwiftUI.TableRowContent<Self.TableRowValue>
  
  #endif
  @_spi(Private) @inlinable public func typeSelectEquivalent(_ stringKey: SwiftUICore.LocalizedStringKey) -> some SwiftUI.TableRowContent<Self.TableRowValue> {
        typeSelectEquivalent(Text(stringKey))
    }
  
  @_spi(Private) @inlinable @_disfavoredOverload public func typeSelectEquivalent<S>(_ string: S) -> some SwiftUI.TableRowContent<Self.TableRowValue> where S : Swift.StringProtocol {
        typeSelectEquivalent(Text(string))
    }
  
}
@_spi(_) @available(iOS, introduced: 16.0, deprecated: 17.0)
@available(macOS, introduced: 13.0, deprecated: 14.0)
@available(tvOS, introduced: 16.0, deprecated: 17.0)
@available(watchOS, introduced: 9.0, deprecated: 10.0)
@available(visionOS, introduced: 1.0, deprecated: 1.0)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @inlinable @_disfavoredOverload nonisolated public func typeSelectEquivalent(_ stringKey: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View {
        typeSelectEquivalent(stringKey.map { Text($0) })
    }
  
  #else
  @_spi(_) @inlinable @_disfavoredOverload nonisolated public func typeSelectEquivalent(_ stringKey: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View {
        typeSelectEquivalent(stringKey.map { Text($0) })
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @inlinable @_disfavoredOverload nonisolated public func typeSelectEquivalent<S>(_ string: S?) -> some SwiftUICore.View where S : Swift.StringProtocol {
        typeSelectEquivalent(string.map { Text($0) })
    }
  
  #else
  @_spi(_) @inlinable @_disfavoredOverload nonisolated public func typeSelectEquivalent<S>(_ string: S?) -> some SwiftUICore.View where S : Swift.StringProtocol {
        typeSelectEquivalent(string.map { Text($0) })
    }
  
  #endif
}
@_spi(Private) @available(iOS, introduced: 16.0, deprecated: 17.0)
@available(macOS, introduced: 13.0, deprecated: 14.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_disfavoredOverload public func typeSelectEquivalent(_ text: SwiftUICore.Text?) -> SwiftUICore.ModifiedContent<Self, SwiftUI._TypeSelectEquivalentTableRowModifier>
  #else
  @_spi(Private) @_disfavoredOverload public func typeSelectEquivalent(_ text: SwiftUICore.Text?) -> SwiftUICore.ModifiedContent<Self, SwiftUI._TypeSelectEquivalentTableRowModifier>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable @_disfavoredOverload public func typeSelectEquivalent(_ stringKey: SwiftUICore.LocalizedStringKey?) -> SwiftUICore.ModifiedContent<Self, SwiftUI._TypeSelectEquivalentTableRowModifier> {
        typeSelectEquivalent(stringKey.map { Text($0) })
    }
  #else
  @_spi(Private) @inlinable @_disfavoredOverload public func typeSelectEquivalent(_ stringKey: SwiftUICore.LocalizedStringKey?) -> SwiftUICore.ModifiedContent<Self, SwiftUI._TypeSelectEquivalentTableRowModifier> {
        typeSelectEquivalent(stringKey.map { Text($0) })
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable @_disfavoredOverload public func typeSelectEquivalent<S>(_ string: S?) -> SwiftUICore.ModifiedContent<Self, SwiftUI._TypeSelectEquivalentTableRowModifier> where S : Swift.StringProtocol {
        typeSelectEquivalent(string.map { Text($0) })
    }
  #else
  @_spi(Private) @inlinable @_disfavoredOverload public func typeSelectEquivalent<S>(_ string: S?) -> SwiftUICore.ModifiedContent<Self, SwiftUI._TypeSelectEquivalentTableRowModifier> where S : Swift.StringProtocol {
        typeSelectEquivalent(string.map { Text($0) })
    }
  #endif
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View {
        modifier(_HoverRegionModifier(action))
    }
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen @_Concurrency.MainActor @preconcurrency public struct _HoverRegionModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public let callback: (Swift.Bool) -> Swift.Void
  @inlinable nonisolated public init(_ callback: @escaping (Swift.Bool) -> Swift.Void) {
        self.callback = callback
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._HoverRegionModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.4, macOS 10.15, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._HoverRegionModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func accessibilityRoleDescription(_ roleDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityRoleDescription(_ roleDescriptionKey: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityRoleDescription<S>(_ roleDescription: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) public func accessibilityRoleDescription(_ roleDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, visionOS 1.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func accessibilityRoleDescription(_ roleDescription: SwiftUICore.Text?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #else
  @_spi(Private) nonisolated public func accessibilityRoleDescription(_ roleDescription: SwiftUICore.Text?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func accessibilityRoleDescription(_ roleDescriptionKey: SwiftUICore.LocalizedStringKey?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #else
  @_spi(Private) nonisolated public func accessibilityRoleDescription(_ roleDescriptionKey: SwiftUICore.LocalizedStringKey?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityRoleDescription<S>(_ roleDescription: S?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  #else
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityRoleDescription<S>(_ roleDescription: S?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  #endif
}
@_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, visionOS 1.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func accessibilityRoleDescription(_ roleDescription: SwiftUICore.Text?) -> SwiftUICore.ModifiedContent<Content, Modifier>
  #else
  @_spi(Private) public func accessibilityRoleDescription(_ roleDescription: SwiftUICore.Text?) -> SwiftUICore.ModifiedContent<Content, Modifier>
  #endif
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  nonisolated public func accessibility(hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  nonisolated public func accessibility(label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  nonisolated public func accessibility(hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  nonisolated public func accessibility(inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  nonisolated public func accessibility(identifier: Swift.String) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  nonisolated public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  nonisolated public func accessibility(sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  nonisolated public func accessibility(activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  nonisolated public func accessibility(activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:)")
  public func accessibility(hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityLabel(_:)")
  public func accessibility(label: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHint(_:)")
  public func accessibility(hint: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityInputLabels(_:)")
  public func accessibility(inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIdentifier(_:)")
  public func accessibility(identifier: Swift.String) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, deprecated, introduced: 13.0)
  @available(macOS, deprecated, introduced: 10.15)
  @available(tvOS, deprecated, introduced: 13.0)
  @available(watchOS, deprecated, introduced: 6)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  public func accessibility(selectionIdentifier: Swift.AnyHashable) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilitySortPriority(_:)")
  public func accessibility(sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityActivationPoint(_:)")
  public func accessibility(activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  @available(watchOS, introduced: 7, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  nonisolated public func accessibility(roleDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) @available(iOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  @available(watchOS, introduced: 7, deprecated: 100000.0, renamed: "accessibilityRoleDescription(_:)")
  public func accessibility(roleDescription: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct List<SelectionValue, Content> : SwiftUICore.View where SelectionValue : Swift.Hashable, Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @available(watchOS, unavailable)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS 10.0, *)
  nonisolated public init(selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @available(watchOS 10.0, *)
  nonisolated public init(selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @_spi_available(tvOS, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4ListV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(*, unavailable)
extension SwiftUI.List : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  #else
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  #endif
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #else
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #endif
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_semantics("swiftui.requires_constant_range") nonisolated public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
  #else
  @available(watchOS, unavailable)
  @_semantics("swiftui.requires_constant_range") nonisolated public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
  #endif
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_semantics("swiftui.requires_constant_range") @_disfavoredOverload nonisolated public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  #else
  @available(watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #else
  @available(watchOS 10.0, *)
  @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient @_semantics("swiftui.requires_constant_range") nonisolated public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, RowContent>, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  #else
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient @_semantics("swiftui.requires_constant_range") nonisolated public init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, RowContent>, RowContent : SwiftUICore.View {
        self.init(selection: selection) {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") @_Concurrency.MainActor @preconcurrency internal init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
  #else
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") @_Concurrency.MainActor @preconcurrency internal init<RowContent>(_ data: Swift.Range<Swift.Int>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: Data, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, RowContent>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable {
        self.init {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, RowContent>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View {
        self.init {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUI.OutlineGroup<Data, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  @_semantics("swiftui.requires_constant_range") @_alwaysEmitIntoClient nonisolated public init<RowContent>(_ data: Swift.Range<Swift.Int>, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, RowContent>, RowContent : SwiftUICore.View {
        self.init {
            ForEach(data) { item in
                rowContent(item)
            }
        }
    }
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, RowContent>(_ data: Data, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, Data.Element.ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Content == SwiftUICore.ForEach<Data, ID, SwiftUICore.HStack<RowContent>>, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  @available(iOS, introduced: 13.0, deprecated: 15.0)
  @available(macOS, introduced: 10.15, deprecated: 12.0)
  @available(tvOS, introduced: 13.0, deprecated: 15.0)
  @available(watchOS, introduced: 6.0, deprecated: 8.0)
  @available(visionOS, introduced: 1.0, deprecated: 1.0)
  @usableFromInline
  @_semantics("swiftui.requires_constant_range") @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal init<RowContent>(_ data: Swift.Range<Swift.Int>, @SwiftUICore.ViewBuilder rowContent: @escaping (Swift.Int) -> RowContent) where Content == SwiftUICore.ForEach<Swift.Range<Swift.Int>, Swift.Int, SwiftUICore.HStack<RowContent>>, RowContent : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  #else
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #else
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  #else
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, selection: selection, rowContent: rowContent)
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #else
  @available(watchOS, unavailable)
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init(selection: selection) {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, Data.Element.ID)>, Data.Element.ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable {
        self.init(data, id: \.id, rowContent: rowContent)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<Swift.LazyMapSequence<Data.Indices, (Data.Index, ID)>, ID, RowContent>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable {
        self.init {
            ForEach(data, id: id) { item in
                rowContent(item)
            }
        }
    }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.List {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.List where SelectionValue == Swift.Never {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #else
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, Data.Element.ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #else
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, children: Swift.WritableKeyPath<Data.Element, Data?>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUI.OutlineGroup<SwiftUICore.Binding<Data>, ID, RowContent, RowContent, SwiftUI.DisclosureGroup<RowContent, SwiftUI.OutlineSubgroupChildren>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View
  #endif
}
@available(iOS 15.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func listRowSeparator(_ visibility: SwiftUI.Visibility, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func listRowSeparatorTint(_ color: SwiftUICore.Color?, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  #else
  nonisolated public func listRowSeparatorTint(_ color: SwiftUICore.Color?, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 15.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func listSectionSeparator(_ visibility: SwiftUI.Visibility, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func listSectionSeparatorTint(_ color: SwiftUICore.Color?, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  #else
  nonisolated public func listSectionSeparatorTint(_ color: SwiftUICore.Color?, edges: SwiftUICore.VerticalEdge.Set = .all) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.HorizontalAlignment {
  public static let listRowSeparatorLeading: SwiftUICore.HorizontalAlignment
  public static let listRowSeparatorTrailing: SwiftUICore.HorizontalAlignment
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func onPreferenceChange<K>(_ key: K.Type = K.self, perform action: @escaping (K.Value) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, K.Value : Swift.Equatable {
        return modifier(_PreferenceActionModifier<K>(action: action))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PreferenceActionModifier<Key> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey, Key.Value : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var action: (Key.Value) -> Swift.Void
  @inlinable nonisolated public init(action: @escaping (Key.Value) -> Swift.Void) {
        self.action = action
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._PreferenceActionModifier<Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._PreferenceActionModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct ToolbarItem<ID, Content> : SwiftUI.ToolbarContent where Content : SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItem<ID, Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @_Concurrency.MainActor @preconcurrency public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.ToolbarItem<ID, Content>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ToolbarItem : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem where ID == () {
  nonisolated public init(placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem : SwiftUI.CustomizableToolbarContent where ID == Swift.String {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient nonisolated public init(id: Swift.String, placement: SwiftUI.ToolbarItemPlacement = .automatic, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init(
            id: id, placement: placement,
            showsByDefault: true, content: content)
    }
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  @available(tvOS, introduced: 14.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use the CustomizableToolbarContent/defaultCustomization(_:options) modifier with a value of .hidden")
  nonisolated public init(id: Swift.String, placement: SwiftUI.ToolbarItemPlacement = .automatic, showsByDefault: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarItem : Swift.Identifiable where ID : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var id: ID {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.GroupedListStyle {
  @_alwaysEmitIntoClient public static var grouped: SwiftUI.GroupedListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct GroupedListStyle : SwiftUI.ListStyle {
  public init()
  @available(iOS, deprecated: 16.0, message: "Use listPadding instead.")
  @available(visionOS, deprecated: 1.0, message: "Use listPadding instead.")
  public static func _sectionInset(_ sectionInset: SwiftUICore.EdgeInsets) -> SwiftUI.GroupedListStyle
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.GroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.GroupedListStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilitySortPriority(_ sortPriority: Swift.Double) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowLayoutRoot {
  @_spi(DoNotImport) public subscript<K>(key: K.Type) -> K.Value where K : SwiftUI.WindowLayoutValueKey {
    get
  }
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(*, unavailable)
extension SwiftUI.WindowLayoutRoot : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowLayoutRootView : Swift.Equatable {
  @_spi(DoNotImport) public subscript<K>(key: K.Type) -> K.Value where K : SwiftUI.WindowLayoutValueKey {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  @_spi(DoNotImport) public func dimensions(in proposal: SwiftUICore.ProposedViewSize) -> SwiftUICore.ViewDimensions
  @_spi(DoNotImport) public static func == (lhs: SwiftUI.WindowLayoutRootView, rhs: SwiftUI.WindowLayoutRootView) -> Swift.Bool
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.WindowLayoutRootView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityScrollAction(_ handler: @escaping (SwiftUICore.Edge) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityScrollAction(_ handler: @escaping (SwiftUICore.Edge) -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileDialogDefaultDirectory(_ defaultDirectory: Foundation.URL?) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileDialogDefaultDirectory(_ defaultDirectory: Foundation.URL?) -> some SwiftUICore.View
  
  #endif
  nonisolated public func fileDialogCustomizationID(_ id: Swift.String) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileDialogMessage(_ message: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileDialogMessage(_ message: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #endif
  nonisolated public func fileDialogMessage(_ messageKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func fileDialogMessage<S>(_ message: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @_disfavoredOverload nonisolated public func fileDialogConfirmationLabel<S>(_ label: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileDialogConfirmationLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileDialogConfirmationLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #endif
  nonisolated public func fileDialogConfirmationLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporterFilenameLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileExporterFilenameLabel(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #endif
  nonisolated public func fileExporterFilenameLabel(_ labelKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func fileExporterFilenameLabel<S>(_ label: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  #if compiler(>=5.3) && $ParameterPacks
  nonisolated public func fileDialogURLEnabled(_ predicate: Foundation.Predicate<Foundation.URL>) -> some SwiftUICore.View
  
  #endif
  nonisolated public func fileDialogImportsUnresolvedAliases(_ imports: Swift.Bool) -> some SwiftUICore.View
  
  nonisolated public func fileDialogBrowserOptions(_ options: SwiftUI.FileDialogBrowserOptions) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDialogBrowserOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let enumeratePackages: SwiftUI.FileDialogBrowserOptions
  public static let includeHiddenFiles: SwiftUI.FileDialogBrowserOptions
  public static let displayFileExtensions: SwiftUI.FileDialogBrowserOptions
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.FileDialogBrowserOptions
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Element = SwiftUI.FileDialogBrowserOptions
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias RawValue = Swift.Int
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.FileDialogBrowserOptions : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func sceneStorageDomain(_ domain: Swift.String?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func sceneStorageDomain(_ domain: Swift.String?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var sceneStorageDomain: Swift.String? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #else
  @_spi(Private) public var sceneStorageDomain: Swift.String? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct SceneStorage<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  internal var _key: Swift.String
  @usableFromInline
  internal var _domain: Swift.String?
  @usableFromInline
  internal var _value: Value
  @usableFromInline
  internal var _location: SwiftUICore.AnyLocation<Value>?
  @usableFromInline
  internal var _transformBox: SwiftUI.SceneStorageTransformBox
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage : @unchecked Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage {
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Bool
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.Double
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Swift.String
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.URL
  public init(wrappedValue: Value, _ key: Swift.String) where Value == Foundation.Data
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  public init(wrappedValue: Value, _ key: Swift.String) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneStorage where Value : Swift.ExpressibleByNilLiteral {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String) where Value == Swift.Bool?
  #else
  public init(_ key: Swift.String) where Value == Swift.Bool?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String) where Value == Swift.Int?
  #else
  public init(_ key: Swift.String) where Value == Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String) where Value == Swift.Double?
  #else
  public init(_ key: Swift.String) where Value == Swift.Double?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String) where Value == Swift.String?
  #else
  public init(_ key: Swift.String) where Value == Swift.String?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String) where Value == Foundation.URL?
  #else
  public init(_ key: Swift.String) where Value == Foundation.URL?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String) where Value == Foundation.Data?
  #else
  public init(_ key: Swift.String) where Value == Foundation.Data?
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SceneStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<R>(_ key: Swift.String) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.String
  #else
  public init<R>(_ key: Swift.String) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<R>(_ key: Swift.String) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.Int
  #else
  public init<R>(_ key: Swift.String) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.Int
  #endif
}
extension SwiftUI.SceneStorage where Value : Swift.Decodable, Value : Swift.Encodable {
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(wrappedValue: Value, _ key: Swift.String)
  @_spi(OverlaySupport) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient public init(codableValue: Value, _ key: Swift.String) {
        self.init(wrappedValue: codableValue, key)
    }
}
extension SwiftUI.SceneStorage where Value : Swift.Decodable, Value : Swift.Encodable, Value : Swift.ExpressibleByNilLiteral {
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_ key: Swift.String)
  @_spi(OverlaySupport) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient public init(keyForCodable key: Swift.String) {
        self.init(key)
    }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class SceneStorageTransformBox {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.SceneStorageTransformBox : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Menu<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4MenuV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.Menu : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.Text
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.Text, S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, primaryAction: @escaping () -> Swift.Void)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) where Label == SwiftUICore.Text
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) where Label == SwiftUICore.Text, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init {
            content()
        } label: {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol {
        self.init {
            content()
        } label: {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  @available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void) {
        self.init {
            content()
        } label: {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        } primaryAction: {
            primaryAction()
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content, primaryAction: @escaping () -> Swift.Void)
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu {
  @_spi(Private) nonisolated public init(onPresentationChanged: @escaping (Swift.Bool) -> Swift.Void, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_spi(Private) nonisolated public init(onPresentationChanged: @escaping (Swift.Bool) -> Swift.Void, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, primaryAction: @escaping () -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.Menu where Label == SwiftUI.MenuStyleConfiguration.Label, Content == SwiftUI.MenuStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.MenuStyleConfiguration)
}
@_spi(Private) @available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct TexturedButtonMenuStyle : SwiftUI.MenuStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.TexturedButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(macOS 11.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23TexturedButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.TexturedButtonMenuStyle : Swift.Sendable {
}
extension SwiftUI.TabContent {
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping ([T]) -> Swift.Void) -> some SwiftUI.TabContent<Self.TabValue> where T : CoreTransferable.Transferable
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func springLoadingBehavior(_ behavior: SwiftUI.SpringLoadingBehavior) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.PickerStyle where Self == SwiftUI.InlinePickerStyle {
  @_alwaysEmitIntoClient public static var inline: SwiftUI.InlinePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct InlinePickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.InlinePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.InlinePickerStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
public struct _WidgetOutputs {
}
@available(*, unavailable)
extension SwiftUI._WidgetOutputs : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUI.TableRowContent<Self.TableRowValue>
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _HoverTableRowModifier : SwiftUI._TableRowContentModifier {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(macOS 13.0, *)
  @available(iOS, unavailable, introduced: 16.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22_HoverTableRowModifierV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._HoverTableRowModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS, unavailable)
@available(macOS, introduced: 13.0, deprecated: 14.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @_spi(Private) @_disfavoredOverload public func onHover(perform action: @escaping (Swift.Bool) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI._HoverTableRowModifier>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func dialogSuppressionToggle(_ titleKey: SwiftUICore.LocalizedStringKey, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "dialogSuppressionToggle(_:isSuppressed:)")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "dialogSuppressionToggle(_:isSuppressed:)")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "dialogSuppressionToggle(_:isSuppressed:)")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "dialogSuppressionToggle(_:isSuppressed:)")
  @_disfavoredOverload nonisolated public func dialogSuppression<S>(_ title: S, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @_disfavoredOverload nonisolated public func dialogSuppressionToggle<S>(_ title: S, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  nonisolated public func dialogSuppressionToggle(_ label: SwiftUICore.Text, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  nonisolated public func dialogSuppressionToggle(isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func dialogSuppressionToggle(_ titleKey: SwiftUICore.LocalizedStringKey, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene
  
  @_disfavoredOverload nonisolated public func dialogSuppressionToggle<S>(_ title: S, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene where S : Swift.StringProtocol
  
  nonisolated public func dialogSuppressionToggle(_ label: SwiftUICore.Text, isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene
  
  nonisolated public func dialogSuppressionToggle(isSuppressed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUI.Scene
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public enum DigitalCrownRotationalSensitivity : Swift.Sendable {
  case low
  case medium
  case high
  public static func == (a: SwiftUI.DigitalCrownRotationalSensitivity, b: SwiftUI.DigitalCrownRotationalSensitivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride? = nil, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride? = nil, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  #endif
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, configuration: SwiftUI._DigitalCrownConfiguration) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct DigitalCrownEvent : Swift.Sendable {
  public var offset: Swift.Double
  public var velocity: Swift.Double
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _digitalCrownRotation<V>(detent: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, isRubberBandingEnabled: Swift.Bool = false, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _digitalCrownRotation<V>(binding: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, isRubberBandingEnabled: Swift.Bool = false, isBindingConstrainedToDetent: Swift.Bool, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  nonisolated public func digitalCrownRotation<V>(detent: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  
  nonisolated public func digitalCrownRotation<V>(detent: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, by stride: V.Stride, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryInteger, V.Stride : Swift.BinaryInteger
  
  nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, from minValue: V, through maxValue: V, sensitivity: SwiftUI.DigitalCrownRotationalSensitivity = .high, isContinuous: Swift.Bool = false, isHapticFeedbackEnabled: Swift.Bool = true, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
  nonisolated public func digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func _digitalCrownRotation<V>(_ binding: SwiftUICore.Binding<V>, configuration: SwiftUI._DigitalCrownConfiguration, onChange: @escaping (SwiftUI.DigitalCrownEvent) -> Swift.Void = { _ in }, onIdle: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where V : Swift.BinaryFloatingPoint
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileImporter(isPresented: SwiftUICore.Binding<Swift.Bool>, allowedContentTypes: [UniformTypeIdentifiers.UTType], allowsMultipleSelection: Swift.Bool, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct EmptyControlWidgetConfiguration_V1 {
  @_spi(SSC) @inlinable public init() {}
  @_spi(SSC) public static func _makeControlConfiguration(control: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetConfiguration_V1>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@_spi(SSC) @available(*, unavailable)
extension SwiftUI.EmptyControlWidgetConfiguration_V1 : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(ForMapKitOnly) @inline(__always) @_Concurrency.MainActor @preconcurrency public static func mapKitMakeDebuggableView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@_spi(Private) @available(macCatalyst 15.0, macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct VibrantColorForegroundStyle : SwiftUICore.ShapeStyle {
  @_spi(Private) @_disfavoredOverload public init(_ tint: SwiftUICore.Color, sensitiveToControlActiveState: Swift.Bool = false)
  @_spi(Private) public init(_ tint: SwiftUICore.Color, alwaysAppearsActive: Swift.Bool = true)
  @_spi(Private) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(Private) @available(macOS 14.0, macCatalyst 15.0, *)
  @available(iOS, unavailable, introduced: 17.0)
  @available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 10.0)
  public typealias Resolved = Swift.Never
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.LayoutDirection : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUI.CodableLayoutDirection {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = SwiftUI.CodableLayoutDirection
}
#else
extension SwiftUICore.LayoutDirection : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUI.CodableLayoutDirection {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = SwiftUI.CodableLayoutDirection
}
#endif
package struct CodableLayoutDirection : SwiftUICore.CodableProxy {
  package var base: SwiftUICore.LayoutDirection
  package init(_ base: SwiftUICore.LayoutDirection)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package typealias Base = SwiftUICore.LayoutDirection
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._EnvironmentKeyWritingModifier : SwiftUI._SceneModifier {
}
extension SwiftUI.Scene {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_alwaysEmitIntoClient nonisolated public func environment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, _ value: V) -> some SwiftUI.Scene {
        modifier(_EnvironmentKeyWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore._EnvironmentKeyTransformModifier : SwiftUI._SceneModifier {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Scene {
  nonisolated public func transformEnvironment<V>(_ keyPath: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, V>, transform: @escaping (inout V) -> Swift.Void) -> some SwiftUI.Scene
  
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitViewTraitCollection {
  @_spi(ForMapKitOnly) public init()
  @_spi(ForMapKitOnly) public subscript<Trait>(key: Trait.Type) -> Trait.Value where Trait : SwiftUICore._ViewTraitKey {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitViewTraitCollection : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.PaletteControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var palette: SwiftUI.PaletteControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PaletteControlGroupStyle : SwiftUI.ControlGroupStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.PaletteControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24PaletteControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PaletteControlGroupStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func sheet<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  nonisolated public func sheet<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func sheet<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #else
  nonisolated public func sheet<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #endif
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fullScreenCover<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  nonisolated public func fullScreenCover<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(*, deprecated, renamed: "fullScreenCover(item:onDismiss:content:)")
  @_Concurrency.MainActor @preconcurrency public func _cover<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @available(*, deprecated, renamed: "fullScreenCover(item:onDismiss:content:)")
  @_Concurrency.MainActor @preconcurrency public func _cover<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fullScreenCover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #else
  nonisolated public func fullScreenCover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(*, deprecated, renamed: "fullScreenCover(isPresented:onDismiss:content:)")
  @_Concurrency.MainActor @preconcurrency public func _cover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #else
  @available(*, deprecated, renamed: "fullScreenCover(isPresented:onDismiss:content:)")
  @_Concurrency.MainActor @preconcurrency public func _cover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func fullScreenBlur<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func fullScreenBlur<Item, Content>(item: SwiftUICore.Binding<Item?>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func fullScreenBlur<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func fullScreenBlur<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func sheet<Item, Content>(item: SwiftUICore.Binding<Item?>, drawsBackground: Swift.Bool, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func sheet<Item, Content>(item: SwiftUICore.Binding<Item?>, drawsBackground: Swift.Bool, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  @_spi(Private) nonisolated public func sheet<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, drawsBackground: Swift.Bool, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func fullScreenCover<Item, Content>(item: SwiftUICore.Binding<Item?>, drawsBackground: Swift.Bool, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func fullScreenCover<Item, Content>(item: SwiftUICore.Binding<Item?>, drawsBackground: Swift.Bool, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  @_spi(Private) nonisolated public func fullScreenCover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, drawsBackground: Swift.Bool, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(Private) @available(iOS 15.2, macOS 12.1, tvOS 15.2, watchOS 8.2, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func formSheet<Item, Content>(item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func formSheet<Item, Content>(item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  @_spi(Private) nonisolated public func formSheet<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var isSheetPresented: Swift.Bool {
    @_spi(Private) get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func aspectRatio(_ aspectRatio: CoreFoundation.CGFloat? = nil, contentMode: SwiftUICore.ContentMode) -> some SwiftUICore.View {
        return modifier(_AspectRatioLayout(
            aspectRatio: aspectRatio, contentMode: contentMode))
    }
  
  #else
  @inlinable nonisolated public func aspectRatio(_ aspectRatio: CoreFoundation.CGFloat? = nil, contentMode: SwiftUICore.ContentMode) -> some SwiftUICore.View {
        return modifier(_AspectRatioLayout(
            aspectRatio: aspectRatio, contentMode: contentMode))
    }
  
  #endif
  @inlinable nonisolated public func aspectRatio(_ aspectRatio: CoreFoundation.CGSize, contentMode: SwiftUICore.ContentMode) -> some SwiftUICore.View {
        return self.aspectRatio(
            aspectRatio.width / aspectRatio.height, contentMode: contentMode)
    }
  
  @inlinable nonisolated public func scaledToFit() -> some SwiftUICore.View {
        return aspectRatio(contentMode: .fit)
    }
  
  @inlinable nonisolated public func scaledToFill() -> some SwiftUICore.View {
        return aspectRatio(contentMode: .fill)
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct _CALayerView<LayerType> : SwiftUICore.View where LayerType : QuartzCore.CALayer {
  @_Concurrency.MainActor @preconcurrency public var update: (LayerType) -> Swift.Void
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._CALayerView : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._CALayerView : SwiftUICore.RendererLeafView, SwiftUICore.PlatformLayerFactory {
  nonisolated public init(type: LayerType.Type, onUpdate update: @escaping (LayerType) -> Swift.Void)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._CALayerView<LayerType>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_Concurrency.MainActor @preconcurrency package static var requiresMainThread: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func content() -> SwiftUICore.DisplayList.Content.Value
  @_Concurrency.MainActor @preconcurrency package var platformLayerType: QuartzCore.CALayer.Type {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func updatePlatformLayer(_ layer: QuartzCore.CALayer)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._CALayerView where LayerType == QuartzCore.CALayer {
  nonisolated public init(onUpdate update: @escaping (LayerType) -> Swift.Void)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper public struct AppStorage<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  internal var location: SwiftUI.UserDefaultLocation<Value>
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUICore.Binding<Value> {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
  #else
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value : Swift.RawRepresentable, Value.RawValue == Swift.String
  #endif
}
extension SwiftUI.AppStorage where Value : Swift.Decodable, Value : Swift.Encodable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_disfavoredOverload public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_disfavoredOverload public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(OverlaySupport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(codableValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil)
  #else
  @_spi(OverlaySupport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(codableValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil)
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AppStorage where Value : Swift.ExpressibleByNilLiteral {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool?
  #else
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Bool?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int?
  #else
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Int?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double?
  #else
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.Double?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String?
  #else
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Swift.String?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL?
  #else
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.URL?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data?
  #else
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == Foundation.Data?
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AppStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.String
  #else
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.String
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.Int
  #else
  public init<R>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == R?, R : Swift.RawRepresentable, R.RawValue == Swift.Int
  #endif
}
extension SwiftUI.AppStorage where Value : Swift.Decodable, Value : Swift.Encodable, Value : Swift.ExpressibleByNilLiteral {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_disfavoredOverload public init<C>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == C?, C : Swift.Decodable, C : Swift.Encodable
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_disfavoredOverload public init<C>(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == C?, C : Swift.Decodable, C : Swift.Encodable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(OverlaySupport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<C>(keyForCodable key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == C?, C : Swift.Decodable, C : Swift.Encodable
  #else
  @_spi(OverlaySupport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<C>(keyForCodable key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == C?, C : Swift.Decodable, C : Swift.Encodable
  #endif
}
@_spi(Private) @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
extension SwiftUI.AppStorage : Combine._ObservableObjectProperty {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var objectWillChange: Combine.ObservableObjectPublisher? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #else
  @_spi(Private) public var objectWillChange: Combine.ObservableObjectPublisher? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  nonisolated public func defaultAppStorage(_ store: Foundation.UserDefaults) -> some SwiftUI.Scene
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var defaultAppStorageDefaults: Foundation.UserDefaults {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUI.AppStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value = ToolbarLabelStyle.automatic, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.ToolbarLabelStyle
  #else
  public init(wrappedValue: Value = ToolbarLabelStyle.automatic, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.ToolbarLabelStyle
  #endif
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal class UserDefaultLocation<Value> : SwiftUICore.Location, @unchecked Swift.Sendable {
  @usableFromInline
  internal var wasRead: Swift.Bool
  @usableFromInline
  internal func get() -> Value
  @usableFromInline
  internal func set(_ value: Value, transaction: SwiftUICore.Transaction)
  @usableFromInline
  internal func update() -> (Value, Swift.Bool)
  @usableFromInline
  internal static func == (lhs: SwiftUI.UserDefaultLocation<Value>, rhs: SwiftUI.UserDefaultLocation<Value>) -> Swift.Bool
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.UserDefaultLocation : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _NavigationDestinationCollection {
}
@available(*, unavailable)
extension SwiftUI._NavigationDestinationCollection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.SidebarAdaptableTabViewStyle {
  @_alwaysEmitIntoClient public static var sidebarAdaptable: SwiftUI.SidebarAdaptableTabViewStyle {
    get { .init() }
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
public struct SidebarAdaptableTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.SidebarAdaptableTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.SidebarAdaptableTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.SidebarAdaptableTabViewStyle : Swift.Sendable {
}
@available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct LimitedAvailabilityScene : SwiftUI.Scene, SwiftUI._LimitedAvailabilitySceneMarker {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUI.LimitedAvailabilitySceneStorageBase
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init<S>(_ scene: S) where S : SwiftUI.Scene
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  nonisolated internal static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityScene>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityScene : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
@usableFromInline
internal class LimitedAvailabilitySceneStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilitySceneStorageBase : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ReferenceFileDocument : Combine.ObservableObject {
  associatedtype Snapshot
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func snapshot(contentType: UniformTypeIdentifiers.UTType) throws -> Self.Snapshot
  func fileWrapper(snapshot: Self.Snapshot, configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ReferenceFileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup where Document : SwiftUI.ReferenceFileDocument {
  nonisolated public init(newDocument: @escaping () -> Document, @SwiftUICore.ViewBuilder editor: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
  nonisolated public init(viewing documentType: Document.Type, @SwiftUICore.ViewBuilder viewer: @escaping (SwiftUI.ReferenceFileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ReferenceFileDocumentConfiguration<Document> where Document : SwiftUI.ReferenceFileDocument {
  @SwiftUI.ObservedObject @_projectedValueProperty($document) @_Concurrency.MainActor @preconcurrency public var document: Document {
    get
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    set
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $document: SwiftUI.ObservedObject<Document>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var fileURL: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency public var isEditable: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ReferenceFileDocumentConfiguration : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func onSubmit(of triggers: SwiftUI.SubmitTriggers = .text, _ action: @escaping (() -> Swift.Void)) -> some SwiftUICore.View
  
  nonisolated public func submitScope(_ isBlocking: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUI.SliderStyle where Self == SwiftUI.AutomaticSliderStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticSliderStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticSliderStyle : SwiftUI.SliderStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticSliderStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20AutomaticSliderStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.AutomaticSliderStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.RoundedBorderTextFieldStyle {
  @_alwaysEmitIntoClient public static var roundedBorder: SwiftUI.RoundedBorderTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct RoundedBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.RoundedBorderTextFieldStyle._Label>) -> some SwiftUICore.View
  
  @available(iOS 13.0, macOS 10.15, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI27RoundedBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.RoundedBorderTextFieldStyle : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct LimitedAvailabilityToolbarContent : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
  public typealias Body = Swift.Never
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  @_Concurrency.MainActor @preconcurrency internal let storage: SwiftUI.LimitedAvailabilityToolbarContentStorageBase
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(erasing content: some ToolbarContent)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityToolbarContent>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityToolbarContent : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
@usableFromInline
internal class LimitedAvailabilityToolbarContentStorageBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityToolbarContentStorageBase : Swift.Sendable {
}
@available(iOS 13.0, macOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use toolbar(.hidden)")
  nonisolated public func navigationBarHidden(_ hidden: Swift.Bool) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  nonisolated public func navigationBarTitle(_ title: SwiftUICore.Text) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  nonisolated public func navigationBarTitle(_ titleKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "navigationTitle(_:)")
  @_disfavoredOverload nonisolated public func navigationBarTitle<S>(_ title: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  nonisolated public func navigationBarTitle(_ title: SwiftUICore.Text, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  nonisolated public func navigationBarTitle(_ titleKey: SwiftUICore.LocalizedStringKey, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View
  
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use navigationTitle(_:) with navigationBarTitleDisplayMode(_:)")
  @_disfavoredOverload nonisolated public func navigationBarTitle<S>(_ title: S, displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @_spi(Private) @available(iOS, introduced: 14.0, deprecated: 14.0, message: "Use ToolbarItem with .principal placement")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 14.0, deprecated: 14.0, message: "Use ToolbarItem with .principal placement")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, renamed: "navigationTitle(_:)")
  nonisolated public func navigationBarBanner<V>(@SwiftUICore.ViewBuilder _ banner: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  nonisolated public func navigationBarBackButtonHidden(_ hidesBackButton: Swift.Bool = true) -> some SwiftUICore.View
  
  @_spi(Private) @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func navigationBarBackgroundColor(_ color: SwiftUICore.Color) -> some SwiftUICore.View
  
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public struct NavigationBarItem : Swift.Sendable {
  public enum TitleDisplayMode : Swift.Sendable {
    case automatic
    case inline
    @available(watchOS 8.0, *)
    @available(tvOS, unavailable)
    case large
    public static func == (a: SwiftUI.NavigationBarItem.TitleDisplayMode, b: SwiftUI.NavigationBarItem.TitleDisplayMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftUI.ButtonBorderShape {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public var cornerRadius: CoreFoundation.CGFloat? {
    get
  }
  #else
  @_spi(UIFrameworks) @available(iOS 16.0, watchOS 9.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public var cornerRadius: CoreFoundation.CGFloat? {
    get
  }
  #endif
}
@_spi(Private) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  @_spi(Private) nonisolated public func contentDefinesWindowShadow(_ contentDefinesWindowShadow: Swift.Bool = true) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textInputSuggestions<S>(@SwiftUICore.ViewBuilder _ suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
  nonisolated public func textInputSuggestions<Data, ID, Content>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content) -> some SwiftUICore.View where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, Content : SwiftUICore.View
  
  nonisolated public func textInputSuggestions<Data, Content>(_ data: Data, @SwiftUICore.ViewBuilder content: @escaping (Data.Element) -> Content) -> some SwiftUICore.View where Data : Swift.RandomAccessCollection, Content : SwiftUICore.View, Data.Element : Swift.Identifiable
  
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
public struct AuxiliaryContent<SelectionValue, Content> {
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.AuxiliaryContent : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
extension SwiftUI.AuxiliaryContent : SwiftUI.TabContent where SelectionValue : Swift.Hashable, Content : SwiftUICore.View {
  @_spi(Uniquely) public typealias TabValue = SelectionValue
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "To add buttons to a section, use ``TabContent/sectionActions(content:)`` instead.")
  @available(macOS, introduced: 15.0, deprecated: 15.0, message: "To add buttons to a section, use ``TabContent/sectionActions(content:)`` instead.")
  @available(tvOS, introduced: 18.0, deprecated: 18.0, message: "To add buttons to a section, use ``TabContent/sectionActions(content:)`` instead.")
  @available(watchOS, introduced: 11.0, deprecated: 11.0, message: "To add buttons to a section, use ``TabContent/sectionActions(content:)`` instead.")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "To add buttons to a section, use ``TabContent/sectionActions(content:)`` instead.")
  public init(of selectionValue: SwiftUI.AuxiliaryContent<SelectionValue, Content>.TabValue.Type = TabValue.self, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Uniquely) @_Concurrency.MainActor @preconcurrency public var _identifiedView: some SwiftUICore.View {
    @_spi(Uniquely) get
  }
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public typealias Body = SwiftUI.AuxiliaryContent<SelectionValue, Content>
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI16AuxiliaryContentVAASHRzAA4ViewR_rlE011_identifiedE0Qrvp", 0) __<SelectionValue, Content>
}
@_spi(Uniquely) extension SwiftUI.TabContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "Use modifier variant that has action closure with an array of items.")
  @available(macOS, introduced: 15.0, deprecated: 15.0, message: "Use modifier variant that has action closure with an array of items.")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use modifier variant that has action closure with an array of items.")
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (Swift.String?, [T]) -> Swift.Void) -> some SwiftUI.TabContent<Self.TabValue> where T : CoreTransferable.Transferable
  
  #else
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "Use modifier variant that has action closure with an array of items.")
  @available(macOS, introduced: 15.0, deprecated: 15.0, message: "Use modifier variant that has action closure with an array of items.")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use modifier variant that has action closure with an array of items.")
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (Swift.String?, [T]) -> Swift.Void) -> some SwiftUI.TabContent<Self.TabValue> where T : CoreTransferable.Transferable
  
  #endif
}
@_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
extension SwiftUI.TabContent {
  @_spi(DoNotImport) nonisolated public func visibility(_ visibility: SwiftUI.Visibility, for placements: SwiftUI.TabPlacement...) -> some SwiftUI.TabContent<Self.TabValue>
  
}
extension SwiftUI.TabView {
  @_spi(Uniquely) @_spi(_) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "To set the default visibility of the sidebar, use ``View/defaultAdaptableTabBarPlacement(_:)`` instead.\nTo read whether the sidebar is visible, use the `tabPlacement` environment property.")
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "To set the default visibility of the sidebar, use ``View/defaultAdaptableTabBarPlacement(_:)`` instead.\nTo read whether the sidebar is visible, use the `tabPlacement` environment property.")
  nonisolated public init<C>(selection: SwiftUICore.Binding<SelectionValue>, sidebarVisibility: SwiftUICore.Binding<SwiftUI.Visibility>, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> C) where Content == SwiftUI.TabContentBuilder<SelectionValue>.Content<C>, C : SwiftUI.TabContent
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabView {
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "To set the default visibility of the sidebar, use ``View/defaultAdaptableTabBarPlacement(_:)`` instead.\nTo read whether the sidebar is visible, use the `tabPlacement` environment property.")
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "To set the default visibility of the sidebar, use ``View/defaultAdaptableTabBarPlacement(_:)`` instead.\nTo read whether the sidebar is visible, use the `tabPlacement` environment property.")
  nonisolated public init<C>(sidebarVisibility: SwiftUICore.Binding<SwiftUI.Visibility>, @SwiftUI.TabContentBuilder<Swift.Never> content: () -> C) where SelectionValue == Swift.Never, Content == SwiftUI.TabContentBuilder<Swift.Never>.Content<C>, C : SwiftUI.TabContent
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "sidebarAdaptable")
@available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "sidebarAdaptable")
@available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "sidebarAdaptable")
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "sidebarAdaptable")
extension SwiftUI.TabViewStyle where Self == SwiftUI.AdaptiveTabViewStyle {
  @_spi(Uniquely) public static var adaptive: SwiftUI.AdaptiveTabViewStyle {
    @_spi(Uniquely) get
  }
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "sidebarAdaptable")
@available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "sidebarAdaptable")
@available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "sidebarAdaptable")
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "sidebarAdaptable")
public struct AdaptiveTabViewStyle : SwiftUI.TabViewStyle {
  @_spi(Uniquely) public init()
  @_spi(Uniquely) public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.AdaptiveTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  @_spi(Uniquely) public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.AdaptiveTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.AdaptiveTabViewStyle : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
@available(macOS, introduced: 15.0, deprecated: 100000.0, renamed: "TabSection")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, renamed: "TabSection")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, renamed: "TabSection")
public struct TabGroup<Header, Content, Compact, SelectionValue> {
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.TabGroup : Swift.Sendable {
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
@available(macOS, introduced: 15.0, deprecated: 100000.0, renamed: "TabSection")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, renamed: "TabSection")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, renamed: "TabSection")
extension SwiftUI.TabGroup : SwiftUI.TabContent where Header : SwiftUICore.View, Content : SwiftUI.TabContent, Compact : SwiftUICore.View, SelectionValue == Content.TabValue {
  @_spi(Uniquely) public typealias TabValue = Content.TabValue
  @_spi(Uniquely) @_Concurrency.MainActor @preconcurrency public var _identifiedView: some SwiftUICore.View {
    @_spi(Uniquely) get
  }
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
  @available(tvOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
  @available(watchOS, introduced: 11.0, deprecated: 100000.0, renamed: "TabSection")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, renamed: "TabSection")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, renamed: "TabSection")
  public typealias Body = SwiftUI.TabGroup<Header, Content, Compact, SelectionValue>
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
  @available(tvOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
  @available(watchOS, introduced: 11.0, deprecated: 100000.0, renamed: "TabSection")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, renamed: "TabSection")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, renamed: "TabSection")
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI8TabGroupVA2A4ViewRzAA0C7ContentR_AaDR0_0C5ValueAaEPQy_Rs1_rlE011_identifiedE0Qrvp", 0) __<Header, Content, Compact, SelectionValue>
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
@available(macOS, introduced: 15.0, deprecated: 100000.0, renamed: "TabSection")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, renamed: "TabSection")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, renamed: "TabSection")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, renamed: "TabSection")
extension SwiftUI.TabGroup where Content : SwiftUI.TabContent, SelectionValue : Swift.Hashable {
  @_spi(Uniquely) public init(@SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Compact == SwiftUICore.EmptyView
  @_spi(Uniquely) public init(@SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header, @SwiftUICore.ViewBuilder compact: () -> Compact) where Header : SwiftUICore.View, Compact : SwiftUICore.View
  @_spi(Uniquely) public init(@SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUICore.EmptyView, Compact == SwiftUICore.EmptyView
  @_spi(Uniquely) @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUI.DefaultTabLabel, Compact == SwiftUICore.EmptyView, S : Swift.StringProtocol
  @_spi(Uniquely) @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder compact: () -> Compact) where Header == SwiftUI.DefaultTabLabel, Compact : SwiftUICore.View, S : Swift.StringProtocol
  @_spi(Uniquely) public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUI.DefaultTabLabel, Compact == SwiftUICore.EmptyView
  @_spi(Uniquely) public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder compact: () -> Compact) where Header == SwiftUI.DefaultTabLabel, Compact : SwiftUICore.View
  @_spi(Uniquely) @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUI.DefaultTabLabel, Compact == SwiftUICore.EmptyView, S : Swift.StringProtocol
  @_spi(Uniquely) @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder compact: () -> Compact) where Header == SwiftUI.DefaultTabLabel, Compact : SwiftUICore.View, S : Swift.StringProtocol
  @_spi(Uniquely) public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUI.DefaultTabLabel, Compact == SwiftUICore.EmptyView
  @_spi(Uniquely) public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder compact: () -> Compact) where Header == SwiftUI.DefaultTabLabel, Compact : SwiftUICore.View
}
extension SwiftUI.TabContent {
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  @_disfavoredOverload nonisolated public func customizationBehavior(_ behavior: SwiftUI.TabCustomizationBehavior, for placements: SwiftUI.TabPlacement...) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
extension SwiftUI.TabContent {
  @_spi(Uniquely) @_disfavoredOverload nonisolated public func defaultVisibility(_ visibility: SwiftUI.Visibility, for placements: SwiftUI.TabPlacement...) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "tabViewCustomization")
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "tabViewCustomization")
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) nonisolated public func tabViewSidebarCustomization(_ customization: SwiftUICore.Binding<SwiftUI.TabSidebarCustomization>?) -> some SwiftUICore.View
  
  #else
  @_spi(Uniquely) nonisolated public func tabViewSidebarCustomization(_ customization: SwiftUICore.Binding<SwiftUI.TabSidebarCustomization>?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "TabViewCustomization")
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "TabViewCustomization")
public struct TabSidebarCustomization : Swift.Equatable, Swift.Sendable, Swift.Codable {
  @_spi(Uniquely) public init()
  @_spi(Uniquely) public subscript(visibility id: Swift.String) -> SwiftUI.Visibility {
    @_spi(Uniquely) get
    @_spi(Uniquely) set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) public subscript(groupID id: Swift.String) -> SwiftUI.TabGroupCustomizationEntry? {
    @_spi(Uniquely) get
    @_spi(Uniquely) set
  }
  #else
  @_spi(Uniquely) public subscript(groupID id: Swift.String) -> SwiftUI.TabGroupCustomizationEntry? {
    @_spi(Uniquely) get
    @_spi(Uniquely) set
  }
  #endif
  @_spi(Uniquely) public mutating func reset()
  @_spi(Uniquely) public mutating func resetVisibility()
  @_spi(Uniquely) public mutating func resetGroupOrder(for groupID: Swift.String)
  @_spi(Uniquely) public mutating func resetGroupOrder()
  @_spi(Uniquely) public static func == (a: SwiftUI.TabSidebarCustomization, b: SwiftUI.TabSidebarCustomization) -> Swift.Bool
  @_spi(Uniquely) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Uniquely) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
public struct TabGroupCustomizationEntry : Swift.Codable, Swift.Hashable, Swift.Sendable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) public var childrenOrder: [Swift.String]? {
    @_spi(Uniquely) get
  }
  #else
  @_spi(Uniquely) public var childrenOrder: [Swift.String]? {
    @_spi(Uniquely) get
  }
  #endif
  @_spi(Uniquely) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Uniquely) public static func == (a: SwiftUI.TabGroupCustomizationEntry, b: SwiftUI.TabGroupCustomizationEntry) -> Swift.Bool
  @_spi(Uniquely) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Uniquely) public var hashValue: Swift.Int {
    @_spi(Uniquely) get
  }
  @_spi(Uniquely) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
extension SwiftUI.SceneStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) public init(wrappedValue: Value = TabSidebarCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabSidebarCustomization
  #else
  @_spi(Uniquely) public init(wrappedValue: Value = TabSidebarCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabSidebarCustomization
  #endif
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
extension SwiftUI.AppStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) public init(wrappedValue: Value = TabSidebarCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabSidebarCustomization
  #else
  @_spi(Uniquely) public init(wrappedValue: Value = TabSidebarCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabSidebarCustomization
  #endif
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
extension SwiftUI.TabContent {
  @_spi(Uniquely) nonisolated public func pinned(_ isPinned: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, unavailable)
extension SwiftUI.TabContent {
  @_spi(Uniquely) nonisolated public func sidebarOnly(_ isSidebarOnly: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, message: "To adjust the layout of content relative to the sidebar, use `ignoresSafeArea` instead.")
@available(macOS, introduced: 15.0, deprecated: 15.0)
@available(tvOS, introduced: 18.0, deprecated: 18.0)
@available(watchOS, introduced: 11.0, deprecated: 11.0)
@available(visionOS, introduced: 2.0, deprecated: 2.0, message: "To adjust the layout of content relative to the sidebar, use `ignoresSafeArea` instead.")
extension SwiftUICore.View {
  @_spi(Uniquely) nonisolated public func tabViewMode(content contentMode: SwiftUI.TabViewContentDisplayMode = .automatic) -> some SwiftUICore.View
  
}
@_spi(Uniquely) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabViewContentDisplayMode : Swift.Equatable {
  @_spi(Uniquely) public static let automatic: SwiftUI.TabViewContentDisplayMode
  @_spi(Uniquely) public static let balanced: SwiftUI.TabViewContentDisplayMode
  @_spi(Uniquely) public static let prominentDetail: SwiftUI.TabViewContentDisplayMode
  @_spi(Uniquely) public static func == (a: SwiftUI.TabViewContentDisplayMode, b: SwiftUI.TabViewContentDisplayMode) -> Swift.Bool
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.TabViewContentDisplayMode : Swift.Sendable {
}
@_spi(Uniquely) extension SwiftUI.Tab where Value : Swift.Hashable, Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "init(value:role:content:)")
  @available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "init(value:role:content:)")
  @available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "init(value:role:content:)")
  @available(watchOS, introduced: 11.0, deprecated: 11.0, renamed: "init(value:role:content:)")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "init(value:role:content:)")
  public init(systemItem: SwiftUI.TabItemKind, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.EmptyView
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "init(value:role:content:)")
  @available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "init(value:role:content:)")
  @available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "init(value:role:content:)")
  @available(watchOS, introduced: 11.0, deprecated: 11.0, renamed: "init(value:role:content:)")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "init(value:role:content:)")
  public init<V>(systemItem: SwiftUI.TabItemKind, value: V, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUICore.EmptyView, V : Swift.Hashable
  #else
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "init(value:role:content:)")
  @available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "init(value:role:content:)")
  @available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "init(value:role:content:)")
  @available(watchOS, introduced: 11.0, deprecated: 11.0, renamed: "init(value:role:content:)")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "init(value:role:content:)")
  public init<V>(systemItem: SwiftUI.TabItemKind, value: V, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUICore.EmptyView, V : Swift.Hashable
  #endif
}
@_spi(Uniquely) extension SwiftUI.Tab where Value == Swift.Never, Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "init(role:content:)")
  @available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "init(role:content:)")
  @available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "init(role:content:)")
  @available(watchOS, introduced: 11.0, deprecated: 11.0, renamed: "init(role:content:)")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "init(role:content:)")
  public init(systemItem: SwiftUI.TabItemKind, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.EmptyView
}
@_spi(Uniquely) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabItemKind {
  @_spi(Uniquely) public static let search: SwiftUI.TabItemKind
}
@_spi(Uniquely) @available(*, unavailable)
extension SwiftUI.TabItemKind : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ViewTest : SwiftUICore._Test {
  associatedtype RootView : SwiftUICore.View
  associatedtype RootStateType = Swift.Void
  func initRootView() -> Self.RootView
  func initSize() -> CoreFoundation.CGSize
  func setTestView<V>(_ view: V) where V : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public func setUpTest()
  public func tearDownTest()
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public func tearDownTestWithError() throws
  public func setTestView<V>(_ view: V) where V : SwiftUICore.View
  public var rootView: Self.RootView {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func viewForIdentifier<V, I>(_ identifier: I, _ type: V.Type = V.self) -> V? where V : SwiftUICore.View, I : Swift.Hashable
  #else
  public func viewForIdentifier<V, I>(_ identifier: I, _ type: V.Type = V.self) -> V? where V : SwiftUICore.View, I : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type = S.self, in _: V.Type = V.self) -> SwiftUICore.Binding<S>? where I : Swift.Hashable, V : SwiftUICore.View
  #else
  public func stateForIdentifier<I, S, V>(_ id: I, type _: S.Type = S.self, in _: V.Type = V.self) -> SwiftUICore.Binding<S>? where I : Swift.Hashable, V : SwiftUICore.View
  #endif
  public func render(seconds: Swift.Double = 1.0 / 60.0)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func renderAsync(seconds: Swift.Double = 1.0 / 60.0) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func renderRecursively(seconds: Swift.Double = 1.0 / 60.0)
  public func initSize() -> CoreFoundation.CGSize
  public func setSize(_ size: CoreFoundation.CGSize)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func setEnvironment(_ environment: SwiftUICore.EnvironmentValues?)
  #else
  public func setEnvironment(_ environment: SwiftUICore.EnvironmentValues?)
  #endif
  public func updateEnvironment(_ body: (inout SwiftUICore.EnvironmentValues) -> Swift.Void)
  public func resetEvents()
  public func loop()
  public func turnRunloop(times: Swift.Int = 1)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ViewTest {
  public func rootState<S>(type _: S.Type = S.self) -> SwiftUICore.Binding<S>
  public func rootState<S, V>(type _: S.Type = S.self, in _: V.Type) -> SwiftUICore.Binding<S> where V : SwiftUICore.View
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI._ViewTest {
  public func set<V>(_ keyPath: Swift.WritableKeyPath<Self.RootStateType, V>, to value: V)
  public func get<V>(_ keyPath: Swift.KeyPath<Self.RootStateType, V>) -> V
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _SizedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: S
  @_Concurrency.MainActor @preconcurrency public var size: CoreFoundation.CGSize
  @inlinable nonisolated public init(shape: S, size: CoreFoundation.CGSize) {
        self.shape = shape
        self.size = size
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<S.AnimatableData, CoreFoundation.CGSize.AnimatableData>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._SizedShape<S>.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._SizedShape<S>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Shape {
  @inlinable public func size(_ size: CoreFoundation.CGSize) -> some SwiftUICore.Shape {
        return _SizedShape(shape: self, size: size)
    }
  
  @inlinable public func size(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> some SwiftUICore.Shape {
        return size(.init(width: width, height: height))
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Shape {
  public func size(_ size: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.Shape
  
  public func size(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.Shape
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _SceneModifier {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder func body(content: Self.SceneContent) -> Self.Body
  typealias SceneContent = SwiftUI._SceneModifier_Content<Self>
  static func _makeScene(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier where Self.Body == Swift.Never {
  public func body(content: Self.SceneContent) -> Self.Body
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier where Self : SwiftUICore._GraphInputsModifier, Self.Body == Swift.Never {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.EmptyModifier : SwiftUI._SceneModifier {
  @_Concurrency.MainActor @preconcurrency public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore.EmptyModifier>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  @inlinable @_Concurrency.MainActor @preconcurrency internal func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  @_spi(Private) nonisolated public func sceneModifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent : SwiftUI.Scene where Content : SwiftUI.Scene, Modifier : SwiftUI._SceneModifier {
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.ModifiedContent<Content, Modifier>.Body {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent : SwiftUI._SceneModifier where Content : SwiftUI._SceneModifier, Modifier : SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier {
  @inlinable internal func concat<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct _SceneModifier_Content<Modifier> : SwiftUI.Scene where Modifier : SwiftUI._SceneModifier {
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI._SceneModifier_Content<Modifier>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._SceneModifier_Content : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._SceneModifier {
  public static func _makeScene(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.CustomHoverEffect
  
  #else
  public func hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) @_Concurrency.MainActor @preconcurrency public func _hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.View
  
  #else
  @_spi(CustomHoverEffects) @_Concurrency.MainActor @preconcurrency public func _hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.View
  
  #endif
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func _hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func _hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ScenePadding : Swift.Equatable, Swift.Sendable {
  public static let minimum: SwiftUI.ScenePadding
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let navigationBar: SwiftUI.ScenePadding
  public static func == (a: SwiftUI.ScenePadding, b: SwiftUI.ScenePadding) -> Swift.Bool
}
@_spi(Private) @available(iOS, introduced: 16.0, deprecated: 16.0, renamed: "ScenePadding")
@available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "ScenePadding")
@available(tvOS, introduced: 16.0, deprecated: 16.0, renamed: "ScenePadding")
@available(watchOS, introduced: 9.0, deprecated: 9.0, renamed: "ScenePadding")
public struct ScenePaddingAlignment : Swift.Equatable {
  @_spi(Private) public static let minimumMargin: SwiftUI.ScenePaddingAlignment
  @_spi(Private) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let statusBarMargin: SwiftUI.ScenePaddingAlignment
  @_spi(Private) public static func == (a: SwiftUI.ScenePaddingAlignment, b: SwiftUI.ScenePaddingAlignment) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScenePaddingAlignment : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func scenePadding(_ edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scenePadding(_ padding: SwiftUI.ScenePadding, edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Replace usage of ScenePaddingAlignment with ScenePadding.")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Replace usage of ScenePaddingAlignment with ScenePadding.")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Replace usage of ScenePaddingAlignment with ScenePadding.")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Replace usage of ScenePaddingAlignment with ScenePadding.")
  @_disfavoredOverload nonisolated public func scenePadding(_ alignment: SwiftUI.ScenePaddingAlignment, edges: SwiftUICore.Edge.Set = .all) -> some SwiftUICore.View
  
}
package enum PepperUICoreFeatureFlag : FeatureFlags.FeatureFlagsKey {
  case newSystemMargins
  package var domain: Swift.StaticString {
    get
  }
  package var feature: Swift.StaticString {
    get
  }
  package static func == (a: SwiftUI.PepperUICoreFeatureFlag, b: SwiftUI.PepperUICoreFeatureFlag) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func overlay(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> some View) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func overlay(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> some View, effect: (Self.Content) -> some CustomHoverEffect) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func background(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> some View) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func background(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> some View, effect: (Self.Content) -> some CustomHoverEffect) -> some SwiftUICore.CustomHoverEffect
  
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct OpenImmersiveSpaceAction : Swift.Sendable {
  public enum Result : Swift.Sendable {
    case opened
    case userCancelled
    case error
    public static func == (a: SwiftUI.OpenImmersiveSpaceAction.Result, b: SwiftUI.OpenImmersiveSpaceAction.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @discardableResult
  @_Concurrency.MainActor public func callAsFunction(id: Swift.String) async -> SwiftUI.OpenImmersiveSpaceAction.Result
  @discardableResult
  @_Concurrency.MainActor public func callAsFunction<D>(value: D) async -> SwiftUI.OpenImmersiveSpaceAction.Result where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @discardableResult
  @_Concurrency.MainActor public func callAsFunction<D>(id: Swift.String, value: D) async -> SwiftUI.OpenImmersiveSpaceAction.Result where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var openImmersiveSpace: SwiftUI.OpenImmersiveSpaceAction {
    get
  }
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.UnitRect : @retroactive SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>>
  package var animatableData: SwiftUICore.UnitRect.AnimatableData {
    get
    set
  }
}
#else
extension SwiftUICore.UnitRect : SwiftUICore.Animatable {
  package typealias AnimatableData = SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>>
  package var animatableData: SwiftUICore.UnitRect.AnimatableData {
    get
    set
  }
}
#endif
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool = true) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityRespondsToUserInteraction(_ respondsToUserInteraction: Swift.Bool = true) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct TupleWidget<T> : SwiftUI.Widget {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_ value: T)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @usableFromInline
  @_spi_available(tvOS, introduced: 17.0)
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11TupleWidgetV4bodyQrvp", 0) __<T>
}
@available(*, unavailable)
extension SwiftUI.TupleWidget : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct TupleWidgetConfiguration<T> : SwiftUI.WidgetConfiguration {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  nonisolated internal static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUI.TupleWidgetConfiguration<T>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @usableFromInline
  @_spi_available(tvOS, introduced: 17.0)
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleWidgetConfiguration : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitGraphInputs {
  @_spi(ForMapKitOnly) public var environment: SwiftUICore._GraphValue<SwiftUICore.EnvironmentValues> {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitGraphInputs : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnCustomizationBehavior : Swift.SetAlgebra, Swift.Sendable {
  public typealias Element = SwiftUI.TableColumnCustomizationBehavior
  public init()
  public static var all: SwiftUI.TableColumnCustomizationBehavior {
    get
  }
  public static let reorder: SwiftUI.TableColumnCustomizationBehavior
  public static let resize: SwiftUI.TableColumnCustomizationBehavior
  public static let visibility: SwiftUI.TableColumnCustomizationBehavior
  public func contains(_ member: SwiftUI.TableColumnCustomizationBehavior.Element) -> Swift.Bool
  public func union(_ other: SwiftUI.TableColumnCustomizationBehavior) -> SwiftUI.TableColumnCustomizationBehavior
  public func intersection(_ other: SwiftUI.TableColumnCustomizationBehavior) -> SwiftUI.TableColumnCustomizationBehavior
  public func symmetricDifference(_ other: SwiftUI.TableColumnCustomizationBehavior) -> SwiftUI.TableColumnCustomizationBehavior
  public mutating func insert(_ newMember: SwiftUI.TableColumnCustomizationBehavior.Element) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUI.TableColumnCustomizationBehavior.Element)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public mutating func remove(_ member: SwiftUI.TableColumnCustomizationBehavior.Element) -> SwiftUI.TableColumnCustomizationBehavior.Element?
  #else
  public mutating func remove(_ member: SwiftUI.TableColumnCustomizationBehavior.Element) -> SwiftUI.TableColumnCustomizationBehavior.Element?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public mutating func update(with newMember: SwiftUI.TableColumnCustomizationBehavior.Element) -> SwiftUI.TableColumnCustomizationBehavior.Element?
  #else
  public mutating func update(with newMember: SwiftUI.TableColumnCustomizationBehavior.Element) -> SwiftUI.TableColumnCustomizationBehavior.Element?
  #endif
  public mutating func formUnion(_ other: SwiftUI.TableColumnCustomizationBehavior)
  public mutating func formIntersection(_ other: SwiftUI.TableColumnCustomizationBehavior)
  public mutating func formSymmetricDifference(_ other: SwiftUI.TableColumnCustomizationBehavior)
  public static func == (a: SwiftUI.TableColumnCustomizationBehavior, b: SwiftUI.TableColumnCustomizationBehavior) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.TableColumnCustomizationBehavior.Element
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent {
  public func defaultVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
  public func customizationID(_ id: Swift.String) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
  public func disabledCustomizationBehavior(_ behavior: SwiftUI.TableColumnCustomizationBehavior) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor @propertyWrapper public struct UIApplicationDelegateAdaptor<DelegateType> : SwiftUICore.DynamicProperty where DelegateType : ObjectiveC.NSObject, DelegateType : UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: DelegateType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(_ delegateType: DelegateType.Type = DelegateType.self)
}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIApplicationDelegateAdaptor where DelegateType : Combine.ObservableObject {
  @_Concurrency.MainActor @preconcurrency public init(_ delegateType: DelegateType.Type = DelegateType.self)
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.ObservedObject<DelegateType>.Wrapper {
    get
  }
}
@available(iOS 17.0, tvOS 17.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIApplicationDelegateAdaptor where DelegateType : Observation.Observable {
  @_Concurrency.MainActor @preconcurrency public init(_ delegateType: DelegateType.Type = DelegateType.self)
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 18.0, watchOS 10.0, visionOS 1.0, *)
public struct SpatialLongPressGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  @_spi(Private) public struct Value : Swift.Equatable, Swift.Sendable {
    @_spi(Private) public var location: CoreFoundation.CGPoint
    @_spi(Private) public var isPressed: Swift.Bool
    @_spi(Private) public static func == (a: SwiftUI.SpatialLongPressGesture.Value, b: SwiftUI.SpatialLongPressGesture.Value) -> Swift.Bool
  }
  @_spi(Private) public var minimumDuration: Swift.Double
  @_spi(Private) public var maximumDistance: CoreFoundation.CGFloat
  @_spi(Private) public var coordinateSpace: SwiftUICore.CoordinateSpace
  @_spi(Private) public init(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, coordinateSpace: some CoordinateSpaceProtocol = .local)
  @_spi(Private) package var internalBody: some SwiftUICore.Gesture<SwiftUI.SpatialLongPressGesture.Value> {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, visionOS 1.0, *)
  public typealias Body = Swift.Never
  @_spi(Private) @available(iOS 17.0, tvOS 18.0, watchOS 10.0, macOS 14.0, visionOS 1.0, *)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI23SpatialLongPressGestureV12internalBodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SpatialLongPressGesture : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, visionOS 1.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct StateObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @usableFromInline
  @preconcurrency @_Concurrency.MainActor @frozen internal enum Storage {
    case initially(() -> ObjectType)
    case object(SwiftUI.ObservedObject<ObjectType>)
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUI.StateObject<ObjectType>.Storage
  @inlinable @_Concurrency.MainActor @preconcurrency public init(wrappedValue thunk: @autoclosure @escaping () -> ObjectType) {
        storage = .initially(thunk)
    }
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.ObservedObject<ObjectType>.Wrapper {
    get
  }
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.StateObject {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  public func contextMenu<M>(@SwiftUICore.ViewBuilder menuItems: () -> M) -> SwiftUICore.ModifiedContent<Self, SwiftUI._ContextMenuTableRowModifier<M>> where M : SwiftUICore.View
  public func contextMenu<M, P>(@SwiftUICore.ViewBuilder menuItems: () -> M, @SwiftUICore.ViewBuilder preview: () -> P) -> SwiftUICore.ModifiedContent<Self, SwiftUI._ContextMenuPreviewTableRowModifier<M, P>> where M : SwiftUICore.View, P : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ContextMenuTableRowModifier<MenuItems> : SwiftUI._TableRowContentModifier where MenuItems : SwiftUICore.View {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28_ContextMenuTableRowModifierV4bodyQrvp", 0) __<MenuItems>
}
@available(*, unavailable)
extension SwiftUI._ContextMenuTableRowModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ContextMenuPreviewTableRowModifier<MenuItems, Preview> : SwiftUI._TableRowContentModifier where MenuItems : SwiftUICore.View, Preview : SwiftUICore.View {
  public var body: some SwiftUI._TableRowContentModifier {
    get
  }
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI35_ContextMenuPreviewTableRowModifierV4bodyQrvp", 0) __<MenuItems, Preview>
}
@available(*, unavailable)
extension SwiftUI._ContextMenuPreviewTableRowModifier : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public protocol AccessibilityRotorContent {
  nonisolated static func _makeEntries(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #else
  nonisolated static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #endif
  associatedtype Body : SwiftUI.AccessibilityRotorContent
  @SwiftUI.AccessibilityRotorContentBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContent {
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #else
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension Swift.Never : SwiftUI.AccessibilityRotorContent {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _AccessibilityRotorEntryInputs {
}
@available(*, unavailable)
extension SwiftUI._AccessibilityRotorEntryInputs : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct _AccessibilityRotorEntryOutputs {
}
@available(*, unavailable)
extension SwiftUI._AccessibilityRotorEntryOutputs : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_functionBuilder public struct AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.AccessibilityRotorContent {
       content
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
        content
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> some SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
        AccessibilityOptionalRotorContent(content)
    }
  
  #else
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> some SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
        AccessibilityOptionalRotorContent(content)
    }
  
  #endif
}
@available(*, unavailable)
extension SwiftUI.AccessibilityRotorContentBuilder : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct AccessibilityTupleRotorContent<T> : SwiftUI.AccessibilityRotorContent {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var value: T
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(_ value: T) { self.value = value }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  nonisolated internal static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #else
  @usableFromInline
  nonisolated internal static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #endif
  @usableFromInline
  nonisolated internal static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUI.AccessibilityTupleRotorContent<T>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.AccessibilityTupleRotorContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ForEach : SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #else
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #endif
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ForEach where ID == Data.Element.ID, Content : SwiftUI.AccessibilityRotorContent, Data.Element : Swift.Identifiable {
  public init(_ data: Data, @SwiftUI.AccessibilityRotorContentBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ForEach where Content : SwiftUI.AccessibilityRotorContent {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.AccessibilityRotorContentBuilder content: @escaping (Data.Element) -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorEntry : SwiftUI.AccessibilityRotorContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUI.AccessibilityRotorEntry<ID>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #else
  nonisolated public static func _entryCount(inputs: SwiftUI._AccessibilityRotorEntryInputs) -> Swift.Int?
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct AccessibilityOptionalRotorContent<Content> where Content : SwiftUI.AccessibilityRotorContent {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var content: Content?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(_ content: Content?) {
        self.content = content
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(_ content: Content?) {
        self.content = content
    }
  #endif
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  nonisolated internal static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUI.AccessibilityOptionalRotorContent<Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.AccessibilityOptionalRotorContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Group : SwiftUI.AccessibilityRotorContent where Content : SwiftUI.AccessibilityRotorContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
  public init(@SwiftUI.AccessibilityRotorContentBuilder content: () -> Content)
  nonisolated public static func _makeEntries(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._AccessibilityRotorEntryInputs) -> SwiftUI._AccessibilityRotorEntryOutputs
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DocumentBoxViewModifier : SwiftUICore.ViewModifier {
  @_spi(SwiftDataDocuments) init(box: any SwiftUI.ObservableDocumentBox)
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct URLDocumentConfiguration : Swift.Sendable {
  @_spi(SwiftDataDocuments) public var isEditable: Swift.Bool
  @_spi(SwiftDataDocuments) public var documentURL: Foundation.URL?
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup {
  @_spi(SwiftDataDocuments) nonisolated public init<DocumentBoxType, ContentModifier>(editing contentType: UniformTypeIdentifiers.UTType, newDocumentProvider: any SwiftUI.NewDocumentProvider, documentBoxType: DocumentBoxType.Type, contentModifierType: ContentModifier.Type, editor: @escaping (SwiftUI.URLDocumentConfiguration) -> Content) where DocumentBoxType : Combine.ObservableObject, DocumentBoxType : SwiftUI.ObservableDocumentBox, ContentModifier : SwiftUI.DocumentBoxViewModifier
  @_spi(SwiftDataDocuments) nonisolated public init<DocumentBoxType, ContentModifier>(viewing contentType: UniformTypeIdentifiers.UTType, newDocumentProvider: any SwiftUI.NewDocumentProvider, documentBoxType: DocumentBoxType.Type, contentModifierType: ContentModifier.Type, viewer: @escaping (SwiftUI.URLDocumentConfiguration) -> Content) where DocumentBoxType : Combine.ObservableObject, DocumentBoxType : SwiftUI.ObservableDocumentBox, ContentModifier : SwiftUI.DocumentBoxViewModifier
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup {
  @_spi(SwiftDataDocuments) nonisolated public init<DocumentBoxType, ContentModifier>(editing contentType: UniformTypeIdentifiers.UTType, newDocument: any SwiftUI.NewDocumentProvider, documentBoxType: DocumentBoxType.Type, contentModifierType: ContentModifier.Type, editor: @escaping (SwiftUI.URLDocumentConfiguration) -> Content) where DocumentBoxType : Combine.ObservableObject, DocumentBoxType : SwiftUI.ObservableDocumentBox, ContentModifier : SwiftUI.DocumentBoxViewModifier
  @_spi(SwiftDataDocuments) nonisolated public init<DocumentBoxType, ContentModifier>(viewing contentType: UniformTypeIdentifiers.UTType, newDocument: any SwiftUI.NewDocumentProvider, documentBoxType: DocumentBoxType.Type, contentModifierType: ContentModifier.Type, viewer: @escaping (SwiftUI.URLDocumentConfiguration) -> Content) where DocumentBoxType : Combine.ObservableObject, DocumentBoxType : SwiftUI.ObservableDocumentBox, ContentModifier : SwiftUI.DocumentBoxViewModifier
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup {
  @_spi(SwiftDataDocuments) nonisolated public init<DocumentBoxType, ContentModifier>(editing contentType: UniformTypeIdentifiers.UTType, newDocument: any SwiftUI.NewDocumentProvider, documentBoxType: DocumentBoxType.Type, contentModifierType: ContentModifier.Type, editor: Content) where DocumentBoxType : Combine.ObservableObject, DocumentBoxType : SwiftUI.ObservableDocumentBox, ContentModifier : SwiftUI.DocumentBoxViewModifier
  @_spi(SwiftDataDocuments) nonisolated public init<DocumentBoxType, ContentModifier>(viewing contentType: UniformTypeIdentifiers.UTType, newDocument: any SwiftUI.NewDocumentProvider, documentBoxType: DocumentBoxType.Type, contentModifierType: ContentModifier.Type, viewer: Content) where DocumentBoxType : Combine.ObservableObject, DocumentBoxType : SwiftUI.ObservableDocumentBox, ContentModifier : SwiftUI.DocumentBoxViewModifier
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use EnvironmentValues.isPresented or EnvironmentValues.dismiss")
public struct PresentationMode {
  public var isPresented: Swift.Bool {
    get
  }
  public mutating func dismiss()
}
@available(*, unavailable)
extension SwiftUI.PresentationMode : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use isPresented or dismiss")
  public var presentationMode: SwiftUICore.Binding<SwiftUI.PresentationMode> {
    get
  }
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(UIFrameworks) nonisolated public func presentationMode(isPresented: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) nonisolated public func presentationMode<I>(item: SwiftUICore.Binding<I?>) -> some SwiftUICore.View where I : Swift.Identifiable
  
  #else
  @_spi(UIFrameworks) nonisolated public func presentationMode<I>(item: SwiftUICore.Binding<I?>) -> some SwiftUICore.View where I : Swift.Identifiable
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol PrimitiveButtonStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.PrimitiveButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PrimitiveButtonStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public let role: SwiftUI.ButtonRole?
  public let label: SwiftUI.PrimitiveButtonStyleConfiguration.Label
  public func trigger()
}
@available(*, unavailable)
extension SwiftUI.PrimitiveButtonStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.PrimitiveButtonStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func buttonStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.PrimitiveButtonStyle
  
}
#if compiler(>=5.3) && $NoncopyableGenerics
@_spi(Private) @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public func withBridgedAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, _ body: () throws -> Result) rethrows -> Result
#else
@_spi(Private) @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public func withBridgedAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, _ body: () throws -> Result) rethrows -> Result
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
@_spi(Private) @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public func withBridgedAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, _ body: () throws -> Result, completion: @escaping (Swift.Bool, Swift.Bool) -> Swift.Void) rethrows -> Result
#else
@_spi(Private) @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public func withBridgedAnimation<Result>(_ animation: SwiftUICore.Animation? = .default, _ body: () throws -> Result, completion: @escaping (Swift.Bool, Swift.Bool) -> Swift.Void) rethrows -> Result
#endif
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.AutomaticControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AutomaticControlGroupStyle : SwiftUI.ControlGroupStyle {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 17.0, macOS 12.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26AutomaticControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticControlGroupStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol DragReorderableDelegate {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onDropTargeted(itemProviders: [Foundation.NSItemProvider]) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onItemInserted(at index: Swift.Int, itemProviders: [Foundation.NSItemProvider]) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onDropEnded()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func isReorderingAllowed(at index: Swift.Int) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func hasDragSourceProxy(at index: Swift.Int) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func itemProvider(at index: Swift.Int) -> Foundation.NSItemProvider
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onDragBegan(at index: Swift.Int)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func targetDropDestinationIndex(from sourceIndex: Swift.Int?, destinationIndex: Swift.Int) -> Swift.Int
  #else
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func targetDropDestinationIndex(from sourceIndex: Swift.Int?, destinationIndex: Swift.Int) -> Swift.Int
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onDropUpdated(location: CoreFoundation.CGPoint, sourceIndex: Swift.Int?, destinationIndex: Swift.Int)
  #else
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onDropUpdated(location: CoreFoundation.CGPoint, sourceIndex: Swift.Int?, destinationIndex: Swift.Int)
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onItemMoved(from: Swift.Int, to: Swift.Int) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency func onDragEnded()
}
@_spi(Private) extension SwiftUI.DragReorderableDelegate {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func onDropEnded()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func isReorderingAllowed(at index: Swift.Int) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func hasDragSourceProxy(at index: Swift.Int) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func onDragBegan(at index: Swift.Int)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func targetDropDestinationIndex(from sourceIndex: Swift.Int?, destinationIndex: Swift.Int) -> Swift.Int
  #else
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func targetDropDestinationIndex(from sourceIndex: Swift.Int?, destinationIndex: Swift.Int) -> Swift.Int
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func onDropUpdated(location: CoreFoundation.CGPoint, sourceIndex: Swift.Int?, destinationIndex: Swift.Int)
  #else
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func onDropUpdated(location: CoreFoundation.CGPoint, sourceIndex: Swift.Int?, destinationIndex: Swift.Int)
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func onDragEnded()
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBoxStyle where Self == SwiftUI.DefaultGroupBoxStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultGroupBoxStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultGroupBoxStyle : SwiftUI.GroupBoxStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultGroupBoxStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20DefaultGroupBoxStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultGroupBoxStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func disableGroupBoxPadding(_ disable: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func sectionBackground(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol App {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @_Concurrency.MainActor @preconcurrency init()
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.App {
  @_Concurrency.MainActor @preconcurrency public static func main()
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public func registerAppRootModifier<M>(_ modifier: M) where M : SwiftUICore.ViewModifier
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen public enum FrameResizePosition : Swift.Int8, Swift.CaseIterable {
  case top
  case leading
  case bottom
  case trailing
  case topLeading
  case topTrailing
  case bottomLeading
  case bottomTrailing
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias AllCases = [SwiftUI.FrameResizePosition]
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.FrameResizePosition] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen public enum FrameResizeDirection : Swift.Int8, Swift.CaseIterable {
  case inward
  case outward
  @frozen public struct Set : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
    public typealias Element = SwiftUI.FrameResizeDirection.Set
    public let rawValue: Swift.Int8
    public init(rawValue: Swift.Int8)
    public static let inward: SwiftUI.FrameResizeDirection.Set
    public static let outward: SwiftUI.FrameResizeDirection.Set
    public static let all: SwiftUI.FrameResizeDirection.Set
    public init(_ direction: SwiftUI.FrameResizeDirection)
    @available(macOS 15.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias ArrayLiteralElement = SwiftUI.FrameResizeDirection.Set.Element
    @available(macOS 15.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias RawValue = Swift.Int8
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(rawValue: Swift.Int8)
  #else
  public init?(rawValue: Swift.Int8)
  #endif
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias AllCases = [SwiftUI.FrameResizeDirection]
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias RawValue = Swift.Int8
  public static var allCases: [SwiftUI.FrameResizeDirection] {
    get
  }
  public var rawValue: Swift.Int8 {
    get
  }
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 13.0, message: "use .contextAction on List or Table instead")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDoubleClick(action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Text {
  @_spi(Private) public struct Measurements : SwiftUICore.DynamicProperty {
    @_spi(Private) public init()
    @_spi(Private) @_disfavoredOverload public func size(of text: SwiftUICore.Text, in size: CoreFoundation.CGSize = CGSize(
            width: CGFloat.infinity, height: CGFloat.infinity)) -> CoreFoundation.CGSize
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public func size(of text: SwiftUICore.Text, in size: CoreFoundation.CGSize = CGSize(
                width: CGFloat.infinity, height: CGFloat.infinity), writingMode: SwiftUICore.Text.WritingMode? = nil) -> CoreFoundation.CGSize
    #else
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public func size(of text: SwiftUICore.Text, in size: CoreFoundation.CGSize = CGSize(
                width: CGFloat.infinity, height: CGFloat.infinity), writingMode: SwiftUICore.Text.WritingMode? = nil) -> CoreFoundation.CGSize
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public func numberOfLines(of text: SwiftUICore.Text, in size: CoreFoundation.CGSize = CGSize(width: CGFloat.infinity, height: CGFloat.infinity), writingMode: SwiftUICore.Text.WritingMode? = nil) -> Swift.UInt
    #else
    @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
    public func numberOfLines(of text: SwiftUICore.Text, in size: CoreFoundation.CGSize = CGSize(width: CGFloat.infinity, height: CGFloat.infinity), writingMode: SwiftUICore.Text.WritingMode? = nil) -> Swift.UInt
    #endif
    @_spi(Private) public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUICore.Text.Measurements : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @propertyWrapper public struct FocusState<Value> : SwiftUICore.DynamicProperty where Value : Swift.Hashable {
  @frozen @propertyWrapper public struct Binding {
    private var _binding: SwiftUICore.Binding<Value>
    public var wrappedValue: Value {
      get
      nonmutating set
    }
    public var projectedValue: SwiftUI.FocusState<Value>.Binding {
      get
    }
  }
  internal var value: Value
  internal var location: SwiftUICore.AnyLocation<Value>?
  internal var resetValue: Value
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.FocusState<Value>.Binding {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public init() where Value == Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<T>() where Value == T?, T : Swift.Hashable
  #else
  public init<T>() where Value == T?, T : Swift.Hashable
  #endif
}
@available(*, unavailable)
extension SwiftUI.FocusState : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusState.Binding : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func focused<Value>(_ binding: SwiftUI.FocusState<Value>.Binding, equals value: Value) -> some SwiftUICore.View where Value : Swift.Hashable
  
  nonisolated public func focused(_ condition: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func offset(_ offset: CoreFoundation.CGSize) -> some SwiftUICore.VisualEffect
  
  public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func offset(_ offset: CoreFoundation.CGSize) -> some SwiftUICore.HoverEffectContent
  
  public func offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.HoverEffectContent
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(CustomHoverEffects) public func _offset(_ offset: CoreFoundation.CGSize) -> some SwiftUICore.HoverEffectContent
  
  @_spi(CustomHoverEffects) public func _offset(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.HoverEffectContent
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onModifierKeysChanged(mask: SwiftUICore.EventModifiers = .all, initial: Swift.Bool = true, _ action: @escaping (_ old: SwiftUICore.EventModifiers, _ new: SwiftUICore.EventModifiers) -> Swift.Void) -> some SwiftUICore.View
  
}
@_spi(_) @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public func _onModifierKeysChanged(mask: SwiftUICore.EventModifiers = .all, initial: Swift.Bool = true, _ action: @escaping (_ old: SwiftUICore.EventModifiers, _ new: SwiftUICore.EventModifiers) -> Swift.Void) -> some SwiftUICore.View
  
}
@_spi(_) @available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EventModifiers {
  @_spi(_) public static var current: SwiftUICore.EventModifiers {
    @_spi(_) get
  }
  @_spi(_) public static func values(mask: SwiftUICore.EventModifiers = .all, initial: Swift.Bool = true) -> SwiftUICore.EventModifiers.AsyncValues
  @_spi(_) public struct AsyncValues : _Concurrency.AsyncSequence {
    @_spi(_) public typealias AsyncIterator = SwiftUICore.EventModifiers.AsyncValues.Iterator
    @_spi(_) public typealias Element = SwiftUICore.EventModifiers
    @_spi(_) public func makeAsyncIterator() -> SwiftUICore.EventModifiers.AsyncValues.Iterator
    @_spi(_) public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      @_spi(_) public typealias Element = SwiftUICore.EventModifiers
      #if compiler(>=5.3) && $NoncopyableGenerics
      @_spi(_) public mutating func next() async -> SwiftUICore.EventModifiers?
      #else
      @_spi(_) public mutating func next() async -> SwiftUICore.EventModifiers?
      #endif
      #if compiler(>=5.3) && $AssociatedTypeImplements
      @_spi(_) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
      #else
      @_spi(_) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      public typealias __AsyncIteratorProtocol_Failure = Swift.Never
      #endif
    }
    #if compiler(>=5.3) && $AssociatedTypeImplements
    @_spi(_) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
    #else
    @_spi(_) @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    public typealias __AsyncSequence_Failure = Swift.Never
    #endif
  }
}
@_spi(_) @available(*, unavailable)
extension SwiftUICore.EventModifiers.AsyncValues : Swift.Sendable {
}
@_spi(_) @available(*, unavailable)
extension SwiftUICore.EventModifiers.AsyncValues.Iterator : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _PositionLayout : SwiftUICore.UnaryLayout {
  @_Concurrency.MainActor @preconcurrency public var position: CoreFoundation.CGPoint
  @inlinable @_Concurrency.MainActor @preconcurrency public init(position: CoreFoundation.CGPoint) {
        self.position = position
    }
  @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
  @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency package func spacing(in context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> SwiftUICore.Spacing
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias PlacementContextType = SwiftUICore.PlacementContext
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func position(_ position: CoreFoundation.CGPoint) -> some SwiftUICore.View {
        return modifier(_PositionLayout(position: position))
    }
  
  @inlinable nonisolated public func position(x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View {
        return position(CGPoint(x: x, y: y))
    }
  
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AutomaticTextEditorStyle : SwiftUI.TextEditorStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticTextEditorStyle.Configuration) -> SwiftUI.AutomaticTextEditorStyle.Body
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public struct Body : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
    @_spi_available(tvOS, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24AutomaticTextEditorStyleV4BodyV4bodyQrvp", 0) __
  }
}
@available(*, unavailable)
extension SwiftUI.AutomaticTextEditorStyle : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.AutomaticTextEditorStyle.Body : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
extension SwiftUI.TextEditorStyle where Self == SwiftUI.AutomaticTextEditorStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticTextEditorStyle {
    get { .init() }
  }
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) nonisolated public func windowFocusability(_ focusability: SwiftUI.WindowFocusability) -> some SwiftUI.Scene
  
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct WindowFocusability : Swift.Sendable {
  @_spi(DoNotImport) public static let automatic: SwiftUI.WindowFocusability
  @_spi(DoNotImport) public static let always: SwiftUI.WindowFocusability
  @_spi(DoNotImport) public static let never: SwiftUI.WindowFocusability
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ControlWidget_V1 {
  @_spi(SSC) init()
  associatedtype Body : SwiftUI.ControlWidgetConfiguration_V1
  @_spi(SSC) @SwiftUI.ControlWidgetConfigurationBuilder_V1 var body: Self.Body { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.TimelineSchedule where Self == SwiftUI.AnimationTimelineSchedule {
  @_alwaysEmitIntoClient public static var animation: SwiftUI.AnimationTimelineSchedule {
    get { .init() }
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func animation(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false) -> SwiftUI.AnimationTimelineSchedule {
        .init(minimumInterval: minimumInterval, paused: paused)
    }
  #else
  @_alwaysEmitIntoClient public static func animation(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false) -> SwiftUI.AnimationTimelineSchedule {
        .init(minimumInterval: minimumInterval, paused: paused)
    }
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AnimationTimelineSchedule : SwiftUICore.TimelineSchedule, Swift.Sendable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false)
  #else
  public init(minimumInterval: Swift.Double? = nil, paused: Swift.Bool = false)
  #endif
  public func entries(from start: Foundation.Date, mode: SwiftUICore.TimelineScheduleMode) -> SwiftUI.AnimationTimelineSchedule.Entries
  public struct Entries : Swift.Sequence, Swift.IteratorProtocol, Swift.Sendable {
    #if compiler(>=5.3) && $NoncopyableGenerics
    public mutating func next() -> Foundation.Date?
    #else
    public mutating func next() -> Foundation.Date?
    #endif
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Foundation.Date
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = SwiftUI.AnimationTimelineSchedule.Entries
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.PlainButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var plain: SwiftUI.PlainButtonStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct PlainButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.PlainButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16PlainButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PlainButtonStyle : Swift.Sendable {
}
@_spi(UIFrameworks) extension SwiftUI.PlainButtonStyle : SwiftUI.ButtonStyleConvertible {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var buttonStyleRepresentation: some SwiftUI.ButtonStyle {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ButtonStyleRepresentation = @_opaqueReturnTypeOf("$s7SwiftUI16PlainButtonStyleV06buttonE14RepresentationQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup where ID == Data.Element.ID, Parent : SwiftUI.TableRowContent, Parent == Leaf, Leaf == Subgroup, Data.Element == Parent.TableRowValue {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>) where ID == DataElement.ID, Parent == SwiftUI.TableRow<DataElement>, Leaf == SwiftUI.TableRow<DataElement>, Subgroup == SwiftUI.TableRow<DataElement>, DataElement : Swift.Identifiable, DataElement == Data.Element
  #else
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>) where ID == DataElement.ID, Parent == SwiftUI.TableRow<DataElement>, Leaf == SwiftUI.TableRow<DataElement>, Subgroup == SwiftUI.TableRow<DataElement>, DataElement : Swift.Identifiable, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>) where ID == DataElement.ID, Parent == SwiftUI.TableRow<DataElement>, Leaf == SwiftUI.TableRow<DataElement>, Subgroup == SwiftUI.TableRow<DataElement>, DataElement : Swift.Identifiable, DataElement == Data.Element
  #else
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>) where ID == DataElement.ID, Parent == SwiftUI.TableRow<DataElement>, Leaf == SwiftUI.TableRow<DataElement>, Subgroup == SwiftUI.TableRow<DataElement>, DataElement : Swift.Identifiable, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  public init<DataElement>(_ root: DataElement, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, children: Swift.KeyPath<DataElement, Data?>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Testing) public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  @_spi(Testing) public init<DataElement>(_ data: Data, children: Swift.KeyPath<DataElement, Data?>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Testing) public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  @_spi(Testing) public init<DataElement>(_ root: DataElement, children: Swift.KeyPath<DataElement, Data?>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, childrenGetter: @escaping (Data.Element) -> Data?, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  @_spi(Private) public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, childrenGetter: @escaping (Data.Element) -> Data?, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, childrenGetter: @escaping (Data.Element) -> Data?, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #else
  @_spi(Private) public init<DataElement>(_ data: Data, id: Swift.KeyPath<DataElement, ID>, expandedElements: SwiftUICore.Binding<Swift.Set<ID>>, childrenGetter: @escaping (Data.Element) -> Data?, @SwiftUI.TableRowBuilder<DataElement> content: @escaping (DataElement) -> Leaf) where ID == DataElement.ID, DataElement == Data.Element
  #endif
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OutlineGroup : SwiftUI.TableRowContent where ID == Data.Element.ID, Parent : SwiftUI.TableRowContent, Parent == Leaf, Leaf == Subgroup, Data.Element == Parent.TableRowValue {
  public typealias TableRowValue = Leaf.TableRowValue
  public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI12OutlineGroupVAA7ElementST_2IDs12IdentifiablePQZRs_AA15TableRowContentR0_q1_Rs0_q2_Rs1_0hI5ValueAaIPQy0_ADSTRtzrlE05tableI4BodyQrvp", 0) __<Data, ID, Parent, Parent, Parent>
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onNavigationSplitViewExpand_v1(action: @escaping (_ proposed: SwiftUI.NavigationSplitViewVisibility) -> SwiftUI.NavigationSplitViewVisibility?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onNavigationSplitViewExpand_v1(action: @escaping (_ proposed: SwiftUI.NavigationSplitViewVisibility) -> SwiftUI.NavigationSplitViewVisibility?) -> some SwiftUICore.View
  
  #endif
  @_spi(Private) nonisolated public func onNavigation_v1(action: @escaping (_ event: SwiftUI.NavigationUpdateEvent) -> Swift.Void) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func navigationSplitViewCompactColumn_v1(_ column: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct NavigationUpdateEvent {
  @_spi(Private) public var action: SwiftUI.NavigationUpdateEvent.Action
  @_spi(Private) public var column: SwiftUI.NavigationSplitViewColumn?
  @_spi(Private) public enum Action {
    @_spi(Private) case pop(k: Swift.Int)
    @_spi(Private) case present(value: any Swift.Hashable)
    @_spi(Private) case presentCodable(value: any Swift.Hashable & Swift.Codable)
    @_spi(Private) case presentInList(value: any Swift.Hashable)
    @_spi(Private) case listSelectionChanged
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationUpdateEvent : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationUpdateEvent.Action : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SubmitLabel : Swift.Sendable {
  public static var done: SwiftUI.SubmitLabel {
    get
  }
  public static var go: SwiftUI.SubmitLabel {
    get
  }
  public static var send: SwiftUI.SubmitLabel {
    get
  }
  public static var join: SwiftUI.SubmitLabel {
    get
  }
  public static var route: SwiftUI.SubmitLabel {
    get
  }
  public static var search: SwiftUI.SubmitLabel {
    get
  }
  public static var `return`: SwiftUI.SubmitLabel {
    get
  }
  public static var next: SwiftUI.SubmitLabel {
    get
  }
  public static var `continue`: SwiftUI.SubmitLabel {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func submitLabel(_ submitLabel: SwiftUI.SubmitLabel) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @available(*, deprecated, message: "Use View.submitLabel(_:)")
  nonisolated public func returnKey(_ returnKeyType: UIKit.UIReturnKeyType) -> some SwiftUICore.View
  
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AnimatedValueKeyframeInterpolation {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueKeyframeInterpolation {
  @_spi(DoNotImport) public static let linear: SwiftUI.AnimatedValueKeyframeInterpolation
  @_spi(DoNotImport) public static let cubic: SwiftUI.AnimatedValueKeyframeInterpolation
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValueKeyframeInterpolation : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol NavigationTransition {
  func _outputs(for inputs: SwiftUI._NavigationTransitionInputs) -> SwiftUI._NavigationTransitionOutputs
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _NavigationTransitionInputs : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _NavigationTransitionOutputs : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func navigationTransition(_ style: some NavigationTransition) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AutomaticNavigationTransition : SwiftUI.NavigationTransition {
  public func _outputs(for inputs: SwiftUI._NavigationTransitionInputs) -> SwiftUI._NavigationTransitionOutputs
}
@available(*, unavailable)
extension SwiftUI.AutomaticNavigationTransition : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.NavigationTransition where Self == SwiftUI.AutomaticNavigationTransition {
  public static var automatic: SwiftUI.AutomaticNavigationTransition {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@available(macOS, unavailable)
public struct ZoomNavigationTransition : SwiftUI.NavigationTransition {
  public func _outputs(for inputs: SwiftUI._NavigationTransitionInputs) -> SwiftUI._NavigationTransitionOutputs
}
@available(*, unavailable)
extension SwiftUI.ZoomNavigationTransition : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationTransition where Self == SwiftUI.ZoomNavigationTransition {
  public static func zoom(sourceID: some Hashable, in namespace: SwiftUICore.Namespace.ID) -> SwiftUI.ZoomNavigationTransition
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct Divider : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView {
  nonisolated public init()
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.Divider>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.Divider : Swift.Sendable {
}
package protocol PlatformDividerRepresentable {
  static func shouldMakeRepresentation(inputs: SwiftUICore._ViewInputs) -> Swift.Bool
  static func makeRepresentation(inputs: SwiftUICore._ViewInputs, outputs: inout SwiftUICore._ViewOutputs)
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedDividerRepresentation: (any SwiftUI.PlatformDividerRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedDividerRepresentation: (any SwiftUI.PlatformDividerRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedDividerRepresentation: (any SwiftUI.PlatformDividerRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedDividerRepresentation: (any SwiftUI.PlatformDividerRepresentable.Type)? {
    get
    set
  }
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.ButtonMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var button: SwiftUI.ButtonMenuStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ButtonMenuStyle : SwiftUI.MenuStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 17.0, macOS 13.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ButtonMenuStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ButtonMenuStyle : Swift.Sendable {
}
@available(tvOS 16.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func onLongTouchGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onTouchingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  nonisolated public func onLongTouchGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onTouchingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarCustomizationBehavior : Swift.Sendable {
  public static var `default`: SwiftUI.ToolbarCustomizationBehavior {
    get
  }
  public static var reorderable: SwiftUI.ToolbarCustomizationBehavior {
    get
  }
  public static var disabled: SwiftUI.ToolbarCustomizationBehavior {
    get
  }
}
extension SwiftUI.CustomizableToolbarContent {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func customizationBehavior(_ behavior: SwiftUI.ToolbarCustomizationBehavior) -> some SwiftUI.CustomizableToolbarContent
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct PushWindowAction {
  @_Concurrency.MainActor public func callAsFunction<D>(value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_Concurrency.MainActor public func callAsFunction(id: Swift.String)
  @_Concurrency.MainActor public func callAsFunction<D>(id: Swift.String, value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var pushWindow: SwiftUI.PushWindowAction {
    get
  }
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(Private) nonisolated public func defaultVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultLaunchBehavior(_ behavior: SwiftUI.SceneLaunchBehavior) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
public struct SceneLaunchBehavior : Swift.Sendable {
  public static let automatic: SwiftUI.SceneLaunchBehavior
  public static let presented: SwiftUI.SceneLaunchBehavior
  public static let suppressed: SwiftUI.SceneLaunchBehavior
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) @available(*, deprecated, renamed: "defaultLaunchBehavior(_:)")
  nonisolated public func defaultPresentationBehavior(_ behavior: SwiftUI.WindowPresentationBehavior) -> some SwiftUI.Scene
  
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "SceneLaunchBehavior")
public struct WindowPresentationBehavior : Swift.Sendable {
  @_spi(DoNotImport) public static var automatic: SwiftUI.WindowPresentationBehavior {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) public static var closed: SwiftUI.WindowPresentationBehavior {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) public static var opened: SwiftUI.WindowPresentationBehavior {
    @_spi(DoNotImport) get
  }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct TextFieldLink<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(watchOS 9.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13TextFieldLinkV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.TextFieldLink : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TextFieldLink {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label, onSubmit: @escaping (Swift.String) -> Swift.Void)
  #else
  nonisolated public init(prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label, onSubmit: @escaping (Swift.String) -> Swift.Void)
  #endif
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TextFieldLink where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, prompt: SwiftUICore.Text? = nil, onSubmit: @escaping (Swift.String) -> Swift.Void)
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, prompt: SwiftUICore.Text? = nil, onSubmit: @escaping (Swift.String) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, prompt: SwiftUICore.Text? = nil, onSubmit: @escaping (Swift.String) -> Swift.Void) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, prompt: SwiftUICore.Text? = nil, onSubmit: @escaping (Swift.String) -> Swift.Void) where S : Swift.StringProtocol
  #endif
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func defaultWindowPlacement(_ makePlacement: @escaping (_ content: SwiftUI.WindowLayoutRoot, _ context: SwiftUI.WindowPlacementContext) -> SwiftUI.WindowPlacement) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func windowIdealPlacement(_ makePlacement: @escaping (_ content: SwiftUI.WindowLayoutRoot, _ context: SwiftUI.WindowPlacementContext) -> SwiftUI.WindowPlacement) -> some SwiftUI.Scene
  
  nonisolated public func windowIdealSize(_ idealSize: SwiftUI.WindowIdealSize) -> some SwiftUI.Scene
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
public struct WindowIdealSize : Swift.Sendable {
  public static let automatic: SwiftUI.WindowIdealSize
  public static let fitToContent: SwiftUI.WindowIdealSize
  public static let maximum: SwiftUI.WindowIdealSize
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) @available(*, deprecated, message: "Use the modifier which takes a `WindowLayoutRoot` instead.")
  @_disfavoredOverload nonisolated public func defaultWindowPlacement(_ makePlacement: @escaping (_ content: SwiftUI.WindowLayoutRootView, _ context: SwiftUI.WindowPlacementContext) -> SwiftUI.WindowPlacement) -> some SwiftUI.Scene
  
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) @available(*, deprecated, renamed: "windowIdealPlacement(_:)")
  nonisolated public func idealWindowPlacement(_ makePlacement: @escaping (_ content: SwiftUI.WindowLayoutRootView, _ context: SwiftUI.WindowPlacementContext) -> SwiftUI.WindowPlacement) -> some SwiftUI.Scene
  
  @_spi(DoNotImport) @available(*, deprecated, renamed: "windowIdealSize(_:)")
  nonisolated public func contentDefinesIdealSize() -> some SwiftUI.Scene
  
  @_spi(DoNotImport) @available(*, deprecated, renamed: "windowIdealSize(_:)")
  nonisolated public func contentDefinesIdealSize(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUI.Scene
  
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilHoverPose : Swift.Hashable {
  public let location: CoreFoundation.CGPoint
  public let anchor: SwiftUICore.UnitPoint
  public let zDistance: CoreFoundation.CGFloat
  public let altitude: SwiftUICore.Angle
  public let azimuth: SwiftUICore.Angle
  public let roll: SwiftUICore.Angle
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.PencilHoverPose, b: SwiftUI.PencilHoverPose) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilHoverPose : Swift.Sendable {
}
@available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
@_spi_available(tvOS, introduced: 17.0)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct LimitedAvailabilityWidget : SwiftUI.Widget, SwiftUI._LimitedAvailabilityWidgetMarker {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var configuration: SwiftUI.LimitedAvailabilityConfiguration
  nonisolated public init()
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init<W>(_ widget: W) where W : SwiftUI.Widget
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 16.1, watchOS 9.1, macOS 13.0, *)
  @usableFromInline
  @_spi_available(tvOS, introduced: 17.0)
  internal typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25LimitedAvailabilityWidgetV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityWidget : Swift.Sendable {
}
@available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
@_spi_available(tvOS, introduced: 17.0)
@frozen @_Concurrency.MainActor @preconcurrency public struct LimitedAvailabilityConfiguration : SwiftUI.WidgetConfiguration {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var storage: SwiftUI.LimitedAvailabilityConfigurationBase
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init<W>(_ configuration: W) where W : SwiftUI.WidgetConfiguration
  nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityConfiguration>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @available(iOS 16.1, watchOS 9.1, macOS 13.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityConfiguration : Swift.Sendable {
}
@_hasMissingDesignatedInitializers @available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
@_spi_available(tvOS, introduced: 17.0)
@usableFromInline
internal class LimitedAvailabilityConfigurationBase {
  @objc @usableFromInline
  deinit
}
@available(*, unavailable)
extension SwiftUI.LimitedAvailabilityConfigurationBase : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func allowsGaugeResizing(_ enabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func badge(_ count: Swift.Int) -> some SwiftUI.TabContent<Self.TabValue>
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUI.TabContent<Self.TabValue>
  
  #else
  nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUI.TabContent<Self.TabValue>
  
  #endif
  nonisolated public func badge(_ key: SwiftUICore.LocalizedStringKey) -> some SwiftUI.TabContent<Self.TabValue>
  
  @_disfavoredOverload nonisolated public func badge<S>(_ label: S) -> some SwiftUI.TabContent<Self.TabValue> where S : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func refreshable(@_inheritActorContext action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var refresh: SwiftUI.RefreshAction? {
    get
  }
  #else
  public var refresh: SwiftUI.RefreshAction? {
    get
  }
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct RefreshAction : Swift.Sendable {
  public func callAsFunction() async
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ImmersiveSpaceContent {
  associatedtype Body : SwiftUI.ImmersiveSpaceContent
  @SwiftUI.ImmersiveSpaceContentBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct ImmersiveSpaceContentBuilder {
  public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.ImmersiveSpaceContent
}
@available(*, unavailable)
extension SwiftUI.ImmersiveSpaceContentBuilder : Swift.Sendable {
}
@_spi(Compositor) @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol PrimitiveImmersiveSpaceContent {
  @_spi(Compositor) func _makeView() -> SwiftUICore.AnyView
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.ImmersiveSpaceContent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationSplitViewStyle where Self == SwiftUI.ProminentDetailNavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var prominentDetail: SwiftUI.ProminentDetailNavigationSplitViewStyle {
    get
  }
  @_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  @_Concurrency.MainActor @preconcurrency public static var independent: SwiftUI.ProminentDetailNavigationSplitViewStyle {
    get
  }
}
@_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
public typealias IndependentNavigationSplitStyle = SwiftUI.ProminentDetailNavigationSplitViewStyle
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct ProminentDetailNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ProminentDetailNavigationSplitViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI39ProminentDetailNavigationSplitViewStyleV8makeBody13configurationQrAA0efgH13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.ProminentDetailNavigationSplitViewStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SearchFieldPlacement : Swift.Sendable {
  public static let automatic: SwiftUI.SearchFieldPlacement
  @available(tvOS, unavailable)
  public static let toolbar: SwiftUI.SearchFieldPlacement
  @_spi(Private) @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var toolbarPrincipal: SwiftUI.SearchFieldPlacement
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let sidebar: SwiftUI.SearchFieldPlacement
  @available(iOS 15.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static let navigationBarDrawer: SwiftUI.SearchFieldPlacement
  @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func navigationBarDrawer(displayMode: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SwiftUI.SearchFieldPlacement
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SearchFieldPlacement {
  @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct NavigationBarDrawerDisplayMode : Swift.Sendable {
    public static let automatic: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode
    public static let always: SwiftUI.SearchFieldPlacement.NavigationBarDrawerDisplayMode
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ProjectionEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var transform: SwiftUICore.ProjectionTransform
  @inlinable @_Concurrency.MainActor @preconcurrency public init(transform: SwiftUICore.ProjectionTransform) {
        self.transform = transform
    }
  @_Concurrency.MainActor @preconcurrency public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  nonisolated public static func == (a: SwiftUI._ProjectionEffect, b: SwiftUI._ProjectionEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func projectionEffect(_ transform: SwiftUICore.ProjectionTransform) -> some SwiftUICore.View {
        return modifier(_ProjectionEffect(transform: transform))
    }
  
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct SettingsLink<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  nonisolated public init() where Label == SwiftUI.DefaultSettingsLinkLabel
  nonisolated public init(@SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 14.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12SettingsLinkV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.SettingsLink : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultSettingsLinkLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 14.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultSettingsLinkLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultSettingsLinkLabel : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TransformEffect : SwiftUICore.GeometryEffect, Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var transform: CoreFoundation.CGAffineTransform
  @inlinable @_Concurrency.MainActor @preconcurrency public init(transform: CoreFoundation.CGAffineTransform) {
        self.transform = transform
    }
  @_Concurrency.MainActor @preconcurrency public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  nonisolated public static func == (a: SwiftUI._TransformEffect, b: SwiftUI._TransformEffect) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformEffect(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.View {
        return modifier(_TransformEffect(transform: transform))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func transformEffect(_ transform: SwiftUICore.ProjectionTransform) -> some SwiftUICore.VisualEffect
  
  public func transformEffect(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.VisualEffect
  
}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(*, deprecated, message: "Use transformEffect instead")
extension SwiftUICore.VisualEffect {
  @_spi(_) public func transform(_ transform: SwiftUICore.ProjectionTransform) -> some SwiftUICore.VisualEffect
  
  @_spi(_) public func transform(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func transformEffect(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.HoverEffectContent
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(CustomHoverEffects) public func _transformEffect(_ transform: CoreFoundation.CGAffineTransform) -> some SwiftUICore.HoverEffectContent
  
}
@_spi(_) @available(iOS, introduced: 15.0, deprecated: 15.0, message: "onFocus(_:) will be removed from a future update. Use FocusState<T> and View.focused(_:equals:) to update view state as focus changes. Use View.onChange(_:) to perform focus-related side-effects.")
@available(macOS, introduced: 12.0, deprecated: 12.0, message: "onFocus(_:) will be removed from a future update. Use FocusState<T> and View.focused(_:equals:) to update view state as focus changes. Use View.onChange(_:) to perform focus-related side-effects.")
@available(tvOS, introduced: 15.0, deprecated: 15.0, message: "onFocus(_:) will be removed from a future update. Use FocusState<T> and View.focused(_:equals:) to update view state as focus changes. Use View.onChange(_:) to perform focus-related side-effects.")
@available(watchOS, introduced: 8.0, deprecated: 8.0, message: "onFocus(_:) will be removed from a future update. Use FocusState<T> and View.focused(_:equals:) to update view state as focus changes. Use View.onChange(_:) to perform focus-related side-effects.")
extension SwiftUICore.View {
  @_spi(_) nonisolated public func onFocus(_ action: @escaping (_ isFocused: Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
extension UIKit.UIView {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public static func animate(with animation: SwiftUICore.Animation = Animation.default, changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public static func animate(with animation: SwiftUICore.Animation = Animation.default, changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  #endif
}
@_spi(UnifiedAnimation) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension UIKit.UIView {
  @_spi(UnifiedAnimation) @_Concurrency.MainActor @preconcurrency public static func animate(_ animation: SwiftUICore.Animation = Animation.default, animations: @escaping () -> Swift.Void, completion: @escaping (UIKit.UIView.AnimationResult) -> Swift.Void = { _ in })
  @_spi(UnifiedAnimation) @frozen public enum AnimationResult : Swift.Sendable, Swift.Equatable {
    @_spi(UnifiedAnimation) case cancelled
    @_spi(UnifiedAnimation) case retargeted
    @_spi(UnifiedAnimation) case finished
    @_spi(UnifiedAnimation) public func hash(into hasher: inout Swift.Hasher)
    @_spi(UnifiedAnimation) public static func == (a: UIKit.UIView.AnimationResult, b: UIKitCore.UIView.AnimationResult) -> Swift.Bool
    @_spi(UnifiedAnimation) public var hashValue: Swift.Int {
      @_spi(UnifiedAnimation) get
    }
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func hoverEffect(_ effect: some CustomHoverEffect = .automatic, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup?, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  #else
  nonisolated public func hoverEffect(_ effect: some CustomHoverEffect, in group: SwiftUI.HoverEffectGroup?, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  #endif
}
@_spi(CustomHoverEffects) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(CustomHoverEffects) @_disfavoredOverload nonisolated public func hoverEffect(_ effect: some CustomHoverEffect = AutomaticHoverEffect()) -> some SwiftUICore.View
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(CustomHoverEffects) nonisolated public func hoverEffect(_ effect: (SwiftUICore.EmptyHoverEffect) -> some CustomHoverEffect) -> some SwiftUICore.View
  
  @_spi(CustomHoverEffects) nonisolated public func hoverEffect(isEnabled: Swift.Bool, effect: (SwiftUICore.EmptyHoverEffect) -> some CustomHoverEffect) -> some SwiftUICore.View
  
}
@available(iOS 13.4, tvOS 16.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @available(iOS 13.4, tvOS 16.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func hoverEffect(_ effect: SwiftUI.HoverEffect = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 17.0, tvOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_disfavoredOverload nonisolated public func hoverEffect(_ effect: SwiftUI.HoverEffect = .automatic, isEnabled: Swift.Bool = true) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func defaultHoverEffect(_ effect: SwiftUI.HoverEffect?) -> some SwiftUICore.View
  
  #else
  nonisolated public func defaultHoverEffect(_ effect: SwiftUI.HoverEffect?) -> some SwiftUICore.View
  
  #endif
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func defaultHoverEffect(_ effect: some CustomHoverEffect) -> some SwiftUICore.View
  
  nonisolated public func hoverEffectDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.View
  
  #else
  nonisolated public func hoverEffect(in group: SwiftUI.HoverEffectGroup? = nil, isEnabled: Swift.Bool = true, body: @escaping (SwiftUICore.EmptyHoverEffectContent, Swift.Bool, SwiftUICore.GeometryProxy) -> some HoverEffectContent) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 13.4, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct HoverEffect {
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init<E>(_ effect: E) where E : SwiftUICore.CustomHoverEffect
  public static let automatic: SwiftUI.HoverEffect
  @available(tvOS 17.0, *)
  public static let highlight: SwiftUI.HoverEffect
  public static let lift: SwiftUI.HoverEffect
}
@available(*, unavailable)
extension SwiftUI.HoverEffect : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.HoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.PrimitiveCustomHoverEffect {
  public static func _makeCustomHoverEffect(effect: SwiftUICore._GraphValue<SwiftUI.HoverEffect>, inputs: SwiftUICore._CustomHoverEffectInputs, body: @escaping (SwiftUICore._CustomHoverEffectInputs) -> SwiftUICore._CustomHoverEffectOutputs) -> SwiftUICore._CustomHoverEffectOutputs
  package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    get
  }
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@available(iOS 17.0, tvOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var isHoverEffectEnabled: Swift.Bool {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var defaultHoverEffect: SwiftUI.HoverEffect? {
    get
    set
  }
  #else
  @_spi(Private) public var defaultHoverEffect: SwiftUI.HoverEffect? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func repeatingRotationEffect(anchor: SwiftUICore.UnitPoint = .center, duration: Swift.Double = 1.0) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func repeatingRotationEffect(from: SwiftUICore.Angle, to: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center, animation: SwiftUICore.Animation = .linear(duration: 1.0)) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func rotationEffect(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(*, deprecated, message: "Use rotationEffect instead")
extension SwiftUICore.VisualEffect {
  @_spi(_) public func rotation(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func rotationEffect(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(CustomHoverEffects) public func _rotationEffect(_ angle: SwiftUICore.Angle, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.AccessoryBarButtonStyle {
  @_Concurrency.MainActor @preconcurrency public static var accessoryBar: SwiftUI.AccessoryBarButtonStyle {
    get
  }
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryBarButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryBarButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 14.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23AccessoryBarButtonStyleV8makeBody13configurationQrAA09PrimitiveeF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryBarButtonStyle : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.AccessoryBarActionButtonStyle {
  @_Concurrency.MainActor @preconcurrency public static var accessoryBarAction: SwiftUI.AccessoryBarActionButtonStyle {
    get
  }
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryBarActionButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryBarActionButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 14.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI29AccessoryBarActionButtonStyleV8makeBody13configurationQrAA09PrimitivefG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryBarActionButtonStyle : Swift.Sendable {
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ResizeHoverEffect : SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public init<InactiveShape, ActiveShape>(from inactiveShape: InactiveShape, to activeShape: ActiveShape = Rectangle(), anchor: SwiftUICore.UnitPoint? = nil) where InactiveShape : SwiftUICore.Shape, ActiveShape : SwiftUICore.Shape
  #else
  @_spi(CustomHoverEffects) public init<InactiveShape, ActiveShape>(from inactiveShape: InactiveShape, to activeShape: ActiveShape = Rectangle(), anchor: SwiftUICore.UnitPoint? = nil) where InactiveShape : SwiftUICore.Shape, ActiveShape : SwiftUICore.Shape
  #endif
  @_spi(CustomHoverEffects) public func body(content: SwiftUI.ResizeHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
  @available(iOS, unavailable, introduced: 18.0)
  @available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17ResizeHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@_spi(CustomHoverEffects) @available(*, unavailable)
extension SwiftUI.ResizeHoverEffect : Swift.Sendable {
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.ResizeHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public static func resize<InactiveShape, ActiveShape>(from inactiveShape: InactiveShape, to activeShape: ActiveShape = Rectangle(), anchor: SwiftUICore.UnitPoint? = nil) -> SwiftUI.ResizeHoverEffect where InactiveShape : SwiftUICore.Shape, ActiveShape : SwiftUICore.Shape
  #else
  @_spi(CustomHoverEffects) public static func resize<InactiveShape, ActiveShape>(from inactiveShape: InactiveShape, to activeShape: ActiveShape = Rectangle(), anchor: SwiftUICore.UnitPoint? = nil) -> SwiftUI.ResizeHoverEffect where InactiveShape : SwiftUICore.Shape, ActiveShape : SwiftUICore.Shape
  #endif
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func resize<IS, AS>(from inactiveShape: IS, to activeShape: AS = Rectangle(), anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.CustomHoverEffect where IS : SwiftUICore.Shape, AS : SwiftUICore.Shape
  
  #else
  @_spi(CustomHoverEffects) public func resize<IS, AS>(from inactiveShape: IS, to activeShape: AS = Rectangle(), anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.CustomHoverEffect where IS : SwiftUICore.Shape, AS : SwiftUICore.Shape
  
  #endif
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func resizeShape(_ shape: some Shape) -> some SwiftUICore.HoverEffectContent
  
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func _resizeShape(_ shape: some Shape) -> some SwiftUICore.HoverEffectContent
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func repeatingScaleEffect(from: CoreFoundation.CGFloat, to: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center, animation: SwiftUICore.Animation = Animation.default) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func repeatingScaleEffect(from: CoreFoundation.CGSize, to: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center, animation: SwiftUICore.Animation = Animation.default) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func scaleEffect(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
  public func scaleEffect(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
  public func scaleEffect(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(*, deprecated, message: "Use scaleEffect instead")
extension SwiftUICore.VisualEffect {
  @_spi(_) public func scale(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
  @_spi(_) public func scale(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
  @_spi(_) public func scale(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func scaleEffect(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
  public func scaleEffect(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
  public func scaleEffect(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(CustomHoverEffects) public func _scaleEffect(_ scale: CoreFoundation.CGSize, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
  @_spi(CustomHoverEffects) public func _scaleEffect(_ scale: CoreFoundation.CGFloat, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
  @_spi(CustomHoverEffects) public func _scaleEffect(x: CoreFoundation.CGFloat = 1.0, y: CoreFoundation.CGFloat = 1.0, anchor: SwiftUICore.UnitPoint = .center) -> some SwiftUICore.HoverEffectContent
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ButtonRole : Swift.Equatable, Swift.Sendable {
  public static let destructive: SwiftUI.ButtonRole
  public static let cancel: SwiftUI.ButtonRole
  public static func == (a: SwiftUI.ButtonRole, b: SwiftUI.ButtonRole) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func blur(radius: CoreFoundation.CGFloat, opaque: Swift.Bool = false) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func brightness(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._AppearanceActionModifier : SwiftUI._SceneModifier {
  @_Concurrency.MainActor @preconcurrency public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore._AppearanceActionModifier>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func onAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.Scene {
        return modifier(
            _AppearanceActionModifier(appear: action, disappear: nil))
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func onAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.Scene {
        return modifier(
            _AppearanceActionModifier(appear: action, disappear: nil))
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func onDisappear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.Scene {
        return modifier(
            _AppearanceActionModifier(appear: nil, disappear: action))
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func onDisappear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUI.Scene {
        return modifier(
            _AppearanceActionModifier(appear: nil, disappear: action))
    }
  
  #endif
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ControlWidgetConfiguration_V1 {
  associatedtype Body : SwiftUI.ControlWidgetConfiguration_V1
  @_spi(SSC) @SwiftUI.ControlWidgetConfigurationBuilder_V1 var body: Self.Body { get }
  @_spi(SSC) static func _makeControlConfiguration(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration_V1 {
  @_spi(SSC) public static func _makeControlConfiguration(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.ControlWidgetConfiguration_V1 {
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct ControlWidgetConfigurationBuilder_V1 {
  @_spi(SSC) @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ControlWidgetConfiguration_V1 {
       content
    }
  @_spi(SSC) @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ControlWidgetConfiguration_V1 where Content : SwiftUI.ControlWidgetConfiguration_V1 {
        return content
    }
  
}
@_spi(SSC) @available(*, unavailable)
extension SwiftUI.ControlWidgetConfigurationBuilder_V1 : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Animation {
  public static func timingCurve(_ curve: SwiftUICore.UnitCurve, duration: Foundation.TimeInterval) -> SwiftUICore.Animation
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ArchivedViewStates : Swift.RandomAccessCollection {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @available(*, deprecated, message: "no longer supported")
  public struct EncodingStyle {
    @_spi(Private) public static let binaryPlist: SwiftUI._ArchivedViewStates.EncodingStyle
    @_spi(Private) public static let json: SwiftUI._ArchivedViewStates.EncodingStyle
  }
  @_spi(Private) public init()
  @_spi(Private) public init(data: Foundation.Data) throws
  @_spi(Private) public init(contentsOf url: Foundation.URL) throws
  @_spi(Private) public init(contentsOf file: Foundation.FileHandle) throws
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init<D>(data: Foundation.Data, delegate: D) throws where D : SwiftUICore.ArchivedViewDelegate
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init<D>(contentsOf url: Foundation.URL, delegate: D) throws where D : SwiftUICore.ArchivedViewDelegate
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public init<D>(contentsOf file: Foundation.FileHandle, delegate: D) throws where D : SwiftUICore.ArchivedViewDelegate
  @_spi(Private) public var startIndex: Swift.Int {
    @_spi(Private) get
  }
  @_spi(Private) public var endIndex: Swift.Int {
    @_spi(Private) get
  }
  @_spi(Private) public subscript(index: Swift.Int) -> SwiftUI._ArchivedView {
    @_spi(Private) get
  }
  @_spi(Private) public func state(at index: Swift.Int) throws -> SwiftUI._ArchivedView
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var auxiliaryData: Foundation.Data? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) public var auxiliaryData: Foundation.Data? {
    @_spi(Private) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func attachment(at index: Swift.Int) -> Foundation.Data?
  #else
  @_spi(Private) public func attachment(at index: Swift.Int) -> Foundation.Data?
  #endif
  @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Element = SwiftUI._ArchivedView
  @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Index = Swift.Int
  @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ArchivedViewStates>
  @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI._ArchivedViewStates>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._ArchivedViewStates : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._ArchivedViewStates.EncodingStyle : Swift.Sendable {
}
@_spi(Private) extension SwiftUI._ArchivedViewStates {
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public struct DeploymentVersion : Swift.Hashable, Swift.Comparable, Swift.Codable, Swift.Sendable {
    @_spi(Private) public static let v5: SwiftUI._ArchivedViewStates.DeploymentVersion
    @_spi(Private) public static let v6: SwiftUI._ArchivedViewStates.DeploymentVersion
    @_spi(Private) @_alwaysEmitIntoClient public static var current: SwiftUI._ArchivedViewStates.DeploymentVersion {
      @_spi(Private) get { .v6 }
    }
    @_spi(Private) public static func < (lhs: SwiftUI._ArchivedViewStates.DeploymentVersion, rhs: SwiftUI._ArchivedViewStates.DeploymentVersion) -> Swift.Bool
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUI._ArchivedViewStates.DeploymentVersion, b: SwiftUI._ArchivedViewStates.DeploymentVersion) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension SwiftUI._ArchivedViewStates.DeploymentVersion {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct _ArchivedView : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView {
  @_spi(Private) nonisolated public init()
  @_spi(Private) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._ArchivedView>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._ArchivedView : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._ArchivedView : Swift.Equatable {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static func == (lhs: SwiftUI._ArchivedView, rhs: SwiftUI._ArchivedView) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var containsForegroundLayers: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func containsForegroundLayers(level: SwiftUICore._ForegroundLayerLevel) -> Swift.Bool
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var containsPrivacySensitive: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public var containsInteractiveControls: Swift.Bool {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI._ArchivedView {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var maxAnimationDuration: Swift.Double {
    @_spi(Private) get
    @_spi(Private) set
  }
}
extension SwiftUICore.View {
  @_spi(DoNotImport) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func hitTestingLayoutGesture() -> some SwiftUICore.View
  
}
@_spi(ForAppIntentsOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForAppIntentsOnly) nonisolated public func appEntityIdentifier(_ id: Swift.String?) -> some SwiftUICore.View
  
  #else
  @_spi(ForAppIntentsOnly) nonisolated public func appEntityIdentifier(_ id: Swift.String?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForAppIntentsOnly) nonisolated public func appIntentIdentifier(_ id: Swift.String?) -> some SwiftUICore.View
  
  #else
  @_spi(ForAppIntentsOnly) nonisolated public func appIntentIdentifier(_ id: Swift.String?) -> some SwiftUICore.View
  
  #endif
}
@_spi(ForAppIntentsOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForAppIntentsOnly) nonisolated public func appIntentIntelligenceProvider<P>(_ provider: P?) -> some SwiftUICore.View where P : UIIntelligenceSupport.IntelligenceAppIntentsPayloadProviding, P : UIIntelligenceSupport.IntelligenceSubelementProviding
  
  #else
  @_spi(ForAppIntentsOnly) nonisolated public func appIntentIntelligenceProvider<P>(_ provider: P?) -> some SwiftUICore.View where P : UIIntelligenceSupport.IntelligenceAppIntentsPayloadProviding, P : UIIntelligenceSupport.IntelligenceSubelementProviding
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func contrast(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ToolbarContent {
  associatedtype Body : SwiftUI.ToolbarContent
  @SwiftUI.ToolbarContentBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated static func _makeToolbar(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @_Concurrency.MainActor @preconcurrency static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol CustomizableToolbarContent : SwiftUI.ToolbarContent where Self.Body : SwiftUI.CustomizableToolbarContent {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContent {
  @_Concurrency.MainActor @preconcurrency public static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.ToolbarContent {
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Swift.Never : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _ToolbarInputs {
}
@available(*, unavailable)
extension SwiftUI._ToolbarInputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _ToolbarOutputs {
}
@available(*, unavailable)
extension SwiftUI._ToolbarOutputs : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct _ToolbarItemList {
}
@available(*, unavailable)
extension SwiftUI._ToolbarItemList : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_functionBuilder public struct ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ToolbarContent {
       content
    }
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent
  
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.CustomizableToolbarContent {
       content
    }
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent
  
}
@available(*, unavailable)
extension SwiftUI.ToolbarContentBuilder : Swift.Sendable {
}
extension SwiftUI.ToolbarContentBuilder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.ToolbarContent
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.ToolbarContent
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.CustomizableToolbarContent
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildIf<Content>(_ content: Content?) -> Content? where Content : SwiftUI.CustomizableToolbarContent
  #endif
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.ToolbarContent, FalseContent : SwiftUI.ToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.CustomizableToolbarContent, FalseContent : SwiftUI.CustomizableToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.ToolbarContent, FalseContent : SwiftUI.ToolbarContent
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> SwiftUICore._ConditionalContent<TrueContent, FalseContent> where TrueContent : SwiftUI.CustomizableToolbarContent, FalseContent : SwiftUI.CustomizableToolbarContent
  @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.ToolbarContent) -> some SwiftUI.ToolbarContent {
        if #unavailable(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5) {
            return TupleToolbarContent(())
        } else {
            return LimitedAvailabilityToolbarContent(erasing: content)
        }
    }
  
  @available(iOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 17.5, *)' or newer instead")
  @available(macOS, introduced: 11.0, deprecated: 11.0, obsoleted: 14.5, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 14.5, *)' or newer instead")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(tvOS 17.5, *)' or newer instead")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, obsoleted: 10.5, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 10.5, *)' or newer instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> some SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent {
        content
    }
  
  @available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.CustomizableToolbarContent) -> some SwiftUI.CustomizableToolbarContent {
        if #unavailable(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5) {
            return TupleToolbarContent(())
        } else {
            return LimitedAvailabilityToolbarContent(erasing: content)
        }
    }
  
  @available(iOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 17.5, *)' or newer instead")
  @available(macOS, introduced: 11.0, deprecated: 11.0, obsoleted: 14.5, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 14.5, *)' or newer instead")
  @available(tvOS, introduced: 14.0, deprecated: 14.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(tvOS 17.5, *)' or newer instead")
  @available(watchOS, introduced: 7.0, deprecated: 7.0, obsoleted: 10.5, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 10.5, *)' or newer instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> some SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent {
        content
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func grayscale(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func formRowInsets(_ insets: SwiftUICore.EdgeInsets?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func formRowInsets(_ insets: SwiftUICore.EdgeInsets?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func formRowBackground<S>(_ background: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #else
  @_spi(Private) nonisolated public func formRowBackground<S>(_ background: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func formRowIndentationLevel(_ level: Swift.Int?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func formRowIndentationLevel(_ level: Swift.Int?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "scrollContentBackground")
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func formBackground<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #else
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 13.0, renamed: "scrollContentBackground")
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func formBackground<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func hasSeamlessTitlebarInset(_ adjacent: Swift.Bool?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func hasSeamlessTitlebarInset(_ adjacent: Swift.Bool?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.Color {
  @_spi(Private) public static let emphasizedGroupBackground: SwiftUICore.Color
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func hueRotation(_ angle: SwiftUICore.Angle) -> some SwiftUICore.VisualEffect
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.HiddenTitleBarWindowStyle {
  @_alwaysEmitIntoClient public static var hiddenTitleBar: SwiftUI.HiddenTitleBarWindowStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct HiddenTitleBarWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
  @_spi(Private) public func configureWindow(_ window: Swift.AnyObject)
}
@available(*, unavailable)
extension SwiftUI.HiddenTitleBarWindowStyle : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS, unavailable)
@available(macOS, introduced: 13.0, deprecated: 15.0, message: "Use .containerBackground(..., for: .window) on root view instead")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) nonisolated public func windowBackground<S>(_ background: S) -> some SwiftUI.Scene where S : SwiftUICore.ShapeStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.IconOnlyLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var iconOnly: SwiftUI.IconOnlyLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct IconOnlyLabelStyle : SwiftUI.LabelStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.IconOnlyLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18IconOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.IconOnlyLabelStyle : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
public protocol NavigationViewStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body
  associatedtype _Body2 : SwiftUICore.View = SwiftUICore.EmptyView
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @SwiftUICore.ViewBuilder func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body2
}
extension SwiftUI.NavigationViewStyle {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> Self._Body2
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
public struct _NavigationViewStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 7.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI._NavigationViewStyleConfiguration.Content
}
@available(*, unavailable)
extension SwiftUI._NavigationViewStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._NavigationViewStyleConfiguration : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  nonisolated public func navigationViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.NavigationViewStyle
  
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUICore.Color {
  @_spi(Private) public static let clarityUIContentBackground: SwiftUICore.Color
  @_spi(Private) public static var clarityUIButtonBackground: SwiftUICore.Color {
    @_spi(Private) get
  }
  @_spi(Private) public static let clarityUIPressedButtonOverlay: SwiftUICore.Color
  @_spi(Private) public static let clarityUIButtonShadowColor: SwiftUICore.Color
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension UIKit.UIColor {
  @_spi(Private) public static let clarityUIContentBackground: UIKit.UIColor
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func handlesExternalEvents(matching conditions: Swift.Set<Swift.String>) -> some SwiftUI.Scene
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityTechnologies : Swift.SetAlgebra, Swift.Sendable {
  public static var voiceOver: SwiftUI.AccessibilityTechnologies
  public static var switchControl: SwiftUI.AccessibilityTechnologies
  @_spi(Private) public static var fullKeyboardAccess: SwiftUI.AccessibilityTechnologies
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static var voiceControl: SwiftUI.AccessibilityTechnologies
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static var hoverText: SwiftUI.AccessibilityTechnologies
  public init()
  public func union(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formUnion(_ other: SwiftUI.AccessibilityTechnologies)
  public func intersection(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formIntersection(_ other: SwiftUI.AccessibilityTechnologies)
  public func symmetricDifference(_ other: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies
  public mutating func formSymmetricDifference(_ other: SwiftUI.AccessibilityTechnologies)
  public func contains(_ member: SwiftUI.AccessibilityTechnologies) -> Swift.Bool
  public mutating func insert(_ newMember: SwiftUI.AccessibilityTechnologies) -> (inserted: Swift.Bool, memberAfterInsert: SwiftUI.AccessibilityTechnologies)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public mutating func remove(_ member: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  #else
  public mutating func remove(_ member: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public mutating func update(with newMember: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  #else
  public mutating func update(with newMember: SwiftUI.AccessibilityTechnologies) -> SwiftUI.AccessibilityTechnologies?
  #endif
  public static func == (a: SwiftUI.AccessibilityTechnologies, b: SwiftUI.AccessibilityTechnologies) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityTechnologies
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUI.AccessibilityTechnologies
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct PersistentSystemOverlaysKey : SwiftUICore.HostPreferenceKey {
  @_spi(UIFrameworks) public struct Overlays : Swift.Equatable {
    @_spi(UIFrameworks) public var visibility: SwiftUI.Visibility
    @_spi(UIFrameworks) public var isAnimated: Swift.Bool
    @_spi(UIFrameworks) public static func == (a: SwiftUI.PersistentSystemOverlaysKey.Overlays, b: SwiftUI.PersistentSystemOverlaysKey.Overlays) -> Swift.Bool
  }
  @_spi(UIFrameworks) public static let defaultValue: SwiftUI.PersistentSystemOverlaysKey.Overlays?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) public static func reduce(value: inout SwiftUI.PersistentSystemOverlaysKey.Overlays?, nextValue: () -> SwiftUI.PersistentSystemOverlaysKey.Overlays?)
  #else
  @_spi(UIFrameworks) public static func reduce(value: inout SwiftUI.PersistentSystemOverlaysKey.Overlays?, nextValue: () -> SwiftUI.PersistentSystemOverlaysKey.Overlays?)
  #endif
  @_spi(UIFrameworks) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
  public typealias Value = SwiftUI.PersistentSystemOverlaysKey.Overlays?
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.PersistentSystemOverlaysKey : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.PersistentSystemOverlaysKey.Overlays : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func persistentSystemOverlays(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
extension SwiftUI.Scene {
  @available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func persistentSystemOverlays(_ preferredVisibility: SwiftUI.Visibility) -> some SwiftUI.Scene
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "MagnifyGesture")
@available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "MagnifyGesture")
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "MagnifyGesture")
public struct MagnificationGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  public var minimumScaleDelta: CoreFoundation.CGFloat
  public init(minimumScaleDelta: CoreFoundation.CGFloat = 0.01)
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.MagnificationGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.MagnificationGesture.Value>
  public typealias Value = CoreFoundation.CGFloat
  package var internalBody: some SwiftUICore.Gesture<CoreFoundation.CGFloat> {
    get
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "MagnifyGesture")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "MagnifyGesture")
  @available(watchOS, unavailable, introduced: 6.0, renamed: "MagnifyGesture")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "MagnifyGesture")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "MagnifyGesture")
  public typealias Body = Swift.Never
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "MagnifyGesture")
  @available(tvOS, unavailable, renamed: "MagnifyGesture")
  @available(watchOS, unavailable, renamed: "MagnifyGesture")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "MagnifyGesture")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "MagnifyGesture")
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI20MagnificationGestureV12internalBodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.MagnificationGesture : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct MagnifyGesture : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, Swift.Sendable {
    public var time: Foundation.Date
    public var magnification: CoreFoundation.CGFloat
    public var velocity: CoreFoundation.CGFloat
    public var startAnchor: SwiftUICore.UnitPoint
    public var startLocation: CoreFoundation.CGPoint
    public static func == (a: SwiftUI.MagnifyGesture.Value, b: SwiftUI.MagnifyGesture.Value) -> Swift.Bool
  }
  public var minimumScaleDelta: CoreFoundation.CGFloat
  public init(minimumScaleDelta: CoreFoundation.CGFloat = 0.01)
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.MagnifyGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.MagnifyGesture.Value>
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.MagnifyGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 14.0, *)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
extension SwiftUICore.View {
  nonisolated public func contextMenu<MenuItems>(@SwiftUICore.ViewBuilder menuItems: () -> MenuItems) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
  @_spi(Private) @available(macOS 15.0, visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func contextMenu<MenuItems>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder menuItems: () -> MenuItems) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func contextMenu<M, P>(@SwiftUICore.ViewBuilder menuItems: () -> M, @SwiftUICore.ViewBuilder preview: () -> P) -> some SwiftUICore.View where M : SwiftUICore.View, P : SwiftUICore.View
  
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func contextMenu<M, P, D>(@SwiftUICore.ViewBuilder menuItems: () -> M, @SwiftUICore.ViewBuilder preview: () -> P, @SwiftUICore.ViewBuilder previewDestination: () -> D) -> some SwiftUICore.View where M : SwiftUICore.View, P : SwiftUICore.View, D : SwiftUICore.View
  
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func contextMenu<M, P>(@SwiftUICore.ViewBuilder menuItems: () -> M, @SwiftUICore.ViewBuilder preview: () -> P, previewAction: @escaping () -> Swift.Void) -> some SwiftUICore.View where M : SwiftUICore.View, P : SwiftUICore.View
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func contextMenu<MenuItems>(_ contextMenu: SwiftUI.ContextMenu<MenuItems>?) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
  #else
  nonisolated public func contextMenu<MenuItems>(_ contextMenu: SwiftUI.ContextMenu<MenuItems>?) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
  #endif
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 7.0)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use `contextMenu(menuItems:)` instead.")
public struct ContextMenu<MenuItems> where MenuItems : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder menuItems: () -> MenuItems)
}
@available(*, unavailable)
extension SwiftUI.ContextMenu : Swift.Sendable {
}
@_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(_) nonisolated public func windowToolbarFullScreenVisibility(_ visibility: SwiftUI.WindowToolbarFullScreenVisibility) -> some SwiftUICore.View
  
}
@_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct WindowToolbarFullScreenVisibility : Swift.Sendable {
  @_spi(_) public static let automatic: SwiftUI.WindowToolbarFullScreenVisibility
  @_spi(_) @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let always: SwiftUI.WindowToolbarFullScreenVisibility
  @_spi(_) @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let onHover: SwiftUI.WindowToolbarFullScreenVisibility
}
@_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
@available(iOS, introduced: 17.1, deprecated: 18.0, renamed: "WindowToolbarFullScreenVisibility")
@available(macOS, introduced: 14.1, deprecated: 15.0, renamed: "WindowToolbarFullScreenVisibility")
@available(tvOS, introduced: 17.1, deprecated: 18.0, renamed: "WindowToolbarFullScreenVisibility")
@available(watchOS, introduced: 10.1, deprecated: 11.0, renamed: "WindowToolbarFullScreenVisibility")
@available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "WindowToolbarFullScreenVisibility")
public struct FullScreenToolbarBehavior {
  @_spi(Private) public static let automatic: SwiftUI.FullScreenToolbarBehavior
  @_spi(Private) public static let showsWithWindow: SwiftUI.FullScreenToolbarBehavior
  @_spi(Private) @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let showsWithMenuBar: SwiftUI.FullScreenToolbarBehavior
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.FullScreenToolbarBehavior : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS, introduced: 17.1, deprecated: 18.0, renamed: "windowToolbarFullScreenVisibility(_:)")
  @available(macOS, introduced: 14.1, deprecated: 15.0, renamed: "windowToolbarFullScreenVisibility(_:)")
  @available(tvOS, introduced: 17.1, deprecated: 18.0, renamed: "windowToolbarFullScreenVisibility(_:)")
  @available(watchOS, introduced: 10.1, deprecated: 11.0, renamed: "windowToolbarFullScreenVisibility(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "windowToolbarFullScreenVisibility(_:)")
  nonisolated public func fullScreenToolbarBehavior(_ behavior: SwiftUI.FullScreenToolbarBehavior) -> some SwiftUICore.View
  
}
extension SwiftUICore.DynamicViewContent {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping ([T], Swift.Int) -> Swift.Void) -> some SwiftUICore.DynamicViewContent where T : CoreTransferable.Transferable
  
  @available(*, unavailable, message: "Unavailable for DynamicViewContent, use `dropDestination(for:action:)` instead.")
  public func dropDestination<T>(for payloadType: T.Type = T.self, action: @escaping (_ items: [T], _ location: CoreFoundation.CGPoint) -> Swift.Bool, isTargeted: (Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.DynamicViewContent {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func onInsert(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.DynamicViewContent
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
  public func onInsert(of acceptedTypeIdentifiers: [Swift.String], perform action: @escaping (Swift.Int, [Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.DynamicViewContent
  
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct NewDocumentButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, macOS 15.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17NewDocumentButtonV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.NewDocumentButton : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NewDocumentButton where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.Text? = nil, contentType: UniformTypeIdentifiers.UTType? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.Text? = nil, contentType: UniformTypeIdentifiers.UTType? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, contentType: UniformTypeIdentifiers.UTType? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, contentType: UniformTypeIdentifiers.UTType? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, contentType: UniformTypeIdentifiers.UTType? = nil)
  #else
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, contentType: UniformTypeIdentifiers.UTType? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<D>(_ label: SwiftUICore.Text? = nil, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  #else
  @_Concurrency.MainActor @preconcurrency public init<D>(_ label: SwiftUICore.Text? = nil, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<D>(_ title: SwiftUICore.LocalizedStringKey, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  #else
  @_Concurrency.MainActor @preconcurrency public init<D>(_ title: SwiftUICore.LocalizedStringKey, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<D>(_ title: some StringProtocol, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  #else
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<D>(_ title: some StringProtocol, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.FileDocument
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<D>(_ label: SwiftUICore.Text? = nil, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  #else
  @_Concurrency.MainActor @preconcurrency public init<D>(_ label: SwiftUICore.Text? = nil, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init<D>(_ title: SwiftUICore.LocalizedStringKey, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  #else
  @_Concurrency.MainActor @preconcurrency public init<D>(_ title: SwiftUICore.LocalizedStringKey, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<D>(_ title: some StringProtocol, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  #else
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<D>(_ title: some StringProtocol, for documentType: D.Type = D.self, contentType: UniformTypeIdentifiers.UTType? = nil, prepareDocument: @escaping () async throws -> D? = { nil }) where D : SwiftUI.ReferenceFileDocument
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.Text? = nil, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ label: SwiftUICore.Text? = nil, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  #else
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  #else
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(_ title: some StringProtocol, contentType: UniformTypeIdentifiers.UTType, prepareDocumentURL: @escaping () async throws -> Foundation.URL? = { nil })
  #endif
}
@available(*, unavailable)
extension SwiftUI.DefaultDocumentGroupLaunchActions : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _NewDocumentButton : SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static var defaultAction: UIKit.UIAction
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) nonisolated public init()
  @_spi(Private) @available(iOS 18.0, macOS 15.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18_NewDocumentButtonV4bodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._NewDocumentButton : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ContainerValues {
  public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.ContainerValueKey {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func tag<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #else
  public func tag<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #endif
  public func hasTag<V>(_ tag: V) -> Swift.Bool where V : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.ContainerValues : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func saturation(_ amount: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct SubmitTriggers : Swift.OptionSet, Swift.Sendable {
  public typealias RawValue = Swift.Int
  public let rawValue: SwiftUI.SubmitTriggers.RawValue
  public init(rawValue: SwiftUI.SubmitTriggers.RawValue)
  public static let text: SwiftUI.SubmitTriggers
  public static let search: SwiftUI.SubmitTriggers
  @_spi(Private) @available(iOS, introduced: 16.0, deprecated: 16.0, message: "use .contextAction on List or Table instead")
  @available(watchOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "use .contextAction on List or Table instead")
  @available(tvOS, unavailable)
  public static let collection: SwiftUI.SubmitTriggers
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ArrayLiteralElement = SwiftUI.SubmitTriggers
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUI.SubmitTriggers
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ScrollableHStackBehavior {
  @_spi(Private) public static let continuous: SwiftUI.ScrollableHStackBehavior
  @_spi(Private) public static let childLeading: SwiftUI.ScrollableHStackBehavior
  @_spi(Private) public static let paging: SwiftUI.ScrollableHStackBehavior
  @_spi(Private) public static let childPaging: SwiftUI.ScrollableHStackBehavior
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollableHStackBehavior : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_Concurrency.MainActor @preconcurrency public struct ScrollableHStack<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(_ behavior: SwiftUI.ScrollableHStackBehavior, width: CoreFoundation.CGFloat, padding: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @_spi(Private) nonisolated public init(_ behavior: SwiftUI.ScrollableHStackBehavior, width: CoreFoundation.CGFloat, padding: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ScrollableHStackV4bodyQrvp", 0) __<Content>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollableHStack : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func repeatingOpacity(from: Swift.Double, to: Swift.Double, animation: SwiftUICore.Animation = Animation.default) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.VisualEffect
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.HoverEffectContent
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  @_spi(CustomHoverEffects) public func _opacity(_ opacity: Swift.Double) -> some SwiftUICore.HoverEffectContent
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ShapeStyle {
  @inlinable public func opacity(_ opacity: Swift.Double) -> some SwiftUICore.ShapeStyle {
        _OpacityShapeStyle(style: self, opacity: Float(opacity))
    }
  
  @_spi(Private) @inlinable public func opacities(_ array: [Swift.Double]) -> some SwiftUICore.ShapeStyle {
        _OpacitiesShapeStyle(style: self, opacities: array)
    }
  
  @_spi(Private) @inlinable public func opacities(_ array: Swift.Double...) -> some SwiftUICore.ShapeStyle {
        _OpacitiesShapeStyle(style: self, opacities: array)
    }
  
}
@_spi(Private) @available(watchOS 10.0, *)
public struct ToolbarLegibility : Swift.Hashable {
  @_spi(Private) public static var standard: SwiftUI.ToolbarLegibility {
    @_spi(Private) get
  }
  @_spi(Private) public static var fullscreen: SwiftUI.ToolbarLegibility {
    @_spi(Private) get
  }
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public static func == (a: SwiftUI.ToolbarLegibility, b: SwiftUI.ToolbarLegibility) -> Swift.Bool
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ToolbarLegibility : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AnimatedValueKeyframe<Value> {
  @_spi(DoNotImport) public var value: Value
  @_spi(DoNotImport) public var interpolation: SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters
  @_spi(DoNotImport) public var timingCurve: SwiftUICore.UnitCurve
  @_spi(DoNotImport) public init(value: Value, interpolation: SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters = .automatic, incomingTimingCurve: SwiftUICore.UnitCurve = .linear)
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueKeyframe {
  @_spi(DoNotImport) public struct InterpolationParameters {
    @_spi(DoNotImport) public static var automatic: SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters {
      @_spi(DoNotImport) get
    }
    @_spi(DoNotImport) public static func kochanekBartels(tension: Swift.Double = 0, continuity: Swift.Double = 0, bias: Swift.Double = 0) -> SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters
    @_spi(DoNotImport) public static var catmullRom: SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters {
      @_spi(DoNotImport) get
    }
    @_spi(DoNotImport) public static var linear: SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters {
      @_spi(DoNotImport) get
    }
    @_spi(DoNotImport) public static func asymmetric(incomingControlPoint: Value, outgoingControlPoint: Value) -> SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters
    @_spi(DoNotImport) public static func asymmetric(incomingTangent: Value, outgoingTangent: Value) -> SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters
  }
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValueKeyframe : Swift.Sendable {
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValueKeyframe.InterpolationParameters : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueKeyframe.InterpolationParameters : Swift.Equatable where Value : Swift.Equatable {
  @_spi(DoNotImport) public static func == (a: SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters, b: SwiftUI.AnimatedValueKeyframe<Value>.InterpolationParameters) -> Swift.Bool
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueKeyframe : Swift.Equatable where Value : Swift.Equatable {
  @_spi(DoNotImport) public static func == (a: SwiftUI.AnimatedValueKeyframe<Value>, b: SwiftUI.AnimatedValueKeyframe<Value>) -> Swift.Bool
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.SliderStyle where Self == SwiftUI.CapsuleSliderStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static var capsule: SwiftUI.CapsuleSliderStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CapsuleSliderStyle : SwiftUI.SliderStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CapsuleSliderStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable, introduced: 16.0)
  @available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 9.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18CapsuleSliderStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CapsuleSliderStyle : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarBackground<S>(_ style: S, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(*, deprecated, renamed: "toolbarBackground(_:for:)")
  @_disfavoredOverload nonisolated public func toolbarBackground<S>(_ style: S, in bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "toolbarBackgroundVisibility(_:for:)")
  nonisolated public func toolbarBackground(_ visibility: SwiftUI.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  nonisolated public func toolbarBackgroundVisibility(_ visibility: SwiftUI.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(*, deprecated, renamed: "toolbarBackground(_:for:)")
  @_disfavoredOverload nonisolated public func toolbarBackground(_ visibility: SwiftUI.Visibility, in bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarColorScheme(_ colorScheme: SwiftUICore.ColorScheme?, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarColorScheme(_ colorScheme: SwiftUICore.ColorScheme?, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(*, deprecated, renamed: "toolbarColorScheme(_:for:)")
  @_disfavoredOverload nonisolated public func toolbarColorScheme(_ colorScheme: SwiftUICore.ColorScheme?, in bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  #else
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(*, deprecated, renamed: "toolbarColorScheme(_:for:)")
  @_disfavoredOverload nonisolated public func toolbarColorScheme(_ colorScheme: SwiftUICore.ColorScheme?, in bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  #endif
  @_spi(Private) @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  nonisolated public func toolbarLegibility(_ legibility: SwiftUI.ToolbarLegibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "toolbarVisibility(_:for:)")
  nonisolated public func toolbar(_ visibility: SwiftUI.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  nonisolated public func toolbarVisibility(_ visibility: SwiftUI.Visibility, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(*, deprecated, renamed: "toolbar(_:for:)")
  @_disfavoredOverload nonisolated public func toolbar(_ visibility: SwiftUI.Visibility, in bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func toolbarForegroundStyle<S>(_ style: S, for bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @_spi(Private) @available(iOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(*, deprecated, renamed: "toolbarForegroundStyle(_:for:)")
  @_disfavoredOverload nonisolated public func toolbarForegroundStyle<S>(_ style: S, in bars: SwiftUI.ToolbarPlacement...) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @_spi(Private) @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func avoidNavigationBarToToolbarConversion() -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ItemProviderTraitKey : SwiftUICore._ViewTraitKey {
  @usableFromInline
  internal typealias Value = Swift.Optional<() -> Foundation.NSItemProvider?>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUI.ItemProviderTraitKey.Value {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUI.ItemProviderTraitKey.Value {
    get { nil }
  }
  #endif
}
@available(*, unavailable)
extension SwiftUI.ItemProviderTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func itemProvider(_ action: Swift.Optional<() -> Foundation.NSItemProvider?>) -> some SwiftUICore.View {
        return _trait(ItemProviderTraitKey.self, action)
    }
  
  #else
  @inlinable nonisolated public func itemProvider(_ action: Swift.Optional<() -> Foundation.NSItemProvider?>) -> some SwiftUICore.View {
        return _trait(ItemProviderTraitKey.self, action)
    }
  
  #endif
}
extension SwiftUICore.View {
  @_spi(Private) @available(tvOS 17.0, *)
  @available(macOS, unavailable)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func activeColorScheme(_ activeColorScheme: SwiftUICore.ColorScheme) -> some SwiftUICore.View
  
}
@_spi(ForCalculatorOnly) @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_spi(ForCalculatorOnly) nonisolated public func sidebarDimmingIgnoresSafeArea(_ enabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.InsetGroupedListStyle {
  @_alwaysEmitIntoClient public static var insetGrouped: SwiftUI.InsetGroupedListStyle {
    get { .init() }
  }
}
@available(iOS 14.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct InsetGroupedListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.InsetGroupedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.InsetGroupedListStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func layoutScale(_ scale: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return modifier(_LayoutScaleModifier(scale: scale))
    }
  
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _LayoutScaleModifier : SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore.Animatable {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var scale: CoreFoundation.CGFloat
  @_spi(Private) @inlinable @_Concurrency.MainActor @preconcurrency public init(scale: CoreFoundation.CGFloat) {
        self.scale = scale
    }
  @_spi(Private) public typealias AnimatableData = CoreFoundation.CGFloat
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._LayoutScaleModifier.AnimatableData {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._LayoutScaleModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
public struct _PlatformViewRepresentableLayoutOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static let propagatesSafeArea: SwiftUI._PlatformViewRepresentableLayoutOptions
  public init(rawValue: Swift.Int)
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  public typealias ArrayLiteralElement = SwiftUI._PlatformViewRepresentableLayoutOptions
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  public typealias Element = SwiftUI._PlatformViewRepresentableLayoutOptions
  @available(iOS 16.1, tvOS 16.1, watchOS 9.1, macOS 13.0, *)
  public typealias RawValue = Swift.Int
}
@available(*, unavailable)
extension SwiftUI._PlatformViewRepresentableLayoutOptions : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct OrnamentAttachmentAnchor : Swift.Sendable {
  public static func scene(_ anchor: SwiftUICore.UnitPoint) -> SwiftUI.OrnamentAttachmentAnchor
  @_spi(_) @available(*, deprecated, message: "Use `scene(_:)` instead")
  @_disfavoredOverload public static func scene(alignment: SwiftUICore.Alignment) -> SwiftUI.OrnamentAttachmentAnchor
}
extension SwiftUICore.View {
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func ornament<Content>(visibility: SwiftUI.Visibility = .automatic, attachmentAnchor: SwiftUI.OrnamentAttachmentAnchor, contentAlignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder ornament: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func ornament<Content>(visibility: SwiftUI.Visibility = .automatic, attachmentAnchor: SwiftUI.OrnamentAttachmentAnchor, contentAlignment: SwiftUICore.Alignment = .center, zOffset: CoreFoundation.CGFloat?, isInternal: Swift.Bool = false, @SwiftUICore.ViewBuilder ornament: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #else
  @_spi(UIFrameworks) @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func ornament<Content>(visibility: SwiftUI.Visibility = .automatic, attachmentAnchor: SwiftUI.OrnamentAttachmentAnchor, contentAlignment: SwiftUICore.Alignment = .center, zOffset: CoreFoundation.CGFloat?, isInternal: Swift.Bool = false, @SwiftUICore.ViewBuilder ornament: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #endif
  @_spi(DoNotImport) @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func ornament<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, sceneAnchor: SwiftUICore.UnitPoint, offset: CoreFoundation.CGSize = .zero, @SwiftUICore.ViewBuilder ornament: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(Private) @available(*, deprecated, message: "Use contextMenu(forSelectionType:) instead")
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func selectionMenu<C>(@SwiftUICore.ViewBuilder content: () -> C) -> some SwiftUICore.View where C : SwiftUICore.View
  
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@preconcurrency @_Concurrency.MainActor public protocol TabContent<TabValue> {
  associatedtype TabValue : Swift.Hashable where Self.TabValue == Self.Body.TabValue
  associatedtype _IdentifiedView : SwiftUICore.View = SwiftUI._TabContentBodyAdaptor<Self>
  @_Concurrency.MainActor @preconcurrency var _identifiedView: Self._IdentifiedView { get }
  associatedtype Body : SwiftUI.TabContent
  @SwiftUI.TabContentBuilder<Self.TabValue> @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
#else
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@preconcurrency @_Concurrency.MainActor public protocol TabContent {
  associatedtype TabValue : Swift.Hashable where Self.TabValue == Self.Body.TabValue
  associatedtype _IdentifiedView : SwiftUICore.View = SwiftUI._TabContentBodyAdaptor<Self>
  @_Concurrency.MainActor @preconcurrency var _identifiedView: Self._IdentifiedView { get }
  associatedtype Body : SwiftUI.TabContent
  @SwiftUI.TabContentBuilder<Self.TabValue> @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
#endif
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent where Self._IdentifiedView == SwiftUI._TabContentBodyAdaptor<Self> {
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUI._TabContentBodyAdaptor<Self> {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct _TabContentBodyAdaptor<C> : SwiftUICore.View where C : SwiftUI.TabContent {
  @_Concurrency.MainActor @preconcurrency public var body: C.Body._IdentifiedView {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = C.Body._IdentifiedView
}
@available(*, unavailable)
extension SwiftUI._TabContentBodyAdaptor : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_functionBuilder public struct TabContentBuilder<TabValue> where TabValue : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public struct Content<C> : SwiftUICore.View where C : SwiftUI.TabContent {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17TabContentBuilderV0D0V4bodyQrvp", 0) __<TabValue, C>
  }
  @_alwaysEmitIntoClient public static func buildExpression(_ content: some TabContent<TabValue>) -> some SwiftUI.TabContent<TabValue> {
        content
    }
  
  @_alwaysEmitIntoClient public static func buildBlock(_ content: some TabContent<TabValue>) -> some SwiftUI.TabContent<TabValue> {
        content
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildIf(_ content: (some TabContent<TabValue>)?) -> (some SwiftUI.TabContent<TabValue>)? {
        content
    }
  
  #else
  @_alwaysEmitIntoClient public static func buildIf(_ content: (some TabContent<TabValue>)?) -> (some SwiftUI.TabContent<TabValue>)? {
        content
    }
  
  #endif
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where TabValue == T.TabValue, T : SwiftUI.TabContent, F : SwiftUI.TabContent, T.TabValue == F.TabValue {
        .init(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where TabValue == T.TabValue, T : SwiftUI.TabContent, F : SwiftUI.TabContent, T.TabValue == F.TabValue {
        .init(storage: .falseContent(second))
    }
}
@available(*, unavailable)
extension SwiftUI.TabContentBuilder : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.TabContentBuilder.Content : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore._ConditionalContent : SwiftUI.TabContent where TrueContent : SwiftUI.TabContent, FalseContent : SwiftUI.TabContent, TrueContent.TabValue == FalseContent.TabValue {
  public typealias TabValue = TrueContent.TabValue
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUICore._ConditionalContent<TrueContent._IdentifiedView, FalseContent._IdentifiedView> {
    get
  }
  public typealias Body = SwiftUICore._ConditionalContent<TrueContent, FalseContent>
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore._ConditionalContent<TrueContent, FalseContent> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = SwiftUICore._ConditionalContent<TrueContent._IdentifiedView, FalseContent._IdentifiedView>
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Swift.Optional : SwiftUI.TabContent where Wrapped : SwiftUI.TabContent {
  public typealias TabValue = Wrapped.TabValue
  @inlinable @_Concurrency.MainActor @preconcurrency public var _identifiedView: Wrapped._IdentifiedView? {
    get {
        self.map { $0._identifiedView }
    }
  }
  public typealias Body = Swift.Optional<Wrapped>
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Optional<Wrapped> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = Wrapped._IdentifiedView?
}
#else
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Swift.Optional : SwiftUI.TabContent where Wrapped : SwiftUI.TabContent {
  public typealias TabValue = Wrapped.TabValue
  @inlinable @_Concurrency.MainActor @preconcurrency public var _identifiedView: Wrapped._IdentifiedView? {
    get {
        self.map { $0._identifiedView }
    }
  }
  public typealias Body = Swift.Optional<Wrapped>
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Optional<Wrapped> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = Wrapped._IdentifiedView?
}
#endif
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach : SwiftUI.TabContent where Content : SwiftUI.TabContent {
  public typealias TabValue = Content.TabValue
  nonisolated public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V> content: @escaping (Data.Element) -> Content) where V == Content.TabValue
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #else
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V?> content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #else
  @_disfavoredOverload nonisolated public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TabContentBuilder<V?> content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #endif
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: SwiftUICore.ForEach<Data, ID, Content._IdentifiedView> {
    get
  }
  public typealias Body = SwiftUICore.ForEach<Data, ID, Content>
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.ForEach<Data, ID, Content> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = SwiftUICore.ForEach<Data, ID, Content._IdentifiedView>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach where ID == Data.Element.ID, Content : SwiftUI.TabContent, Data.Element : Swift.Identifiable {
  public init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V> content: @escaping (Data.Element) -> Content) where V == Content.TabValue
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #else
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V?> content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #else
  @_disfavoredOverload public init<V>(_ data: Data, @SwiftUI.TabContentBuilder<V?> content: @escaping (Data.Element) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach where Data == Swift.Range<Swift.Int>, ID == Swift.Int, Content : SwiftUI.TabContent {
  @_semantics("swiftui.requires_constant_range") public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V> content: @escaping (Swift.Int) -> Content) where V == Content.TabValue
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") internal init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Swift.Int) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #else
  @usableFromInline
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") internal init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V?> liftedContent content: @escaping (Swift.Int) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V?> content: @escaping (Swift.Int) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #else
  @_disfavoredOverload @_semantics("swiftui.requires_constant_range") public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TabContentBuilder<V?> content: @escaping (Swift.Int) -> Content) where V : Swift.Hashable, Content.TabValue == V?
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Group : SwiftUI.TabContent where Content : SwiftUI.TabContent {
  public typealias TabValue = Content.TabValue
  @inlinable @_Concurrency.MainActor @preconcurrency public var _identifiedView: Content._IdentifiedView {
    get {
        content._identifiedView
    }
  }
  public typealias Body = SwiftUICore.Group<Content>
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUICore.Group<Content> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = Content._IdentifiedView
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
@frozen @_Concurrency.MainActor @preconcurrency internal struct _TupleTabContent<T, U> where T : Swift.Hashable {
  @usableFromInline
  internal typealias TabValue = T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal let _identifiedView: SwiftUICore.TupleView<U>
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(_ content: U) { _identifiedView = .init(content) }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: SwiftUI._TupleTabContent<T, U> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  @usableFromInline
  internal typealias Body = SwiftUI._TupleTabContent<T, U>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  @usableFromInline
  internal typealias _IdentifiedView = SwiftUICore.TupleView<U>
}
@available(*, unavailable)
extension SwiftUI._TupleTabContent : Swift.Sendable {
}
extension SwiftUICore.Transaction {
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var disablesPageScrollAnimations: Swift.Bool {
    get
    set
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct ScrollContentOffsetAdjustmentBehavior {
  public static var automatic: SwiftUI.ScrollContentOffsetAdjustmentBehavior {
    get
  }
  public static var disabled: SwiftUI.ScrollContentOffsetAdjustmentBehavior {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollContentOffsetAdjustmentBehavior : Swift.Sendable {
}
extension SwiftUICore.Transaction {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public var scrollContentOffsetAdjustmentBehavior: SwiftUI.ScrollContentOffsetAdjustmentBehavior {
    get
    set
  }
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ControlWidgetTemplate_V1 {
  associatedtype Body : SwiftUI.ControlWidgetTemplate_V1
  @_spi(SSC) @SwiftUI.ControlWidgetTemplateBuilder_V1 var body: Self.Body { get }
  @_spi(SSC) static var _controlType: Swift.UInt { get }
  @_spi(SSC) static func _makeControlTemplate(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetTemplate_V1 {
  @_spi(SSC) public static var _controlType: Swift.UInt {
    @_spi(SSC) get
  }
  @_spi(SSC) public static func _makeControlTemplate(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.ControlWidgetTemplate_V1 {
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct ControlWidgetTemplateBuilder_V1 {
  @_spi(SSC) @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ControlWidgetTemplate_V1 {
       content
    }
  @_spi(SSC) @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ControlWidgetTemplate_V1 where Content : SwiftUI.ControlWidgetTemplate_V1 {
        return content
    }
  
}
@_spi(SSC) @available(*, unavailable)
extension SwiftUI.ControlWidgetTemplateBuilder_V1 : Swift.Sendable {
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.PageTabViewStyle {
  @_alwaysEmitIntoClient public static var page: SwiftUI.PageTabViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func page(indexDisplayMode: SwiftUI.PageTabViewStyle.IndexDisplayMode) -> SwiftUI.PageTabViewStyle {
        .init(indexDisplayMode: indexDisplayMode)
    }
}
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@available(macOS, unavailable)
public struct PageTabViewStyle : SwiftUI.TabViewStyle {
  public struct IndexDisplayMode : Swift.Sendable {
    public static let automatic: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS 8.0, *)
    public static let always: SwiftUI.PageTabViewStyle.IndexDisplayMode
    @available(watchOS 8.0, *)
    public static let never: SwiftUI.PageTabViewStyle.IndexDisplayMode
  }
  public init(indexDisplayMode: SwiftUI.PageTabViewStyle.IndexDisplayMode = .automatic)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.PageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PageTabViewStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func indexViewPlacement(_ placement: SwiftUI._IndexViewPlacement) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _IndexViewPlacement {
  @_spi(Private) public static let automatic: SwiftUI._IndexViewPlacement
  @_spi(Private) public static let toolbar: SwiftUI._IndexViewPlacement
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._IndexViewPlacement : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PaletteSelectionEffect : Swift.Sendable, Swift.Equatable {
  public static func == (lhs: SwiftUI.PaletteSelectionEffect, rhs: SwiftUI.PaletteSelectionEffect) -> Swift.Bool
  public static var automatic: SwiftUI.PaletteSelectionEffect
  public static func symbolVariant(_ variant: SwiftUICore.SymbolVariants) -> SwiftUI.PaletteSelectionEffect
  public static var custom: SwiftUI.PaletteSelectionEffect
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func paletteSelectionEffect(_ effect: SwiftUI.PaletteSelectionEffect) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public enum SidebarRowSize : Swift.Sendable {
  case small
  case medium
  case large
  public static func == (a: SwiftUI.SidebarRowSize, b: SwiftUI.SidebarRowSize) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.SidebarRowSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.EnvironmentValues {
  public var sidebarRowSize: SwiftUI.SidebarRowSize {
    get
    set
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ContentMarginPlacement {
  public static var automatic: SwiftUI.ContentMarginPlacement {
    get
  }
  public static var scrollContent: SwiftUI.ContentMarginPlacement {
    get
  }
  public static var scrollIndicators: SwiftUI.ContentMarginPlacement {
    get
  }
}
@_spi(Private) @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.ContentMarginPlacement {
  @_spi(Private) public static var toolbar: SwiftUI.ContentMarginPlacement {
    @_spi(Private) get
  }
}
@available(*, unavailable)
extension SwiftUI.ContentMarginPlacement : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryCircularCapacityGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(halfOpen: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryCircularCapacityGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI35AccessoryCircularCapacityGaugeStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryCircularCapacityGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryCircularCapacityGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryCircularCapacity: SwiftUI.AccessoryCircularCapacityGaugeStyle {
    get { .init() }
  }
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func accessoryCircularCapacity(halfOpen: Swift.Bool) -> SwiftUI.AccessoryCircularCapacityGaugeStyle {
        .init(halfOpen: halfOpen)
    }
}
@_spi(Private) @available(iOS, deprecated, renamed: "AccessoryCircularCapacityGaugeStyle")
@available(macOS, deprecated, renamed: "AccessoryCircularCapacityGaugeStyle")
@available(tvOS, unavailable)
@available(watchOS, deprecated, renamed: "AccessoryCircularCapacityGaugeStyle")
@_Concurrency.MainActor @preconcurrency public struct CircularPercentageGaugeStyle : SwiftUI.GaugeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(halfOpen: Swift.Bool = false)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularPercentageGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, deprecated, introduced: 16.0, renamed: "AccessoryCircularCapacityGaugeStyle")
  @available(tvOS, unavailable, renamed: "AccessoryCircularCapacityGaugeStyle")
  @available(watchOS, deprecated, introduced: 7.0, renamed: "AccessoryCircularCapacityGaugeStyle")
  @available(macOS, deprecated, introduced: 13.0, renamed: "AccessoryCircularCapacityGaugeStyle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28CircularPercentageGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CircularPercentageGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated)
@available(macOS, deprecated)
@available(tvOS, unavailable)
@available(watchOS, deprecated)
extension SwiftUI.GaugeStyle where Self == SwiftUI.CircularPercentageGaugeStyle {
  @_spi(Private) @available(iOS, deprecated, renamed: "accessoryCircularCapacity")
  @available(macOS, deprecated, renamed: "accessoryCircularCapacity")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated, renamed: "accessoryCircularCapacity")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var circularPercentage: SwiftUI.CircularPercentageGaugeStyle {
    @_spi(Private) get {
        .init()
    }
  }
  @_spi(Private) @available(iOS, deprecated, renamed: "accessoryCircularCapacity(halfOpen:)")
  @available(macOS, deprecated, renamed: "accessoryCircularCapacity(halfOpen:)")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated, renamed: "accessoryCircularCapacity(halfOpen:)")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func circularPercentage(halfOpen: Swift.Bool = false) -> SwiftUI.CircularPercentageGaugeStyle {
        .init(halfOpen: halfOpen)
    }
}
@_spi(Private) @available(iOS, deprecated, renamed: "AccessoryCircularCapacityGaugeStyle")
@available(macOS, deprecated, renamed: "AccessoryCircularCapacityGaugeStyle")
@available(tvOS, unavailable)
@available(watchOS, deprecated, renamed: "AccessoryCircularCapacityGaugeStyle")
@_Concurrency.MainActor @preconcurrency public struct CircularProgressGaugeStyle : SwiftUI.GaugeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularProgressGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, deprecated, introduced: 16.0, renamed: "AccessoryCircularCapacityGaugeStyle")
  @available(tvOS, unavailable, renamed: "AccessoryCircularCapacityGaugeStyle")
  @available(watchOS, deprecated, introduced: 7.0, renamed: "AccessoryCircularCapacityGaugeStyle")
  @available(macOS, deprecated, introduced: 13.0, renamed: "AccessoryCircularCapacityGaugeStyle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26CircularProgressGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CircularProgressGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated)
@available(macOS, deprecated)
@available(tvOS, unavailable)
@available(watchOS, deprecated)
extension SwiftUI.GaugeStyle where Self == SwiftUI.CircularProgressGaugeStyle {
  @_spi(Private) @available(*, deprecated, renamed: "accessoryCircularCapacity")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var circularProgress: SwiftUI.CircularProgressGaugeStyle {
    @_spi(Private) get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ButtonStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ButtonStyleConfiguration
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct ButtonStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public let role: SwiftUI.ButtonRole?
  public let label: SwiftUI.ButtonStyleConfiguration.Label
  public let isPressed: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ButtonStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ButtonStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func buttonStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ButtonStyle
  
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol ButtonStyleConvertible {
  associatedtype ButtonStyleRepresentation : SwiftUI.ButtonStyle
  @_spi(UIFrameworks) var buttonStyleRepresentation: Self.ButtonStyleRepresentation { get }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.CircularGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var circular: SwiftUI.CircularGaugeStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CircularGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Gradient)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(watchOS 7.0, *)
  @available(iOS, unavailable, introduced: 16.0)
  @available(tvOS, unavailable)
  @available(macOS, unavailable, introduced: 13.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18CircularGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CircularGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated)
@available(macOS, deprecated)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.ComplicationCircularGaugeStyle {
  @_spi(Private) @available(iOS, deprecated, renamed: "accessoryCircular")
  @available(macOS, deprecated, renamed: "accessoryCircular")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var complicationCircular: SwiftUI.ComplicationCircularGaugeStyle {
    @_spi(Private) get {
        .init()
    }
  }
}
@_spi(Private) @available(iOS, deprecated, renamed: "AccessoryCircularGaugeStyle")
@available(macOS, deprecated, renamed: "AccessoryCircularGaugeStyle")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ComplicationCircularGaugeStyle : SwiftUI.GaugeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Color)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Gradient)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ComplicationCircularGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, deprecated, introduced: 16.0, renamed: "AccessoryCircularGaugeStyle")
  @available(tvOS, unavailable, renamed: "AccessoryCircularGaugeStyle")
  @available(watchOS, unavailable, introduced: 7.0, renamed: "AccessoryCircularGaugeStyle")
  @available(macOS, deprecated, introduced: 13.0, renamed: "AccessoryCircularGaugeStyle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI30ComplicationCircularGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ComplicationCircularGaugeStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol TextFieldStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _body(configuration: SwiftUI.TextField<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._TextFieldStyleLabel
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct _TextFieldStyleLabel : SwiftUICore.View {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TextFieldStyleLabel : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func textFieldStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.TextFieldStyle
  
}
@_spi(Private) @available(iOS 16.1, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func allowsSecureDrawing() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(Private) nonisolated public func allowsSecureDrawing(_ enabled: Swift.Bool = true) -> some SwiftUI.Scene
  
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.MultimodalListStyle {
  @_spi(Private) @_alwaysEmitIntoClient public static var multimodal: SwiftUI.MultimodalListStyle {
    @_spi(Private) get { .init() }
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient public static func multimodal(layout: SwiftUI.MultimodalListStyle.Layout? = nil, iconStyle: SwiftUI.MultimodalListStyle.IconStyle = .circle) -> SwiftUI.MultimodalListStyle {
        .init(layout: layout, iconStyle: iconStyle)
    }
  #else
  @_spi(Private) @_alwaysEmitIntoClient public static func multimodal(layout: SwiftUI.MultimodalListStyle.Layout? = nil, iconStyle: SwiftUI.MultimodalListStyle.IconStyle = .circle) -> SwiftUI.MultimodalListStyle {
        .init(layout: layout, iconStyle: iconStyle)
    }
  #endif
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct MultimodalListStyle : SwiftUI.ListStyle {
  @_spi(Private) public enum Layout : Swift.Int, Swift.CaseIterable {
    @_spi(Private) case grid
    @_spi(Private) case stack
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public init?(rawValue: Swift.Int)
    #else
    @_spi(Private) public init?(rawValue: Swift.Int)
    #endif
    @_spi(Private) @available(iOS 16.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias AllCases = [SwiftUI.MultimodalListStyle.Layout]
    @_spi(Private) @available(iOS 16.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    public typealias RawValue = Swift.Int
    @_spi(Private) public static var allCases: [SwiftUI.MultimodalListStyle.Layout] {
      @_spi(Private) get
    }
    @_spi(Private) public var rawValue: Swift.Int {
      @_spi(Private) get
    }
  }
  @_spi(Private) public enum IconStyle : Swift.Sendable {
    @_spi(Private) case circle
    @_spi(Private) case square
    @_spi(Private) case homeScreen
    @_spi(Private) public static func == (a: SwiftUI.MultimodalListStyle.IconStyle, b: SwiftUI.MultimodalListStyle.IconStyle) -> Swift.Bool
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(layout: SwiftUI.MultimodalListStyle.Layout? = nil, iconStyle: SwiftUI.MultimodalListStyle.IconStyle = .circle)
  #else
  @_spi(Private) public init(layout: SwiftUI.MultimodalListStyle.Layout? = nil, iconStyle: SwiftUI.MultimodalListStyle.IconStyle = .circle)
  #endif
  @_spi(Private) nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.MultimodalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  @_spi(Private) nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.MultimodalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.MultimodalListStyle : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.MultimodalListStyle.Layout : Swift.Sendable {
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MultimodalListGridLabelStyle : SwiftUI.LabelStyle {
  @_spi(ClarityBoard) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(ClarityBoard) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.MultimodalListGridLabelStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(ClarityBoard) @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28MultimodalListGridLabelStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@_spi(ClarityBoard) @available(*, unavailable)
extension SwiftUI.MultimodalListGridLabelStyle : Swift.Sendable {
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct UIHostingConfiguration<Content, Background> : UIKit.UIContentConfiguration where Content : SwiftUICore.View, Background : SwiftUICore.View {
  public func background<B>(@SwiftUICore.ViewBuilder content: () -> B) -> SwiftUI.UIHostingConfiguration<Content, B> where B : SwiftUICore.View
  public func background<S>(_ style: S) -> SwiftUI.UIHostingConfiguration<Content, SwiftUI._UIHostingConfigurationBackgroundView<S>> where S : SwiftUICore.ShapeStyle
  public func margins(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat) -> SwiftUI.UIHostingConfiguration<Content, Background>
  public func margins(_ edges: SwiftUICore.Edge.Set = .all, _ insets: SwiftUICore.EdgeInsets) -> SwiftUI.UIHostingConfiguration<Content, Background>
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func minSize(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil) -> SwiftUI.UIHostingConfiguration<Content, Background>
  #else
  public func minSize(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil) -> SwiftUI.UIHostingConfiguration<Content, Background>
  #endif
  @available(*, deprecated, message: "Please pass one or more parameters.")
  @_alwaysEmitIntoClient public func minSize() -> SwiftUI.UIHostingConfiguration<Content, Background> { self }
  @_Concurrency.MainActor public func makeContentView() -> any UIKit.UIView & UIKitCore.UIContentView
  public func updated(for state: any UIKit.UIConfigurationState) -> SwiftUI.UIHostingConfiguration<Content, Background>
}
extension SwiftUI.UIHostingConfiguration {
  @_spi(Private) @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
  public func animatedSizeInvalidationDisabled() -> SwiftUI.UIHostingConfiguration<Content, Background>
}
@available(*, unavailable)
extension SwiftUI.UIHostingConfiguration : Swift.Sendable {
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIHostingConfiguration where Background == SwiftUICore.EmptyView {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _UIHostingConfigurationBackgroundView<Style> : SwiftUICore.View where Style : SwiftUICore.ShapeStyle {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, *)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI37_UIHostingConfigurationBackgroundViewV4bodyQrvp", 0) __<Style>
}
@available(*, unavailable)
extension SwiftUI._UIHostingConfigurationBackgroundView : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct SharePreview<Image, Icon> where Image : CoreTransferable.Transferable, Icon : CoreTransferable.Transferable {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Image, icon: Icon)
  @_disfavoredOverload public init<S>(_ title: S, image: Image, icon: Icon) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, image: Image, icon: Icon)
}
@available(*, unavailable)
extension SwiftUI.SharePreview : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SharePreview where Image == Swift.Never {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, icon: Icon)
  @_disfavoredOverload public init<S>(_ title: S, icon: Icon) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, icon: Icon)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SharePreview where Icon == Swift.Never {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Image)
  @_disfavoredOverload public init<S>(_ title: S, image: Image) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text, image: Image)
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.SharePreview where Image == Swift.Never, Icon == Swift.Never {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey)
  @_disfavoredOverload public init<S>(_ title: S) where S : Swift.StringProtocol
  public init(_ title: SwiftUICore.Text)
  @_spi(Private) public init(metadata: Any)
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationLink where Destination == Swift.Never {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Hashable
  #else
  nonisolated public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(presenting value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Hashable
  #else
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(presenting value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Hashable
  #else
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, presenting value: P?) where Label == SwiftUICore.Text, P : Swift.Hashable
  #else
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, presenting value: P?) where Label == SwiftUICore.Text, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Hashable
  #else
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, presenting value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Hashable
  #else
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, presenting value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #else
  nonisolated public init<P>(value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(presenting value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #else
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(presenting value: P?, @SwiftUICore.ViewBuilder label: () -> Label) where P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #else
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, value: P?) where Label == SwiftUICore.Text, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, presenting value: P?) where Label == SwiftUICore.Text, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #else
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  nonisolated public init<P>(_ titleKey: SwiftUICore.LocalizedStringKey, presenting value: P?) where Label == SwiftUICore.Text, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #else
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, presenting value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #else
  @_spi(_) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
  @_disfavoredOverload nonisolated public init<S, P>(_ title: S, presenting value: P?) where Label == SwiftUICore.Text, S : Swift.StringProtocol, P : Swift.Decodable, P : Swift.Encodable, P : Swift.Hashable
  #endif
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._DrawingGroupEffect {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var rendersAsynchronously: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func alert<A>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func alert<S, A>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func alert<A>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func alert<A, M>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func alert<S, A, M>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func alert<A, M>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func alert<A, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #else
  nonisolated public func alert<A, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public func alert<S, A, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  #else
  @_disfavoredOverload nonisolated public func alert<S, A, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func alert<A, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #else
  nonisolated public func alert<A, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func alert<A, M, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #else
  nonisolated public func alert<A, M, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public func alert<S, A, M, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  #else
  @_disfavoredOverload nonisolated public func alert<S, A, M, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func alert<A, M, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #else
  nonisolated public func alert<A, M, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func alert<E, A>(isPresented: SwiftUICore.Binding<Swift.Bool>, error: E?, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where E : Foundation.LocalizedError, A : SwiftUICore.View
  
  #else
  nonisolated public func alert<E, A>(isPresented: SwiftUICore.Binding<Swift.Bool>, error: E?, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where E : Foundation.LocalizedError, A : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func alert<E, A, M>(isPresented: SwiftUICore.Binding<Swift.Bool>, error: E?, @SwiftUICore.ViewBuilder actions: (E) -> A, @SwiftUICore.ViewBuilder message: (E) -> M) -> some SwiftUICore.View where E : Foundation.LocalizedError, A : SwiftUICore.View, M : SwiftUICore.View
  
  #else
  nonisolated public func alert<E, A, M>(isPresented: SwiftUICore.Binding<Swift.Bool>, error: E?, @SwiftUICore.ViewBuilder actions: (E) -> A, @SwiftUICore.ViewBuilder message: (E) -> M) -> some SwiftUICore.View where E : Foundation.LocalizedError, A : SwiftUICore.View, M : SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 18.0, macOS 13.0, tvOS 18.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func alert<A, M, C>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M, @SwiftUICore.ViewBuilder auxiliaryContent: () -> C) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View, C : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func alert<A, M, C, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M, @SwiftUICore.ViewBuilder auxiliaryContent: (T) -> C) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View, C : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func alert<A, M, C, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M, @SwiftUICore.ViewBuilder auxiliaryContent: (T) -> C) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View, C : SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func pasteDestination<T>(for payloadType: T.Type = T.self, action: @escaping ([T]) -> Swift.Void, validator: @escaping ([T]) -> [T] = { $0 }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @_spi(_) @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use cuttable(for:action:).")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func cuttable<T>(for type: T.Type = T.self, _ isEnabled: Swift.Bool = true, action: @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func cuttable<T>(for payloadType: T.Type = T.self, action: @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @_spi(_) @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use copyable(_:).")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func copyable<T>(_ isEnabled: Swift.Bool = true, payload: @autoclosure @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func copyable<T>(_ payload: @autoclosure @escaping () -> [T]) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCommand(_ selector: ObjectiveC.Selector, perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCommand(_ selector: ObjectiveC.Selector, perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #endif
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPasteCommand(of supportedContentTypes: [UniformTypeIdentifiers.UTType], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPasteCommand<Payload>(of supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @available(macOS 11.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPasteCommand<Payload>(of supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCopyCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCopyCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCutCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onCutCommand(perform payloadAction: (() -> [Foundation.NSItemProvider])?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onPasteCommand(of supportedTypes: [Swift.String], perform payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func onPasteCommand<Payload>(of supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  nonisolated public func onPasteCommand<Payload>(of supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, perform payloadAction: @escaping (Payload) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func searchSuggestions<S>(@SwiftUICore.ViewBuilder _ suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(tvOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
  #else
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(tvOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
  #endif
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(tvOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  nonisolated public func searchable<S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where S : SwiftUICore.View
  
  @available(iOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(tvOS, introduced: 15.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, message: "Use the searchable modifier with the searchSuggestions modifier")
  @_disfavoredOverload nonisolated public func searchable<V, S>(text: SwiftUICore.Binding<Swift.String>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder suggestions: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View, S : Swift.StringProtocol
  
}
extension SwiftUICore.View {
  @_spi(Private_Search) @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func customSearchAccessory(isActive: Swift.Bool, @SwiftUICore.ViewBuilder accessory: () -> some View) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  @available(macOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  @available(tvOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  @available(watchOS, deprecated: 100000.0, message: "Use `Tab(title:image:value:content:)` and related initializers instead")
  nonisolated public func tabItem<V>(@SwiftUICore.ViewBuilder _ label: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct TabItemLabel_v0 : SwiftUICore.View {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15TabItemLabel_v0V4bodyQrvp", 0) __
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.TabItemLabel_v0 : Swift.Sendable {
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ContainerValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) public var tabItemLabel_v0: SwiftUI.TabItemLabel_v0? {
    @_spi(UIFrameworks) get
    @_spi(UIFrameworks) set
  }
  #else
  @_spi(UIFrameworks) public var tabItemLabel_v0: SwiftUI.TabItemLabel_v0? {
    @_spi(UIFrameworks) get
    @_spi(UIFrameworks) set
  }
  #endif
}
extension SwiftUICore.Transaction {
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func barrier()
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func synchronized<T>(_ body: () throws -> T) rethrows -> T
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> SwiftUI._KeyboardShortcutPickerContent<Self>
  #else
  @_spi(Private) public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> SwiftUI._KeyboardShortcutPickerContent<Self>
  #endif
  @_spi(Private) public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command) -> SwiftUI._KeyboardShortcutPickerContent<Self>
  @_spi(Private) public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization) -> SwiftUI._KeyboardShortcutPickerContent<Self>
  @_spi(Private) @available(iOS, unavailable)
  public func keyboardShortcut(modifiers: SwiftUICore.EventModifiers) -> SwiftUI._KeyboardShortcutPickerContent<Self>
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _KeyboardShortcutPickerContent<Base> : SwiftUI.PickerContent where Base : SwiftUI.PickerContent {
  @_spi(Private) public typealias SelectionValue = Base.SelectionValue
  @_spi(Private) public var _identifiedView: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 16.0)
  @available(watchOS, unavailable, introduced: 9.0)
  public typealias Body = SwiftUI._KeyboardShortcutPickerContent<Base>
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 16.0)
  @available(watchOS, unavailable, introduced: 9.0)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI30_KeyboardShortcutPickerContentV15_identifiedViewQrvp", 0) __<Base>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._KeyboardShortcutPickerContent : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable nonisolated public func pickerKeyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUICore.View {
        _trait(KeyboardShortcutPickerOptionTraitKey.self, shortcut)
    }
  
  #else
  @_spi(Private) @inlinable nonisolated public func pickerKeyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUICore.View {
        _trait(KeyboardShortcutPickerOptionTraitKey.self, shortcut)
    }
  
  #endif
  @_spi(Private) nonisolated public func pickerKeyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func pickerKeyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
internal struct KeyboardShortcutPickerOptionTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUI.KeyboardShortcut? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUI.KeyboardShortcut? {
    get { nil }
  }
  #endif
  @available(iOS 14.0, macOS 11.0, *)
  @usableFromInline
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  internal typealias Value = SwiftUI.KeyboardShortcut?
}
@available(*, unavailable)
extension SwiftUI.KeyboardShortcutPickerOptionTraitKey : Swift.Sendable {
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.Edge : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int8 {
    get
  }
  package static func unwrap(codingProxy: Swift.Int8) -> SwiftUICore.Edge
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = Swift.Int8
}
#else
extension SwiftUICore.Edge : SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int8 {
    get
  }
  package static func unwrap(codingProxy: Swift.Int8) -> SwiftUICore.Edge
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = Swift.Int8
}
#endif
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func anchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUICore.Anchor<A>.Source, transform: @escaping (SwiftUICore.Anchor<A>) -> K.Value) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_AnchorWritingModifier<A, K>(
            anchor: value, transform: transform))
    }
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public func anchorPreference<A, K>(key: K.Type, unanimatedValue value: SwiftUICore.Anchor<A>.Source, transform: @escaping (SwiftUICore.Anchor<A>) -> K.Value) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_AnchorWritingModifier2<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AnchorWritingModifier<AnchorValue, Key> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey {
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.Anchor<AnchorValue>.Source
  @_Concurrency.MainActor @preconcurrency public var transform: (SwiftUICore.Anchor<AnchorValue>) -> Key.Value
  @inlinable nonisolated public init(anchor: SwiftUICore.Anchor<AnchorValue>.Source, transform: @escaping (SwiftUICore.Anchor<AnchorValue>) -> Key.Value) {
        self.anchor = anchor
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AnchorWritingModifier<AnchorValue, Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._AnchorWritingModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AnchorWritingModifier2<AnchorValue, Key> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var base: SwiftUI._AnchorWritingModifier<AnchorValue, Key>
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(anchor: SwiftUICore.Anchor<AnchorValue>.Source, transform: @escaping (SwiftUICore.Anchor<AnchorValue>) -> Key.Value) {
        base = .init(anchor: anchor, transform: transform)
    }
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AnchorWritingModifier2<AnchorValue, Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._AnchorWritingModifier2 : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@propertyWrapper @frozen public struct LazyState<Value> : SwiftUICore.DynamicProperty {
  @_spi(Private) @usableFromInline
  internal enum Storage {
    @_spi(Private) case thunk(() -> Value)
    @_spi(Private) case value(Value)
  }
  @_spi(Private) internal var _storage: SwiftUI.LazyState<Value>.Storage
  @_spi(Private) internal var _location: SwiftUICore.AnyLocation<Value>?
  @_spi(Private) public init(wrappedValue thunk: @autoclosure @escaping () -> Value)
  @_spi(Private) public var wrappedValue: Value {
    @_spi(Private) get
    @_spi(Private) nonmutating set
  }
  @_spi(Private) public var projectedValue: SwiftUICore.Binding<Value> {
    @_spi(Private) get
  }
  @_spi(Private) public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LazyState : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.LazyState where Value : Swift.ExpressibleByNilLiteral {
  @_spi(Private) @inlinable public init() {
        self.init(wrappedValue: nil)
    }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LazyState.Storage : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnMoveTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void> {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void> {
    get { nil }
  }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>
}
@available(*, unavailable)
extension SwiftUI.OnMoveTraitKey : Swift.Sendable {
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct OnMoveClipBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 15.0, *)
  @usableFromInline
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.OnMoveClipBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.DynamicViewContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func onMove(perform action: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        modifier(_TraitWritingModifier<OnMoveTraitKey>(value: action))
    }
  
  #else
  @inlinable nonisolated public func onMove(perform action: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        modifier(_TraitWritingModifier<OnMoveTraitKey>(value: action))
    }
  
  #endif
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.DynamicViewContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable nonisolated public func onMove(clipBackground: Swift.Bool, perform action: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        modifier(_TraitWritingModifier<OnMoveTraitKey>(value: action))
            .modifier(_TraitWritingModifier<OnMoveClipBackgroundTraitKey>(
                value: clipBackground))
    }
  
  #else
  @_spi(Private) @inlinable nonisolated public func onMove(clipBackground: Swift.Bool, perform action: Swift.Optional<(Foundation.IndexSet, Swift.Int) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        modifier(_TraitWritingModifier<OnMoveTraitKey>(value: action))
            .modifier(_TraitWritingModifier<OnMoveClipBackgroundTraitKey>(
                value: clipBackground))
    }
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsMoveDisabledTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsMoveDisabledTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func moveDisabled(_ isDisabled: Swift.Bool) -> some SwiftUICore.View {
        return _trait(IsMoveDisabledTraitKey.self, isDisabled)
    }
  
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Group {
  @_spi(ForMapKitOnly) public static func create(_ content: Content) -> SwiftUICore.Group<Content>
  @_spi(ForMapKitOnly) public var mapKitContent: Content {
    @_spi(ForMapKitOnly) get
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) nonisolated public func scrollContentBackground<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #else
  @_spi(_) nonisolated public func scrollContentBackground<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #endif
  nonisolated public func scrollContentBackground(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@preconcurrency @_Concurrency.MainActor public protocol WidgetBundle {
  associatedtype Body : SwiftUI.Widget
  @_Concurrency.MainActor @preconcurrency init()
  @SwiftUI.WidgetBundleBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PickerStyle where Self == SwiftUI.DefaultPickerStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct DefaultPickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.DefaultPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.DefaultPickerStyle : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor public struct DismissImmersiveSpaceAction {
  @_Concurrency.MainActor public func callAsFunction() async
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var dismissImmersiveSpace: SwiftUI.DismissImmersiveSpaceAction {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 1.0, watchOS 11.0, *)
public protocol PresentationSizing {
  @_spi(_) @available(*, deprecated, renamed: "proposedSize(for:context:)", message: "Use the version taking a PresentationSizingRoot")
  func proposedSize(for subview: SwiftUI.PresentationSubview, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
  func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
  @_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
  func sizingOptions(context: SwiftUI.PresentationSizingContext) -> SwiftUI.PresentationSizingOptions
}
@_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing {
  @_spi(_) public func sizingOptions(context: SwiftUI.PresentationSizingContext) -> SwiftUI.PresentationSizingOptions
  @_spi(_) public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
  @_spi(_) @available(*, deprecated, message: "Use the overload taking PresentationSizingRoot")
  public func proposedSize(for subview: SwiftUI.PresentationSubview, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
}
@_spi(_) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct PresentationSizingOptions : Swift.Sendable {
}
@_spi(_) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "PresentationSizingRoot")
@available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "PresentationSizingRoot")
@available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "PresentationSizingRoot")
@available(watchOS, introduced: 11.0, deprecated: 11.0, renamed: "PresentationSizingRoot")
@available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "PresentationSizingRoot")
public struct PresentationSubview {
  @_spi(_) public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.PresentationSubview : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct PresentationSizingRoot {
  public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
}
@available(*, unavailable)
extension SwiftUI.PresentationSizingRoot : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct PresentationSizingContext {
}
extension SwiftUI.PresentationSizing {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
  public func sticky(horizontal: Swift.Bool = false, vertical: Swift.Bool = false) -> some SwiftUI.PresentationSizing
  
}
extension SwiftUI.PresentationSizing {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
  public func fitted(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUI.PresentationSizing
  
}
@available(*, unavailable)
extension SwiftUI.PresentationSizingContext : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct FormPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
  @_spi(_) public func sizingOptions(context: SwiftUI.PresentationSizingContext) -> SwiftUI.PresentationSizingOptions
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.FormPresentationSizing {
  public static var form: SwiftUI.FormPresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct PagePresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
  @_spi(_) public func sizingOptions(context: SwiftUI.PresentationSizingContext) -> SwiftUI.PresentationSizingOptions
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.PagePresentationSizing {
  public static var page: SwiftUI.PagePresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct FittedPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.FittedPresentationSizing {
  public static var fitted: SwiftUI.FittedPresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUICore.View {
  nonisolated public func presentationSizing(_ sizing: some PresentationSizing) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
extension SwiftUI.PresentationSizing where Self == SwiftUI.AutomaticPresentationSizing {
  public static var automatic: SwiftUI.AutomaticPresentationSizing {
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
public struct AutomaticPresentationSizing : SwiftUI.PresentationSizing, Swift.Sendable {
  public func proposedSize(for root: SwiftUI.PresentationSizingRoot, context: SwiftUI.PresentationSizingContext) -> SwiftUICore.ProposedViewSize
  @_spi(_) public func sizingOptions(context: SwiftUI.PresentationSizingContext) -> SwiftUI.PresentationSizingOptions
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 1.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "PresentationSizing")
public protocol PresentationSizeBehavior {
  @_spi(Private) @available(*, deprecated, renamed: "PresentationSizing.proposedSize(for:context:)")
  func proposedSize(for context: SwiftUI.PresentationSizeBehaviorContext) -> SwiftUICore.ProposedViewSize
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 1.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "PresentationSizingContext")
public struct PresentationSizeBehaviorContext {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PresentationSizeBehaviorContext : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 1.0, watchOS 11.0, *)
extension SwiftUICore.View {
  @_spi(Private) @available(*, deprecated, renamed: "presentationSizing(_:)")
  nonisolated public func presentationSizeBehavior(_ behavior: some PresentationSizeBehavior) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 1.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "PresentationSizing.form")
extension SwiftUI.PresentationSizeBehavior where Self == SwiftUI.FormPresentationSizeBehavior {
  @_spi(Private) @available(*, deprecated, renamed: "PresentationSizing.form")
  public static var form: SwiftUI.FormPresentationSizeBehavior {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 1.0, watchOS 11.0, *)
@available(*, deprecated, renamed: "FormPresentationSizing")
public struct FormPresentationSizeBehavior : SwiftUI.PresentationSizeBehavior, Swift.Sendable {
  @_spi(Private) public func proposedSize(for context: SwiftUI.PresentationSizeBehaviorContext) -> SwiftUICore.ProposedViewSize
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var withCurrentWindow: SwiftUI.WithCurrentWindowAction {
    @_spi(Private) get
  }
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WithCurrentWindowAction {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WithCurrentWindowAction : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func clarityUIIdiom() -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol _TableRowContentModifier {
  associatedtype Body : SwiftUI._TableRowContentModifier
  var body: Self.Body { get }
  static func _makeRows(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
  #else
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._TableRowContentModifier {
  public static func _makeRows(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs, body: @escaping (SwiftUI._TableRowInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI._TableRowContentModifier {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent, Modifier : SwiftUI._TableRowContentModifier {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  public var tableRowBody: Swift.Never {
    get
  }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.DynamicTableRowContent where Content : SwiftUI.DynamicTableRowContent, Modifier : SwiftUI._TableRowContentModifier {
  public var data: Content.Data {
    get
  }
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Data = Content.Data
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol UIViewControllerRepresentable : SwiftUICore.View where Self.Body == Swift.Never {
  associatedtype UIViewControllerType : UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency func makeUIViewController(context: Self.Context) -> Self.UIViewControllerType
  @_Concurrency.MainActor @preconcurrency func updateUIViewController(_ uiViewController: Self.UIViewControllerType, context: Self.Context)
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, *)
  @_Concurrency.MainActor @preconcurrency func _resetUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency static func dismantleUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  @_Concurrency.MainActor @preconcurrency func makeCoordinator() -> Self.Coordinator
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CoreFoundation.CGSize?
  #else
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CoreFoundation.CGSize?
  #endif
  @_Concurrency.MainActor @preconcurrency func _identifiedViewTree(in uiViewController: Self.UIViewControllerType) -> SwiftUI._IdentifiedViewTree
  @available(iOS 17.0, tvOS 17.0, *)
  @_Concurrency.MainActor @preconcurrency static func _layoutOptions(_ provider: Self.UIViewControllerType) -> Self.LayoutOptions
  typealias Context = SwiftUI.UIViewControllerRepresentableContext<Self>
  @available(iOS 17.0, tvOS 17.0, *)
  typealias LayoutOptions = SwiftUI._PlatformViewRepresentableLayoutOptions
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewControllerRepresentable where Self.Coordinator == () {
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> Self.Coordinator
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewControllerRepresentable {
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public func _resetUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CoreFoundation.CGSize?
  #else
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CoreFoundation.CGSize?
  #endif
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIViewController(_ uiViewController: Self.UIViewControllerType, coordinator: Self.Coordinator)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @_Concurrency.MainActor @preconcurrency public func _identifiedViewTree(in uiViewController: Self.UIViewControllerType) -> SwiftUI._IdentifiedViewTree
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public static func _layoutOptions(_ provider: Self.UIViewControllerType) -> Self.LayoutOptions
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct UIViewControllerRepresentableContext<Representable> where Representable : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public let coordinator: Representable.Coordinator
  @_Concurrency.MainActor @preconcurrency public var transaction: SwiftUICore.Transaction {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func animate(changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  #else
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func animate(changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Section<Parent, Content, Footer> {
}
@available(*, unavailable)
extension SwiftUI.Section : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section : SwiftUICore.View, SwiftUICore.PrimitiveView where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  public typealias Body = Swift.Never
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Parent, @SwiftUICore.ViewBuilder footer: () -> Footer) {
        self.init(header: header(), footer: footer(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.EmptyView, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder footer: () -> Footer) {
        self.init(footer: footer(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  @_alwaysEmitIntoClient public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Parent) {
        self.init(header: header(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.EmptyView, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.Text, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.Text, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload public init<S>(_ title: S, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 16.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @_spi(Private) public func collapsible(_ collapsible: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsCollapsibleTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { true }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsCollapsibleTraitKey : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  public init(isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Parent)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Section(content:header:footer:)")
  public init(header: Parent, footer: Footer, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent == SwiftUICore.EmptyView, Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Section(content:footer:)")
  public init(footer: Footer, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Section where Parent : SwiftUICore.View, Content : SwiftUICore.View, Footer == SwiftUICore.EmptyView {
  @available(iOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(macOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Section(content:header:)")
  public init(header: Parent, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.AutomaticHoverEffect {
  public static var automatic: SwiftUI.AutomaticHoverEffect {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct AutomaticHoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.InternalCustomHoverEffect {
  public init()
  public func body(content: SwiftUI.AutomaticHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    get
  }
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20AutomaticHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticHoverEffect : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.HighlightHoverEffect {
  public static var highlight: SwiftUI.HighlightHoverEffect {
    get
  }
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.HighlightHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static func highlight(background: Swift.Bool) -> SwiftUI.HighlightHoverEffect
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct HighlightHoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.InternalCustomHoverEffect {
  public init()
  public func body(content: SwiftUI.HighlightHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    get
  }
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20HighlightHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.HighlightHoverEffect : Swift.Sendable {
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.LiftHoverEffect {
  public static var lift: SwiftUI.LiftHoverEffect {
    get
  }
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct LiftHoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.InternalCustomHoverEffect {
  public init()
  public func body(content: SwiftUI.LiftHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    get
  }
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15LiftHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LiftHoverEffect : Swift.Sendable {
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.SpotlightHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static var spotlight: SwiftUI.SpotlightHoverEffect {
    @_spi(UIFrameworks) @_spi(CustomHoverEffects) get
  }
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.SpotlightHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static func spotlight(background: Swift.Bool) -> SwiftUI.SpotlightHoverEffect
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SpotlightHoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.InternalCustomHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public init()
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func body(content: SwiftUI.SpotlightHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    @_spi(UIFrameworks) @_spi(CustomHoverEffects) get
  }
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
  @available(iOS, unavailable, introduced: 18.0)
  @available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20SpotlightHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(*, unavailable)
extension SwiftUI.SpotlightHoverEffect : Swift.Sendable {
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect where Self == SwiftUI.GlowHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static var glowEffect: SwiftUI.GlowHoverEffect {
    @_spi(UIFrameworks) @_spi(CustomHoverEffects) get
  }
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func glowEffect() -> some SwiftUICore.CustomHoverEffect
  
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct GlowHoverEffect : SwiftUICore.CustomHoverEffect, SwiftUICore.InternalCustomHoverEffect {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func body(content: SwiftUI.GlowHoverEffect.Content) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) package var systemHoverEffect: SwiftUICore.SystemHoverEffect {
    @_spi(UIFrameworks) @_spi(CustomHoverEffects) get
  }
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
  @available(iOS, unavailable, introduced: 18.0)
  @available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15GlowHoverEffectV4body7contentQrAA05EmptydE0V_tF", 0) __
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(*, unavailable)
extension SwiftUI.GlowHoverEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct NavigationLink<Label, Destination> : SwiftUICore.View where Label : SwiftUICore.View, Destination : SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public init(@SwiftUICore.ViewBuilder destination: () -> Destination, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(destination: destination(), label: label)
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init(isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> Destination, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(destination: destination(), isActive: isActive, label: label)
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init<V>(tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable {
        self.init(
            destination: destination(),
            tag: tag,
            selection: selection,
            label: label)
    }
  #else
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init<V>(tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable {
        self.init(
            destination: destination(),
            tag: tag,
            selection: selection,
            label: label)
    }
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  nonisolated public init(destination: Destination, @SwiftUICore.ViewBuilder label: () -> Label)
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init(destination: Destination, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder label: () -> Label)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init<V>(destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable
  #else
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init<V>(destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14NavigationLinkV4bodyQrvp", 0) __<Label, Destination>
}
@available(*, unavailable)
extension SwiftUI.NavigationLink : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.NavigationLink where Label == SwiftUICore.Text {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder destination: () -> Destination) {
        self.init(titleKey, destination: destination())
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol {
        self.init(title, destination: destination())
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> Destination) {
        self.init(titleKey, destination: destination(), isActive: isActive)
    }
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol {
        self.init(title, destination: destination(), isActive: isActive)
    }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination) where V : Swift.Hashable {
        self.init(
            titleKey,
            destination: destination(),
            tag: tag, selection: selection)
    }
  #else
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_alwaysEmitIntoClient nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination) where V : Swift.Hashable {
        self.init(
            titleKey,
            destination: destination(),
            tag: tag, selection: selection)
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S, V>(_ title: S, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol, V : Swift.Hashable {
        self.init(
            title,
            destination: destination(),
            tag: tag, selection: selection)
    }
  #else
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S, V>(_ title: S, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder destination: () -> Destination) where S : Swift.StringProtocol, V : Swift.Hashable {
        self.init(
            title,
            destination: destination(),
            tag: tag, selection: selection)
    }
  #endif
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Destination)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Pass a closure as the destination")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, destination: Destination) where S : Swift.StringProtocol
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Destination, isActive: SwiftUICore.Binding<Swift.Bool>)
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, destination: Destination, isActive: SwiftUICore.Binding<Swift.Bool>) where S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>) where V : Swift.Hashable
  #else
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>) where V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>) where S : Swift.StringProtocol, V : Swift.Hashable
  #else
  @available(iOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(macOS, introduced: 10.15, deprecated: 13.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(tvOS, introduced: 13.0, deprecated: 16.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(watchOS, introduced: 6.0, deprecated: 9.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @available(visionOS, introduced: 1.0, deprecated: 1.0, message: "use NavigationLink(value:label:), or navigationDestination(isPresented:destination:), inside a NavigationStack or NavigationSplitView")
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, destination: Destination, tag: V, selection: SwiftUICore.Binding<V?>) where S : Swift.StringProtocol, V : Swift.Hashable
  #endif
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.NavigationLink where Destination == SwiftUI._WKStoryboardContent {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use NavigationLink(value:label:)")
  nonisolated public init(destinationName: Swift.String, @SwiftUICore.ViewBuilder label: () -> Label)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use NavigationLink(value:label:)")
  nonisolated public init(destinationName: Swift.String, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder label: () -> Label)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use NavigationLink(value:label:)")
  nonisolated public init<V>(destinationName: Swift.String, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use NavigationLink(value:label:)")
  nonisolated public init<V>(destinationName: Swift.String, tag: V, selection: SwiftUICore.Binding<V?>, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Hashable
  #endif
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NavigationLink {
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func isDetailLink(_ isDetailLink: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func rotation3DEffect(_ angle: SwiftUICore.Angle, axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat), anchor: SwiftUICore.UnitPoint = .center, anchorZ: CoreFoundation.CGFloat = 0, perspective: CoreFoundation.CGFloat = 1) -> some SwiftUICore.View {
        return modifier(_Rotation3DEffect(
            angle: angle, axis: axis, anchor: anchor, anchorZ: anchorZ,
            perspective: perspective
        ))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  public func rotation3DEffect(_ angle: SwiftUICore.Angle, axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat), anchor: SwiftUICore.UnitPoint = .center, anchorZ: CoreFoundation.CGFloat = 0, perspective: CoreFoundation.CGFloat = 1) -> some SwiftUICore.VisualEffect
  
}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(*, deprecated, message: "Use rotation3DEffect instead")
extension SwiftUICore.VisualEffect {
  @_spi(_) public func rotation3D(_ angle: SwiftUICore.Angle, axis: (x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat, z: CoreFoundation.CGFloat), anchor: SwiftUICore.UnitPoint = .center, anchorZ: CoreFoundation.CGFloat = 0, perspective: CoreFoundation.CGFloat = 1) -> some SwiftUICore.VisualEffect
  
}
@available(iOS 17.0, tvOS 17.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func definesContextMenuPreview() -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct ViewThatFits<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUI._SizeFittingRoot, Content>
  @inlinable nonisolated public init(in axes: SwiftUICore.Axis.Set = [.horizontal, .vertical], @SwiftUICore.ViewBuilder content: () -> Content) {
        _tree = .init(_SizeFittingRoot(axes: axes)) { content() }
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.ViewThatFits<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ViewThatFits : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct _SizeFittingRoot : SwiftUICore._VariadicView.UnaryViewRoot {
  @usableFromInline
  internal var axes: SwiftUICore.Axis.Set
  @inlinable internal init(axes: SwiftUICore.Axis.Set) { self.axes = axes }
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI._SizeFittingRoot>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
final package class SizeFittingState {
  @objc deinit
}
package protocol PlatformViewThatFitsRepresentable {
  static func shouldMakeRepresentation(inputs: SwiftUICore._ViewInputs) -> Swift.Bool
  static func makeRepresentation(inputs: SwiftUICore._ViewInputs, state: SwiftUI.SizeFittingState, outputs: inout SwiftUICore._ViewOutputs)
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedViewThatFitsRepresentation: (any SwiftUI.PlatformViewThatFitsRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedViewThatFitsRepresentation: (any SwiftUI.PlatformViewThatFitsRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedViewThatFitsRepresentation: (any SwiftUI.PlatformViewThatFitsRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedViewThatFitsRepresentation: (any SwiftUI.PlatformViewThatFitsRepresentable.Type)? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableContentProvider {
  associatedtype ScrollableContent : SwiftUICore.View
  var scrollableContent: Self.ScrollableContent { get }
  associatedtype Root : SwiftUICore.View
  func root(scrollView: SwiftUI._ScrollView<Self>.Main) -> Self.Root
  #if compiler(>=5.3) && $NoncopyableGenerics
  func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #else
  func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableContentProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #else
  public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollViewGestureProvider {
  func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUICore.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewGestureProvider {
  public func defaultScrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func defaultGestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUICore.GestureMask
  public func scrollableDirections(proxy: SwiftUI._ScrollViewProxy) -> SwiftUI._EventDirections
  public func gestureMask(proxy: SwiftUI._ScrollViewProxy) -> SwiftUICore.GestureMask
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewConfig {
  public static let decelerationRateNormal: Swift.Double
  public static let decelerationRateFast: Swift.Double
  public enum ContentOffset {
    case initially(CoreFoundation.CGPoint)
    case binding(SwiftUICore.Binding<CoreFoundation.CGPoint>)
  }
  public var contentOffset: SwiftUI._ScrollViewConfig.ContentOffset
  public var contentInsets: SwiftUICore.EdgeInsets
  public var decelerationRate: Swift.Double
  public var alwaysBounceVertical: Swift.Bool
  public var alwaysBounceHorizontal: Swift.Bool
  public var gestureProvider: any SwiftUI._ScrollViewGestureProvider
  public var stopDraggingImmediately: Swift.Bool
  public var isScrollEnabled: Swift.Bool
  public var showsHorizontalIndicator: Swift.Bool
  public var showsVerticalIndicator: Swift.Bool
  public var indicatorInsets: SwiftUICore.EdgeInsets
  public init()
}
@available(*, unavailable)
extension SwiftUI._ScrollViewConfig.ContentOffset : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._ScrollViewConfig : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct _ScrollView<Provider> : SwiftUICore.View where Provider : SwiftUI._ScrollableContentProvider {
  @_Concurrency.MainActor @preconcurrency public var contentProvider: Provider
  @_Concurrency.MainActor @preconcurrency public var config: SwiftUI._ScrollViewConfig
  nonisolated public init(contentProvider: Provider, config: SwiftUI._ScrollViewConfig = _ScrollViewConfig())
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct Main : SwiftUICore.View, SwiftUICore.UnaryView {
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_ScrollViewV4bodyQrvp", 0) __<Provider>
}
@available(*, unavailable)
extension SwiftUI._ScrollView.Main : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._ScrollView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func _scrollable(stretchChildrenToMaxHeight: Swift.Bool = false, horizontal: SwiftUICore.TextAlignment? = .center, vertical: SwiftUICore._VAlignment? = .center) -> SwiftUI._ScrollView<SwiftUI._AligningContentProvider<Self>>
  #else
  @_Concurrency.MainActor @preconcurrency public func _scrollable(stretchChildrenToMaxHeight: Swift.Bool = false, horizontal: SwiftUICore.TextAlignment? = .center, vertical: SwiftUICore._VAlignment? = .center) -> SwiftUI._ScrollView<SwiftUI._AligningContentProvider<Self>>
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _AligningContentProvider<Content> : SwiftUI._ScrollableContentProvider where Content : SwiftUICore.View {
  public var content: Content
  public var horizontal: SwiftUICore.TextAlignment?
  public var vertical: SwiftUICore._VAlignment?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(content: Content, horizontal: SwiftUICore.TextAlignment? = nil, vertical: SwiftUICore._VAlignment? = nil)
  #else
  public init(content: Content, horizontal: SwiftUICore.TextAlignment? = nil, vertical: SwiftUICore._VAlignment? = nil)
  #endif
  public var scrollableContent: SwiftUICore.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public struct AligningContentProviderLayout : SwiftUICore.UnaryLayout {
    @_Concurrency.MainActor @preconcurrency package func placement(of child: SwiftUICore.LayoutProxy, in context: SwiftUICore.PlacementContext) -> SwiftUICore._Placement
    @_Concurrency.MainActor @preconcurrency package func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize, context: SwiftUICore.SizeAndSpacingContext, child: SwiftUICore.LayoutProxy) -> CoreFoundation.CGSize
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    public typealias Body = Swift.Never
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    package typealias PlacementContextType = SwiftUICore.PlacementContext
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Root = SwiftUI._ScrollViewRoot<SwiftUI._AligningContentProvider<Content>>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ScrollableContent = SwiftUICore.ModifiedContent<Content, SwiftUI._AligningContentProvider<Content>.AligningContentProviderLayout>
}
@available(*, unavailable)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._AligningContentProvider : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct Link<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  nonisolated public init(destination: Foundation.URL, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4LinkV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Link : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Link where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, destination: Foundation.URL)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, destination: Foundation.URL) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Link : SwiftUICore.ConditionallyArchivableView {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var archivedBody: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ArchivedBody = @_opaqueReturnTypeOf("$s7SwiftUI4LinkV12archivedBodyQrvp", 0) __<Label>
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Link {
  @_spi(Private) nonisolated public init(sensitiveUrl url: Foundation.URL, @SwiftUICore.ViewBuilder label: () -> Label)
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Link where Label == SwiftUICore.Text {
  @_spi(Private) nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, sensitiveUrl url: Foundation.URL)
  @_spi(Private) @_disfavoredOverload nonisolated public init<S>(_ title: S, sensitiveUrl url: Foundation.URL) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func inspector<V>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func inspectorColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #else
  nonisolated public func inspectorColumnWidth(min: CoreFoundation.CGFloat? = nil, ideal: CoreFoundation.CGFloat, max: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #endif
  nonisolated public func inspectorColumnWidth(_ width: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum InspectorBehavior {
  @_spi(Private) case fixed(canCollapse: Swift.Bool = false)
  @_spi(Private) case flexible(minimum: CoreFoundation.CGFloat = 100, maximum: CoreFoundation.CGFloat = .infinity, canCollapse: Swift.Bool = true)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.InspectorBehavior : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 15.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<V>(behavior: SwiftUI.InspectorBehavior = .fixed(), isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V>(behavior: SwiftUI.InspectorBehavior = .fixed(), presenting value: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V>(behavior: SwiftUI.InspectorBehavior = .fixed(), presenting value: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V>(behavior: SwiftUI.InspectorBehavior = .fixed(), presenting value: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where T : Swift.Identifiable, V : SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V>(behavior: SwiftUI.InspectorBehavior = .fixed(), presenting value: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where T : Swift.Identifiable, V : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V>(behavior: SwiftUI.InspectorBehavior = .fixed(), isPresented: SwiftUICore.Binding<Swift.Bool>, presenting value: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where T : Swift.Identifiable, V : SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V>(behavior: SwiftUI.InspectorBehavior = .fixed(), isPresented: SwiftUICore.Binding<Swift.Bool>, presenting value: T?, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where T : Swift.Identifiable, V : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V, P>(behavior: SwiftUI.InspectorBehavior = .fixed(), presenting value: T?, placeholder: (() -> P)? = nil, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View, P : SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V, P>(behavior: SwiftUI.InspectorBehavior = .fixed(), presenting value: T?, placeholder: (() -> P)? = nil, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View, P : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V, P>(behavior: SwiftUI.InspectorBehavior = .fixed(), isPresented: SwiftUICore.Binding<Swift.Bool>, presenting value: T?, placeholder: () -> P, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View, P : SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspector<T, V, P>(behavior: SwiftUI.InspectorBehavior = .fixed(), isPresented: SwiftUICore.Binding<Swift.Bool>, presenting value: T?, placeholder: () -> P, @SwiftUICore.ViewBuilder content: @escaping (T) -> V) -> some SwiftUICore.View where V : SwiftUICore.View, P : SwiftUICore.View
  
  #endif
  @_spi(Private) @available(iOS 15.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func inspectorAnchor<T>(matching value: T, anchor: SwiftUICore.Anchor<CoreFoundation.CGRect>.Source = .bounds) -> some SwiftUICore.View where T : Swift.Identifiable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PagingViewConfig : Swift.Equatable {
  public enum Direction {
    case vertical
    case horizontal
    public static func == (a: SwiftUI._PagingViewConfig.Direction, b: SwiftUI._PagingViewConfig.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var direction: SwiftUI._PagingViewConfig.Direction
  public var size: CoreFoundation.CGFloat?
  public var margin: CoreFoundation.CGFloat
  public var spacing: CoreFoundation.CGFloat
  public var constrainedDeceleration: Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(direction: SwiftUI._PagingViewConfig.Direction = .horizontal, size: CoreFoundation.CGFloat? = nil, margin: CoreFoundation.CGFloat = 0, spacing: CoreFoundation.CGFloat = 0, constrainedDeceleration: Swift.Bool = true)
  #else
  public init(direction: SwiftUI._PagingViewConfig.Direction = .horizontal, size: CoreFoundation.CGFloat? = nil, margin: CoreFoundation.CGFloat = 0, spacing: CoreFoundation.CGFloat = 0, constrainedDeceleration: Swift.Bool = true)
  #endif
  public static func == (a: SwiftUI._PagingViewConfig, b: SwiftUI._PagingViewConfig) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI._PagingViewConfig.Direction : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._PagingViewConfig : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct _PagingView<Views> : SwiftUICore.View where Views : Swift.RandomAccessCollection, Views.Element : SwiftUICore.View, Views.Index : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var views: Views
  @_Concurrency.MainActor @preconcurrency public var page: SwiftUICore.Binding<Views.Index>?
  @_Concurrency.MainActor @preconcurrency public var config: SwiftUI._PagingViewConfig
  @_Concurrency.MainActor @preconcurrency public var scrollViewConfig: SwiftUI._ScrollViewConfig
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(config: SwiftUI._PagingViewConfig = _PagingViewConfig(), page: SwiftUICore.Binding<Views.Index>? = nil, views: Views)
  #else
  nonisolated public init(config: SwiftUI._PagingViewConfig = _PagingViewConfig(), page: SwiftUICore.Binding<Views.Index>? = nil, views: Views)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(direction: SwiftUI._PagingViewConfig.Direction, page: SwiftUICore.Binding<Views.Index>? = nil, views: Views)
  #else
  nonisolated public init(direction: SwiftUI._PagingViewConfig.Direction, page: SwiftUICore.Binding<Views.Index>? = nil, views: Views)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11_PagingViewV4bodyQrvp", 0) __<Views>
}
@available(*, unavailable)
extension SwiftUI._PagingView : Swift.Sendable {
}
#if compiler(>=5.3) && $RetroactiveAttribute
@_spi(Private) extension SwiftUICore.DisplayGamut : @retroactive SwiftUICore.CodableByProxy {
  @_spi(Private) package var codingProxy: SwiftUI.CodableDisplayGamut {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias CodingProxy = SwiftUI.CodableDisplayGamut
}
#else
@_spi(Private) extension SwiftUICore.DisplayGamut : SwiftUICore.CodableByProxy {
  @_spi(Private) package var codingProxy: SwiftUI.CodableDisplayGamut {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  package typealias CodingProxy = SwiftUI.CodableDisplayGamut
}
#endif
package struct CodableDisplayGamut : SwiftUICore.CodableProxy {
  package var base: SwiftUICore.DisplayGamut
  package init(_ base: SwiftUICore.DisplayGamut)
  package enum CodingKind : Swift.UInt8, Swift.Codable {
    case sRGB
    case displayP3
    #if compiler(>=5.3) && $NoncopyableGenerics
    package init?(rawValue: Swift.UInt8)
    #else
    package init?(rawValue: Swift.UInt8)
    #endif
    package typealias RawValue = Swift.UInt8
    package var rawValue: Swift.UInt8 {
      get
    }
  }
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package typealias Base = SwiftUICore.DisplayGamut
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @propertyWrapper public struct AsyncBody : SwiftUICore.DynamicProperty {
  @_spi(Private) @inlinable public init() {}
  @_spi(Private) public var wrappedValue: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  @_spi(Private) public static var _propertyBehaviors: Swift.UInt32 {
    @_spi(Private) get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ListStyle where Self == SwiftUI.PlainListStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainListStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainListStyle : SwiftUI.ListStyle {
  public init()
  @_spi(Private) @available(macOS 12.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(isOutline: Swift.Bool)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.PlainListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PlainListStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol ProgressViewStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ProgressViewStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ProgressViewStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct CurrentValueLabel : SwiftUICore.View {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  public let fractionCompleted: Swift.Double?
  public var label: SwiftUI.ProgressViewStyleConfiguration.Label?
  public var currentValueLabel: SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel?
}
@available(*, unavailable)
extension SwiftUI.ProgressViewStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ProgressViewStyleConfiguration.CurrentValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ProgressViewStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func progressViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ProgressViewStyle
  
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol WindowLayoutValueKey : SwiftUICore.PreferenceKey {
}
@_spi(DoNotImport) @available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public func windowLayoutValue<K>(key: K.Type, value: K.Value) -> some SwiftUICore.View where K : SwiftUI.WindowLayoutValueKey
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #else
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  #else
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  #endif
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: some StringProtocol, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #else
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  #else
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C>(text: SwiftUICore.Binding<Swift.String>, editableTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: some StringProtocol, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> some View) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #else
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #endif
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #else
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchable<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload nonisolated public func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, suggestedTokens: SwiftUICore.Binding<C>, isPresented: SwiftUICore.Binding<Swift.Bool>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) -> some SwiftUICore.View where C : Swift.MutableCollection, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #else
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #endif
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder suggestions: () -> S) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, S : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, V, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder suggestions: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, V : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #else
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #endif
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V1, V2>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V1, @SwiftUICore.ViewBuilder suggestions: () -> V2) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V1 : SwiftUICore.View, V2 : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #else
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V1, V2>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V1, @SwiftUICore.ViewBuilder suggestions: () -> V2) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V1 : SwiftUICore.View, V2 : SwiftUICore.View, C.Element : Swift.Identifiable
  
  #endif
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V1, V2>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V1, @SwiftUICore.ViewBuilder suggestions: () -> V2) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V1 : SwiftUICore.View, V2 : SwiftUICore.View, C.Element : Swift.Identifiable
  
  @usableFromInline
  @available(iOS, unavailable, introduced: 16.0, message: "ABI Only")
  @available(macOS, unavailable, introduced: 13.0, message: "ABI Only")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency internal func searchable<C, T, D, V1, V2, S>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, scope: SwiftUICore.Binding<D>, placement: SwiftUI.SearchFieldPlacement = .automatic, prompt: S, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T, @SwiftUICore.ViewBuilder scopes: () -> V1, @SwiftUICore.ViewBuilder suggestions: () -> V2) -> some SwiftUICore.View where C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, D : Swift.Hashable, V1 : SwiftUICore.View, V2 : SwiftUICore.View, S : Swift.StringProtocol, C.Element : Swift.Identifiable
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _PreviewProviderLocator {
  static var previewProviders: [any SwiftUI._PreviewProvider.Type] { get }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol _PreviewProvider {
  @_Concurrency.MainActor @preconcurrency static var _previews: Any { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency static var _platform: SwiftUI.PreviewPlatform? { get }
  #else
  @_Concurrency.MainActor @preconcurrency static var _platform: SwiftUI.PreviewPlatform? { get }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public protocol PreviewProvider : SwiftUI._PreviewProvider {
  associatedtype Previews : SwiftUICore.View
  @SwiftUICore.ViewBuilder @preconcurrency @_Concurrency.MainActor static var previews: Self.Previews { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @preconcurrency @_Concurrency.MainActor static var platform: SwiftUI.PreviewPlatform? { get }
  #else
  @preconcurrency @_Concurrency.MainActor static var platform: SwiftUI.PreviewPlatform? { get }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewProvider {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public static var platform: SwiftUI.PreviewPlatform? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency public static var platform: SwiftUI.PreviewPlatform? {
    get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency public static var _previews: Any {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public static var _platform: SwiftUI.PreviewPlatform? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency public static var _platform: SwiftUI.PreviewPlatform? {
    get
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PreviewPlatform : Swift.Sendable {
  case iOS
  case macOS
  case tvOS
  case watchOS
  public static func == (a: SwiftUI.PreviewPlatform, b: SwiftUI.PreviewPlatform) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PreviewDevice : Swift.RawRepresentable, Swift.ExpressibleByStringLiteral, Swift.Sendable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public init(stringLiteral: Swift.String)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias StringLiteralType = Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContextKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol PreviewContext {
  subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey { get }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct InterfaceOrientation : Swift.CaseIterable, Swift.Identifiable, Swift.Equatable, Swift.Sendable {
  public static var allCases: [SwiftUI.InterfaceOrientation] {
    get
  }
  public var id: Swift.String {
    get
  }
  public static let portrait: SwiftUI.InterfaceOrientation
  public static let portraitUpsideDown: SwiftUI.InterfaceOrientation
  public static let landscapeLeft: SwiftUI.InterfaceOrientation
  public static let landscapeRight: SwiftUI.InterfaceOrientation
  public static func == (a: SwiftUI.InterfaceOrientation, b: SwiftUI.InterfaceOrientation) -> Swift.Bool
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AllCases = [SwiftUI.InterfaceOrientation]
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ID = Swift.String
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func previewDevice(_ value: SwiftUI.PreviewDevice?) -> some SwiftUICore.View {
        return _trait(PreviewDeviceTraitKey.self, value)
    }
  
  #else
  @inlinable nonisolated public func previewDevice(_ value: SwiftUI.PreviewDevice?) -> some SwiftUICore.View {
        return _trait(PreviewDeviceTraitKey.self, value)
    }
  
  #endif
  @inlinable nonisolated public func previewLayout(_ value: DeveloperToolsSupport.PreviewLayout) -> some SwiftUICore.View {
        return _trait(PreviewLayoutTraitKey.self, value)
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func previewDisplayName(_ value: Swift.String?) -> some SwiftUICore.View {
        return _trait(PreviewDisplayNameTraitKey.self, value)
    }
  
  #else
  @inlinable nonisolated public func previewDisplayName(_ value: Swift.String?) -> some SwiftUICore.View {
        return _trait(PreviewDisplayNameTraitKey.self, value)
    }
  
  #endif
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @inlinable nonisolated public func previewContext<C>(_ value: C) -> some SwiftUICore.View where C : SwiftUI.PreviewContext {
        return _trait(PreviewContextTraitKey.self, value)
    }
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func previewInterfaceOrientation(_ value: SwiftUI.InterfaceOrientation) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDeviceTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUI.PreviewDevice? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUI.PreviewDevice? {
    get { nil }
  }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUI.PreviewDevice?
}
@available(*, unavailable)
extension SwiftUI.PreviewDeviceTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewLayoutTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: DeveloperToolsSupport.PreviewLayout {
    get { .device }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = DeveloperToolsSupport.PreviewLayout
}
@available(*, unavailable)
extension SwiftUI.PreviewLayoutTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct PreviewDisplayNameTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: Swift.String? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: Swift.String? {
    get { nil }
  }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.String?
}
@available(*, unavailable)
extension SwiftUI.PreviewDisplayNameTraitKey : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal struct PreviewInterfaceOrientationTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUI.InterfaceOrientation {
    get { .portrait }
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Value = SwiftUI.InterfaceOrientation
}
@available(*, unavailable)
extension SwiftUI.PreviewInterfaceOrientationTraitKey : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct PreviewContextTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: (any SwiftUI.PreviewContext)? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: (any SwiftUI.PreviewContext)? {
    get { nil }
  }
  #endif
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Value = (any SwiftUI.PreviewContext)?
}
@available(*, unavailable)
extension SwiftUI.PreviewContextTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PreviewProvider {
  @_Concurrency.MainActor @preconcurrency public static var _allPreviews: [SwiftUI._Preview] {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _Preview {
  public let id: Swift.Int
  public let contentType: Swift.String
  public var content: SwiftUICore.AnyView {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var context: (any SwiftUI.PreviewContext)? {
    get
  }
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var context: (any SwiftUI.PreviewContext)? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var displayName: Swift.String? {
    get
  }
  #else
  public var displayName: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var device: SwiftUI.PreviewDevice? {
    get
  }
  #else
  public var device: SwiftUI.PreviewDevice? {
    get
  }
  #endif
  public var layout: DeveloperToolsSupport.PreviewLayout {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var interfaceOrientation: SwiftUI.InterfaceOrientation {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  public var colorScheme: SwiftUICore.ColorScheme? {
    get
  }
  #else
  @available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
  public var colorScheme: SwiftUICore.ColorScheme? {
    get
  }
  #endif
}
@available(*, unavailable)
extension SwiftUI._Preview : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ScrollAnchorRole : Swift.Hashable, Swift.Sendable {
  public static var initialOffset: SwiftUI.ScrollAnchorRole {
    get
  }
  public static var sizeChanges: SwiftUI.ScrollAnchorRole {
    get
  }
  public static var alignment: SwiftUI.ScrollAnchorRole {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.ScrollAnchorRole, b: SwiftUI.ScrollAnchorRole) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func defaultScrollAnchor(_ anchor: SwiftUICore.UnitPoint?) -> some SwiftUICore.View
  
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func defaultScrollAnchor(_ anchor: SwiftUICore.UnitPoint?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func defaultScrollAnchor(_ anchor: SwiftUICore.UnitPoint?, for role: SwiftUI.ScrollAnchorRole) -> some SwiftUICore.View
  
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func defaultScrollAnchor(_ anchor: SwiftUICore.UnitPoint?, for role: SwiftUI.ScrollAnchorRole) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PopoverAttachmentAnchor {
  case rect(SwiftUICore.Anchor<CoreFoundation.CGRect>.Source)
  case point(SwiftUICore.UnitPoint)
}
@available(*, unavailable)
extension SwiftUI.PopoverAttachmentAnchor : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge = .top, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge = .top, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge = .top, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_spi(Private) @available(macOS 12.0, visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, isDetachable: Swift.Bool, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge = .top, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol SliderStyle {
  associatedtype Body : SwiftUICore.View
  @_spi(Private) @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @_spi(Private) typealias Configuration = SwiftUI.SliderStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func sliderStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.SliderStyle
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
public struct SliderStyleConfiguration {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @_spi(Private) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public struct MinimumValueLabel : SwiftUICore.View {
    @_spi(Private) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public struct MaximumValueLabel : SwiftUICore.View {
    @_spi(Private) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  @_spi(Private) public var label: SwiftUI.SliderStyleConfiguration.Label
  @_spi(Private) public var minimumValueLabel: SwiftUI.SliderStyleConfiguration.MinimumValueLabel
  @_spi(Private) public var maximumValueLabel: SwiftUI.SliderStyleConfiguration.MaximumValueLabel
  @_spi(Private) @SwiftUICore.Binding @_projectedValueProperty($value) public var value: Swift.Double {
    @_spi(Private) get
    @_spi(Private) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
    nonmutating set
    @_spi(Private) @available(iOS 16.0, tvOS 18.0, watchOS 9.0, macOS 13.0, *)
    nonmutating _modify
  }
  @_spi(Private) public var $value: SwiftUICore.Binding<Swift.Double> {
    @_spi(Private) get
  }
  @_spi(UIFrameworks) public var onEditingChanged: (Swift.Bool) -> Swift.Void
  @_spi(UIFrameworks) public let skipDistance: Swift.Double
  @_spi(UIFrameworks) public let discreteValueCount: Swift.Int
  @_spi(UIFrameworks) public let marks: [SwiftUI.SliderMark<Swift.Double>]?
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public struct ValueLabel : SwiftUICore.View {
    @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      @_spi(Private) get
    }
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24SliderStyleConfigurationV10ValueLabelV4bodyQrvp", 0) __
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderStyleConfiguration.ValueLabel : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderStyleConfiguration.MinimumValueLabel : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderStyleConfiguration.Label : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderStyleConfiguration.MaximumValueLabel : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderStyleConfiguration : Swift.Sendable {
}
extension SwiftUICore.Environment {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(_ objectType: Value.Type) where Value : AnyObject, Value : Observation.Observable
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<T>(_ objectType: T.Type) where Value == T?, T : AnyObject, T : Observation.Observable
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init<T>(_ objectType: T.Type) where Value == T?, T : AnyObject, T : Observation.Observable
  #endif
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public subscript<T>(objectType: T.Type) -> T? where T : AnyObject, T : Observation.Observable {
    get
    set
  }
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public subscript<T>(objectType: T.Type) -> T? where T : AnyObject, T : Observation.Observable {
    get
    set
  }
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environment<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable
  
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environment<T>(_ object: T?) -> some SwiftUICore.View where T : AnyObject, T : Observation.Observable
  
  #endif
}
extension SwiftUI.Scene {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environment<T>(_ object: T?) -> some SwiftUI.Scene where T : AnyObject, T : Observation.Observable
  
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environment<T>(_ object: T?) -> some SwiftUI.Scene where T : AnyObject, T : Observation.Observable
  
  #endif
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(_) nonisolated public func editMenu<M>(@SwiftUICore.ViewBuilder menu: @escaping () -> M) -> some SwiftUICore.View where M : SwiftUICore.View
  
  @_spi(Private) @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func editMenu<M>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder menu: @escaping () -> M) -> some SwiftUICore.View where M : SwiftUICore.View
  
  @_spi(DoNotImport) nonisolated public func editMenu<M>(@SwiftUICore.ViewBuilder menu: @escaping (SwiftUI.TextSelection) -> M) -> some SwiftUICore.View where M : SwiftUICore.View
  
}
extension SwiftUICore.Gesture {
  @_spi(ForPhotosOnly) @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  public func dragRevealsScrollableContent(_ enabled: Swift.Bool = true) -> some SwiftUICore.Gesture
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ScrollIndicatorVisibility {
  public static var automatic: SwiftUI.ScrollIndicatorVisibility {
    get
  }
  public static var visible: SwiftUI.ScrollIndicatorVisibility {
    get
  }
  public static var hidden: SwiftUI.ScrollIndicatorVisibility {
    get
  }
  public static var never: SwiftUI.ScrollIndicatorVisibility {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollIndicatorVisibility : Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.ScrollIndicatorVisibility : Swift.Equatable {
  public static func == (a: SwiftUI.ScrollIndicatorVisibility, b: SwiftUI.ScrollIndicatorVisibility) -> Swift.Bool
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ScrollIndicatorOptions : Swift.OptionSet {
  @_spi(Private) public static var revealsInitially: SwiftUI.ScrollIndicatorOptions {
    @_spi(Private) get
  }
  @_spi(Private) public let rawValue: Swift.Int
  @_spi(Private) public init(rawValue: Swift.Int)
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ArrayLiteralElement = SwiftUI.ScrollIndicatorOptions
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Element = SwiftUI.ScrollIndicatorOptions
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias RawValue = Swift.Int
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollIndicatorOptions : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scrollIndicators(_ visibility: SwiftUI.ScrollIndicatorVisibility, axes: SwiftUICore.Axis.Set = [.vertical, .horizontal]) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scrollIndicators(_ visibility: SwiftUI.ScrollIndicatorVisibility, options: SwiftUI.ScrollIndicatorOptions, axes: SwiftUICore.Axis.Set = [.vertical, .horizontal]) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public enum HandGestureShortcutPaginationDirection : Swift.Sendable, Swift.CaseIterable {
  @_spi(Private) case forward
  @_spi(Private) case reverse
  @_spi(Private) case none
  @_spi(Private) public static func == (a: SwiftUI.HandGestureShortcutPaginationDirection, b: SwiftUI.HandGestureShortcutPaginationDirection) -> Swift.Bool
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias AllCases = [SwiftUI.HandGestureShortcutPaginationDirection]
  @_spi(Private) public static var allCases: [SwiftUI.HandGestureShortcutPaginationDirection] {
    @_spi(Private) get
  }
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
extension SwiftUICore.View {
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func crownScrollingDisabled(_ isCrownScrollingDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func crownScrollingAxis(_ axis: SwiftUICore.Axis? = .vertical) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func crownScrollingAxis(_ axis: SwiftUICore.Axis? = .vertical) -> some SwiftUICore.View
  
  #endif
  @_spi(Private) @available(watchOS 11.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func handGestureShortcutPagination(direction: SwiftUI.HandGestureShortcutPaginationDirection) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var verticalScrollIndicatorVisibility: SwiftUI.ScrollIndicatorVisibility {
    get
    set
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var horizontalScrollIndicatorVisibility: SwiftUI.ScrollIndicatorVisibility {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollIndicatorsFlash(trigger value: some Equatable) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollIndicatorsFlash(onAppear: Swift.Bool) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollIndicatorsAlwaysOverlayContent(_ alwaysOverlay: Swift.Bool) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scrollDisabled(_ disabled: Swift.Bool) -> some SwiftUICore.View
  
}
extension SwiftUI.ScrollView {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func scrollDisabled(_ disabled: Swift.Bool) -> SwiftUI.ScrollView<Content>
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var isScrollEnabled: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollClipDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_spi_available(visionOS, introduced: 1.0)
  nonisolated public func scrollDismissesKeyboard(_ mode: SwiftUI.ScrollDismissesKeyboardMode) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_spi_available(visionOS, introduced: 1.0)
public struct ScrollDismissesKeyboardMode : Swift.Sendable {
  public static var automatic: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
  public static var immediately: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
  public static var interactively: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
  public static var never: SwiftUI.ScrollDismissesKeyboardMode {
    get
  }
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_spi_available(visionOS, introduced: 1.0)
  public var scrollDismissesKeyboardMode: SwiftUI.ScrollDismissesKeyboardMode {
    get
    set
  }
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct ScrollBounceBehavior : Swift.Sendable {
  public static var automatic: SwiftUI.ScrollBounceBehavior {
    get
  }
  public static var always: SwiftUI.ScrollBounceBehavior {
    get
  }
  public static var basedOnSize: SwiftUI.ScrollBounceBehavior {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  nonisolated public func scrollBounceBehavior(_ behavior: SwiftUI.ScrollBounceBehavior, axes: SwiftUICore.Axis.Set = [.vertical]) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public var verticalScrollBounceBehavior: SwiftUI.ScrollBounceBehavior {
    get
    set
  }
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public var horizontalScrollBounceBehavior: SwiftUI.ScrollBounceBehavior {
    get
    set
  }
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scrollContentPadding(_ edges: SwiftUICore.Edge.Set, _ length: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func scrollContentPadding(_ edges: SwiftUICore.Edge.Set, _ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(tvOS 17.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func fastScrollingDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  nonisolated public func onScrollToTopGesture(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  nonisolated public func onScrollToTopGesture(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnForEach<Data, ID, RowValue, Sort, Content> : SwiftUI.TableColumnContent where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowValue == Content.TableRowValue, Sort == Content.TableColumnSortComparator, Content : SwiftUI.TableColumnContent {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  public typealias TableColumnBody = Swift.Never
  public var data: Data
  public var content: (Data.Element) -> Content
  public init(_ data: Data, @SwiftUI.TableColumnBuilder<SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableRowValue, SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableColumnSortComparator> content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element : Swift.Identifiable
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TableColumnBuilder<SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableRowValue, SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>.TableColumnSortComparator> content: @escaping (Data.Element) -> Content)
  @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @SwiftUI.TableColumnBuilder<SwiftUI.TableColumnForEach<Swift.Range<Swift.Int>, Swift.Int, RowValue, Sort, Content>.TableRowValue, SwiftUI.TableColumnForEach<Swift.Range<Swift.Int>, Swift.Int, RowValue, Sort, Content>.TableColumnSortComparator> content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int
  public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TableColumnForEach<Data, ID, RowValue, Sort, Content>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(*, unavailable)
extension SwiftUI.TableColumnForEach : Swift.Sendable {
}
@_spi(Ultraviolet) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AppPreview {
  @_spi(Ultraviolet) public var content: SwiftUICore.AnyView
  @_spi(Ultraviolet) public var description: Swift.String?
}
@_spi(Ultraviolet) @available(*, unavailable)
extension SwiftUI.AppPreview : Swift.Sendable {
}
@_spi(Ultraviolet) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
final public class AppPreviewHost : Combine.ObservableObject {
  @_spi(Ultraviolet) public init()
  @_spi(Ultraviolet) final public func invalidateEverything()
  @_spi(Ultraviolet) final public var previews: [SwiftUI.AppPreview] {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @_spi(Ultraviolet) @objc deinit
}
@_spi(Ultraviolet) @available(*, unavailable)
extension SwiftUI.AppPreviewHost : Swift.Sendable {
}
@available(macOS 13.0, tvOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func focusSection() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 15.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func _focusSection() -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AccessibilityDirectTouchOptions : Swift.OptionSet, Swift.Sendable {
  public typealias RawValue = Swift.UInt
  public let rawValue: SwiftUI.AccessibilityDirectTouchOptions.RawValue
  public init(rawValue: SwiftUI.AccessibilityDirectTouchOptions.RawValue)
  public static let silentOnTouch: SwiftUI.AccessibilityDirectTouchOptions
  public static let requiresActivation: SwiftUI.AccessibilityDirectTouchOptions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ArrayLiteralElement = SwiftUI.AccessibilityDirectTouchOptions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Element = SwiftUI.AccessibilityDirectTouchOptions
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityDirectTouch(_ isDirectTouchArea: Swift.Bool = true, options: SwiftUI.AccessibilityDirectTouchOptions = []) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityDirectTouch(_ isDirectTouchArea: Swift.Bool = true, options: SwiftUI.AccessibilityDirectTouchOptions = []) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public protocol LabelGroupStyle_v0 {
  associatedtype Foreground : SwiftUICore.ShapeStyle = SwiftUICore.HierarchicalShapeStyle
  @_spi(UIFrameworks) func font(at level: Swift.Int) -> SwiftUICore.Font
  @_spi(UIFrameworks) func foregroundStyle(at level: Swift.Int) -> Self.Foreground
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.View {
  @_spi(UIFrameworks) nonisolated public func labelGroupStyle_v0(_ style: some LabelGroupStyle_v0) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ListItemTint : Swift.Sendable {
  public static func fixed(_ tint: SwiftUICore.Color) -> SwiftUI.ListItemTint
  public static func preferred(_ tint: SwiftUICore.Color) -> SwiftUI.ListItemTint
  public static let monochrome: SwiftUI.ListItemTint
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func listItemTint(_ tint: SwiftUI.ListItemTint?) -> some SwiftUICore.View {
        _trait(ListItemTintTraitKey.self, tint)
    }
  
  #else
  @inlinable nonisolated public func listItemTint(_ tint: SwiftUI.ListItemTint?) -> some SwiftUICore.View {
        _trait(ListItemTintTraitKey.self, tint)
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func listItemTint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View {
        listItemTint(tint.map { .fixed($0) })
    }
  
  #else
  @inlinable nonisolated public func listItemTint(_ tint: SwiftUICore.Color?) -> some SwiftUICore.View {
        listItemTint(tint.map { .fixed($0) })
    }
  
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
internal struct ListItemTintTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUI.ListItemTint? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUI.ListItemTint? {
    get { nil }
  }
  #endif
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Value = SwiftUI.ListItemTint?
}
@available(*, unavailable)
extension SwiftUI.ListItemTintTraitKey : Swift.Sendable {
}
extension CoreFoundation.CGVector {
  package static var infinity: CoreFoundation.CGVector {
    get
  }
  package init(_ point: CoreFoundation.CGPoint)
  package init(_ size: CoreFoundation.CGSize)
  package var isFinite: Swift.Bool {
    get
  }
  package var isNaN: Swift.Bool {
    get
  }
}
extension CoreFoundation.CGVector {
  package subscript(d: SwiftUICore.Axis) -> CoreFoundation.CGFloat {
    get
    set
  }
  package init(_ l1: CoreFoundation.CGFloat, in first: SwiftUICore.Axis, by l2: CoreFoundation.CGFloat)
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_functionBuilder public struct AnimatedValueTrackBuilder<Value> {
  @_spi(DoNotImport) public static func buildExpression(_ expression: SwiftUI.AnimatedValueTrack<Value>) -> SwiftUI.AnimatedValueTrack<Value>
  @_spi(DoNotImport) public static func buildPartialBlock(first: SwiftUI.AnimatedValueTrack<Value>) -> SwiftUI.AnimatedValueTrack<Value>
  @_spi(DoNotImport) public static func buildPartialBlock(accumulated: SwiftUI.AnimatedValueTrack<Value>, next: SwiftUI.AnimatedValueTrack<Value>) -> SwiftUI.AnimatedValueTrack<Value>
  @_spi(DoNotImport) public static func buildBlock() -> SwiftUI.AnimatedValueTrack<Value>
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValueTrackBuilder : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct URLReceipt : Swift.CustomStringConvertible {
  @_spi(DoNotImport) public static let handled: SwiftUI.URLReceipt
  @_spi(DoNotImport) public static let discarded: SwiftUI.URLReceipt
  @_spi(DoNotImport) public static let systemAction: SwiftUI.URLReceipt
  @_spi(DoNotImport) public static func systemAction(_ urls: [Foundation.URL]) -> SwiftUI.URLReceipt
  @_spi(DoNotImport) public var description: Swift.String {
    @_spi(DoNotImport) get
  }
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.URLReceipt : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) nonisolated public func onReceiveURLs(_ handle: @escaping ([Foundation.URL]) -> SwiftUI.URLReceipt) -> some SwiftUI.Scene
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Content : SwiftUICore.View
  
  #else
  nonisolated public func popover<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Content : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  nonisolated public func popover<Item, Content>(item: SwiftUICore.Binding<Item?>, attachmentAnchor: SwiftUI.PopoverAttachmentAnchor = .rect(.bounds), arrowEdge: SwiftUICore.Edge? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUI.TabContent<Self.TabValue> where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ToggleStyle where Self == SwiftUI.CheckboxToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var checkbox: SwiftUI.CheckboxToggleStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CheckboxToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CheckboxToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19CheckboxToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CheckboxToggleStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func labelsHidden() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func backdropEffect<T>(_ effect: (SwiftUICore._BackdropEffectPlaceholder) -> T) -> some SwiftUICore.View where T : SwiftUICore.View {
        _backdropEffect(effect)
    }
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func immersiveEnvironmentPicker<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public protocol ClarityUIApplicationDelegate : UIKit.UIApplicationDelegate {
  associatedtype Body : SwiftUICore.View
  @_spi(Private) var rootViewForSimplifiedApplication: Self.Body { get }
}
@_spi(WorkaroundFor87384310) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public protocol RootViewForSimplifiedApplicationProvider {
  associatedtype Body : SwiftUICore.View
  @_spi(WorkaroundFor87384310) var rootViewForSimplifiedApplication: Self.Body { get }
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct RoundedBorderTextEditorStyle : SwiftUI.TextEditorStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.RoundedBorderTextEditorStyle.Configuration) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public init()
  @available(visionOS 1.0, *)
  @available(iOS, unavailable, introduced: 17.0)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(macOS, unavailable, introduced: 14.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28RoundedBorderTextEditorStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.RoundedBorderTextEditorStyle : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextEditorStyle where Self == SwiftUI.RoundedBorderTextEditorStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var roundedBorder: SwiftUI.RoundedBorderTextEditorStyle {
    get { .init() }
  }
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  @_spi(Private) public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUI.TableRowContent<Self.TableRowValue> where T : SwiftUICore.View
  
  @_spi(Private) public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, style: SwiftUI.SwipeActionsStyle = .automatic, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUI.TableRowContent<Self.TableRowValue> where T : SwiftUICore.View
  
}
@_spi(Private) @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
@_marker public protocol ContainerBackgroundPlacementCustomKey {
}
@available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
public struct ContainerBackgroundPlacement : Swift.Sendable, Swift.Hashable {
  @_spi(Private) public static func custom<K>(_ type: K.Type) -> SwiftUI.ContainerBackgroundPlacement where K : SwiftUI.ContainerBackgroundPlacementCustomKey
  @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let tabView: SwiftUI.ContainerBackgroundPlacement
  @available(watchOS 10.0, iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let navigation: SwiftUI.ContainerBackgroundPlacement
  @available(watchOS 11.0, iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let navigationSplitView: SwiftUI.ContainerBackgroundPlacement
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, visionOS 2.0, *)
  public static let presentation: SwiftUI.ContainerBackgroundPlacement
  @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  public static let window: SwiftUI.ContainerBackgroundPlacement
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.ContainerBackgroundPlacement, b: SwiftUI.ContainerBackgroundPlacement) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<S>(_ style: S, for container: SwiftUI.ContainerBackgroundPlacement) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<V>(for container: SwiftUI.ContainerBackgroundPlacement, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<S>(_ style: S, for container: SwiftUI.ContainerBackgroundPlacement, allowsVibrancy: Swift.Bool?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #else
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<S>(_ style: S, for container: SwiftUI.ContainerBackgroundPlacement, allowsVibrancy: Swift.Bool?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<V>(for container: SwiftUI.ContainerBackgroundPlacement, allowsVibrancy: Swift.Bool?, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackground<V>(for container: SwiftUI.ContainerBackgroundPlacement, allowsVibrancy: Swift.Bool?, alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #endif
  @_spi(Private) nonisolated public func applyContainerBackground<K>(for placement: K.Type, isEnabled: Swift.Bool = true) -> some SwiftUICore.View where K : SwiftUI.ContainerBackgroundPlacementCustomKey
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func applyContainerBackground<K, V>(for placement: K.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.AnyView?) -> V) -> some SwiftUICore.View where K : SwiftUI.ContainerBackgroundPlacementCustomKey, V : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func applyContainerBackground<K, V>(for placement: K.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.AnyView?) -> V) -> some SwiftUICore.View where K : SwiftUI.ContainerBackgroundPlacementCustomKey, V : SwiftUICore.View
  
  #endif
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, macOS 14.0, watchOS 10.0, *)
  nonisolated public func containerBackgroundSpecifiedPreference<K, P>(key: K.Type, placement: P.Type) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey, P : SwiftUI.ContainerBackgroundPlacementCustomKey, K.Value == Swift.Bool
  
}
@_spi(Private) @available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) @available(*, deprecated, message: "Use ``View/containerBackground(_:for:)``")
  @_disfavoredOverload nonisolated public func containerBackground<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  @_spi(Private) @available(*, deprecated, message: "Use ``View/containerBackground(for:alignment:content:)``")
  @_disfavoredOverload nonisolated public func containerBackground<V>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@usableFromInline
internal struct ContainerBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.AnyView? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.AnyView? {
    get { nil }
  }
  #endif
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.AnyView?
}
@available(*, unavailable)
extension SwiftUI.ContainerBackgroundTraitKey : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 8.0, deprecated: 10.0, message: "Please switch to ``View/containerBackground(for:alignment:content:)``")
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @inlinable nonisolated public func containerBackground<V>(_ view: V?) -> some SwiftUICore.View where V : SwiftUICore.View {
        _trait(ContainerBackgroundTraitKey.self, view.map { AnyView($0) })
    }
  
  #else
  @_spi(Private) @inlinable nonisolated public func containerBackground<V>(_ view: V?) -> some SwiftUICore.View where V : SwiftUICore.View {
        _trait(ContainerBackgroundTraitKey.self, view.map { AnyView($0) })
    }
  
  #endif
}
@_spi(DoNotImportVariadicView) extension SwiftUI.TraitValues {
  @_spi(DoNotImportVariadicView) package var isAuxiliaryContent: Swift.Bool {
    @_spi(DoNotImportVariadicView) get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._VariadicView_Children {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func tagIndex<V>(_ value: SwiftUICore.Binding<V>) -> SwiftUICore.Binding<Swift.Int?> where V : Swift.Hashable
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func tagIndex<V>(_ value: SwiftUICore.Binding<V>) -> SwiftUICore.Binding<Swift.Int?> where V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func tagIndex<V>(_ value: V) -> Swift.Int? where V : Swift.Hashable
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func tagIndex<V>(_ value: V) -> Swift.Int? where V : Swift.Hashable
  #endif
}
extension SwiftUICore._VariadicView_Children.Element {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func tag<V>(for type: V.Type = V.self) -> V? where V : Swift.Hashable
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func tag<V>(for type: V.Type = V.self) -> V? where V : Swift.Hashable
  #endif
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct GroupBox<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @available(iOS 14.0, macOS 10.15, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(label: label(), content: content)
    }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 10.15, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8GroupBoxV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.GroupBox : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUI.GroupBoxStyleConfiguration.Label, Content == SwiftUI.GroupBoxStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.GroupBoxStyleConfiguration)
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUICore.EmptyView {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.GroupBox {
  @available(iOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  @available(macOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  @available(visionOS, deprecated: 100000.0, renamed: "GroupBox(content:label:)")
  nonisolated public init(label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Gesture where Self.Value : Swift.Sendable {
  @_spi(DoNotImport) public func values(_ body: @escaping (SwiftUI.GestureValues<Self.Value>) async -> Swift.Void) -> some SwiftUICore.Gesture<Self.Value>
  
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct GestureValues<Value> : _Concurrency.AsyncSequence {
  @_spi(DoNotImport) public var firstValue: Value
  @_spi(DoNotImport) public var hasEnded: Swift.Bool
  @_spi(DoNotImport) public typealias AsyncIterator = _Concurrency.AsyncMapSequence<_Concurrency.AsyncStream<SwiftUI.TaskPhase<Value>>, Value>.Iterator
  @_spi(DoNotImport) public typealias Element = Value
  @_spi(DoNotImport) public func makeAsyncIterator() -> _Concurrency.AsyncMapSequence<_Concurrency.AsyncStream<SwiftUI.TaskPhase<Value>>, Value>.Iterator
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @_spi(DoNotImport) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = _Concurrency.AsyncMapSequence<_Concurrency.AsyncStream<SwiftUI.TaskPhase<Value>>, Value>.Iterator.Failure
  #else
  @_spi(DoNotImport) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias __AsyncSequence_Failure = _Concurrency.AsyncMapSequence<_Concurrency.AsyncStream<SwiftUI.TaskPhase<Value>>, Value>.Iterator.Failure
  #endif
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.GestureValues : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen public enum TaskPhase<Value> : Swift.Sendable where Value : Swift.Sendable {
  @_spi(DoNotImport) case possible(Value)
  @_spi(DoNotImport) case active(Value)
  @_spi(DoNotImport) case ended(Value)
  @_spi(DoNotImport) @_alwaysEmitIntoClient public var value: Value {
    @_spi(DoNotImport) get {
        switch self {
        case let .possible(v), let .active(v), let .ended(v):
            return v
        }
    }
  }
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.TaskPhase : Swift.Equatable where Value : Swift.Equatable {
  @_spi(DoNotImport) public static func == (a: SwiftUI.TaskPhase<Value>, b: SwiftUI.TaskPhase<Value>) -> Swift.Bool
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.TaskPhase : Swift.Hashable where Value : Swift.Hashable {
  @_spi(DoNotImport) public func hash(into hasher: inout Swift.Hasher)
  @_spi(DoNotImport) public var hashValue: Swift.Int {
    @_spi(DoNotImport) get
  }
}
@_spi(_) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerOption {
  @_spi(_) public init(value: Value, isAlternate: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(value: T, isAlternate: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(value: T, isAlternate: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #endif
  @_spi(_) @_disfavoredOverload public init<S>(_ title: S, value: Value, isAlternate: Swift.Bool) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #else
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #endif
  @_spi(_) public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Value, isAlternate: Swift.Bool) where Content == SwiftUICore.Text
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #endif
}
@_spi(_) @available(iOS, unavailable)
@available(macOS, deprecated, introduced: 13.0, message: "Use initializers which take an explicitely labeled `value`")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerOption {
  @_spi(_) public init(_ value: Value, isAlternate: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(_ value: T, isAlternate: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(_ value: T, isAlternate: Swift.Bool, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #endif
  @_spi(_) @_disfavoredOverload public init<S>(_ title: S, _ value: Value, isAlternate: Swift.Bool) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, _ value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #else
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, _ value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #endif
  @_spi(_) public init(_ titleKey: SwiftUICore.LocalizedStringKey, _ value: Value, isAlternate: Swift.Bool) where Content == SwiftUICore.Text
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, _ value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, _ value: T, isAlternate: Swift.Bool) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.InsetTableStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var inset: SwiftUI.InsetTableStyle {
    get { .init() }
  }
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func inset(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.InsetTableStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct InsetTableStyle : SwiftUI.TableStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS, unavailable)
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.inset` style with the `.alternatingRowBackgrounds()` view modifier")
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(alternatesRowBackgrounds: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.InsetTableStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15InsetTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.InsetTableStyle : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ImmersiveSpaceViewContent<Content> : SwiftUI.ImmersiveSpaceContent where Content : SwiftUICore.View {
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ImmersiveSpaceViewContent : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ImmersiveSpaceViewContent {
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
}
@_spi(Compositor) @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ImmersiveSpaceViewContent : SwiftUI.PrimitiveImmersiveSpaceContent {
  @_spi(Compositor) @_Concurrency.MainActor @preconcurrency public func _makeView() -> SwiftUICore.AnyView
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach {
  @_spi(_) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "init(subviewOf:content:)")
  @available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "init(subviewOf:content:)")
  @available(tvOS, introduced: 18.0, deprecated: 18.0, renamed: "init(subviewOf:content:)")
  @available(watchOS, introduced: 11.0, deprecated: 11.0, renamed: "init(subviewOf:content:)")
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "init(subviewOf:content:)")
  public init<V>(elementOf view: V, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.Subview) -> Content) where Data == SwiftUI.ForEachSubviewCollection<Content>, ID == SwiftUI.Subview.ID, Content : SwiftUICore.View, V : SwiftUICore.View
  public init<V>(subviewOf view: V, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.Subview) -> Content) where Data == SwiftUI.ForEachSubviewCollection<Content>, ID == SwiftUI.Subview.ID, Content : SwiftUICore.View, V : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ForEachSubviewCollection<Content> : Swift.RandomAccessCollection where Content : SwiftUICore.View {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> SwiftUI.Subview {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUI.Subview
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.ForEachSubviewCollection<Content>>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.ForEachSubviewCollection<Content>>
}
@available(*, unavailable)
extension SwiftUI.ForEachSubviewCollection : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> T
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeSelection<T>(_ instance: T, _ identifier: Swift.String) -> some SwiftUICore.View where T : SwiftUICore.View

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol PickerStyle {
  static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<Self, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _PickerValue<Style, SelectionValue> where Style : SwiftUI.PickerStyle, SelectionValue : Swift.Hashable {
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public var label: some SwiftUICore.View {
    get
  }
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public var content: some SwiftUICore.View {
    get
  }
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public var selection: SwiftUICore.Binding<SelectionValue> {
    get
  }
}
@available(*, unavailable)
extension SwiftUI._PickerValue : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func pickerStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.PickerStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.SegmentedPickerStyle {
  @_alwaysEmitIntoClient public static var segmented: SwiftUI.SegmentedPickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
public struct SegmentedPickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.SegmentedPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.SegmentedPickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LinearCapacityGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearCapacityGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24LinearCapacityGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinearCapacityGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.LinearCapacityGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linearCapacity: SwiftUI.LinearCapacityGaugeStyle {
    get { .init() }
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AlertScene<Actions, Message> : SwiftUI.Scene where Actions : SwiftUICore.View, Message : SwiftUICore.View {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions) where Message == SwiftUICore.EmptyView
  @_disfavoredOverload nonisolated public init<S>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions) where Message == SwiftUICore.EmptyView, S : Swift.StringProtocol
  nonisolated public init(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions) where Message == SwiftUICore.EmptyView
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions, @SwiftUICore.ViewBuilder message: () -> Message)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions, @SwiftUICore.ViewBuilder message: () -> Message) where S : Swift.StringProtocol
  nonisolated public init(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder actions: () -> Actions, @SwiftUICore.ViewBuilder message: () -> Message)
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView
  #else
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView, S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView, S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView
  #else
  nonisolated public init<T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions) where Message == SwiftUICore.EmptyView
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message)
  #else
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message)
  #else
  nonisolated public init<T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> Actions, @SwiftUICore.ViewBuilder message: (T) -> Message)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10AlertSceneV4bodyQrvp", 0) __<Actions, Message>
}
@available(*, unavailable)
extension SwiftUI.AlertScene : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, renamed: "AlertScene")
@_Concurrency.MainActor @preconcurrency public struct AlertDialog<Actions, Message> : SwiftUI.Scene where Actions : SwiftUICore.View, Message : SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder message: () -> Message, @SwiftUICore.ViewBuilder actions: () -> Actions)
  @_spi(DoNotImport) @_disfavoredOverload nonisolated public init<S>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder message: () -> Message, @SwiftUICore.ViewBuilder actions: () -> Actions) where S : Swift.StringProtocol
  @_spi(DoNotImport) nonisolated public init(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder message: () -> Message, @SwiftUICore.ViewBuilder actions: () -> Actions)
  @_spi(DoNotImport) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(*, deprecated, renamed: "AlertScene")
  @available(iOS, unavailable, introduced: 14.0, renamed: "AlertScene")
  @available(tvOS, unavailable, introduced: 14.0, renamed: "AlertScene")
  @available(watchOS, unavailable, introduced: 7.0, renamed: "AlertScene")
  @available(macOS, introduced: 15.0, renamed: "AlertScene")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11AlertDialogV4bodyQrvp", 0) __<Actions, Message>
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AlertDialog : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct EffectiveLabelStyle : Swift.Equatable {
  @_spi(Private) public static var titleAndIcon: SwiftUI.EffectiveLabelStyle {
    @_spi(Private) get
  }
  @_spi(Private) public static var titleOnly: SwiftUI.EffectiveLabelStyle {
    @_spi(Private) get
  }
  @_spi(Private) public static var iconOnly: SwiftUI.EffectiveLabelStyle {
    @_spi(Private) get
  }
  @_spi(Private) public static func == (a: SwiftUI.EffectiveLabelStyle, b: SwiftUI.EffectiveLabelStyle) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.EffectiveLabelStyle : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var effectiveLabelStyle: SwiftUI.EffectiveLabelStyle? {
    get
    set
  }
  #else
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var effectiveLabelStyle: SwiftUI.EffectiveLabelStyle? {
    get
    set
  }
  #endif
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack {
  @_spi(DoNotImport) public func delay(_ seconds: Swift.Double) -> SwiftUI.AnimatedValueTrack<Value>
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack {
  @_spi(DoNotImport) public func sequenced(before track: SwiftUI.AnimatedValueTrack<Value>) -> SwiftUI.AnimatedValueTrack<Value>
  @_spi(DoNotImport) public func sequenced(after track: SwiftUI.AnimatedValueTrack<Value>) -> SwiftUI.AnimatedValueTrack<Value>
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack {
  @_spi(DoNotImport) public func timingCurve(_ curve: SwiftUICore.UnitCurve) -> SwiftUI.AnimatedValueTrack<Value>
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack {
  @_spi(DoNotImport) public func duration(_ duration: Swift.Double) -> SwiftUI.AnimatedValueTrack<Value>
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack {
  @_spi(DoNotImport) public func speed(_ speed: Swift.Double) -> SwiftUI.AnimatedValueTrack<Value>
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack {
  @_spi(DoNotImport) public func reversed() -> SwiftUI.AnimatedValueTrack<Value>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@_spi_available(watchOS, introduced: 11.0)
extension SwiftUI.TabViewStyle where Self == SwiftUI.TabBarOnlyTabViewStyle {
  @_alwaysEmitIntoClient public static var tabBarOnly: SwiftUI.TabBarOnlyTabViewStyle {
    @_silgen_name("tabBarOnlyMangledName")
    get { .init() }
  }
  @usableFromInline
  internal static var _tabBarOnlyABI: SwiftUI.TabBarOnlyTabViewStyle {
    @_silgen_name("$s7SwiftUI12TabViewStylePA2A0c7BarOnlycdE0VRszrlE03tabfG0AEvgZ")
    get
  }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, visionOS 2.0, *)
@_spi_available(watchOS, introduced: 11.0)
public struct TabBarOnlyTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.TabBarOnlyTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.TabBarOnlyTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.TabBarOnlyTabViewStyle : Swift.Sendable {
}
@available(iOS 14.5, macOS 11.0, tvOS 14.5, watchOS 7.4, *)
@usableFromInline
internal struct IsLeafTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { true }
  }
  @available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.0, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsLeafTraitKey : Swift.Sendable {
}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public enum MoveCommandDirection : Swift.Sendable {
  case up
  case down
  case left
  case right
  public static func == (a: SwiftUI.MoveCommandDirection, b: SwiftUI.MoveCommandDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, tvOS 13.0, *)
@_spi_available(iOS, introduced: 18.0)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onMoveCommand(perform action: ((SwiftUI.MoveCommandDirection) -> Swift.Void)?) -> some SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onMoveCommand(perform action: ((SwiftUI.MoveCommandDirection) -> Swift.Void)?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi_available(iOS, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onExitCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #else
  @_spi_available(iOS, introduced: 18.0)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onExitCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPlayPauseCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onPlayPauseCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onDeleteCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onDeleteCommand(perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #endif
  @available(tvOS 14.3, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func pageCommand<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V = 1) -> some SwiftUICore.View where V : Swift.BinaryInteger
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.NavigationLinkButtonStyle<Swift.Never> {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static var navigationLink: SwiftUI.NavigationLinkButtonStyle<Swift.Never> {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct NavigationLinkButtonStyle<PayloadDestination> : SwiftUI.PrimitiveButtonStyle where PayloadDestination : SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init() where PayloadDestination == Swift.Never
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.NavigationLinkButtonStyle<PayloadDestination>.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25NavigationLinkButtonStyleV8makeBody13configurationQrAA09PrimitiveeF13ConfigurationV_tF", 0) __<PayloadDestination>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationLinkButtonStyle : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @_spi(DoNotImport) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "navigationIndicatorVisibility")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "navigationIndicatorVisibility")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "navigationIndicatorVisibility")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "navigationIndicatorVisibility")
  public var showNavigationDisclosureIndicator: SwiftUI.Visibility {
    get
    set
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var navigationIndicatorVisibility: SwiftUI.Visibility {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct __UniversalListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.__UniversalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.__UniversalListStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct PagingScrollView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_spi(Private) nonisolated public init(behavior: SwiftUI.ScrollPagingBehavior = .childLeading, axis: SwiftUICore.Axis = .horizontal, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16PagingScrollViewV4bodyQrvp", 0) __<Content>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PagingScrollView : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ScrollPagingBehavior {
  @_spi(Private) public static var childLeading: SwiftUI.ScrollPagingBehavior {
    @_spi(Private) get
  }
  @_spi(Private) public static var paging: SwiftUI.ScrollPagingBehavior {
    @_spi(Private) get
  }
  @_spi(Private) public static var childPaging: SwiftUI.ScrollPagingBehavior {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollPagingBehavior : Swift.Sendable {
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct ListSectionSpacing : Swift.Sendable {
  public static let `default`: SwiftUI.ListSectionSpacing
  public static let compact: SwiftUI.ListSectionSpacing
  public static func custom(_ spacing: CoreFoundation.CGFloat) -> SwiftUI.ListSectionSpacing
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func listSectionSpacing(_ spacing: SwiftUI.ListSectionSpacing) -> some SwiftUICore.View {
        modifier(
            _TraitWritingModifier<ListSectionSpacingTraitKey>(value: spacing))
        .environment(\.listSectionSpacing, spacing)
    }
  
  @inlinable nonisolated public func listSectionSpacing(_ spacing: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        listSectionSpacing(.custom(spacing))
    }
  
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@usableFromInline
internal struct ListSectionSpacingTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient internal static var defaultValue: SwiftUI.ListSectionSpacing? {
    get { nil }
  }
  #else
  @_alwaysEmitIntoClient internal static var defaultValue: SwiftUI.ListSectionSpacing? {
    get { nil }
  }
  #endif
  @available(iOS 17.0, watchOS 10.0, *)
  @usableFromInline
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  internal typealias Value = SwiftUI.ListSectionSpacing?
}
@available(*, unavailable)
extension SwiftUI.ListSectionSpacingTraitKey : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@usableFromInline
internal struct UseCompactSectionSpacingTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.UseCompactSectionSpacingTraitKey : Swift.Sendable {
}
@available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  internal var listSectionSpacing: SwiftUI.ListSectionSpacing? {
    get
    set
  }
  #else
  @usableFromInline
  internal var listSectionSpacing: SwiftUI.ListSectionSpacing? {
    get
    set
  }
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHidden(_ hidden: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityHidden(_ hidden: Swift.Bool, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityHidden(_ hidden: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, visionOS 1.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(macOS, introduced: 14.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(tvOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(watchOS, introduced: 10.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @_disfavoredOverload nonisolated public func accessibilityHidden(_ hidden: Swift.Bool?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #else
  @_spi(Private) @available(iOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(macOS, introduced: 14.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(tvOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(watchOS, introduced: 10.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @_disfavoredOverload nonisolated public func accessibilityHidden(_ hidden: Swift.Bool?) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #endif
}
@_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, visionOS 1.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(macOS, introduced: 14.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(tvOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(watchOS, introduced: 10.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @_disfavoredOverload public func accessibilityHidden(_ hidden: Swift.Bool?) -> SwiftUICore.ModifiedContent<Content, Modifier>
  #else
  @_spi(Private) @available(iOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(macOS, introduced: 14.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(tvOS, introduced: 17.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(watchOS, introduced: 10.1, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityHidden(_:isEnabled:)")
  @_disfavoredOverload public func accessibilityHidden(_ hidden: Swift.Bool?) -> SwiftUICore.ModifiedContent<Content, Modifier>
  #endif
}
@_spi(Ultraviolet) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityVisibilityStorageProxy : Swift.Equatable, Swift.Hashable, Swift.Codable {
  @_spi(Ultraviolet) public init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Ultraviolet) public var isElement: Swift.Bool? {
    @_spi(Ultraviolet) get
  }
  #else
  @_spi(Ultraviolet) public var isElement: Swift.Bool? {
    @_spi(Ultraviolet) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Ultraviolet) public var isContainer: Swift.Bool? {
    @_spi(Ultraviolet) get
  }
  #else
  @_spi(Ultraviolet) public var isContainer: Swift.Bool? {
    @_spi(Ultraviolet) get
  }
  #endif
  @_spi(Ultraviolet) public var resolvesToHidden: Swift.Bool {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) public var isDefault: Swift.Bool {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) public static func == (a: SwiftUI.AccessibilityVisibilityStorageProxy, b: SwiftUI.AccessibilityVisibilityStorageProxy) -> Swift.Bool
  @_spi(Ultraviolet) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Ultraviolet) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Ultraviolet) public var hashValue: Swift.Int {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Ultraviolet) @available(*, unavailable)
extension SwiftUI.AccessibilityVisibilityStorageProxy : Swift.Sendable {
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlWidgetConfiguration {
  associatedtype Body : SwiftUI.ControlWidgetConfiguration
  @SwiftUI.ControlWidgetConfigurationBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @_Concurrency.MainActor @preconcurrency static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration {
  @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension Swift.Never : SwiftUI.ControlWidgetConfiguration {
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_functionBuilder public struct ControlWidgetConfigurationBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ControlWidgetConfiguration {
       content
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ControlWidgetConfiguration where Content : SwiftUI.ControlWidgetConfiguration {
        return content
    }
  
}
@available(*, unavailable)
extension SwiftUI.ControlWidgetConfigurationBuilder : Swift.Sendable {
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowPlacement : Swift.Equatable {
  @available(macOS, unavailable)
  public struct Position : Swift.Equatable {
    public static var utilityPanel: SwiftUI.WindowPlacement.Position {
      get
    }
    @_spi(DoNotImport) @available(*, deprecated, renamed: "utilityPanel")
    public static var controlPanel: SwiftUI.WindowPlacement.Position {
      get
    }
    public static func leading(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func trailing(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func above(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func below(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use PushWindowAction instead.")
    public static func replacing(_ relativeWindow: SwiftUI.WindowProxy) -> SwiftUI.WindowPlacement.Position
    public static func == (a: SwiftUI.WindowPlacement.Position, b: SwiftUI.WindowPlacement.Position) -> Swift.Bool
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(visionOS, unavailable)
  public init(_ position: CoreFoundation.CGPoint? = nil, size: CoreFoundation.CGSize? = nil)
  #else
  @available(visionOS, unavailable)
  public init(_ position: CoreFoundation.CGPoint? = nil, size: CoreFoundation.CGSize? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(visionOS, unavailable)
  public init(x: CoreFoundation.CGFloat? = nil, y: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil)
  #else
  @available(visionOS, unavailable)
  public init(x: CoreFoundation.CGFloat? = nil, y: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(visionOS, unavailable)
  public init(_ position: SwiftUICore.UnitPoint, size: CoreFoundation.CGSize? = nil)
  #else
  @available(visionOS, unavailable)
  public init(_ position: SwiftUICore.UnitPoint, size: CoreFoundation.CGSize? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(visionOS, unavailable)
  public init(_ position: SwiftUICore.UnitPoint, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil)
  #else
  @available(visionOS, unavailable)
  public init(_ position: SwiftUICore.UnitPoint, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil)
  #else
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil, size: CoreFoundation.CGSize? = nil)
  #else
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil, size: CoreFoundation.CGSize? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, depth: CoreFoundation.CGFloat? = nil)
  #else
  @available(macOS, unavailable)
  public init(_ position: SwiftUI.WindowPlacement.Position? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, depth: CoreFoundation.CGFloat? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(position: CoreFoundation.CGPoint? = nil, size: CoreFoundation.CGSize? = nil)
  #else
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(position: CoreFoundation.CGPoint? = nil, size: CoreFoundation.CGSize? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(position: CoreFoundation.CGPoint? = nil, size: CoreFoundation.CGSize? = nil, display: SwiftUI.DisplayProxy?)
  #else
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(position: CoreFoundation.CGPoint? = nil, size: CoreFoundation.CGSize? = nil, display: SwiftUI.DisplayProxy?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(x:y:width:height:)")
  @_disfavoredOverload public init(x: CoreFoundation.CGFloat? = nil, y: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, display: SwiftUI.DisplayProxy?)
  #else
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(x:y:width:height:)")
  @_disfavoredOverload public init(x: CoreFoundation.CGFloat? = nil, y: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, display: SwiftUI.DisplayProxy?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(relativeTo position: SwiftUICore.UnitPoint, size: CoreFoundation.CGSize? = nil, display: SwiftUI.DisplayProxy? = nil)
  #else
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(relativeTo position: SwiftUICore.UnitPoint, size: CoreFoundation.CGSize? = nil, display: SwiftUI.DisplayProxy? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:width:height:)")
  @_disfavoredOverload public init(relativeTo position: SwiftUICore.UnitPoint, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, display: SwiftUI.DisplayProxy? = nil)
  #else
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "init(_:width:height:)")
  @_disfavoredOverload public init(relativeTo position: SwiftUICore.UnitPoint, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, display: SwiftUI.DisplayProxy? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(*, deprecated, renamed: "init(_:)")
  @_disfavoredOverload public init(position: SwiftUI.WindowPlacement.Position? = nil)
  #else
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(*, deprecated, renamed: "init(_:)")
  @_disfavoredOverload public init(position: SwiftUI.WindowPlacement.Position? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(position: SwiftUI.WindowPlacement.Position? = nil, size: CoreFoundation.CGSize? = nil)
  #else
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(*, deprecated, renamed: "init(_:size:)")
  @_disfavoredOverload public init(position: SwiftUI.WindowPlacement.Position? = nil, size: CoreFoundation.CGSize? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(*, deprecated, renamed: "init(_:width:height:depth:)")
  @_disfavoredOverload public init(position: SwiftUI.WindowPlacement.Position? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, depth: CoreFoundation.CGFloat? = nil)
  #else
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(*, deprecated, renamed: "init(_:width:height:depth:)")
  @_disfavoredOverload public init(position: SwiftUI.WindowPlacement.Position? = nil, width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil, depth: CoreFoundation.CGFloat? = nil)
  #endif
  public static func == (a: SwiftUI.WindowPlacement, b: SwiftUI.WindowPlacement) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.WindowPlacement : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.WindowPlacement.Position : Swift.Sendable {
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowPlacementContext {
  @available(visionOS, unavailable)
  public var defaultDisplay: SwiftUI.DisplayProxy {
    get
  }
  @available(macOS, unavailable)
  public var windows: [SwiftUI.WindowProxy] {
    get
  }
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(*, deprecated, renamed: "windows")
  public var activeWindows: [SwiftUI.WindowProxy] {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "defaultDisplay")
  public var currentDisplay: SwiftUI.DisplayProxy? {
    get
  }
  #else
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "defaultDisplay")
  public var currentDisplay: SwiftUI.DisplayProxy? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "defaultDisplay")
  public var focusedDisplay: SwiftUI.DisplayProxy? {
    get
  }
  #else
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "defaultDisplay")
  public var focusedDisplay: SwiftUI.DisplayProxy? {
    get
  }
  #endif
  @_spi(DoNotImport) @available(visionOS, unavailable)
  @available(*, deprecated, renamed: "defaultDisplay")
  public var displays: [SwiftUI.DisplayProxy] {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.WindowPlacementContext : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DisplayProxy : Swift.Equatable {
  public let bounds: CoreFoundation.CGRect
  public let safeAreaInsets: SwiftUICore.EdgeInsets
  public let visibleRect: CoreFoundation.CGRect
  public static func == (a: SwiftUI.DisplayProxy, b: SwiftUI.DisplayProxy) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.DisplayProxy : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WindowProxy {
  public var id: Swift.String? {
    get
  }
  public var phase: SwiftUI.ScenePhase {
    get
  }
  @_spi(DoNotImport) public var size: CoreFoundation.CGSize {
    get
  }
  @_spi(DoNotImport) public var depth: CoreFoundation.CGFloat {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.WindowProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct Form<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI4FormV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.Form : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Form where Content == SwiftUI.FormStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.FormStyleConfiguration)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Form {
  @_spi(Private) nonisolated public init<C, F>(@SwiftUICore.ViewBuilder content: () -> C, @SwiftUICore.ViewBuilder footer: () -> F) where Content == SwiftUI.FormFooterContent<C, F>, C : SwiftUICore.View, F : SwiftUICore.View
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct FormFooterContent<Content, Footer> : SwiftUICore.View where Content : SwiftUICore.View, Footer : SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17FormFooterContentV4bodyQrvp", 0) __<Content, Footer>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.FormFooterContent : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol Commands {
  associatedtype Body : SwiftUI.Commands
  @SwiftUI.CommandsBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated static func _makeCommands(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @_Concurrency.MainActor @preconcurrency func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  @_Concurrency.MainActor @preconcurrency public static func _makeCommands(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct EmptyCommands : SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.EmptyCommands>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func _resolve(into: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.EmptyCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _ResolvedCommands {
}
@available(*, unavailable)
extension SwiftUI._ResolvedCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func commands<Content>(@SwiftUI.CommandsBuilder content: () -> Content) -> some SwiftUI.Scene where Content : SwiftUI.Commands
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.Commands {
       content
    }
  @_alwaysEmitIntoClient public static func buildBlock() -> SwiftUI.EmptyCommands {
        EmptyCommands()
    }
  @_alwaysEmitIntoClient public static func buildBlock<C>(_ content: C) -> C where C : SwiftUI.Commands {
        content
    }
}
@available(*, unavailable)
extension SwiftUI.CommandsBuilder : Swift.Sendable {
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MultiDatePicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15MultiDatePickerV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.MultiDatePicker : Swift.Sendable {
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MultiDatePicker {
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.Range<Foundation.Date>, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeFrom<Foundation.Date>, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeUpTo<Foundation.Date>, @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MultiDatePicker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.Range<Foundation.Date>)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeFrom<Foundation.Date>)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeUpTo<Foundation.Date>)
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MultiDatePicker where Label == SwiftUICore.Text {
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.Range<Foundation.Date>) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeFrom<Foundation.Date>) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Swift.Set<Foundation.DateComponents>>, in bounds: Swift.PartialRangeUpTo<Foundation.Date>) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  @_spi(Private) nonisolated public func onConnectionOptionPayload<D>(_ definition: D.Type = D.self, perform action: @escaping (D.Payload) -> Swift.Void) -> some SwiftUI.Scene where D : UIKit.UISceneConnectionOptionDefinition
  
}
@_spi(Private) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func onConnectionOptionPayload<D>(_ definition: D.Type = D.self, perform action: @escaping (D.Payload) -> Swift.Void) -> some SwiftUICore.View where D : UIKit.UISceneConnectionOptionDefinition
  
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onPencilDoubleTap(perform action: @escaping (_ value: SwiftUI.PencilDoubleTapGestureValue) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilDoubleTapGestureValue : Swift.Hashable {
  public let hoverPose: SwiftUI.PencilHoverPose?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.PencilDoubleTapGestureValue, b: SwiftUI.PencilDoubleTapGestureValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilDoubleTapGestureValue : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onPencilSqueeze(perform action: @escaping (_ phase: SwiftUI.PencilSqueezeGesturePhase) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@frozen public enum PencilSqueezeGesturePhase : Swift.Equatable {
  case active(SwiftUI.PencilSqueezeGestureValue)
  case ended(SwiftUI.PencilSqueezeGestureValue)
  case failed
  public static func == (a: SwiftUI.PencilSqueezeGesturePhase, b: SwiftUI.PencilSqueezeGesturePhase) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.PencilSqueezeGesturePhase : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilSqueezeGestureValue : Swift.Hashable {
  public let hoverPose: SwiftUI.PencilHoverPose?
  @_spi(Private) public var normalizedForceVelocity: CoreFoundation.CGFloat?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.PencilSqueezeGestureValue, b: SwiftUI.PencilSqueezeGestureValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilSqueezeGestureValue : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct ScrollPhaseChangeContext {
  public var geometry: SwiftUICore.ScrollGeometry {
    get
  }
  public var velocity: CoreFoundation.CGVector? {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ScrollPhaseChangeContext : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  nonisolated public func onScrollPhaseChange(_ action: @escaping (_ oldPhase: SwiftUICore.ScrollPhase, _ newPhase: SwiftUICore.ScrollPhase) -> Swift.Void) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  nonisolated public func onScrollPhaseChange(_ action: @escaping (_ oldPhase: SwiftUICore.ScrollPhase, _ newPhase: SwiftUICore.ScrollPhase, _ context: SwiftUI.ScrollPhaseChangeContext) -> Swift.Void) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  nonisolated public func onScrollGeometryChange<T>(for type: T.Type, of transform: @escaping (SwiftUICore.ScrollGeometry) -> T, action: @escaping (_ oldValue: T, _ newValue: T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Equatable
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, message: "Use onScrollPhaseChange()")
public struct ScrollEventState {
  @_spi(Private) public var isScrolling: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public var isTracking: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public var isDragging: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public var isDecelerating: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.1, macOS 13.0, tvOS 16.1, watchOS 9.1, *)
  public var isAnimating: Swift.Bool {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollEventState : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, message: "Use onScrollPhaseChange()")
@_Concurrency.MainActor @preconcurrency public struct ScrollEventStateReader<Content> : SwiftUICore.View, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @_spi(Private) nonisolated public init(@SwiftUICore.ViewBuilder content: @escaping (SwiftUI.ScrollEventState) -> Content)
  @_spi(Private) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.ScrollEventStateReader<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.ScrollEventStateReader<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @_spi(Private) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @_spi(Private) @available(*, deprecated, message: "Use onScrollPhaseChange()")
  @available(iOS, introduced: 16.0, message: "Use onScrollPhaseChange()")
  @available(tvOS, introduced: 16.0, message: "Use onScrollPhaseChange()")
  @available(watchOS, introduced: 9.0, message: "Use onScrollPhaseChange()")
  @available(macOS, introduced: 13.0, message: "Use onScrollPhaseChange()")
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollEventStateReader : Swift.Sendable {
}
@_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
@available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use ScrollEventStateReader")
@available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
@available(watchOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
@propertyWrapper public struct ScrollGestureState_V1<KeyValue> : SwiftUICore.DynamicProperty {
  @_spi(Private) public typealias Value = SwiftUI.ScrollGestureStateValue_V1
  @_spi(Private) @propertyWrapper public struct Binding {
    @_spi(Private) public var wrappedValue: SwiftUI.ScrollGestureStateValue_V1 {
      @_spi(Private) get
    }
    @_spi(Private) public var projectedValue: SwiftUI.ScrollGestureState_V1<KeyValue>.Binding {
      @_spi(Private) get
    }
  }
  @_spi(Private) public init() where KeyValue == SwiftUI.ScrollGestureStateValue_V1
  @_spi(Private) public init(_ keyPath: Swift.KeyPath<SwiftUI.ScrollGestureState_V1<KeyValue>.Value, KeyValue>)
  @_spi(Private) public var wrappedValue: KeyValue {
    @_spi(Private) get
  }
  @_spi(Private) public var projectedValue: SwiftUI.ScrollGestureState_V1<KeyValue>.Binding {
    @_spi(Private) get
  }
  @_spi(Private) public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollGestureState_V1 : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollGestureState_V1.Binding : Swift.Sendable {
}
@_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
@available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use ScrollEventStateReader")
@available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
@available(watchOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
public struct ScrollGestureStateValue_V1 : Swift.Equatable {
  @_spi(Private) public var isScrolling: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public var isPanning: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) @available(*, deprecated, message: "Use isPanning")
  public var isDragging: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public var isDecelerating: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public var isAnimating: Swift.Bool {
    @_spi(Private) get
  }
  @_spi(Private) public var velocity: CoreFoundation.CGVector {
    @_spi(Private) get
  }
  @_spi(Private) public static func == (a: SwiftUI.ScrollGestureStateValue_V1, b: SwiftUI.ScrollGestureStateValue_V1) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScrollGestureStateValue_V1 : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
  @available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use ScrollEventStateReader")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
  @available(watchOS, introduced: 17.0, deprecated: 17.0, message: "Use ScrollEventStateReader")
  nonisolated public func scrollGestureState<V>(_ scrollState: SwiftUI.ScrollGestureState_V1<V>.Binding) -> some SwiftUICore.View
  
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Slider {
  @_spi(Private) nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> ValueLabel, @SwiftUI.SliderMarkBuilder<V> marks: () -> [SwiftUI.SliderMark<V>], onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @_spi(Private) nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder minimumValueLabel: () -> ValueLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> ValueLabel, @SwiftUI.SliderMarkBuilder<V> marks: () -> [SwiftUI.SliderMark<V>], onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Slider where ValueLabel == SwiftUICore.EmptyView {
  @_spi(Private) nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUI.SliderMarkBuilder<V> marks: () -> [SwiftUI.SliderMark<V>], onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
  @_spi(Private) @available(tvOS, unavailable)
  nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUI.SliderMarkBuilder<V> marks: () -> [SwiftUI.SliderMark<V>], onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint, V.Stride : Swift.BinaryFloatingPoint
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
public struct SliderMark<V> : Swift.Identifiable, Swift.Comparable where V : Swift.BinaryFloatingPoint {
  @_spi(Private) public typealias Label = SwiftUICore.Text
  @_spi(Private) public struct ID : Swift.Hashable {
    @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Private) public static func == (a: SwiftUI.SliderMark<V>.ID, b: SwiftUI.SliderMark<V>.ID) -> Swift.Bool
    @_spi(Private) public var hashValue: Swift.Int {
      @_spi(Private) get
    }
  }
  @_spi(Private) public init(_ value: V, @SwiftUICore.ViewBuilder label: () -> SwiftUI.SliderMark<V>.Label)
  @_spi(Private) public init(_ value: V)
  @_spi(Private) public var id: SwiftUI.SliderMark<V>.ID {
    @_spi(Private) get
  }
  @_spi(Private) public static func < (lhs: SwiftUI.SliderMark<V>, rhs: SwiftUI.SliderMark<V>) -> Swift.Bool
  @_spi(Private) public static func == (a: SwiftUI.SliderMark<V>, b: SwiftUI.SliderMark<V>) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderMark.ID : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderMark : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
extension SwiftUI.SliderMark {
  @_spi(Private) public init(_ titleKey: SwiftUICore.LocalizedStringKey, _ value: V)
  @_spi(Private) @_disfavoredOverload public init<S>(_ title: S, _ value: V) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 9.0, *)
@_functionBuilder public struct SliderMarkBuilder<V> where V : Swift.BinaryFloatingPoint {
  @_spi(Private) public static func buildBlock(_ components: SwiftUI.SliderMark<V>...) -> [SwiftUI.SliderMark<V>]
  @_spi(DoNotImport) public static func buildBlock(_ components: [SwiftUI.SliderMark<V>]) -> [SwiftUI.SliderMark<V>]
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SliderMarkBuilder : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabRole : Swift.Hashable, Swift.Sendable {
  public static var search: SwiftUI.TabRole {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.TabRole, b: SwiftUI.TabRole) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _ControlWidgetAdaptor_V1<Base> : SwiftUI.Widget where Base : SwiftUI.ControlWidget_V1 {
  @_spi(Widget) nonisolated public init()
  @_spi(Widget) nonisolated public init(_ base: Base)
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    @_spi(Widget) get
  }
  @_spi(Widget) @available(iOS 18.0, *)
  @_spi_available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 9.0)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24_ControlWidgetAdaptor_V1V4bodyQrvp", 0) __<Base>
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI._ControlWidgetAdaptor_V1 : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarCustomizationOptions : Swift.OptionSet, Swift.Sendable {
  public typealias RawValue = Swift.Int
  public static var alwaysAvailable: SwiftUI.ToolbarCustomizationOptions {
    get
  }
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ArrayLiteralElement = SwiftUI.ToolbarCustomizationOptions
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Element = SwiftUI.ToolbarCustomizationOptions
}
extension SwiftUI.CustomizableToolbarContent {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public func defaultCustomization(_ defaultVisibility: SwiftUI.Visibility = .automatic, options: SwiftUI.ToolbarCustomizationOptions = []) -> some SwiftUI.CustomizableToolbarContent
  
  @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Please provide either a visibility or customization options")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Please provide either a visibility or customization options")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Please provide either a visibility or customization options")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Please provide either a visibility or customization options")
  public func defaultCustomization() -> some SwiftUI.CustomizableToolbarContent
  
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct MultimodalNavigationTitle : Swift.Equatable, Swift.Codable {
  @_spi(ClarityBoard) public static func title(from data: Foundation.Data) -> SwiftUI.MultimodalNavigationTitle
  @_spi(ClarityBoard) public static func == (a: SwiftUI.MultimodalNavigationTitle, b: SwiftUI.MultimodalNavigationTitle) -> Swift.Bool
  @_spi(ClarityBoard) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(ClarityBoard) public init(from decoder: any Swift.Decoder) throws
}
@_spi(ClarityBoard) @available(*, unavailable)
extension SwiftUI.MultimodalNavigationTitle : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  nonisolated public func menuActionDismissBehavior(_ behavior: SwiftUI.MenuActionDismissBehavior) -> some SwiftUICore.View
  
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct MenuActionDismissBehavior : Swift.Equatable {
  public static let automatic: SwiftUI.MenuActionDismissBehavior
  public static let enabled: SwiftUI.MenuActionDismissBehavior
  @available(tvOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static let disabled: SwiftUI.MenuActionDismissBehavior
  public static func == (a: SwiftUI.MenuActionDismissBehavior, b: SwiftUI.MenuActionDismissBehavior) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.MenuActionDismissBehavior : Swift.Sendable {
}
@available(iOS, introduced: 16.0, deprecated: 17.0, message: "Use `menuActionDismissBehavior(.disabled)` instead")
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func actionKeepsMenuPresented(_ keepsMenuPresented: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct HSplitView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.HSplitView : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct VSplitView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.VSplitView : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _SplitViewContainer : SwiftUICore._VariadicView.UnaryViewRoot {
  public func body(children: SwiftUICore._VariadicView.Children) -> some SwiftUICore.View
  
  public static var _viewListOptions: Swift.Int {
    get
  }
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19_SplitViewContainerV4body8childrenQrAA09_VariadicD9_ChildrenV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI._SplitViewContainer : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.PullDownMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderedButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `BorderedButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI23PullDownMenuButtonStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PullDownMenuButtonStyle : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderlessPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessPullDownMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI33BorderlessPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessPullDownMenuButtonStyle : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderlessButtonMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.BorderlessButtonMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `BorderlessButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `BorderlessButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI020BorderlessButtonMenuD5StyleV5_body13configurationQrAA01_edF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessButtonMenuButtonStyle : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `TexturedButtonMenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _TexturedPullDownMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI._TexturedPullDownMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(tvOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(watchOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `TexturedButtonMenuStyle` instead.")
  @available(visionOS, unavailable, message: "Use `TexturedButtonMenuStyle` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI32_TexturedPullDownMenuButtonStyleV5_body13configurationQrAA01_fgH13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI._TexturedPullDownMenuButtonStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct TextEditingCommands : SwiftUI.Commands {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TextEditingCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.TextEditingCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct TextFormattingCommands : SwiftUI.Commands {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TextFormattingCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.TextFormattingCommands : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableColumnAlignment : Swift.Hashable, Swift.Sendable {
  public static var automatic: SwiftUI.TableColumnAlignment {
    get
  }
  public static var leading: SwiftUI.TableColumnAlignment {
    get
  }
  public static var center: SwiftUI.TableColumnAlignment {
    get
  }
  public static var trailing: SwiftUI.TableColumnAlignment {
    get
  }
  public static var numeric: SwiftUI.TableColumnAlignment {
    get
  }
  public static func numeric(_ numberingSystem: Foundation.Locale.NumberingSystem) -> SwiftUI.TableColumnAlignment
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.TableColumnAlignment, b: SwiftUI.TableColumnAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent {
  public func alignment(_ alignment: SwiftUI.TableColumnAlignment) -> some SwiftUI.TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DisclosureGroup<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: @escaping () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15DisclosureGroupV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.DisclosureGroup : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DisclosureGroup where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ label: S, @SwiftUICore.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ label: S, isExpanded: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> Content) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 11.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
internal struct IsExpandedTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.Binding<Swift.Bool>? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.Binding<Swift.Bool>? {
    get { nil }
  }
  #endif
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.Binding<Swift.Bool>?
}
@available(*, unavailable)
extension SwiftUI.IsExpandedTraitKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
internal struct ShouldExpandAllTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.Binding<SwiftUI.ExpansionState>? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.Binding<SwiftUI.ExpansionState>? {
    get { nil }
  }
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.Binding<SwiftUI.ExpansionState>?
}
@available(*, unavailable)
extension SwiftUI.ShouldExpandAllTraitKey : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
internal enum ExpansionState : Swift.CustomStringConvertible {
  case expanded
  case collapsed
  case unspecified
  @usableFromInline
  internal var description: Swift.String {
    get
  }
  @usableFromInline
  internal static func == (a: SwiftUI.ExpansionState, b: SwiftUI.ExpansionState) -> Swift.Bool
  @usableFromInline
  internal func hash(into hasher: inout Swift.Hasher)
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ExpansionState : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func textInputCompletion(_ completion: Swift.String) -> some SwiftUICore.View
  
}
@available(macOS 15.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowStyle where Self == SwiftUI.PlainWindowStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainWindowStyle {
    get { .init() }
  }
}
@available(macOS 15.0, visionOS 1.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PlainWindowStyle : SwiftUI.WindowStyle {
  public typealias _Body = Swift.Never
  public init()
  @_spi(Private) public func configureWindow(_ window: Swift.AnyObject)
}
@available(*, unavailable)
extension SwiftUI.PlainWindowStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 1.0, *)
public struct SwipeGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  @_spi(Private) public struct Direction : Swift.Equatable, Swift.OptionSet, Swift.Sendable {
    @_spi(Private) public var rawValue: Swift.Int8
    @_spi(Private) public init(rawValue: Swift.Int8)
    @_spi(Private) public static let left: SwiftUI.SwipeGesture.Direction
    @_spi(Private) public static let right: SwiftUI.SwipeGesture.Direction
    @_spi(Private) public static let up: SwiftUI.SwipeGesture.Direction
    @_spi(Private) public static let down: SwiftUI.SwipeGesture.Direction
    @_spi(Private) public static let horizontal: SwiftUI.SwipeGesture.Direction
    @_spi(Private) public static let vertical: SwiftUI.SwipeGesture.Direction
    @_spi(Private) public static let all: SwiftUI.SwipeGesture.Direction
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
    public typealias ArrayLiteralElement = SwiftUI.SwipeGesture.Direction
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
    public typealias Element = SwiftUI.SwipeGesture.Direction
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
    public typealias RawValue = Swift.Int8
  }
  @_spi(Private) public struct Value : Swift.Sendable {
    @_spi(Private) public var direction: SwiftUI.SwipeGesture.Direction
  }
  @_spi(Private) public var allowedDirections: SwiftUI.SwipeGesture.Direction
  @_spi(Private) public init(direction: SwiftUI.SwipeGesture.Direction = .all)
  @_spi(Private) public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.SwipeGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.SwipeGesture.Value>
  @_spi(Private) package var internalBody: some SwiftUICore.Gesture<SwiftUI.SwipeGesture.Value> {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
  public typealias Body = Swift.Never
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI12SwipeGestureV12internalBodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SwipeGesture : Swift.Sendable {
}
@_spi(Private) extension SwiftUI.SwipeGesture.Direction : Swift.CustomStringConvertible {
  @_spi(Private) public static var allCases: [SwiftUI.SwipeGesture.Direction] {
    @_spi(Private) get
  }
  @_spi(Private) public var description: Swift.String {
    @_spi(Private) get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct Picker<Label, SelectionValue, Content> : SwiftUICore.View where Label : SwiftUICore.View, SelectionValue : Swift.Hashable, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6PickerV4bodyQrvp", 0) __<Label, SelectionValue, Content>
}
@available(*, unavailable)
extension SwiftUI.Picker : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where C : Swift.RandomAccessCollection
  @_alwaysEmitIntoClient nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) {
        self.init(selection: selection, label: label(), content: content)
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(_) @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Use Picker.init(_:sources:selection:content).")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use Picker.init(_:sources:selection:content).")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Use Picker.init(_:sources:selection:content).")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Use Picker.init(_:sources:selection:content).")
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, selection: C, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.Collection, C.Element == SwiftUICore.Binding<SelectionValue>
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_spi(_) @available(iOS, introduced: 16.0, deprecated: 16.0, message: "Use Picker.init(_:sources:selection:content).")
  @available(macOS, introduced: 13.0, deprecated: 13.0, message: "Use Picker.init(_:sources:selection:content).")
  @available(tvOS, introduced: 16.0, deprecated: 16.0, message: "Use Picker.init(_:sources:selection:content).")
  @available(watchOS, introduced: 9.0, deprecated: 9.0, message: "Use Picker.init(_:sources:selection:content).")
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, selection: C, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol, C.Element == SwiftUICore.Binding<SelectionValue>
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Picker where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init(
            selection: selection,
            content: content
        ) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<SelectionValue> {
        self.init(sources: sources, selection: selection) {
            content()
        } label: {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol {
        self.init(selection: selection) {
            content()
        } label: {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<C, S>(_ title: S, systemImage: Swift.String, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol, C.Element == SwiftUICore.Binding<SelectionValue> {
        self.init(sources: sources, selection: selection) {
            content()
        } label: {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Picker where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, C.Element == SwiftUICore.Binding<SelectionValue>
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, image: DeveloperToolsSupport.ImageResource, sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content) where C : Swift.RandomAccessCollection, S : Swift.StringProtocol, C.Element == SwiftUICore.Binding<SelectionValue>
}
extension SwiftUI.Picker {
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder label: () -> Label) where Content == SwiftUI.PickerBuilder<SelectionValue>.Content<C>, C : SwiftUI.PickerContent
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C, Selection>(selection: Selection, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder label: () -> Label) where Content == SwiftUI.PickerBuilder<SelectionValue>.Content<C>, C : SwiftUI.PickerContent, Selection : Swift.RandomAccessCollection, Selection.Element == SwiftUICore.Binding<SelectionValue>
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C, Footer>(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder footer: () -> Footer) where Content == SwiftUI.PickerBuilder<SelectionValue>.ContentWithFooter<C, Footer>, C : SwiftUI.PickerContent, Footer : SwiftUICore.View
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C, Footer, Selection>(selection: Selection, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder footer: () -> Footer) where Content == SwiftUI.PickerBuilder<SelectionValue>.ContentWithFooter<C, Footer>, C : SwiftUI.PickerContent, Footer : SwiftUICore.View, Selection : Swift.RandomAccessCollection, Selection.Element == SwiftUICore.Binding<SelectionValue>
}
extension SwiftUI.Picker where Label == SwiftUICore.Text {
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C) where Content == SwiftUI.PickerBuilder<SelectionValue>.Content<C>, C : SwiftUI.PickerContent, S : Swift.StringProtocol
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<C, S, Selection>(_ title: S, selection: Selection, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C) where Content == SwiftUI.PickerBuilder<SelectionValue>.Content<C>, C : SwiftUI.PickerContent, S : Swift.StringProtocol, Selection : Swift.RandomAccessCollection, Selection.Element == SwiftUICore.Binding<SelectionValue>
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C) where Content == SwiftUI.PickerBuilder<SelectionValue>.Content<C>, C : SwiftUI.PickerContent
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C, Selection>(_ titleKey: SwiftUICore.LocalizedStringKey, selection: Selection, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C) where Content == SwiftUI.PickerBuilder<SelectionValue>.Content<C>, C : SwiftUI.PickerContent, Selection : Swift.RandomAccessCollection, Selection.Element == SwiftUICore.Binding<SelectionValue>
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<C, S, Footer>(_ title: S, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder footer: () -> Footer) where Content == SwiftUI.PickerBuilder<SelectionValue>.ContentWithFooter<C, Footer>, C : SwiftUI.PickerContent, S : Swift.StringProtocol, Footer : SwiftUICore.View
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_disfavoredOverload nonisolated public init<C, S, Footer, Selection>(_ title: S, selection: Selection, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder footer: () -> Footer) where Content == SwiftUI.PickerBuilder<SelectionValue>.ContentWithFooter<C, Footer>, C : SwiftUI.PickerContent, S : Swift.StringProtocol, Footer : SwiftUICore.View, Selection : Swift.RandomAccessCollection, Selection.Element == SwiftUICore.Binding<SelectionValue>
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C, Footer>(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder footer: () -> Footer) where Content == SwiftUI.PickerBuilder<SelectionValue>.ContentWithFooter<C, Footer>, C : SwiftUI.PickerContent, Footer : SwiftUICore.View
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public init<C, Footer, Selection>(_ titleKey: SwiftUICore.LocalizedStringKey, selection: Selection, @SwiftUI.PickerBuilder<SelectionValue> content: () -> C, @SwiftUICore.ViewBuilder footer: () -> Footer) where Content == SwiftUI.PickerBuilder<SelectionValue>.ContentWithFooter<C, Footer>, C : SwiftUI.PickerContent, Footer : SwiftUICore.View, Selection : Swift.RandomAccessCollection, Selection.Element == SwiftUICore.Binding<SelectionValue>
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Picker {
  @_spi(Private) nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View)
  @_spi(Private) nonisolated public init<C>(sources: C, selection: Swift.KeyPath<C.Element, SwiftUICore.Binding<SelectionValue>>, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> some View) where C : Swift.RandomAccessCollection
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Picker {
  @available(iOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(macOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(tvOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Picker(selection:content:label:)")
  nonisolated public init(selection: SwiftUICore.Binding<SelectionValue>, label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.PalettePickerStyle {
  @_alwaysEmitIntoClient public static var palette: SwiftUI.PalettePickerStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PalettePickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PalettePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PalettePickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PalettePickerStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct Tab<Value, Content, Label> {
}
@available(*, unavailable)
extension SwiftUI.Tab : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Tab : SwiftUI.TabContent where Value : Swift.Hashable, Content : SwiftUICore.View, Label : SwiftUICore.View {
  public typealias TabValue = Value
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, image: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #else
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, image: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, image: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #else
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, image: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #endif
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #else
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #else
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #endif
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, systemImage: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #else
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, systemImage: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, systemImage: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #else
  @_disfavoredOverload nonisolated public init<S, T>(_ title: S, systemImage: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol, T : Swift.Hashable
  #endif
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #else
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #else
  nonisolated public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, value: T, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, Label == SwiftUI.DefaultTabLabel, T : Swift.Hashable
  #endif
  nonisolated public init(value: Value, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.EmptyView
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(value: V, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUICore.EmptyView, V : Swift.Hashable
  #else
  nonisolated public init<V>(value: V, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUICore.EmptyView, V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #else
  nonisolated public init(value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(value: V, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUI.DefaultTabLabel, V : Swift.Hashable
  #else
  nonisolated public init<V>(value: V, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Value == V?, Label == SwiftUI.DefaultTabLabel, V : Swift.Hashable
  #endif
  nonisolated public init(value: Value, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  nonisolated public init(value: Value, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(value: V, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where Value == V?, V : Swift.Hashable
  #else
  nonisolated public init<V>(value: V, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where Value == V?, V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(value: V, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where Value == V?, V : Swift.Hashable
  #else
  nonisolated public init<V>(value: V, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label) where Value == V?, V : Swift.Hashable
  #endif
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var body: SwiftUI.Tab<Value, Content, Label> {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = SwiftUI.Tab<Value, Content, Label>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI3TabVAASHRzAA4ViewR_AaDR0_rlE011_identifiedD0Qrvp", 0) __<Value, Content, Label>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Tab where Value == Swift.Never, Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #endif
  @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel, S : Swift.StringProtocol
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Tab where Value == Swift.Never, Content : SwiftUICore.View, Label : SwiftUICore.View {
  public init(@SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.EmptyView
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #else
  public init(role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUI.DefaultTabLabel
  #endif
  public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  public init(role: SwiftUI.TabRole?, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func tabViewSidebarHeader<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func tabViewSidebarFooter<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func tabViewSidebarBottomBar<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitPlatformItem {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) public var text: Foundation.NSAttributedString? {
    @_spi(ForMapKitOnly) get
  }
  #else
  @_spi(ForMapKitOnly) public var text: Foundation.NSAttributedString? {
    @_spi(ForMapKitOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) public var secondaryText: Foundation.NSAttributedString? {
    @_spi(ForMapKitOnly) get
  }
  #else
  @_spi(ForMapKitOnly) public var secondaryText: Foundation.NSAttributedString? {
    @_spi(ForMapKitOnly) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) public var iconText: Foundation.NSAttributedString? {
    @_spi(ForMapKitOnly) get
  }
  #else
  @_spi(ForMapKitOnly) public var iconText: Foundation.NSAttributedString? {
    @_spi(ForMapKitOnly) get
  }
  #endif
  @_spi(ForMapKitOnly) public var prioritizeImage: Swift.Bool {
    @_spi(ForMapKitOnly) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) @available(macOS, unavailable)
  public func makeUIImage() -> UIKit.UIImage?
  #else
  @_spi(ForMapKitOnly) @available(macOS, unavailable)
  public func makeUIImage() -> UIKit.UIImage?
  #endif
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitPlatformItem : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct MapKitPlatformItemReader<Content, Source> : SwiftUICore.View where Content : SwiftUICore.View, Source : SwiftUICore.View {
  @_spi(ForMapKitOnly) nonisolated public init(@SwiftUICore.ViewBuilder content: @escaping (SwiftUI.MapKitPlatformItem) -> Content, @SwiftUICore.ViewBuilder source: () -> Source)
  @_spi(ForMapKitOnly) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(ForMapKitOnly) get
  }
  @_spi(ForMapKitOnly) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24MapKitPlatformItemReaderV4bodyQrvp", 0) __<Content, Source>
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitPlatformItemReader : Swift.Sendable {
}
@_spi(ForMapKitOnly) extension SwiftUI.MapKitPlatformItem {
  @_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func makePlatformItem<S>(inputs: SwiftUICore._ViewInputs, source: SwiftUICore._GraphValue<S>) -> SwiftUICore._GraphValue<SwiftUI.MapKitPlatformItem> where S : SwiftUICore.View
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ClarityUIScene<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @_spi(Private) nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14ClarityUISceneV4bodyQrvp", 0) __<Content>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ClarityUIScene : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazyHStack<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  nonisolated public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyHStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyHStack : Swift.Sendable {
}
@_spi(TextAnimations) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@_silgen_name("SwiftUITextAnimationProviderClass")
public func SwiftUITextAnimationProviderClass() -> any UIFoundation_Private.NSTextAnimationProvider.Type
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Group : SwiftUI.Scene where Content : SwiftUI.Scene {
  @inlinable nonisolated public init(@SwiftUI.SceneBuilder content: () -> Content) {
        self = Self._make(content: content())
    }
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct _TupleScene<T> : SwiftUI.Scene {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var value: T
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_ value: T)
  @usableFromInline
  nonisolated internal static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI._TupleScene<T>>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._TupleScene : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where Value == C.TableRowValue, C : SwiftUI.TableRowContent {
        content
    }
  #else
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where Value == C.TableRowValue, C : SwiftUI.TableRowContent {
        content
    }
  #endif
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where Value == T.TableRowValue, T : SwiftUI.TableRowContent, F : SwiftUI.TableRowContent, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where Value == T.TableRowValue, T : SwiftUI.TableRowContent, F : SwiftUI.TableRowContent, T.TableRowValue == F.TableRowValue {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
  @available(*, unavailable, message: "this code may crash on earlier versions of the OS; add 'if #available' version check around the Table instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: some TableRowContent<Value>) -> some SwiftUI.TableRowContent<Value> {
        content
    }
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._ConditionalContent : SwiftUI.TableRowContent where TrueContent : SwiftUI.TableRowContent, FalseContent : SwiftUI.TableRowContent {
  public typealias TableRowValue = TrueContent.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.TableRowContent where Wrapped : SwiftUI.TableRowContent {
  public typealias TableRowValue = Wrapped.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
#else
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.TableRowContent where Wrapped : SwiftUI.TableRowContent {
  public typealias TableRowValue = Wrapped.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
#endif
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityInputLabels<S>(_ inputLabels: [S], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityInputLabels<S>(_ inputLabels: [S], isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityInputLabels(_ inputLabels: [SwiftUICore.Text]) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityInputLabels(_ inputLabelKeys: [SwiftUICore.LocalizedStringKey]) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityInputLabels<S>(_ inputLabels: [S]) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_Concurrency.MainActor @preconcurrency public struct AsyncImage<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1) where Content == SwiftUICore.Image
  #else
  nonisolated public init(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1) where Content == SwiftUICore.Image
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient nonisolated public init<I, P>(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Image) -> I, @SwiftUICore.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUICore._ConditionalContent<I, P>, I : SwiftUICore.View, P : SwiftUICore.View {
        self.init(url: url, scale: scale) { phase in
            if let i = phase.image {
                content(i)
            } else {
                placeholder()
            }
        }
    }
  #else
  @_alwaysEmitIntoClient nonisolated public init<I, P>(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Image) -> I, @SwiftUICore.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUICore._ConditionalContent<I, P>, I : SwiftUICore.View, P : SwiftUICore.View {
        self.init(url: url, scale: scale) { phase in
            if let i = phase.image {
                content(i)
            } else {
                placeholder()
            }
        }
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1, transaction: SwiftUICore.Transaction = Transaction(), @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  #else
  nonisolated public init(url: Foundation.URL?, scale: CoreFoundation.CGFloat = 1, transaction: SwiftUICore.Transaction = Transaction(), @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10AsyncImageV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.AsyncImage : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public enum AsyncImagePhase : Swift.Sendable {
  case empty
  case success(SwiftUICore.Image)
  case failure(any Swift.Error)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var image: SwiftUICore.Image? {
    get
  }
  #else
  public var image: SwiftUICore.Image? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var error: (any Swift.Error)? {
    get
  }
  #else
  public var error: (any Swift.Error)? {
    get
  }
  #endif
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func reclaimsForEachElements(_ isEnabled: Swift.Bool = true) -> some SwiftUICore.View {
        return modifier(
            _ReclaimForEachElementsViewModifier(isEnabled: isEnabled))
    }
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ForEach {
  @_spi(Private) public func reuseID<T>(_ keyPath: Swift.KeyPath<Data.Element, T>) -> SwiftUICore.ForEach<Data, ID, Content> where T : Swift.Hashable
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ReclaimForEachElementsViewModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore._GraphInputsModifier {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var isEnabled: Swift.Bool
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(isEnabled: Swift.Bool) { self.isEnabled = isEnabled }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static func _makeInputs(modifier: SwiftUICore._GraphValue<SwiftUI._ReclaimForEachElementsViewModifier>, inputs: inout SwiftUICore._GraphInputs)
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
}
@_spi(ForMapKitOnly) @_spi(ChartsInternal) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ForEach {
  @_spi(ForMapKitOnly) @_spi(ChartsInternal) public static func makeWithKeyPath(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, content: @escaping (Data.Element) -> Content) -> SwiftUICore.ForEach<Data, ID, Content>
  @_spi(ForMapKitOnly) @_spi(ChartsInternal) public static func makeWithOffset(_ data: Data, content: @escaping (Data.Element) -> Content) -> SwiftUICore.ForEach<Data, ID, Content> where ID == Swift.Int
  @_spi(ForMapKitOnly) @_spi(ChartsInternal) public func makeID(index: Data.Index, offset: Swift.Int) -> ID
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ForEach {
  @_spi(ForMapKitOnly) public var isConstant: Swift.Bool {
    @_spi(ForMapKitOnly) get
  }
}
@_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct CustomHoverEffectPhase : Swift.Hashable, Swift.Sendable {
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static let inactive: SwiftUI.CustomHoverEffectPhase
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static var active: SwiftUI.CustomHoverEffectPhase
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) package init(storage: SwiftUI.CustomHoverEffectPhaseInfo)
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static func == (a: SwiftUI.CustomHoverEffectPhase, b: SwiftUI.CustomHoverEffectPhase) -> Swift.Bool
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public var hashValue: Swift.Int {
    @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) get
  }
}
package enum CustomHoverEffectPhaseInfo : Swift.Equatable, Swift.Hashable {
  case inactive
  case active
  package static func == (a: SwiftUI.CustomHoverEffectPhaseInfo, b: SwiftUI.CustomHoverEffectPhaseInfo) -> Swift.Bool
  package func hash(into hasher: inout Swift.Hasher)
  package var hashValue: Swift.Int {
    get
  }
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public func visualEffect(_ effect: @escaping (SwiftUICore.EmptyVisualEffect, SwiftUI.CustomHoverEffectPhase, SwiftUICore.GeometryProxy) -> some VisualEffect) -> some SwiftUICore.CustomHoverEffect
  
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public func _visualEffect(_ effect: @escaping (SwiftUICore.EmptyVisualEffect, SwiftUI.CustomHoverEffectPhase, SwiftUICore.GeometryProxy) -> some VisualEffect) -> some SwiftUICore.CustomHoverEffect
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@usableFromInline
internal struct ListItemBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public static var defaultValue: (itemKinds: SwiftUI.ListItemKind.Set, view: SwiftUICore.AnyView?)? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) public static var defaultValue: (itemKinds: SwiftUI.ListItemKind.Set, view: SwiftUICore.AnyView?)? {
    @_spi(Private) get
  }
  #endif
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  @usableFromInline
  internal typealias Value = (itemKinds: SwiftUI.ListItemKind.Set, view: SwiftUICore.AnyView?)?
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ListItemBackgroundTraitKey : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public enum ListItemKind : Swift.Int {
  @_spi(Private) case row
  @_spi(Private) case header
  @_spi(Private) case footer
  @_spi(Private) public struct Set : Swift.OptionSet {
    @_spi(Private) public typealias Element = SwiftUI.ListItemKind.Set
    @_spi(Private) public var rawValue: Swift.Int
    @_spi(Private) public static let row: SwiftUI.ListItemKind.Set
    @_spi(Private) public static let header: SwiftUI.ListItemKind.Set
    @_spi(Private) public static let footer: SwiftUI.ListItemKind.Set
    @_spi(Private) public static let all: SwiftUI.ListItemKind.Set
    @_spi(Private) public init(rawValue: Swift.Int)
    @_spi(Private) public init(_ itemKind: SwiftUI.ListItemKind)
    @_spi(Private) public func contains(_ itemKind: SwiftUI.ListItemKind) -> Swift.Bool
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias ArrayLiteralElement = SwiftUI.ListItemKind.Set.Element
    @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
    public typealias RawValue = Swift.Int
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init?(rawValue: Swift.Int)
  #else
  @_spi(Private) public init?(rawValue: Swift.Int)
  #endif
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias RawValue = Swift.Int
  @_spi(Private) public var rawValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ListItemKind : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ListItemKind.Set : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listItemBackground<V>(kinds: SwiftUI.ListItemKind.Set, @SwiftUICore.ViewBuilder view: () -> V?) -> some SwiftUICore.View where V : SwiftUICore.View {
        _trait(
            ListItemBackgroundTraitKey.self,
            (kinds, view().map { AnyView($0) }))
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listItemBackground<V>(kinds: SwiftUI.ListItemKind.Set, @SwiftUICore.ViewBuilder view: () -> V?) -> some SwiftUICore.View where V : SwiftUICore.View {
        _trait(
            ListItemBackgroundTraitKey.self,
            (kinds, view().map { AnyView($0) }))
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listItemBackground<V>(_ view: V?, kinds: SwiftUI.ListItemKind.Set) -> some SwiftUICore.View where V : SwiftUICore.View {
        _trait(
            ListItemBackgroundTraitKey.self,
            (kinds, view.map { AnyView($0) }))
    }
  
  #else
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listItemBackground<V>(_ view: V?, kinds: SwiftUI.ListItemKind.Set) -> some SwiftUICore.View where V : SwiftUICore.View {
        _trait(
            ListItemBackgroundTraitKey.self,
            (kinds, view.map { AnyView($0) }))
    }
  
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var menuTitleVisibility: SwiftUI.Visibility {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func menuTitle(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View {
        environment(\.menuTitleVisibility, visibility)
    }
  
  @_spi(Private) nonisolated public func overrideMenuTitle(_ title: SwiftUICore.Text) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func searchCompletion(_ completion: Swift.String) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func searchCompletion<T>(_ token: T) -> some SwiftUICore.View where T : Swift.Identifiable
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func searchSuggestions(_ visibility: SwiftUI.Visibility, for placements: SwiftUI.SearchSuggestionsPlacement.Set) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(*, deprecated, renamed: "searchSuggestions(_:for:)")
  nonisolated public func searchSuggestions(_ visibility: SwiftUI.Visibility, in placements: SwiftUI.SearchSuggestionsPlacement.Set) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  public var isSearching: Swift.Bool {
    get
  }
  public var dismissSearch: SwiftUI.DismissSearchAction {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var searchSuggestionsPlacement: SwiftUI.SearchSuggestionsPlacement {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public struct DismissSearchAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct StartSearchAction {
  @_spi(Private) public func callAsFunction()
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.StartSearchAction : Swift.Sendable {
}
@_spi(Private_Search) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct DismissSearchAccessoryAction {
  @_spi(Private_Search) public func callAsFunction()
}
@_spi(Private_Search) @available(*, unavailable)
extension SwiftUI.DismissSearchAccessoryAction : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Use the isPresented parameter of a searchable modifier.")
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "Use the isPresented parameter of a searchable modifier.")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var _startSearching: SwiftUI.StartSearchAction {
    get
  }
  @_spi(Private_Search) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var dismissSearchAccessory: SwiftUI.DismissSearchAccessoryAction {
    get
  }
}
extension SwiftUICore.View {
  @_spi(Private_Search) @_spi(Search) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func searchVibrancyEnabled(_ isEnabled: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS, unavailable)
@available(macOS, deprecated, introduced: 10.15, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public typealias PullDownButton = SwiftUI._PullDownButton
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _PullDownButton<Label, Content> where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(label: Label, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._PullDownButton : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, deprecated, introduced: 10.15, message: "Use MenuButton instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._PullDownButton where Label == SwiftUICore.Text {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.SelectionShapeStyle {
  @_alwaysEmitIntoClient public static var selection: SwiftUI.SelectionShapeStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct SelectionShapeStyle : SwiftUICore.ShapeStyle {
  @available(macOS 12.0, *)
  public init()
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(*, deprecated, message: "obsolete")
  @_alwaysEmitIntoClient nonisolated public static func _makeView<S>(view: SwiftUICore._GraphValue<SwiftUICore._ShapeView<S, SwiftUI.SelectionShapeStyle>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where S : SwiftUICore.Shape {
        _ShapeView<S, Self>._makeView(view: view, inputs: inputs)
    }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 10.0)
  public typealias Resolved = Swift.Never
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(.automatic)` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DefaultMenuButtonStyle : SwiftUI.MenuButtonStyle {
  public init()
  public func _body(configuration: SwiftUI.DefaultMenuButtonStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  @available(tvOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  @available(watchOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(.automatic)` instead.")
  @available(visionOS, unavailable, message: "Use `menuStyle(.automatic)` instead.")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultMenuButtonStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultMenuButtonStyle : Swift.Sendable {
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.TitleAndIconLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var titleAndIcon: SwiftUI.TitleAndIconLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.5, macOS 11.3, tvOS 14.5, watchOS 7.4, *)
@_Concurrency.MainActor @preconcurrency public struct TitleAndIconLabelStyle : SwiftUI.LabelStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.TitleAndIconLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.5, tvOS 14.5, watchOS 7.4, macOS 11.3, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22TitleAndIconLabelStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.TitleAndIconLabelStyle : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct UtilityWindow<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  nonisolated public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13UtilityWindowV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.UtilityWindow : Swift.Sendable {
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ButtonStyle where Self == SwiftUI.LargeSidebarFooterAddButtonStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static var largeSidebarFooterAdd: SwiftUI.LargeSidebarFooterAddButtonStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LargeSidebarFooterAddButtonStyle : SwiftUI.ButtonStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LargeSidebarFooterAddButtonStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI32LargeSidebarFooterAddButtonStyleV8makeBody13configurationQrAA0gH13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LargeSidebarFooterAddButtonStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BackdropGroupEffect : SwiftUICore.RendererEffect {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var enabled: Swift.Bool
  @_spi(Private) @inlinable @_Concurrency.MainActor @preconcurrency internal init(enabled: Swift.Bool) { self.enabled = enabled }
  @_spi(Private) @_Concurrency.MainActor @preconcurrency package func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.DisplayList.Effect
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func backdropGroup(_ enabled: Swift.Bool = true) -> some SwiftUICore.View {
        return modifier(_BackdropGroupEffect(enabled: enabled))
    }
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.PlaybackButtonStyle where Self == SwiftUI.CirclePlaybackButtonStyle {
  @_spi(Private) public static var circle: SwiftUI.CirclePlaybackButtonStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct CirclePlaybackButtonStyle : SwiftUI.PlaybackButtonStyle {
  @_spi(Private) public var _storage: SwiftUI.PlaybackButton._StyleStorage {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CirclePlaybackButtonStyle : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PrintPage<Content> : SwiftUI.PrintContent where Content : SwiftUICore.View {
  @_spi(DoNotImport) public var content: Content
  @_spi(DoNotImport) public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(DoNotImport) public static func _makePrintContent(content: SwiftUICore._GraphValue<SwiftUI.PrintPage<Content>>, inputs: SwiftUI._PrintingInputs) -> SwiftUI._PrintingOutputs
  @_spi(DoNotImport) @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias PrintBody = Swift.Never
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.PrintPage : Swift.Sendable {
}
#if compiler(>=5.3) && $RetroactiveAttribute
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Image : @retroactive CoreTransferable.Transferable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Representation = @_opaqueReturnTypeOf("$s7SwiftUI5ImageV22transferRepresentationQrvpZ", 0) __
}
#else
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Image : CoreTransferable.Transferable {
  public static var transferRepresentation: some CoreTransferable.TransferRepresentation {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Representation = @_opaqueReturnTypeOf("$s7SwiftUI5ImageV22transferRepresentationQrvpZ", 0) __
}
#endif
extension SwiftUICore.VerticalAlignment {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public static var firstTextLineCenter: SwiftUICore.VerticalAlignment {
    get
  }
}
extension SwiftUICore.AlignmentGuide {
  package var viewDebugValue: Any {
    get
  }
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.HorizontalAlignment : @retroactive SwiftUICore.CustomViewDebugValueConvertible {
}
#else
extension SwiftUICore.HorizontalAlignment : SwiftUICore.CustomViewDebugValueConvertible {
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.VerticalAlignment : @retroactive SwiftUICore.CustomViewDebugValueConvertible {
}
#else
extension SwiftUICore.VerticalAlignment : SwiftUICore.CustomViewDebugValueConvertible {
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.Alignment : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUI.CodableAlignment {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = SwiftUI.CodableAlignment
}
#else
extension SwiftUICore.Alignment : SwiftUICore.CodableByProxy {
  package var codingProxy: SwiftUI.CodableAlignment {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias CodingProxy = SwiftUI.CodableAlignment
}
#endif
package struct CodableAlignment : SwiftUICore.CodableProxy {
  package var base: SwiftUICore.Alignment
  package init(_ base: SwiftUICore.Alignment)
  package func encode(to encoder: any Swift.Encoder) throws
  package init(from decoder: any Swift.Decoder) throws
  package typealias Base = SwiftUICore.Alignment
}
@_spi(_) @available(visionOS 1.0, macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "_Stage and its APIs will be removed soon. Use ImmersiveSpace APIs instead as soon as possible – see rdar://100803900")
public struct _OpenStageAction : Swift.Sendable {
  @_spi(_) public func callAsFunction<D>(value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_spi(_) public func callAsFunction(id: Swift.String)
  @_spi(_) public func callAsFunction<D>(id: Swift.String, value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@_spi(_) @available(*, unavailable)
extension SwiftUI._OpenStageAction : Swift.Sendable {
}
@_spi(Private) @available(visionOS 1.0, macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "_Stage and its APIs will be removed soon. Use ImmersiveSpace APIs instead as soon as possible – see rdar://100803900")
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var openStage: SwiftUI._OpenStageAction {
    @_spi(Private) get
  }
}
@_spi(_) @available(visionOS 1.0, macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "_Stage and its APIs will be removed soon. Use ImmersiveSpace APIs instead as soon as possible – see rdar://100803900")
extension SwiftUICore.EnvironmentValues {
  @_spi(_) public var _openStage: SwiftUI._OpenStageAction {
    @_spi(_) get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct ScrollView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var content: Content
  @_Concurrency.MainActor @preconcurrency public var axes: SwiftUICore.Axis.Set {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var showsIndicators: Swift.Bool {
    get
    set
  }
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use the ScrollView(_:content:) initializer and the scrollIndicators(:_) modifier")
  nonisolated public init(_ axes: SwiftUICore.Axis.Set = .vertical, showsIndicators: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10ScrollViewV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.ScrollView : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func scrollViewStyleContext() -> some SwiftUICore.View
  
}
extension SwiftUI.ScrollView {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init(_ axes: SwiftUICore.Axis.Set = .vertical, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init(axes, showsIndicators: true, content: content)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScrollView {
  @available(*, deprecated, message: "This SPI is no longer supported. Use scrollBounceBehavior() instead.")
  @_Concurrency.MainActor @preconcurrency public var _alwaysBounceAxes: SwiftUICore.Axis.Set {
    get
    set
  }
}
@_spi(Private) @available(iOS, introduced: 15.0, deprecated: 16.4, message: "This is the default behavior. Customizing this will be ignored.")
@available(macOS, introduced: 12.0, deprecated: 13.3, message: "This is the default behavior. Customizing this will be ignored.")
@available(tvOS, introduced: 15.0, deprecated: 16.4, message: "This is the default behavior. Customizing this will be ignored.")
@available(watchOS, introduced: 8.0, deprecated: 9.4, message: "This is the default behavior. Customizing this will be ignored.")
extension SwiftUI.ScrollView {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var scrollsContentToBeginningInRightToLeft: Swift.Bool {
    @_spi(Private) get
    @_spi(Private) set
  }
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public protocol ClarityUIApplicationSceneClientSettingsProtocol : ObjectiveC.NSObject {
  @_spi(ClarityBoard) var navigationTitles: [Foundation.Data] { get }
  @_spi(ClarityBoard) var chromeVisible: Swift.Bool { get }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ClarityBoard) var bottomBarTransitionProgress: CoreFoundation.CGFloat? { get }
  #else
  @_spi(ClarityBoard) var bottomBarTransitionProgress: CoreFoundation.CGFloat? { get }
  #endif
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public protocol ClarityUIMutableApplicationSceneClientSettingsProtocol : SwiftUI.ClarityUIApplicationSceneClientSettingsProtocol {
  @_spi(ClarityBoard) var navigationTitles: [Foundation.Data] { get set }
  @_spi(ClarityBoard) var chromeVisible: Swift.Bool { get set }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ClarityBoard) var bottomBarTransitionProgress: CoreFoundation.CGFloat? { get set }
  #else
  @_spi(ClarityBoard) var bottomBarTransitionProgress: CoreFoundation.CGFloat? { get set }
  #endif
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public enum ClarityUIApplicationSceneClientSetting : Swift.Int {
  @_spi(ClarityBoard) case navigationTitles
  @_spi(ClarityBoard) case chromeVisible
  @_spi(ClarityBoard) case bottomBarTransitionProgress
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ClarityBoard) public init?(rawValue: Swift.Int)
  #else
  @_spi(ClarityBoard) public init?(rawValue: Swift.Int)
  #endif
  @_spi(ClarityBoard) @available(iOS 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias RawValue = Swift.Int
  @_spi(ClarityBoard) public var rawValue: Swift.Int {
    @_spi(ClarityBoard) get
  }
}
@_spi(ClarityBoard) @available(*, unavailable)
extension SwiftUI.ClarityUIApplicationSceneClientSetting : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationSplitViewStyle where Self == SwiftUI.AutomaticNavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticNavigationSplitViewStyle {
    get
  }
}
@_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
public typealias AutomaticNavigationSplitStyle = SwiftUI.AutomaticNavigationSplitViewStyle
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticNavigationSplitViewStyle : SwiftUI.NavigationSplitViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticNavigationSplitViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI33AutomaticNavigationSplitViewStyleV8makeBody13configurationQrAA0defG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticNavigationSplitViewStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivableView : Swift.Decodable, Swift.Encodable, SwiftUICore.View {
  @_spi(Private) func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ArchivableView {
  @_spi(Private) public static func registerDecoder()
  @_spi(Private) public func sizeThatFits(in proposedSize: SwiftUICore._ProposedSize) -> CoreFoundation.CGSize
  @_spi(Private) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func matchedTransitionSource(id: some Hashable, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func matchedTransitionSource(id: some Hashable, in namespace: SwiftUICore.Namespace.ID, configuration: (SwiftUI.EmptyMatchedTransitionSourceConfiguration) -> some MatchedTransitionSourceConfiguration) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _ResolvedMatchedTransitionSourceConfiguration : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol MatchedTransitionSourceConfiguration : Swift.Sendable {
  func _update(configuration: inout SwiftUI._ResolvedMatchedTransitionSourceConfiguration)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct EmptyMatchedTransitionSourceConfiguration : SwiftUI.MatchedTransitionSourceConfiguration {
  public func _update(configuration: inout SwiftUI._ResolvedMatchedTransitionSourceConfiguration)
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.MatchedTransitionSourceConfiguration {
  public func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUI.MatchedTransitionSourceConfiguration
  
  public func clipShape(_ shape: SwiftUICore.RoundedRectangle) -> some SwiftUI.MatchedTransitionSourceConfiguration
  
  @available(*, unavailable, message: "matchedTransitionSource only supports `RoundedRectangle` clip shapes.")
  public func clipShape<S>(_ shape: S) -> some SwiftUI.MatchedTransitionSourceConfiguration where S : SwiftUICore.Shape
  
  public func background(_ style: SwiftUICore.Color) -> some SwiftUI.MatchedTransitionSourceConfiguration
  
  @available(*, unavailable, message: "matchedTransitionSource only supports `Color` background styles.")
  public func background<S>(_ style: S) -> some SwiftUI.MatchedTransitionSourceConfiguration where S : SwiftUICore.ShapeStyle
  
}
extension UIKit.UIView {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public func findMatchedTransitionSource(id: some Hashable, in namespace: SwiftUICore.Namespace.ID) -> UIKit.UIView?
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public func findMatchedTransitionSource(id: some Hashable, in namespace: SwiftUICore.Namespace.ID) -> UIKit.UIView?
  #endif
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetTemplate_V1 {
  @_spi(Widget) public func preference<K>(key _: K.Type = K.self, value: K.Value) -> some SwiftUI.ControlWidgetTemplate_V1 where K : SwiftUICore.PreferenceKey
  
  @_spi(Widget) nonisolated public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.ControlWidgetTemplate_V1 where K : SwiftUICore.PreferenceKey
  
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlTemplate(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlTemplate(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.NSNumber) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.Int) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.Int8) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.UInt) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.Double) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.String) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.Data) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.NSValue) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.URL) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.Date) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: ObjectiveC.NSObject) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.NSNumber) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.Int) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.UInt) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.Double) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Swift.String) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.Data) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.NSValue) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.URL) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: Foundation.Date) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityCustomAttribute(_ attributeName: Swift.String, value: ObjectiveC.NSObject) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(Private) @available(iOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func listPadding(top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func listPadding(top: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func listPadding(_ edges: SwiftUICore.Edge.Set, _ length: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func listPadding(_ edges: SwiftUICore.Edge.Set, _ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func listPadding(anchor: SwiftUI.ListPaddingAnchor) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func listPadding(_ edges: SwiftUICore.Edge.Set, _ length: CoreFoundation.CGFloat, anchor: SwiftUI.ListPaddingAnchor) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func listPadding(_ edges: SwiftUICore.Edge.Set, _ insets: SwiftUICore.EdgeInsets, anchor: SwiftUI.ListPaddingAnchor) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ListPaddingAnchor : Swift.Equatable {
  @_spi(Private) public static let automatic: SwiftUI.ListPaddingAnchor
  @_spi(Private) @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let readableContent: SwiftUI.ListPaddingAnchor
  @_spi(Private) @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let safeArea: SwiftUI.ListPaddingAnchor
  @_spi(Private) public static func == (a: SwiftUI.ListPaddingAnchor, b: SwiftUI.ListPaddingAnchor) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ListPaddingAnchor : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityRotorEntry<ID> where ID : Swift.Hashable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ label: SwiftUICore.Text, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #else
  public init(_ label: SwiftUICore.Text, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ label: SwiftUICore.Text, id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #else
  public init(_ label: SwiftUICore.Text, id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ label: SwiftUICore.Text? = nil, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping (() -> Swift.Void) = {}) where ID == Swift.Never
  #else
  public init(_ label: SwiftUICore.Text? = nil, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping (() -> Swift.Void) = {}) where ID == Swift.Never
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #else
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<L>(_ label: L, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {}) where L : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<L>(_ label: L, id: ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {}) where L : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #else
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {})
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<L>(_ label: L, _ id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {}) where L : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<L>(_ label: L, _ id: ID, in namespace: SwiftUICore.Namespace.ID, textRange: Swift.Range<Swift.String.Index>? = nil, prepare: @escaping (() -> Swift.Void) = {}) where L : Swift.StringProtocol
  #endif
  public init(_ labelKey: SwiftUICore.LocalizedStringKey, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping (() -> Swift.Void) = {})
  @_disfavoredOverload public init<L>(_ label: L, textRange: Swift.Range<Swift.String.Index>, prepare: @escaping (() -> Swift.Void) = {}) where ID == Swift.Never, L : Swift.StringProtocol
}
@available(*, unavailable)
extension SwiftUI.AccessibilityRotorEntry : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRotorEntry<ID>(id: ID, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View where ID : Swift.Hashable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct NavigationStack<Data, Root> : SwiftUICore.View where Root : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder root: () -> Root) where Data == SwiftUI.NavigationPath
  nonisolated public init(path: SwiftUICore.Binding<SwiftUI.NavigationPath>, @SwiftUICore.ViewBuilder root: () -> Root) where Data == SwiftUI.NavigationPath
  nonisolated public init(path: SwiftUICore.Binding<Data>, @SwiftUICore.ViewBuilder root: () -> Root) where Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, Data : Swift.RangeReplaceableCollection, Data.Element : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15NavigationStackV4bodyQrvp", 0) __<Data, Root>
}
@available(*, unavailable)
extension SwiftUI.NavigationStack : Swift.Sendable {
}
@_spi(Private) @available(macOS 11.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct IndirectScrollGesture : SwiftUICore.Gesture {
  @_spi(Private) public init()
  @_spi(Private) public var body: SwiftUICore.AnyGesture<CoreFoundation.CGSize> {
    @_spi(Private) get
  }
  @_spi(Private) @available(macOS 11.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = SwiftUICore.AnyGesture<CoreFoundation.CGSize>
  @_spi(Private) @available(macOS 11.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Value = CoreFoundation.CGSize
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.IndirectScrollGesture : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.LayoutSubview {
  public var containerValues: SwiftUI.ContainerValues {
    get
  }
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
public protocol WidgetConfigurationModifier {
  associatedtype WidgetBody : SwiftUI.WidgetConfiguration
  @_spi(Widget) func body(content: Self.WidgetContent) -> Self.WidgetBody
  @_spi(Widget) typealias WidgetContent = SwiftUI.WidgetConfigurationModifier_Content<Self>
  @_spi(Widget) static func _makeWidgetConfiguration(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetConfigurationModifier where Self.WidgetBody == Swift.Never {
  @_spi(Widget) public func body(content: Self.WidgetContent) -> Self.WidgetBody
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.EmptyWidgetConfiguration : SwiftUI.WidgetConfigurationModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetConfiguration(modifier: SwiftUICore._GraphValue<SwiftUI.EmptyWidgetConfiguration>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias WidgetBody = Swift.Never
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetConfiguration {
  @_spi(Widget) @inlinable @_Concurrency.MainActor @preconcurrency internal func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUICore.ModifiedContent : SwiftUI.WidgetConfiguration where Content : SwiftUI.WidgetConfiguration, Modifier : SwiftUI.WidgetConfigurationModifier {
  @_spi(Widget) nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    @_spi(Widget) get
  }
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUICore.ModifiedContent : SwiftUI.WidgetConfigurationModifier where Content : SwiftUI.WidgetConfigurationModifier, Modifier : SwiftUI.WidgetConfigurationModifier {
  @_spi(Widget) public static func _makeWidgetConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias WidgetBody = Swift.Never
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@_Concurrency.MainActor @preconcurrency public struct WidgetConfigurationModifier_Content<Modifier> : SwiftUI.WidgetConfiguration where Modifier : SwiftUI.WidgetConfigurationModifier {
  @_spi(Widget) nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<SwiftUI.WidgetConfigurationModifier_Content<Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias Body = Swift.Never
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.WidgetConfigurationModifier_Content : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.FormStyle where Self == SwiftUI.GroupedFormStyle {
  @_Concurrency.MainActor @preconcurrency public static var grouped: SwiftUI.GroupedFormStyle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct GroupedFormStyle : SwiftUI.FormStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.GroupedFormStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16GroupedFormStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.GroupedFormStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func groupedFormStyleContext() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "GroupedFormStyle")
extension SwiftUI.FormStyle where Self == SwiftUI.InsetGroupedFormStyle {
  @_spi(Private) @available(*, deprecated, renamed: "grouped")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var insetGrouped: SwiftUI.InsetGroupedFormStyle {
    @_spi(Private) get { .init() }
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, renamed: "GroupedFormStyle")
@_Concurrency.MainActor @preconcurrency public struct InsetGroupedFormStyle : SwiftUI.FormStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.InsetGroupedFormStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(*, deprecated, renamed: "GroupedFormStyle")
  @available(iOS, introduced: 16.0, renamed: "GroupedFormStyle")
  @available(tvOS, introduced: 16.0, renamed: "GroupedFormStyle")
  @available(watchOS, introduced: 9.0, renamed: "GroupedFormStyle")
  @available(macOS, introduced: 13.0, renamed: "GroupedFormStyle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21InsetGroupedFormStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.InsetGroupedFormStyle : Swift.Sendable {
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func formInsets(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func formInsets(_ edges: SwiftUICore.Edge.Set = .all, _ insets: SwiftUICore.EdgeInsets) -> some SwiftUICore.View
  
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func formAccessory<A>(@SwiftUICore.ViewBuilder accessories: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_spi(Private) nonisolated public func formInfoAction(action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func formAccessoryVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func formRowInfoVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func buttonBorderShape(_ shape: SwiftUI.ButtonBorderShape) -> some SwiftUICore.View {
        environment(\._buttonBorderShape, shape)
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct ButtonBorderShape : Swift.Equatable, Swift.Sendable {
  public static let automatic: SwiftUI.ButtonBorderShape
  @available(macOS 14.0, tvOS 17.0, *)
  public static let capsule: SwiftUI.ButtonBorderShape
  public static let roundedRectangle: SwiftUI.ButtonBorderShape
  @available(macOS 14.0, tvOS 17.0, *)
  public static func roundedRectangle(radius: CoreFoundation.CGFloat) -> SwiftUI.ButtonBorderShape
  @available(iOS 17.0, macOS 14.0, tvOS 16.4, watchOS 10.0, *)
  public static let circle: SwiftUI.ButtonBorderShape
  public static func == (a: SwiftUI.ButtonBorderShape, b: SwiftUI.ButtonBorderShape) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ButtonBorderShape : SwiftUICore.Shape {
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI.ButtonBorderShape, SwiftUICore.ForegroundStyle>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Shape where Self == SwiftUI.ButtonBorderShape {
  public static var buttonBorder: SwiftUI.ButtonBorderShape {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  @usableFromInline
  internal var _buttonBorderShape: SwiftUI.ButtonBorderShape {
    get
    set
  }
}
@_spi(UIFrameworks) extension SwiftUI.BorderedButtonStyle : SwiftUI.ButtonStyleConvertible {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var buttonStyleRepresentation: some SwiftUI.ButtonStyle {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ButtonStyleRepresentation = @_opaqueReturnTypeOf("$s7SwiftUI19BorderedButtonStyleV06buttonE14RepresentationQrvp", 0) __
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var buttonBorderShape: SwiftUI.ButtonBorderShape {
    @_spi(Private) get
  }
}
@_spi(_) @available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
@available(*, deprecated, message: "Use View.buttonBorderShape(_:) instead.")
extension SwiftUI.BorderedButtonStyle {
  @_spi(_) public struct BorderShape {
    @_spi(_) public static let automatic: SwiftUI.BorderedButtonStyle.BorderShape
    @_spi(_) @available(tvOS, unavailable)
    @available(macOS, unavailable)
    public static let capsule: SwiftUI.BorderedButtonStyle.BorderShape
    @_spi(_) public static let roundedRectangle: SwiftUI.BorderedButtonStyle.BorderShape
  }
  @_spi(_) @_Concurrency.MainActor @preconcurrency public init(shape: SwiftUI.BorderedButtonStyle.BorderShape)
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.BorderedButtonStyle.BorderShape : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ButtonBorderShape : SwiftUICore.InsettableShape {
  @inlinable public func inset(by amount: CoreFoundation.CGFloat) -> some SwiftUICore.InsettableShape {
        return _Inset(amount: amount)
    }
  
  @usableFromInline
  @frozen @_Concurrency.MainActor @preconcurrency internal struct _Inset : SwiftUICore.InsettableShape {
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var amount: CoreFoundation.CGFloat
    @inlinable @_Concurrency.MainActor @preconcurrency internal init(amount: CoreFoundation.CGFloat) {
            self.amount = amount
        }
    @usableFromInline
    nonisolated internal func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
    @usableFromInline
    nonisolated internal var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
      get
    }
    @usableFromInline
    @_Concurrency.MainActor @preconcurrency internal var animatableData: CoreFoundation.CGFloat {
      get
      set
    }
    @inlinable @_Concurrency.MainActor @preconcurrency internal func inset(by amount: CoreFoundation.CGFloat) -> SwiftUI.ButtonBorderShape._Inset {
            var copy = self
            copy.amount += amount
            return copy
        }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias AnimatableData = CoreFoundation.CGFloat
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias Body = SwiftUICore._ShapeView<SwiftUI.ButtonBorderShape._Inset, SwiftUICore.ForegroundStyle>
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    @usableFromInline
    internal typealias InsetShape = SwiftUI.ButtonBorderShape._Inset
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias InsetShape = @_opaqueReturnTypeOf("$s7SwiftUI17ButtonBorderShapeV5inset2byQr12CoreGraphics7CGFloatV_tF", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct AccessibilityAttachmentModifier : SwiftUICore.ViewModifier {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.AccessibilityAttachmentModifier : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct AnimatedValueView<Value, Content> : SwiftUICore.View, SwiftUICore.PrimitiveView, SwiftUICore.UnaryView where Content : SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public init(_ configuration: SwiftUI.AnimatedValuePlaybackConfiguration, default defaultValue: Value, @SwiftUI.AnimatedValueTrackBuilder<Value> track: () -> SwiftUI.AnimatedValueTrack<Value>, @SwiftUICore.ViewBuilder content: @escaping (Value) -> Content)
  @_spi(DoNotImport) public typealias Body = Swift.Never
  @_spi(DoNotImport) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.AnimatedValueView<Value, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValueView : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public func animatedValue<Value, Content>(_ configuration: SwiftUI.AnimatedValuePlaybackConfiguration, default defaultValue: Value, @SwiftUI.AnimatedValueTrackBuilder<Value> track: () -> SwiftUI.AnimatedValueTrack<Value>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.PlaceholderContentView<Self>, Value) -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.VisualEffect {
  @_spi(DoNotImport) public func animatedValue<Value, Content>(progress: Swift.Double, default defaultValue: Value, @SwiftUI.AnimatedValueTrackBuilder<Value> track: () -> SwiftUI.AnimatedValueTrack<Value>, content: (SwiftUICore.EmptyVisualEffect, Value) -> Content) -> some SwiftUICore.VisualEffect where Content : SwiftUICore.VisualEffect
  
  @_spi(DoNotImport) public func animatedValue<Value, Content>(time: Swift.Double, default defaultValue: Value, @SwiftUI.AnimatedValueTrackBuilder<Value> track: () -> SwiftUI.AnimatedValueTrack<Value>, content: (SwiftUICore.EmptyVisualEffect, Value) -> Content) -> some SwiftUICore.VisualEffect where Content : SwiftUICore.VisualEffect
  
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.DefaultNavigationViewStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
public struct DefaultNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26DefaultNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI26DefaultNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultNavigationViewStyle : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct Viewpoint3D : Swift.Equatable, Swift.Sendable, Swift.CustomDebugStringConvertible {
  @_spi(ForSwiftUIOnly) public init(orientation: Spatial.Rotation3D)
  public var squareAzimuth: SwiftUI.SquareAzimuth {
    get
  }
  public static let standard: SwiftUI.Viewpoint3D
  public var debugDescription: Swift.String {
    get
  }
  public static func == (a: SwiftUI.Viewpoint3D, b: SwiftUI.Viewpoint3D) -> Swift.Bool
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@frozen public enum SquareAzimuth : Swift.CaseIterable, Swift.Sendable {
  case front
  case right
  case back
  case left
  public var orientation: Spatial.Rotation3D {
    get
  }
  public init(closestToAzimuth azimuth: SwiftUICore.Angle)
  @frozen public struct Set : Swift.OptionSet {
    public typealias Element = SwiftUI.SquareAzimuth.Set
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let front: SwiftUI.SquareAzimuth.Set
    public static let right: SwiftUI.SquareAzimuth.Set
    public static let back: SwiftUI.SquareAzimuth.Set
    public static let left: SwiftUI.SquareAzimuth.Set
    public static let all: SwiftUI.SquareAzimuth.Set
    public init(_ e: SwiftUI.SquareAzimuth)
    public func contains(_ e: SwiftUI.SquareAzimuth) -> Swift.Bool
    @available(visionOS 2.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias ArrayLiteralElement = SwiftUI.SquareAzimuth.Set.Element
    @available(visionOS 2.0, *)
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    public typealias RawValue = Swift.Int
  }
  public static func == (a: SwiftUI.SquareAzimuth, b: SwiftUI.SquareAzimuth) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias AllCases = [SwiftUI.SquareAzimuth]
  public static var allCases: [SwiftUI.SquareAzimuth] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(_) @available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, introduced: 2.0, deprecated: 2.0)
extension SwiftUI.Viewpoint3D : Swift.Hashable, Swift.CustomStringConvertible {
  @_spi(_) @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use ``Viewpoint3D/squareAzimuth`` instead.")
  public var fourFacetAzimuth: SwiftUI.Viewpoint3D.FourFacetAzimuth {
    @_spi(_) get
  }
  @_spi(_) @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use ``Viewpoint3D/debugDescription`` instead.")
  public var description: Swift.String {
    @_spi(_) get
  }
  @_spi(_) @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
  @frozen public struct FourFacetAzimuth : Swift.Equatable, Swift.Hashable, Swift.Sendable, Swift.CustomStringConvertible {
    @_spi(_) public let angle: SwiftUICore.Angle
    @_spi(_) private let rawValue: Swift.Int
    @_spi(_) public static let front: SwiftUI.Viewpoint3D.FourFacetAzimuth
    @_spi(_) public static let right: SwiftUI.Viewpoint3D.FourFacetAzimuth
    @_spi(_) public static let back: SwiftUI.Viewpoint3D.FourFacetAzimuth
    @_spi(_) public static let left: SwiftUI.Viewpoint3D.FourFacetAzimuth
    @_spi(_) public init(continuousAngle: SwiftUICore.Angle)
    @_spi(_) public var description: Swift.String {
      @_spi(_) get
    }
    @_spi(_) @frozen public struct Set : Swift.OptionSet {
      @_spi(_) public typealias Element = SwiftUI.Viewpoint3D.FourFacetAzimuth.Set
      @_spi(_) public let rawValue: Swift.Int
      @_spi(_) public init(rawValue: Swift.Int)
      @_spi(_) public static let front: SwiftUI.Viewpoint3D.FourFacetAzimuth.Set
      @_spi(_) public static let right: SwiftUI.Viewpoint3D.FourFacetAzimuth.Set
      @_spi(_) public static let back: SwiftUI.Viewpoint3D.FourFacetAzimuth.Set
      @_spi(_) public static let left: SwiftUI.Viewpoint3D.FourFacetAzimuth.Set
      @_spi(_) public static let all: SwiftUI.Viewpoint3D.FourFacetAzimuth.Set
      @_spi(_) public init(_ e: SwiftUI.Viewpoint3D.FourFacetAzimuth)
      @_spi(_) public func contains(_ e: SwiftUI.Viewpoint3D.FourFacetAzimuth) -> Swift.Bool
      @_spi(_) @available(iOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(tvOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(watchOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(macOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      public typealias ArrayLiteralElement = SwiftUI.Viewpoint3D.FourFacetAzimuth.Set.Element
      @_spi(_) @available(iOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(tvOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(watchOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(macOS, unavailable, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
      public typealias RawValue = Swift.Int
    }
    @_spi(_) public static func == (a: SwiftUI.Viewpoint3D.FourFacetAzimuth, b: SwiftUI.Viewpoint3D.FourFacetAzimuth) -> Swift.Bool
    @_spi(_) public func hash(into hasher: inout Swift.Hasher)
    @_spi(_) public var hashValue: Swift.Int {
      @_spi(_) get
    }
  }
  @_spi(_) public func hash(into hasher: inout Swift.Hasher)
  @_spi(_) public var hashValue: Swift.Int {
    @_spi(_) get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _CoordinateSpaceModifier<Name> : SwiftUICore.ViewModifier, SwiftUICore.ViewInputsModifier, Swift.Equatable where Name : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var name: Name
  @inlinable nonisolated public init(name: Name) {
        self.name = name
    }
  nonisolated public static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUI._CoordinateSpaceModifier<Name>>, inputs: inout SwiftUICore._ViewInputs)
  nonisolated public static func == (a: SwiftUI._CoordinateSpaceModifier<Name>, b: SwiftUI._CoordinateSpaceModifier<Name>) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._CoordinateSpaceModifier : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use coordinateSpace(_:) instead")
  @inlinable nonisolated public func coordinateSpace<T>(name: T) -> some SwiftUICore.View where T : Swift.Hashable {
        return modifier(_CoordinateSpaceModifier(name: name))
    }
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func coordinateSpace(_ name: SwiftUICore.NamedCoordinateSpace) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlGroup<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, tvOS 17.0, macOS 12.0, *)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12ControlGroupV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.ControlGroup : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LabeledControlGroupContent<Content, Label> : SwiftUICore.View where Content : SwiftUICore.View, Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 17.0, macOS 13.0, *)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26LabeledControlGroupContentV4bodyQrvp", 0) __<Content, Label>
}
@available(*, unavailable)
extension SwiftUI.LabeledControlGroupContent : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup where Content == SwiftUI.ControlGroupStyleConfiguration.Content {
  nonisolated public init(_ configuration: SwiftUI.ControlGroupStyleConfiguration)
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  nonisolated public init<C, L>(@SwiftUICore.ViewBuilder content: () -> C, @SwiftUICore.ViewBuilder label: () -> L) where Content == SwiftUI.LabeledControlGroupContent<C, L>, C : SwiftUICore.View, L : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUICore.Text>, C : SwiftUICore.View {
        self.init(content: content) {
            Text(titleKey)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<C, S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUICore.Text>, C : SwiftUICore.View, S : Swift.StringProtocol {
        self.init(content: content) {
            Text(title)
        }
    }
}
@available(iOS 16.0, macOS 13.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  @_alwaysEmitIntoClient nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View {
        self.init(content: content) {
            Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<C, S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View, S : Swift.StringProtocol {
        self.init(content: content) {
            Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroup {
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<C, S>(_ title: S, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> C) where Content == SwiftUI.LabeledControlGroupContent<C, SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>>, C : SwiftUICore.View, S : Swift.StringProtocol
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ControlWidgetConfigurationModifier {
  associatedtype Body : SwiftUI.ControlWidgetConfiguration
  @_spi(Widget) func body(content: Self.Content) -> Self.Body
  @_spi(Widget) typealias Content = SwiftUI.ControlWidgetConfigurationModifier_Content<Self>
  @_spi(Widget) static func _makeWidgetControlConfiguration(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetConfigurationModifier where Self.Body == Swift.Never {
  @_spi(Widget) public func body(content: Self.Content) -> Self.Body
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.EmptyControlWidgetConfiguration : SwiftUI.ControlWidgetConfigurationModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetConfiguration>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration {
  @_spi(Widget) @inlinable @_Concurrency.MainActor @preconcurrency internal func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetConfiguration where Content : SwiftUI.ControlWidgetConfiguration, Modifier : SwiftUI.ControlWidgetConfigurationModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    @_spi(Widget) get
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetConfigurationModifier where Content : SwiftUI.ControlWidgetConfigurationModifier, Modifier : SwiftUI.ControlWidgetConfigurationModifier {
  @_spi(Widget) public static func _makeWidgetControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetConfigurationModifier_Content<Modifier> : SwiftUI.ControlWidgetConfiguration where Modifier : SwiftUI.ControlWidgetConfigurationModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(control: SwiftUICore._GraphValue<SwiftUI.ControlWidgetConfigurationModifier_Content<Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.ControlWidgetConfigurationModifier_Content : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUICore.Animation {
  @_spi(Private) public static let clarityUINavigationTransition: SwiftUICore.Animation
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "use ShapeStyle.primary instead")
@frozen public struct PrimaryContentStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  @_spi(_) @inlinable public init() {}
  @_spi(_) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(_) public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @_spi(_) @available(*, deprecated, message: "use ShapeStyle.primary instead")
  @available(iOS, introduced: 17.0, message: "use ShapeStyle.primary instead")
  @available(tvOS, introduced: 17.0, message: "use ShapeStyle.primary instead")
  @available(watchOS, introduced: 10.0, message: "use ShapeStyle.primary instead")
  @available(macOS, introduced: 14.0, message: "use ShapeStyle.primary instead")
  public typealias Resolved = Swift.Never
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "use ShapeStyle.secondary instead")
@frozen public struct SecondaryContentStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  @_spi(_) @inlinable public init() {}
  @_spi(_) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(_) public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @_spi(_) @available(*, deprecated, message: "use ShapeStyle.secondary instead")
  @available(iOS, introduced: 17.0, message: "use ShapeStyle.secondary instead")
  @available(tvOS, introduced: 17.0, message: "use ShapeStyle.secondary instead")
  @available(watchOS, introduced: 10.0, message: "use ShapeStyle.secondary instead")
  @available(macOS, introduced: 14.0, message: "use ShapeStyle.secondary instead")
  public typealias Resolved = Swift.Never
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "use ShapeStyle.tertiary instead")
@frozen public struct TertiaryContentStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  @_spi(_) @inlinable public init() {}
  @_spi(_) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(_) public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @_spi(_) @available(*, deprecated, message: "use ShapeStyle.tertiary instead")
  @available(iOS, introduced: 17.0, message: "use ShapeStyle.tertiary instead")
  @available(tvOS, introduced: 17.0, message: "use ShapeStyle.tertiary instead")
  @available(watchOS, introduced: 10.0, message: "use ShapeStyle.tertiary instead")
  @available(macOS, introduced: 14.0, message: "use ShapeStyle.tertiary instead")
  public typealias Resolved = Swift.Never
}
@_spi(_) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "use ShapeStyle.quaternary instead")
@frozen public struct QuaternaryContentStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  @_spi(_) @inlinable public init() {}
  @_spi(_) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(_) public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @_spi(_) @available(*, deprecated, message: "use ShapeStyle.quaternary instead")
  @available(iOS, introduced: 17.0, message: "use ShapeStyle.quaternary instead")
  @available(tvOS, introduced: 17.0, message: "use ShapeStyle.quaternary instead")
  @available(watchOS, introduced: 10.0, message: "use ShapeStyle.quaternary instead")
  @available(macOS, introduced: 14.0, message: "use ShapeStyle.quaternary instead")
  public typealias Resolved = Swift.Never
}
@_spi(Private) @available(macOS 12.0, macCatalyst 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "use ShapeStyle.quinary instead")
@frozen public struct QuinaryContentStyle : SwiftUICore.ShapeStyle, SwiftUICore.PrimitiveShapeStyle {
  @_spi(Private) @inlinable public init() {}
  @_spi(Private) public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  @_spi(Private) public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @_spi(Private) @available(*, deprecated, message: "use ShapeStyle.quinary instead")
  @available(iOS, unavailable, introduced: 17.0, message: "use ShapeStyle.quinary instead")
  @available(tvOS, unavailable, introduced: 17.0, message: "use ShapeStyle.quinary instead")
  @available(watchOS, unavailable, introduced: 10.0, message: "use ShapeStyle.quinary instead")
  @available(macOS, introduced: 14.0, message: "use ShapeStyle.quinary instead")
  @available(macCatalyst, introduced: 15.0, message: "use ShapeStyle.quinary instead")
  public typealias Resolved = Swift.Never
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.AnyTransition {
  @_spi(Private) public static func blur(radius: CoreFoundation.CGFloat = 10) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition where Self == SwiftUI.BlurReplaceTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func blurReplace(_ config: SwiftUI.BlurReplaceTransition.Configuration = .downUp) -> Self {
        return Self(configuration: config)
    }
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var blurReplace: SwiftUI.BlurReplaceTransition {
    get { blurReplace(.downUp) }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct BlurReplaceTransition : SwiftUICore.Transition {
  public struct Configuration : Swift.Equatable {
    public static let downUp: SwiftUI.BlurReplaceTransition.Configuration
    public static let upUp: SwiftUI.BlurReplaceTransition.Configuration
    public static func == (a: SwiftUI.BlurReplaceTransition.Configuration, b: SwiftUI.BlurReplaceTransition.Configuration) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency public var configuration: SwiftUI.BlurReplaceTransition.Configuration
  @_Concurrency.MainActor @preconcurrency public init(configuration: SwiftUI.BlurReplaceTransition.Configuration)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.BlurReplaceTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21BlurReplaceTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0E5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BlurReplaceTransition : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.BlurReplaceTransition.Configuration : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, tvOS 17.0, watchOS 9.0, *)
public struct WidgetAuxiliaryViewMetadata {
  @_spi(Private) public struct Text {
    @_spi(Private) public struct Metadata {
      @_spi(Private) public enum Kind {
        @_spi(Private) case string(Swift.String)
        @_spi(Private) case graphic(SwiftUI.WidgetAuxiliaryViewMetadata.Graphic)
        @_spi(Private) case dateAbsolute(Foundation.Date, SwiftUICore.Text.DateStyle)
        @_spi(Private) case dateInterval(Foundation.DateInterval)
        @_spi(Private) case dateCurrent(Swift.String, Swift.Bool, Foundation.TimeZone?)
        @_spi(Private) case dateTimer(Foundation.DateInterval, Foundation.TimeInterval?, Swift.Bool)
        @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
        case timedata(SwiftUICore.TimeDataFormattingContainer)
      }
      @_spi(Private) public var kind: SwiftUI.WidgetAuxiliaryViewMetadata.Text.Metadata.Kind
      @_spi(Private) public var range: Foundation.NSRange
      @_spi(Private) public var color: SwiftUICore.Color?
      @_spi(Private) public var features: [CoreFoundation.CFDictionary]?
      @_spi(Private) @available(iOS 17.0, macOS 15.0, tvOS 17.0, watchOS 10.0, *)
      public var textScale: SwiftUICore.Text.Scale?
    }
    @_spi(Private) public var text: Foundation.NSAttributedString
    @_spi(Private) public var metadata: [SwiftUI.WidgetAuxiliaryViewMetadata.Text.Metadata] {
      @_spi(Private) get
    }
  }
  @_spi(Private) public enum Graphic {
    @_spi(Private) case named(SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named)
    @_spi(Private) case image(UIKit.UIImage)
    @_spi(Private) public struct Named {
      @_spi(Private) public enum Location {
        @_spi(Private) case bundle(Foundation.URL)
        @_spi(Private) case system(Swift.Bool)
      }
      @_spi(Private) public var name: Swift.String
      @_spi(Private) public var location: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named.Location
      @_spi(Private) public var value: Swift.Float?
      #if compiler(>=5.3) && $NoncopyableGenerics
      @_spi(Private) public var colors: [SwiftUICore.Color]? {
        @_spi(Private) get
      }
      #else
      @_spi(Private) public var colors: [SwiftUICore.Color]? {
        @_spi(Private) get
      }
      #endif
      #if compiler(>=5.3) && $NoncopyableGenerics
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var tintColor: SwiftUICore.Color? {
        @_spi(Private) get
      }
      #else
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var tintColor: SwiftUICore.Color? {
        @_spi(Private) get
      }
      #endif
      #if compiler(>=5.3) && $NoncopyableGenerics
      @_spi(Private) public var symbolRenderingMode: SwiftUICore.SymbolRenderingMode? {
        @_spi(Private) get
      }
      #else
      @_spi(Private) public var symbolRenderingMode: SwiftUICore.SymbolRenderingMode? {
        @_spi(Private) get
      }
      #endif
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var symbolEffects: [SwiftUI.SymbolEffect] {
        @_spi(Private) get
      }
      @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
      public var contentTransition: SwiftUICore.ContentTransition {
        @_spi(Private) get
      }
    }
  }
  @_spi(Private) public struct Progress {
    @_spi(Private) public enum Kind {
      @_spi(Private) case absolute(Swift.Double?, Swift.Bool)
      @_spi(Private) case date(Swift.ClosedRange<Foundation.Date>, Swift.Bool)
    }
    @_spi(Private) public var kind: SwiftUI.WidgetAuxiliaryViewMetadata.Progress.Kind
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var label: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #else
    @_spi(Private) public var label: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var currentValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #else
    @_spi(Private) public var currentValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var tint: SwiftUICore.Gradient? {
      @_spi(Private) get
    }
    #else
    @_spi(Private) public var tint: SwiftUICore.Gradient? {
      @_spi(Private) get
    }
    #endif
  }
  @_spi(Private) public struct Gauge {
    @_spi(Private) public var value: Swift.Double
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var label: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #else
    @_spi(Private) public var label: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var currentValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #else
    @_spi(Private) public var currentValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var minimumValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #else
    @_spi(Private) public var minimumValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var maximumValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #else
    @_spi(Private) public var maximumValueLabel: SwiftUI.WidgetAuxiliaryViewMetadata? {
      @_spi(Private) get
      @_spi(Private) set
    }
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public var tint: SwiftUICore.Gradient? {
      @_spi(Private) get
    }
    #else
    @_spi(Private) public var tint: SwiftUICore.Gradient? {
      @_spi(Private) get
    }
    #endif
  }
  @_spi(Private) public struct Accessibility {
    @_spi(Private) public var label: Swift.String?
    @_spi(Private) public var value: Swift.String?
    @_spi(Private) public var identifier: Swift.String?
    @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
    public var hint: Swift.String?
  }
  @_spi(Private) public var metadataText: SwiftUI.WidgetAuxiliaryViewMetadata.Text? {
    get
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var metadataSecondaryText: SwiftUI.WidgetAuxiliaryViewMetadata.Text? {
    get
  }
  @_spi(Private) public var graphic: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic? {
    get
  }
  @_spi(Private) public var fallbacks: [SwiftUI.WidgetAuxiliaryViewMetadata]? {
    get
  }
  @_spi(Private) public var progress: SwiftUI.WidgetAuxiliaryViewMetadata.Progress? {
    get
  }
  @_spi(Private) public var gauge: SwiftUI.WidgetAuxiliaryViewMetadata.Gauge? {
    get
  }
  @_spi(Private) public var url: Foundation.URL? {
    get
  }
  @_spi(Private) public var accessibility: SwiftUI.WidgetAuxiliaryViewMetadata.Accessibility? {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(progress: SwiftUI.WidgetAuxiliaryViewMetadata.Progress?)
  #else
  @_spi(Private) public init(progress: SwiftUI.WidgetAuxiliaryViewMetadata.Progress?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(gauge: SwiftUI.WidgetAuxiliaryViewMetadata.Gauge?)
  #else
  @_spi(Private) public init(gauge: SwiftUI.WidgetAuxiliaryViewMetadata.Gauge?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated)
  public init(fallbacks: [SwiftUI.WidgetAuxiliaryViewMetadata]?)
  #else
  @_spi(Private) @available(*, deprecated)
  public init(fallbacks: [SwiftUI.WidgetAuxiliaryViewMetadata]?)
  #endif
}
@_spi(Private) extension SwiftUICore.TimeDataFormattingContainer {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func representation(for version: SwiftUI._ArchivedViewStates.DeploymentVersion) -> SwiftUI.WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?
  #else
  @_spi(Private) public func representation(for version: SwiftUI._ArchivedViewStates.DeploymentVersion) -> SwiftUI.WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?
  #endif
}
@_spi(Private) extension SwiftUI.WidgetAuxiliaryViewMetadata {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var tint: SwiftUICore.Color? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) public var tint: SwiftUICore.Color? {
    @_spi(Private) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var resolvedTint: SwiftUICore.Color.Resolved? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) public var resolvedTint: SwiftUICore.Color.Resolved? {
    @_spi(Private) get
  }
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Gauge : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named.Location : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Accessibility : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Progress : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Progress.Kind : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Text : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Text.Metadata : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Text.Metadata.Kind : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, message: "Use metadataText instead")
  public var text: Foundation.NSAttributedString? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(*, deprecated, message: "Use metadataText instead")
  public var text: Foundation.NSAttributedString? {
    @_spi(Private) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, message: "Use graphic instead")
  public var image: UIKit.UIImage? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(*, deprecated, message: "Use graphic instead")
  public var image: UIKit.UIImage? {
    @_spi(Private) get
  }
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Text : Swift.Codable {
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic : Swift.Codable {
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named.Location : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Progress : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Progress.Kind : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Gauge : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Accessibility : Swift.Codable {
  @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Private) public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUICore.MutableBox : Swift.Codable where T == SwiftUI.WidgetAuxiliaryViewMetadata? {
  #if compiler(>=5.3) && $NoncopyableGenerics
  convenience package init(from decoder: any Swift.Decoder) throws
  #else
  convenience package init(from decoder: any Swift.Decoder) throws
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  final package func encode(to encoder: any Swift.Encoder) throws
  #else
  final package func encode(to encoder: any Swift.Encoder) throws
  #endif
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Text : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Accessibility : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Gauge : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Progress : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Progress.Kind : Swift.CustomDebugStringConvertible {
  @_spi(Private) public var debugDescription: Swift.String {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named.Location : Swift.Equatable {
  @_spi(Private) public static func == (a: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named.Location, b: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named.Location) -> Swift.Bool
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named : Swift.Equatable {
  @_spi(Private) public static func == (a: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named, b: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic.Named) -> Swift.Bool
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Graphic : Swift.Equatable {
  @_spi(Private) public static func == (a: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic, b: SwiftUI.WidgetAuxiliaryViewMetadata.Graphic) -> Swift.Bool
}
@_spi(Private) extension SwiftUI.WidgetAuxiliaryViewMetadata {
  @_spi(Private) public struct Key : SwiftUICore.HostPreferenceKey {
    @_spi(Private) public static var defaultValue: SwiftUI.WidgetAuxiliaryViewMetadata?
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public static func reduce(value: inout SwiftUI.WidgetAuxiliaryViewMetadata?, nextValue: () -> SwiftUI.WidgetAuxiliaryViewMetadata?)
    #else
    @_spi(Private) public static func reduce(value: inout SwiftUI.WidgetAuxiliaryViewMetadata?, nextValue: () -> SwiftUI.WidgetAuxiliaryViewMetadata?)
    #endif
    @_spi(Private) @available(iOS 16.0, tvOS 17.0, watchOS 9.0, macOS 15.0, *)
    public typealias Value = SwiftUI.WidgetAuxiliaryViewMetadata?
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public static func reduce(_ lhs: SwiftUI.WidgetAuxiliaryViewMetadata?, _ rhs: SwiftUI.WidgetAuxiliaryViewMetadata?) -> SwiftUI.WidgetAuxiliaryViewMetadata?
  #else
  @_spi(Private) public static func reduce(_ lhs: SwiftUI.WidgetAuxiliaryViewMetadata?, _ rhs: SwiftUI.WidgetAuxiliaryViewMetadata?) -> SwiftUI.WidgetAuxiliaryViewMetadata?
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadata.Key : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@_Concurrency.MainActor @preconcurrency public struct WidgetAuxiliaryViewMetadataModifier<Content> : SwiftUICore.PrimitiveViewModifier, SwiftUICore.UnaryViewModifier where Content : SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI.WidgetAuxiliaryViewMetadataModifier<Content>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 16.0, watchOS 9.0, macOS 15.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryViewMetadataModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
public struct WidgetAuxiliaryURLPreferenceKey : SwiftUICore.PreferenceKey {
  @_spi(Private) public static var defaultValue: Foundation.URL?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public static func reduce(value: inout Foundation.URL?, nextValue: () -> Foundation.URL?)
  #else
  @_spi(Private) public static func reduce(value: inout Foundation.URL?, nextValue: () -> Foundation.URL?)
  #endif
  @_spi(Private) @available(iOS 16.0, watchOS 9.0, macOS 15.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias Value = Foundation.URL?
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryURLPreferenceKey : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func accessoryBar<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  public func hoverEffectDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
}
@_spi(CustomHoverEffects) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  @_spi(CustomHoverEffects) public func _hoverEffectDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) public func disabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
  @_spi(CustomHoverEffects) public func _disabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.CustomHoverEffect
  
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentConfiguration {
  public var isEditable: Swift.Bool {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentConfiguration : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var documentConfiguration: SwiftUI.DocumentConfiguration? {
    get
  }
  #else
  @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var documentConfiguration: SwiftUI.DocumentConfiguration? {
    get
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct EnvironmentObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @frozen @preconcurrency @_Concurrency.MainActor public struct Wrapper {
    @_Concurrency.MainActor @preconcurrency internal let root: ObjectType
    @_Concurrency.MainActor @preconcurrency public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUICore.Binding<Subject> {
      get
    }
  }
  @inlinable @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType {
    get {
      guard let store = _store else { error() }
      return store
    }
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency internal var optionalWrappedValue: ObjectType? {
    get {
        _store
    }
  }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency internal var optionalWrappedValue: ObjectType? {
    get {
        _store
    }
  }
  #endif
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _store: ObjectType?
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _seed: Swift.Int = 0
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.EnvironmentObject<ObjectType>.Wrapper {
    get
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func error() -> Swift.Never
  @_Concurrency.MainActor @preconcurrency public init()
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.EnvironmentObject {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func environmentObject<T>(_ object: T) -> some SwiftUICore.View where T : Combine.ObservableObject {
        environment(T.environmentStore, object)
    }
  
}
extension SwiftUI.Scene {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func environmentObject<T>(_ object: T) -> some SwiftUI.Scene where T : Combine.ObservableObject
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension Combine.ObservableObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  internal static var environmentStore: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Self?> {
    get
  }
  #else
  @usableFromInline
  internal static var environmentStore: Swift.WritableKeyPath<SwiftUICore.EnvironmentValues, Self?> {
    get
  }
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(AppIntent) nonisolated public func accessibilityIntentAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(AppIntent) nonisolated public func accessibilityIntentAction(named name: SwiftUICore.Text, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(AppIntent) nonisolated public func accessibilityIntentAction<Label>(lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label) -> some SwiftUICore.View where Label : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(AppIntent) public func accessibilityIntentAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(AppIntent) public func accessibilityIntentAction(named name: SwiftUICore.Text, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(AppIntent) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(AppIntent) @available(iOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(macOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  nonisolated public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityArchivableAttachmentModifier>
  @_spi(AppIntent) @available(iOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(macOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  nonisolated public func accessibilityAction(named name: SwiftUICore.Text, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityArchivableAttachmentModifier>
}
@_spi(AppIntent) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityArchivableAttachmentModifier {
  @_spi(AppIntent) @available(iOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(macOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(AppIntent) @available(iOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(macOS, introduced: 14.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityIntentAction(_:lnAction:perform:)")
  public func accessibilityAction(named name: SwiftUICore.Text, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(iOS, introduced: 17.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
@available(macOS, introduced: 14.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
@available(tvOS, introduced: 17.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
@available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
@_Concurrency.MainActor @preconcurrency public struct AccessibilityArchivableAttachmentModifier : SwiftUICore.PrimitiveViewModifier, SwiftUICore.MultiViewModifier {
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI.AccessibilityArchivableAttachmentModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
  @available(watchOS, introduced: 10.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
  @available(macOS, introduced: 14.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.AccessibilityArchivableAttachmentModifier : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryLinearGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryLinear: SwiftUI.AccessoryLinearGaugeStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryLinearGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryLinearGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25AccessoryLinearGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryLinearGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated, renamed: "AccessoryLinearGaugeStyle")
@available(macOS, deprecated, renamed: "AccessoryLinearGaugeStyle")
@available(tvOS, unavailable)
@available(watchOS, deprecated, renamed: "AccessoryLinearGaugeStyle")
@_Concurrency.MainActor @preconcurrency public struct LinearDashboardGaugeStyle : SwiftUI.GaugeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearDashboardGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, deprecated, introduced: 16.0, renamed: "AccessoryLinearGaugeStyle")
  @available(tvOS, unavailable, renamed: "AccessoryLinearGaugeStyle")
  @available(watchOS, deprecated, introduced: 7.0, renamed: "AccessoryLinearGaugeStyle")
  @available(macOS, deprecated, introduced: 13.0, renamed: "AccessoryLinearGaugeStyle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25LinearDashboardGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LinearDashboardGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated)
@available(macOS, deprecated)
@available(tvOS, unavailable)
@available(watchOS, deprecated)
extension SwiftUI.GaugeStyle where Self == SwiftUI.LinearDashboardGaugeStyle {
  @_spi(Private) @available(iOS, deprecated, renamed: "accessoryLinear")
  @available(macOS, deprecated, renamed: "accessoryLinear")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated, renamed: "accessoryLinear")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linearDashboard: SwiftUI.LinearDashboardGaugeStyle {
    @_spi(Private) get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WindowGroup {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<D, C>(id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  nonisolated public init<D, C>(id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(id:for:content:)")
  nonisolated public init<D, C>(id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(id:for:content:)")
  nonisolated public init<D, C>(id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:)")
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:)")
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:)")
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:)")
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:)")
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:)")
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<D, C>(for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  nonisolated public init<D, C>(for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(for:content:)")
  nonisolated public init<D, C>(presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(for:content:)")
  nonisolated public init<D, C>(presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:)")
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:)")
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:)")
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:)")
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, for type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:)")
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #else
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:)")
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, presenting type: D.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D?>) -> C) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  #endif
  nonisolated public init<D, C>(id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(id:for:content:defaultValue:)")
  nonisolated public init<D, C>(id: Swift.String, presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:defaultValue:)")
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, id: Swift.String, presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:defaultValue:)")
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(_:id:for:content:defaultValue:)")
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, id: Swift.String, presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(for:content:defaultValue:)")
  nonisolated public init<D, C>(presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:defaultValue:)")
  @_disfavoredOverload nonisolated public init<D, C>(_ title: SwiftUICore.Text, presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:defaultValue:)")
  nonisolated public init<D, C>(_ titleKey: SwiftUICore.LocalizedStringKey, presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, for type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
  @_spi(_) @available(*, deprecated, renamed: "init(_:for:content:defaultValue:)")
  @_disfavoredOverload nonisolated public init<S, D, C>(_ title: S, presenting type: D.Type = D.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<D>) -> C, defaultValue: @escaping () -> D) where Content == SwiftUI.PresentedWindowContent<D, C>, S : Swift.StringProtocol, D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable, C : SwiftUICore.View
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PresentedWindowContent<Data, Content> : SwiftUICore.View, SwiftUICore.MultiView, SwiftUICore.PrimitiveView where Data : Swift.Decodable, Data : Swift.Encodable, Data : Swift.Hashable, Content : SwiftUICore.View {
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.PresentedWindowContent<Data, Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.PresentedWindowContent : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.MenuStyle where Self == SwiftUI.DefaultMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultMenuStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultMenuStyle : SwiftUI.MenuStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16DefaultMenuStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultMenuStyle : Swift.Sendable {
}
@_spi(Private) @available(macCatalyst 15.0, macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public var stepperFieldWidth: CoreFoundation.CGFloat? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #else
  @_spi(Private) public var stepperFieldWidth: CoreFoundation.CGFloat? {
    @_spi(Private) get
    @_spi(Private) set
  }
  #endif
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct UISceneAdaptor<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @_spi(UIFrameworks) nonisolated public init(id: Swift.StaticString, role: Swift.StaticString, content: Content)
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14UISceneAdaptorV4bodyQrvp", 0) __<Content>
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.UISceneAdaptor : Swift.Sendable {
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Scene {
  @_spi(UIFrameworks) nonisolated public func safeAreaDisabled() -> some SwiftUI.Scene
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRotor<Content>(_ label: SwiftUICore.Text, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUI.AccessibilityRotorContent
  
  nonisolated public func accessibilityRotor<Content>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUI.AccessibilityRotorContent
  
  nonisolated public func accessibilityRotor<EntryModel>(_ rotorLabel: SwiftUICore.Text, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where EntryModel : Swift.Identifiable
  
  nonisolated public func accessibilityRotor<EntryModel, ID>(_ rotorLabel: SwiftUICore.Text, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where ID : Swift.Hashable
  
  nonisolated public func accessibilityRotor<EntryModel>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where EntryModel : Swift.Identifiable
  
  nonisolated public func accessibilityRotor<EntryModel, ID>(_ systemRotor: SwiftUI.AccessibilitySystemRotor, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where ID : Swift.Hashable
  
  nonisolated public func accessibilityRotor(_ label: SwiftUICore.Text, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View
  
  nonisolated public func accessibilityRotor(_ systemRotor: SwiftUI.AccessibilitySystemRotor, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRotor<Content>(_ labelKey: SwiftUICore.LocalizedStringKey, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUI.AccessibilityRotorContent
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L, Content>(_ label: L, @SwiftUI.AccessibilityRotorContentBuilder entries: @escaping () -> Content) -> some SwiftUICore.View where L : Swift.StringProtocol, Content : SwiftUI.AccessibilityRotorContent
  
  nonisolated public func accessibilityRotor<EntryModel>(_ rotorLabelKey: SwiftUICore.LocalizedStringKey, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where EntryModel : Swift.Identifiable
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L, EntryModel>(_ rotorLabel: L, entries: [EntryModel], entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where L : Swift.StringProtocol, EntryModel : Swift.Identifiable
  
  nonisolated public func accessibilityRotor<EntryModel, ID>(_ rotorLabelKey: SwiftUICore.LocalizedStringKey, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where ID : Swift.Hashable
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L, EntryModel, ID>(_ rotorLabel: L, entries: [EntryModel], entryID: Swift.KeyPath<EntryModel, ID>, entryLabel: Swift.KeyPath<EntryModel, Swift.String>) -> some SwiftUICore.View where L : Swift.StringProtocol, ID : Swift.Hashable
  
  nonisolated public func accessibilityRotor(_ labelKey: SwiftUICore.LocalizedStringKey, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func accessibilityRotor<L>(_ label: L, textRanges: [Swift.Range<Swift.String.Index>]) -> some SwiftUICore.View where L : Swift.StringProtocol
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilitySystemRotor : Swift.Sendable {
  public static func links(visited: Swift.Bool) -> SwiftUI.AccessibilitySystemRotor
  public static var links: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static func headings(level: SwiftUICore.AccessibilityHeadingLevel) -> SwiftUI.AccessibilitySystemRotor
  public static var headings: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var boldText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var italicText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var underlineText: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var misspelledWords: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var images: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var textFields: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var tables: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var lists: SwiftUI.AccessibilitySystemRotor {
    get
  }
  public static var landmarks: SwiftUI.AccessibilitySystemRotor {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeBoolean<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByBooleanLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeFloat<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByFloatLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeInteger<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByIntegerLiteral
@available(iOS 14.0, macOS 11, tvOS 14.0, watchOS 7.0, *)
@_semantics("constant_evaluable") @_transparent public func __designTimeString(_ key: Swift.String, fallback: os.OSLogMessage) -> os.OSLogMessage {
    fallback
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByStringLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeString<T>(_ key: Swift.String, fallback: T) -> T where T : Swift.ExpressibleByExtendedGraphemeClusterLiteral
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public func __designTimeApplyIncrementalValues(_ updates: [[Swift.String : Any]])
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol FormStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.FormStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct FormStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI.FormStyleConfiguration.Content
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public struct Footer : SwiftUICore.View {
    @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  @_spi(Private) public let footer: SwiftUI.FormStyleConfiguration.Footer
}
@available(*, unavailable)
extension SwiftUI.FormStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FormStyleConfiguration.Content : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.FormStyleConfiguration.Footer : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func formStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.FormStyle
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@_spi_available(tvOS, introduced: 18.0)
@_spi_available(watchOS, introduced: 11.0)
extension SwiftUI.TabContent {
  nonisolated public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUI.TabContent<Self.TabValue> where T : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@_spi_available(tvOS, introduced: 18.0)
@_spi_available(watchOS, introduced: 11.0)
extension SwiftUI.TabContent {
  nonisolated public func contextMenu<M>(@SwiftUICore.ViewBuilder menuItems: () -> M) -> some SwiftUI.TabContent<Self.TabValue> where M : SwiftUICore.View
  
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TableColumnContent<TableRowValue, TableColumnSortComparator> {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableColumnBody.TableRowValue
  associatedtype TableColumnSortComparator : Foundation.SortComparator = Self.TableColumnBody.TableColumnSortComparator
  associatedtype TableColumnBody : SwiftUI.TableColumnContent
  var tableColumnBody: Self.TableColumnBody { get }
  static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
}
#else
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TableColumnContent {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableColumnBody.TableRowValue
  associatedtype TableColumnSortComparator : Foundation.SortComparator = Self.TableColumnBody.TableColumnSortComparator
  associatedtype TableColumnBody : SwiftUI.TableColumnContent
  var tableColumnBody: Self.TableColumnBody { get }
  static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
}
#endif
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableColumnInputs {
}
@available(*, unavailable)
extension SwiftUI._TableColumnInputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableColumnOutputs {
}
@available(*, unavailable)
extension SwiftUI._TableColumnOutputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent where Self.TableColumnSortComparator == Self.TableColumnBody.TableColumnSortComparator, Self.TableRowValue == Self.TableColumnBody.TableRowValue {
  public static func _makeContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.TableColumnContent {
  public typealias TableColumnSortComparator = Swift.Never
  public typealias TableColumnBody = Swift.Never
  public var tableColumnBody: Swift.Never {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct TableColumnBuilder<RowValue, Sort> where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {
  @_alwaysEmitIntoClient public static func buildExpression<Content, Label>(_ column: SwiftUI.TableColumn<RowValue, Sort, Content, Label>) -> SwiftUI.TableColumn<RowValue, Sort, Content, Label> where Content : SwiftUICore.View, Label : SwiftUICore.View {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildExpression<Content, Label>(_ column: SwiftUI.TableColumn<RowValue, Swift.Never, Content, Label>) -> SwiftUI.TableColumn<RowValue, Swift.Never, Content, Label> where Content : SwiftUICore.View, Label : SwiftUICore.View {
        column
    }
  @_alwaysEmitIntoClient public static func buildExpression<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Sort == Column.TableColumnSortComparator, Column : SwiftUI.TableColumnContent {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildExpression<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Column : SwiftUI.TableColumnContent, Column.TableColumnSortComparator == Swift.Never {
        column
    }
  @_alwaysEmitIntoClient public static func buildBlock<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Sort == Column.TableColumnSortComparator, Column : SwiftUI.TableColumnContent {
        column
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<Column>(_ column: Column) -> Column where RowValue == Column.TableRowValue, Column : SwiftUI.TableColumnContent, Column.TableColumnSortComparator == Swift.Never {
        column
    }
}
@available(*, unavailable)
extension SwiftUI.TableColumnBuilder : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabSection<Header, Content, Footer, SelectionValue> {
}
@available(*, unavailable)
extension SwiftUI.TabSection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabSection : SwiftUI.TabContent where Header : SwiftUICore.View, Content : SwiftUI.TabContent, Footer : SwiftUICore.View, SelectionValue == Content.TabValue {
  public typealias TabValue = Content.TabValue
  @_Concurrency.MainActor @preconcurrency public var _identifiedView: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = SwiftUI.TabSection<Header, Content, Footer, SelectionValue>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI10TabSectionVA2A4ViewRzAA0C7ContentR_AaDR0_0C5ValueAaEPQy_Rs1_rlE011_identifiedE0Qrvp", 0) __<Header, Content, Footer, SelectionValue>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabSection where Content : SwiftUI.TabContent, SelectionValue : Swift.Hashable {
  public init(@SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView
  public init(@SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView
  @_disfavoredOverload public init<S>(_ title: S, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, S : Swift.StringProtocol
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<SelectionValue> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<V>(@SwiftUI.TabContentBuilder<V?> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #else
  @_disfavoredOverload public init<V>(@SwiftUI.TabContentBuilder<V?> content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<V>(@SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #else
  @_disfavoredOverload public init<V>(@SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<V, S>(_ title: S, @SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable, S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<V, S>(_ title: S, @SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable, S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #else
  @_disfavoredOverload public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<V?> content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_disfavoredOverload internal init<V>(@SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #else
  @usableFromInline
  @_disfavoredOverload internal init<V>(@SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content, @SwiftUICore.ViewBuilder header: () -> Header) where Header : SwiftUICore.View, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_disfavoredOverload internal init<V>(@SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #else
  @usableFromInline
  @_disfavoredOverload internal init<V>(@SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.EmptyView, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_disfavoredOverload internal init<V, S>(_ title: S, @SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable, S : Swift.StringProtocol
  #else
  @usableFromInline
  @_disfavoredOverload internal init<V, S>(_ title: S, @SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable, S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #else
  @usableFromInline
  @_disfavoredOverload internal init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUI.TabContentBuilder<V?> liftedContent content: () -> Content) where Header == SwiftUICore.Text, Footer == SwiftUICore.EmptyView, SelectionValue == V?, V : Swift.Hashable
  #endif
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public protocol PlaybackButtonStyle {
  @_spi(Private) var _storage: SwiftUI.PlaybackButton._StyleStorage { get }
}
@_spi(Private) @available(tvOS, unavailable)
extension SwiftUI.PlaybackButton {
  @_spi(Private) public enum _StyleStorage : Swift.Codable {
    @_spi(Private) case automatic
    @_spi(Private) case circle
    @_spi(Private) case pill(SwiftUICore.Text.DateStyle)
    @_spi(Private) public func encode(to encoder: any Swift.Encoder) throws
    @_spi(Private) public init(from decoder: any Swift.Decoder) throws
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PlaybackButton._StyleStorage : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func playbackButtonStyle(_ style: some PlaybackButtonStyle) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.PlaybackButtonStyle where Self == SwiftUI.AutomaticPlaybackButtonStyle {
  @_spi(Private) public static var automatic: SwiftUI.AutomaticPlaybackButtonStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
@available(tvOS, unavailable)
public struct AutomaticPlaybackButtonStyle : SwiftUI.PlaybackButtonStyle {
  @_spi(Private) public var _storage: SwiftUI.PlaybackButton._StyleStorage {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.AutomaticPlaybackButtonStyle : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(ForSettingsOnly) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func navigationTransitionEagerRenderEnabled(_ isEnabled: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct DefaultTabLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15DefaultTabLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultTabLabel : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol NavigationDestination {
  associatedtype Body : SwiftUI.NavigationDestination
  @_spi(Private) @SwiftUI.NavigationDestinationBuilder var body: Self.Body { get }
  @_spi(Private) static func _makeDestinations(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, resolved: inout SwiftUI._NavigationDestinationCollection)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestination {
  @_spi(Private) public static func _makeDestinations(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, resolved: inout SwiftUI._NavigationDestinationCollection)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Never : SwiftUI.NavigationDestination {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.Group : SwiftUI.NavigationDestination where Content : SwiftUI.NavigationDestination {
  @_spi(Private) public init(@SwiftUI.NavigationDestinationBuilder content: () -> Content)
  @_spi(Private) public static func _makeDestinations(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUICore._ViewInputs, resolved: inout SwiftUI._NavigationDestinationCollection)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@usableFromInline
internal struct TupleNavigationDestination<T> : SwiftUI.NavigationDestination {
  @_spi(Private) @usableFromInline
  internal var body: Swift.Never {
    @_spi(Private) get
  }
  @_spi(Private) @usableFromInline
  internal init(_ value: T)
  @_spi(Private) @usableFromInline
  internal static func _makeDestinations(content: SwiftUICore._GraphValue<SwiftUI.TupleNavigationDestination<T>>, inputs: SwiftUICore._ViewInputs, resolved: inout SwiftUI._NavigationDestinationCollection)
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.TupleNavigationDestination : Swift.Sendable {
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.EllipticalListStyle {
  @_alwaysEmitIntoClient public static var elliptical: SwiftUI.EllipticalListStyle {
    get { .init() }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct EllipticalListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.EllipticalListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.EllipticalListStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.NavigationControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var navigation: SwiftUI.NavigationControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct NavigationControlGroupStyle : SwiftUI.ControlGroupStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.NavigationControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27NavigationControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.NavigationControlGroupStyle : Swift.Sendable {
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
@preconcurrency @_Concurrency.MainActor public protocol _NavigationStackStyle {
  associatedtype Body : SwiftUICore.View
  @_spi(UIFrameworks) @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @_spi(UIFrameworks) typealias Configuration = SwiftUI._NavigationStackStyleConfiguration
}
@_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct _NavigationStackStyleConfiguration {
  @_spi(UIFrameworks) public let root: SwiftUI._NavigationStackStyleConfiguration.Root
  @_spi(UIFrameworks) public let items: [SwiftUI._NavigationStackStyleConfiguration.Item]
  @_spi(UIFrameworks) public func pop()
}
@_spi(UIFrameworks) extension SwiftUI._NavigationStackStyleConfiguration {
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public struct Root : SwiftUICore.View {
    @_spi(UIFrameworks) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    public typealias Body = Swift.Never
  }
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public struct Item : SwiftUICore.View, Swift.Identifiable {
    @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public let id: SwiftUI._NavigationStackStyleConfiguration.Item.ID
    @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var depth: Swift.Int {
      @_spi(UIFrameworks) get
    }
    @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      @_spi(UIFrameworks) get
    }
    @_spi(UIFrameworks) public struct ID : Swift.Hashable {
      @_spi(UIFrameworks) public func hash(into hasher: inout Swift.Hasher)
      @_spi(UIFrameworks) public static func == (a: SwiftUI._NavigationStackStyleConfiguration.Item.ID, b: SwiftUI._NavigationStackStyleConfiguration.Item.ID) -> Swift.Bool
      @_spi(UIFrameworks) public var hashValue: Swift.Int {
        @_spi(UIFrameworks) get
      }
    }
    @_spi(UIFrameworks) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI34_NavigationStackStyleConfigurationV4ItemV4bodyQrvp", 0) __
  }
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI._NavigationStackStyleConfiguration : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI._NavigationStackStyleConfiguration.Root : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI._NavigationStackStyleConfiguration.Item : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI._NavigationStackStyleConfiguration.Item.ID : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(UIFrameworks) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency public func _navigationStackStyle(_ style: some _NavigationStackStyle) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func accessibilityAddTraits(uiTraits addedTraits: UIKit.UIAccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_spi(Private) nonisolated public func accessibilityRemoveTraits(uiTraits removedTraits: UIKit.UIAccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) public func accessibilityTraits(uiTraits addedTraits: UIKit.UIAccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_spi(Private) public func accessibilityRemoveTraits(uiTraits removedTraits: UIKit.UIAccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
extension SwiftUICore.AccessibilityDisclosureValue {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
}
extension SwiftUICore.AccessibilityToggleValue {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var localizedDescription: Swift.String? {
    get
  }
  #else
  package var localizedDescription: Swift.String? {
    get
  }
  #endif
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension UIKit.UIAccessibilityTraits : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.UInt64 {
    get
  }
  package static func unwrap(codingProxy rawValue: Swift.UInt64) -> UIKit.UIAccessibilityTraits
  package typealias CodingProxy = Swift.UInt64
}
#else
extension UIKit.UIAccessibilityTraits : SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.UInt64 {
    get
  }
  package static func unwrap(codingProxy rawValue: Swift.UInt64) -> UIKit.UIAccessibilityTraits
  package typealias CodingProxy = Swift.UInt64
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension UIKit.UIAccessibilityContainerType : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int {
    get
  }
  package static func unwrap(codingProxy rawValue: Swift.Int) -> UIKit.UIAccessibilityContainerType
  @available(iOS 11.0, *)
  package typealias CodingProxy = Swift.Int
}
#else
extension UIKit.UIAccessibilityContainerType : SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int {
    get
  }
  package static func unwrap(codingProxy rawValue: Swift.Int) -> UIKit.UIAccessibilityContainerType
  @available(iOS 11.0, *)
  package typealias CodingProxy = Swift.Int
}
#endif
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.VerticalPageTabViewStyle {
  @_alwaysEmitIntoClient public static var verticalPage: SwiftUI.VerticalPageTabViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func verticalPage(transitionStyle: SwiftUI.VerticalPageTabViewStyle.TransitionStyle) -> SwiftUI.VerticalPageTabViewStyle {
        .init(transitionStyle: transitionStyle)
    }
}
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct VerticalPageTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  public init(transitionStyle: SwiftUI.VerticalPageTabViewStyle.TransitionStyle)
  public struct TransitionStyle {
    public static let automatic: SwiftUI.VerticalPageTabViewStyle.TransitionStyle
    public static let blur: SwiftUI.VerticalPageTabViewStyle.TransitionStyle
    public static let identity: SwiftUI.VerticalPageTabViewStyle.TransitionStyle
  }
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.VerticalPageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.VerticalPageTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.VerticalPageTabViewStyle : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.VerticalPageTabViewStyle.TransitionStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ToolbarCommands : SwiftUI.Commands {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15ToolbarCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.ToolbarCommands : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct SidebarCommands : SwiftUI.Commands {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15SidebarCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.SidebarCommands : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct InspectorCommands : SwiftUI.Commands {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17InspectorCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.InspectorCommands : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PrintingCommands : SwiftUI.Commands {
  @_spi(Private) nonisolated public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16PrintingCommandsV4bodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PrintingCommands : Swift.Sendable {
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ImportFromDevicesCommands : SwiftUI.Commands {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @available(macOS 12.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25ImportFromDevicesCommandsV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.ImportFromDevicesCommands : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @preconcurrency @_Concurrency.MainActor @frozen public struct ObservedObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @dynamicMemberLookup @preconcurrency @_Concurrency.MainActor @frozen public struct Wrapper {
    @_Concurrency.MainActor @preconcurrency internal let root: ObjectType
    @_Concurrency.MainActor @preconcurrency public subscript<Subject>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, Subject>) -> SwiftUICore.Binding<Subject> {
      get
    }
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _seed: Swift.Int = 0
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(initialValue: ObjectType) {
      self.init(wrappedValue: initialValue)
    }
  @_Concurrency.MainActor @preconcurrency public init(wrappedValue: ObjectType)
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.ObservedObject<ObjectType>.Wrapper {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ObservedObject {
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.ObservedObject {
  nonisolated public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct NavigationStackProxy : Swift.Equatable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS, introduced: 14.0, deprecated: 100000.0, message: "Replaced by iconUTType and iconISIcon")
  public var icon: SwiftUICore.AnyView? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(macOS, introduced: 14.0, deprecated: 100000.0, message: "Replaced by iconUTType and iconISIcon")
  public var icon: SwiftUICore.AnyView? {
    @_spi(Private) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS 14.0, *)
  public var iconUTType: Swift.String? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(macOS 14.0, *)
  public var iconUTType: Swift.String? {
    @_spi(Private) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS 14.0, *)
  public var title: Swift.String? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(macOS 14.0, *)
  public var title: Swift.String? {
    @_spi(Private) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS 14.0, *)
  public var subtitle: Swift.String? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(macOS 14.0, *)
  public var subtitle: Swift.String? {
    @_spi(Private) get
  }
  #endif
  @_spi(Private) public var hasPushedContent: Swift.Bool {
    @_spi(Private) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS, deprecated: 14.0, message: "Replaced by pathTokenV2")
  public var pathToken: Foundation.Data? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(macOS, deprecated: 14.0, message: "Replaced by pathTokenV2")
  public var pathToken: Foundation.Data? {
    @_spi(Private) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS 14.0, *)
  public var pathTokenV2: SwiftUI.PathToken? {
    @_spi(Private) get
  }
  #else
  @_spi(Private) @available(macOS 14.0, *)
  public var pathTokenV2: SwiftUI.PathToken? {
    @_spi(Private) get
  }
  #endif
  @_spi(Private) public func popToRoot()
  @_spi(Private) public func popLast()
  @_spi(Private) public static func == (lhs: SwiftUI.NavigationStackProxy, rhs: SwiftUI.NavigationStackProxy) -> Swift.Bool
  @_spi(Private) @available(macOS, deprecated: 14.0, message: "Replaced by restorePathV2(from:)")
  public func restorePath(from token: Foundation.Data)
  @_spi(Private) @available(macOS 14.0, *)
  public func restorePathV2(from token: SwiftUI.PathToken)
  @_spi(Private) @available(macOS, introduced: 13.0, deprecated: 14.0, message: "Use onNavigationProxyChange(_:) instead")
  public struct Key : SwiftUICore.PreferenceKey {
    @_spi(Private) public typealias Value = SwiftUI.NavigationStackProxy?
    @_spi(Private) public static var defaultValue: SwiftUI.NavigationStackProxy?
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Private) public static func reduce(value: inout SwiftUI.NavigationStackProxy.Key.Value, nextValue: () -> SwiftUI.NavigationStackProxy.Key.Value)
    #else
    @_spi(Private) public static func reduce(value: inout SwiftUI.NavigationStackProxy.Key.Value, nextValue: () -> SwiftUI.NavigationStackProxy.Key.Value)
    #endif
  }
}
@_spi(Private) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onNavigationProxyChange(perform action: @escaping (SwiftUI.NavigationStackProxy?) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onNavigationProxyChange(perform action: @escaping (SwiftUI.NavigationStackProxy?) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationStackProxy : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationStackProxy.Key : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@propertyWrapper public struct NestedDynamicProperties<Content> : SwiftUICore.DynamicProperty {
  @_spi(Private) public init(wrappedValue: Content)
  @_spi(Private) public var wrappedValue: Content
  @_spi(Private) public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NestedDynamicProperties : Swift.Sendable {
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol StepperStyle {
  associatedtype Body : SwiftUICore.View
  @_spi(UIFrameworks) @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @_spi(UIFrameworks) typealias Configuration = SwiftUI.StepperStyleConfiguration
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
public struct StepperStyleConfiguration {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @_spi(UIFrameworks) @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    public typealias Body = Swift.Never
  }
  @_spi(UIFrameworks) public var label: SwiftUI.StepperStyleConfiguration.Label {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) public let onIncrement: (() -> Swift.Void)?
  @_spi(UIFrameworks) public let onDecrement: (() -> Swift.Void)?
  @_spi(UIFrameworks) public let onEditingChanged: (Swift.Bool) -> Swift.Void
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.StepperStyleConfiguration.Label : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.StepperStyleConfiguration : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct PanGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  @_spi(Private) public struct Value : Swift.Equatable {
    @_spi(Private) public var translation: CoreFoundation.CGSize
    @_spi(Private) public var touchType: SwiftUICore.TouchType
    @_spi(Private) public static func == (a: SwiftUI.PanGesture.Value, b: SwiftUI.PanGesture.Value) -> Swift.Bool
  }
  @_spi(Private) public init(allowedDirections: SwiftUI._EventDirections = .all, minimumDistance: CoreFoundation.CGFloat = 10)
  @_spi(Private) @available(*, deprecated, message: "Removed without replacement")
  @usableFromInline
  internal init(allowedDirections: SwiftUI._EventDirections = .all, minimumDistance: CoreFoundation.CGFloat = 10, requiresTwoFingerTouch: Swift.Bool)
  @_spi(Private) package var internalBody: some SwiftUICore.Gesture<SwiftUI.PanGesture.Value> {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = Swift.Never
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI10PanGestureV12internalBodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PanGesture.Value : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PanGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct EquatableView<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : Swift.Equatable, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var content: Content
  @inlinable nonisolated public init(content: Content) {
        self.content = content
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.EquatableView<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.EquatableView : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View where Self : Swift.Equatable {
  @inlinable nonisolated public func equatable() -> SwiftUI.EquatableView<Self> {
        return EquatableView(content: self)
    }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var effectiveForegroundStyle: SwiftUICore.AnyShapeStyle {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public func defaultForegroundStyle<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_DefaultForegroundStyleModifier(style: style))
    }
  
  #else
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public func defaultForegroundStyle<S>(_ style: S?) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle {
        modifier(_DefaultForegroundStyleModifier(style: style))
    }
  
  #endif
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:)")
  @available(macOS, introduced: 12.0, deprecated: 12.0, renamed: "foregroundStyle(_:_:)")
  @available(tvOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:)")
  @available(watchOS, introduced: 8.0, deprecated: 8.0, renamed: "foregroundStyle(_:_:)")
  nonisolated public func foregroundStyle<S1, S2>(primary: S1, secondary: S2) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle
  
  @_spi(Private) @available(iOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:_:)")
  @available(macOS, introduced: 12.0, deprecated: 12.0, renamed: "foregroundStyle(_:_:_:)")
  @available(tvOS, introduced: 15.0, deprecated: 15.0, renamed: "foregroundStyle(_:_:_:)")
  @available(watchOS, introduced: 8.0, deprecated: 8.0, renamed: "foregroundStyle(_:_:_:)")
  nonisolated public func foregroundStyle<S1, S2, S3>(primary: S1, secondary: S2, tertiary: S3) -> some SwiftUICore.View where S1 : SwiftUICore.ShapeStyle, S2 : SwiftUICore.ShapeStyle, S3 : SwiftUICore.ShapeStyle
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _DefaultForegroundStyleModifier<Style> : SwiftUICore.PrimitiveViewModifier, SwiftUICore.ViewInputsModifier where Style : SwiftUICore.ShapeStyle {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var style: Style?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(style: Style?) { self.style = style }
  #else
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(style: Style?) { self.style = style }
  #endif
  @_spi(Private) nonisolated package static func _makeViewInputs(modifier: SwiftUICore._GraphValue<SwiftUI._DefaultForegroundStyleModifier<Style>>, inputs: inout SwiftUICore._ViewInputs)
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DefaultForegroundStyleModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol Scene {
  associatedtype Body : SwiftUI.Scene
  @SwiftUI.SceneBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  nonisolated static func _makeScene(scene: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Swift.Never : SwiftUI.Scene {
}
@_spi(Private) @available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func interactiveResizeDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct VolumeViewpointUpdateStrategy : Swift.Sendable, Swift.Equatable {
  public static let all: SwiftUI.VolumeViewpointUpdateStrategy
  public static let supported: SwiftUI.VolumeViewpointUpdateStrategy
  public static func == (a: SwiftUI.VolumeViewpointUpdateStrategy, b: SwiftUI.VolumeViewpointUpdateStrategy) -> Swift.Bool
}
extension SwiftUICore.View {
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func onVolumeViewpointChange(updateStrategy: SwiftUI.VolumeViewpointUpdateStrategy = .supported, initial: Swift.Bool = true, _ action: @escaping (_ oldValue: SwiftUI.Viewpoint3D, _ newValue: SwiftUI.Viewpoint3D) -> Swift.Void) -> some SwiftUICore.View
  
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.HorizontalDirection : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int8 {
    get
  }
  package static func unwrap(codingProxy: Swift.Int8) -> SwiftUICore.HorizontalDirection
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  package typealias CodingProxy = Swift.Int8
}
#else
extension SwiftUICore.HorizontalDirection : SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int8 {
    get
  }
  package static func unwrap(codingProxy: Swift.Int8) -> SwiftUICore.HorizontalDirection
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  package typealias CodingProxy = Swift.Int8
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.VerticalDirection : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int8 {
    get
  }
  package static func unwrap(codingProxy: Swift.Int8) -> SwiftUICore.VerticalDirection
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  package typealias CodingProxy = Swift.Int8
}
#else
extension SwiftUICore.VerticalDirection : SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.Int8 {
    get
  }
  package static func unwrap(codingProxy: Swift.Int8) -> SwiftUICore.VerticalDirection
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  package typealias CodingProxy = Swift.Int8
}
#endif
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ControlWidgetConfigurationModifier_V1 {
  associatedtype Body : SwiftUI.ControlWidgetConfiguration_V1
  @_spi(Widget) func body(content: Self.Content) -> Self.Body
  @_spi(Widget) typealias Content = SwiftUI.ControlWidgetConfigurationModifier_Content_V1<Self>
  @_spi(Widget) static func _makeControlConfiguration(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetConfigurationModifier_V1 where Self.Body == Swift.Never {
  @_spi(Widget) public func body(content: Self.Content) -> Self.Body
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyControlWidgetConfiguration_V1 : SwiftUI.ControlWidgetConfigurationModifier_V1 {
  @_spi(Widget) public static func _makeControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetConfiguration_V1>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = Swift.Never
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration_V1 {
  @_spi(Widget) @inlinable internal func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetConfiguration_V1 where Content : SwiftUI.ControlWidgetConfiguration_V1, Modifier : SwiftUI.ControlWidgetConfigurationModifier_V1 {
  @_spi(Widget) public static func _makeControlConfiguration(control: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) public var body: Swift.Never {
    @_spi(Widget) get
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetConfigurationModifier_V1 where Content : SwiftUI.ControlWidgetConfigurationModifier_V1, Modifier : SwiftUI.ControlWidgetConfigurationModifier_V1 {
  @_spi(Widget) public static func _makeControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ControlWidgetConfigurationModifier_Content_V1<Modifier> : SwiftUI.ControlWidgetConfiguration_V1 where Modifier : SwiftUI.ControlWidgetConfigurationModifier_V1 {
  @_spi(Widget) public static func _makeControlConfiguration(control: SwiftUICore._GraphValue<SwiftUI.ControlWidgetConfigurationModifier_Content_V1<Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  public typealias Body = Swift.Never
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.ControlWidgetConfigurationModifier_Content_V1 : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct AutomaticMenuBarExtraStyle : SwiftUI.MenuBarExtraStyle {
  public typealias _Body = Swift.Never
  public init()
  public func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<SwiftUI.AutomaticMenuBarExtraStyle>) -> SwiftUI._MenuBarExtraValue<SwiftUI.AutomaticMenuBarExtraStyle>
}
@available(*, unavailable)
extension SwiftUI.AutomaticMenuBarExtraStyle : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MenuBarExtraStyle where Self == SwiftUI.AutomaticMenuBarExtraStyle {
  public static var automatic: SwiftUI.AutomaticMenuBarExtraStyle {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.DefaultProgressViewStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultProgressViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct DefaultProgressViewStyle : SwiftUI.ProgressViewStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultProgressViewStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DefaultProgressViewStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultProgressViewStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, isPresented: SwiftUICore.Binding<Swift.Bool>? = nil, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, isPresented: SwiftUICore.Binding<Swift.Bool>? = nil, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
  #endif
  @_spi(Private) nonisolated public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, style: SwiftUI.SwipeActionsStyle = .automatic, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, watchOS 11.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, style: SwiftUI.SwipeActionsStyle = .automatic, isPresented: SwiftUICore.Binding<Swift.Bool>? = nil, resultToken: SwiftUICore.Binding<SwiftUI.SwipeActionResultToken?>?, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
  #else
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func swipeActions<T>(edge: SwiftUICore.HorizontalEdge = .trailing, allowsFullSwipe: Swift.Bool = true, style: SwiftUI.SwipeActionsStyle = .automatic, isPresented: SwiftUICore.Binding<Swift.Bool>? = nil, resultToken: SwiftUICore.Binding<SwiftUI.SwipeActionResultToken?>?, @SwiftUICore.ViewBuilder content: () -> T) -> some SwiftUICore.View where T : SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
@available(tvOS, unavailable)
public struct SwipeActionsStyle {
  @_spi(Private) public static let automatic: SwiftUI.SwipeActionsStyle
  @_spi(Private) public static let standard: SwiftUI.SwipeActionsStyle
  @_spi(Private) public static let rounded: SwiftUI.SwipeActionsStyle
  @_spi(Private) public static func rounded(radius: CoreFoundation.CGFloat) -> SwiftUI.SwipeActionsStyle
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SwipeActionsStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, visionOS 2.0, watchOS 11.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor public struct SwipeActionResultToken {
  @_spi(Private) @_Concurrency.MainActor public mutating func complete()
  @_spi(Private) @_Concurrency.MainActor public mutating func cancel()
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SwipeActionResultToken : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct PickerOption<Value, Content> where Value : Swift.Hashable, Content : SwiftUICore.View {
  @_spi(_) public typealias SelectionValue = Value
  @_spi(_) public init(value: Value, @SwiftUICore.ViewBuilder content: () -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #endif
  @_spi(_) @_disfavoredOverload public init<S>(_ title: S, value: Value) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #else
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #endif
  @_spi(_) public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Value) where Content == SwiftUICore.Text
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #endif
  @_spi(_) public var _identifiedView: some SwiftUICore.View {
    @_spi(_) get
  }
  @_spi(_) @_Concurrency.MainActor @preconcurrency public var body: SwiftUI.PickerOption<Value, Content> {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = SwiftUI.PickerOption<Value, Content>
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias _IdentifiedView = @_opaqueReturnTypeOf("$s7SwiftUI12PickerOptionV15_identifiedViewQrvp", 0) __<Value, Content>
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.PickerOption : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, message: "Use initializers which take an explicitely labeled `value`")
extension SwiftUI.PickerOption {
  @_spi(_) public init(_ value: Value, @SwiftUICore.ViewBuilder content: () -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(_ value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(_ value: T, @SwiftUICore.ViewBuilder content: () -> Content) where Value == T?, T : Swift.Hashable
  #endif
  @_spi(_) @_disfavoredOverload public init<S>(_ title: S, _ value: Value) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, _ value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #else
  @_spi(_) @_disfavoredOverload public init<T, S>(_ title: S, _ value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable, S : Swift.StringProtocol
  #endif
  @_spi(_) public init(_ titleKey: SwiftUICore.LocalizedStringKey, _ value: Value) where Content == SwiftUICore.Text
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, _ value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #else
  @_spi(_) public init<T>(_ titleKey: SwiftUICore.LocalizedStringKey, _ value: T) where Value == T?, Content == SwiftUICore.Text, T : Swift.Hashable
  #endif
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func dismissalConfirmationDialog<A>(_ titleKey: SwiftUICore.LocalizedStringKey, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func dismissalConfirmationDialog<S, A>(_ title: S, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func dismissalConfirmationDialog<A>(_ title: SwiftUICore.Text, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  nonisolated public func dismissalConfirmationDialog<A, M>(_ titleKey: SwiftUICore.LocalizedStringKey, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func dismissalConfirmationDialog<S, A, M>(_ title: S, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func dismissalConfirmationDialog<A, M>(_ title: SwiftUICore.Text, shouldPresent: Swift.Bool, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol MenuBarExtraStyle {
  associatedtype _Body : SwiftUICore.View
  func _makeMenuBarExtra(_ value: SwiftUI._MenuBarExtraValue<Self>) -> SwiftUI._MenuBarExtraValue<Self>
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _MenuBarExtraValue<Style> where Style : SwiftUI.MenuBarExtraStyle {
}
@available(*, unavailable)
extension SwiftUI._MenuBarExtraValue : Swift.Sendable {
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func menuBarExtraStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.MenuBarExtraStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct OnDeleteTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet) -> Swift.Void> {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: Swift.Optional<(Foundation.IndexSet) -> Swift.Void> {
    get { nil }
  }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Optional<(Foundation.IndexSet) -> Swift.Void>
}
@available(*, unavailable)
extension SwiftUI.OnDeleteTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.DynamicViewContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func onDelete(perform action: Swift.Optional<(Foundation.IndexSet) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        return modifier(_TraitWritingModifier<OnDeleteTraitKey>(value: action))
    }
  
  #else
  @inlinable nonisolated public func onDelete(perform action: Swift.Optional<(Foundation.IndexSet) -> Swift.Void>) -> some SwiftUICore.DynamicViewContent {
        return modifier(_TraitWritingModifier<OnDeleteTraitKey>(value: action))
    }
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct IsDeleteDisabledTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.IsDeleteDisabledTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func deleteDisabled(_ isDisabled: Swift.Bool) -> some SwiftUICore.View {
        return _trait(IsDeleteDisabledTraitKey.self, isDisabled)
    }
  
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct ClarityUIMetrics {
  @_spi(Private) public static let componentHorizontalPadding: CoreFoundation.CGFloat
  @_spi(Private) public static let componentCornerRadius: CoreFoundation.CGFloat
  @_spi(Private) public static let minimumComponentHeight: CoreFoundation.CGFloat
  @_spi(Private) public static let buttonShadowRadius: CoreFoundation.CGFloat
  @_spi(Private) public static let buttonShadowOffset: CoreFoundation.CGSize
  @_spi(Private) public static let fallbackDisplayCornerRadius: CoreFoundation.CGFloat
  @_spi(Private) public static let minimumDisplayCornerRadius: CoreFoundation.CGFloat
  @_spi(Private) public static let adminModeBlurRadius: CoreFoundation.CGFloat
  @_spi(Private) public static let standardSpacing: CoreFoundation.CGFloat
  @_spi(Private) public static let titleHorizontalPadding: CoreFoundation.CGFloat
  @_spi(Private) public static let titleTopPadding: CoreFoundation.CGFloat
  @_spi(Private) public static let titleBottomPadding: CoreFoundation.CGFloat
  @_spi(Private) public static let backButtonPadding: CoreFoundation.CGFloat
  @_spi(Private) public static let navigationTransitionDuration: Swift.Double
  @_spi(Private) public static let gridHorizontalPaddingPortrait: CoreFoundation.CGFloat
  @_spi(Private) public static let gridHorizontalPaddingLandscape: CoreFoundation.CGFloat
  @_spi(Private) public static let stackWidthAsPercentageOfScreenPad: CoreFoundation.CGFloat
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ClarityUIMetrics : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CommandMenu<Content> : SwiftUI.Commands where Content : SwiftUICore.View {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.CommandMenu<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  nonisolated public init(_ nameKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public init(_ name: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ name: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11CommandMenuV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.CommandMenu : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@preconcurrency @_Concurrency.MainActor public protocol WidgetConfiguration {
  associatedtype Body : SwiftUI.WidgetConfiguration
  @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  nonisolated static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetConfiguration {
  nonisolated public static func _makeWidgetConfiguration(widget: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension Swift.Never : SwiftUI.WidgetConfiguration {
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol NewDocumentProvider {
  @_spi(SwiftDataDocuments) func provideNewDocument(to: any SwiftUI.ObservableDocumentBox)
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol ObservableDocumentBox : AnyObject {
  @_spi(SwiftDataDocuments) static var documentBaseClass: SwiftUI.PlatformDocument.Type { get }
  @_spi(SwiftDataDocuments) init()
  @_spi(SwiftDataDocuments) var hasLoadedDocument: Swift.Bool { get }
  @_spi(SwiftDataDocuments) var wasOpened: Swift.Bool { get set }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SwiftDataDocuments) var fileURL: Foundation.URL? { get set }
  #else
  @_spi(SwiftDataDocuments) var fileURL: Foundation.URL? { get set }
  #endif
  @_spi(SwiftDataDocuments) var isEditable: Swift.Bool { get set }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(SwiftDataDocuments) var undoManager: Foundation.UndoManager? { get set }
  #else
  @_spi(SwiftDataDocuments) var undoManager: Foundation.UndoManager? { get set }
  #endif
  @_spi(SwiftDataDocuments) var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  @_spi(SwiftDataDocuments) var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
}
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ObservableDocumentBox {
  @_spi(SwiftDataDocuments) public var wasOpened: Swift.Bool {
    @_spi(SwiftDataDocuments) get
    @_spi(SwiftDataDocuments) set
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DocumentBaseBox<Document> {
  associatedtype Document
  @_spi(SwiftDataDocuments) func setBase(_ base: Self.Document)
}
#else
@_spi(SwiftDataDocuments) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DocumentBaseBox {
  associatedtype Document
  @_spi(SwiftDataDocuments) func setBase(_ base: Self.Document)
}
#endif
extension Foundation.Bundle {
  package static var swiftUI: Foundation.Bundle {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.List {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  #else
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  #endif
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
  #else
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<Swift.Set<SelectionValue>>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
  #endif
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.List {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  #else
  @available(watchOS, unavailable)
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
  #else
  @available(watchOS, unavailable)
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, selection: SwiftUICore.Binding<SelectionValue?>?, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.List where SelectionValue == Swift.Never {
  nonisolated public init<Data, RowContent>(_ data: SwiftUICore.Binding<Data>, editActions: SwiftUI.EditActions<Data>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, Data.Element.ID>, Data.Element.ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, RowContent : SwiftUICore.View, Data.Element : Swift.Identifiable, Data.Index : Swift.Hashable
  nonisolated public init<Data, ID, RowContent>(_ data: SwiftUICore.Binding<Data>, id: Swift.KeyPath<Data.Element, ID>, editActions: SwiftUI.EditActions<Data>, @SwiftUICore.ViewBuilder rowContent: @escaping (SwiftUICore.Binding<Data.Element>) -> RowContent) where Content == SwiftUICore.ForEach<SwiftUI.IndexedIdentifierCollection<Data, ID>, ID, SwiftUI.EditableCollectionContent<RowContent, Data>>, Data : Swift.MutableCollection, Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUICore.View, Data.Index : Swift.Hashable
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AccessibilityIgnoresInvertColorsViewModifier : SwiftUICore.PrimitiveViewModifier, SwiftUICore.MultiViewModifier {
  @_Concurrency.MainActor @preconcurrency public var active: Swift.Bool
  @inlinable @_Concurrency.MainActor @preconcurrency public init(active: Swift.Bool) { self.active = active }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AccessibilityIgnoresInvertColorsViewModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func accessibilityIgnoresInvertColors(_ active: Swift.Bool = true) -> some SwiftUICore.View {
        return modifier(
            _AccessibilityIgnoresInvertColorsViewModifier(active: active))
    }
  
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct MapAnimator<Value, Content> : SwiftUICore.View where Value : Swift.Equatable, Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) nonisolated public init(value: SwiftUICore.Binding<Value?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Value?>, SwiftUI.MapAnimatorProxy<Value>) -> Content)
  #else
  @_spi(ForMapKitOnly) nonisolated public init(value: SwiftUICore.Binding<Value?>, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Value?>, SwiftUI.MapAnimatorProxy<Value>) -> Content)
  #endif
  @_spi(ForMapKitOnly) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(ForMapKitOnly) get
  }
  @_spi(ForMapKitOnly) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11MapAnimatorV4bodyQrvp", 0) __<Value, Content>
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapAnimator : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapAnimatorProxy<Value> {
  @_spi(ForMapKitOnly) public var isPlaying: Swift.Bool {
    @_spi(ForMapKitOnly) get
  }
  @_spi(ForMapKitOnly) public func play(defaultValue: Value, keyframes: () -> SwiftUICore.KeyframeTimeline<Value>, completion: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  @_spi(ForMapKitOnly) public func stop()
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapAnimatorProxy : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_functionBuilder public struct PageBuilder {
  @_spi(DoNotImport) public static func buildPartialBlock<Content>(first: Content) -> Content where Content : SwiftUI.PrintContent
  @_spi(DoNotImport) public static func buildPartialBlock<Content>(first: Content) -> SwiftUI.PrintItem<Content> where Content : SwiftUICore.View
  @_spi(DoNotImport) public static func buildPartialBlock<Content, V>(accumulated: Content, next: V) -> some SwiftUI.PrintContent where Content : SwiftUI.PrintContent, V : SwiftUICore.View
  
  @_spi(DoNotImport) public static func buildPartialBlock<C1, C2>(accumulated: C1, next: C2) -> SwiftUI.TuplePrintContent<(C1, C2)> where C1 : SwiftUI.PrintContent, C2 : SwiftUI.PrintContent
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.PageBuilder : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol PrintContent {
  associatedtype PrintBody : SwiftUI.PrintContent
  @_spi(DoNotImport) @SwiftUI.PageBuilder var body: Self.PrintBody { get }
  @_spi(DoNotImport) static func _makePrintContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._PrintingInputs) -> SwiftUI._PrintingOutputs
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension Swift.Never : SwiftUI.PrintContent {
  @_spi(DoNotImport) @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias PrintBody = Swift.Never
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PrintContent {
  @_spi(DoNotImport) public static func _makePrintContent(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._PrintingInputs) -> SwiftUI._PrintingOutputs
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _PrintingOutputs {
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI._PrintingOutputs : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _PrintingInputs {
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI._PrintingInputs : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct SecureField<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11SecureFieldV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.SecureField : Swift.Sendable {
}
extension SwiftUI.SecureField where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?)
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text?) where S : Swift.StringProtocol
  #endif
}
extension SwiftUI.SecureField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public init(text: SwiftUICore.Binding<Swift.String>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
extension SwiftUI.SecureField where Label == SwiftUICore.Text {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>) {
        self.init(titleKey, text: text, onCommit: {})
    }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>) where S : Swift.StringProtocol {
        self.init(title, text: text, onCommit: {})
    }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.SecureField where Label == SwiftUICore.Text {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Renamed SecureField.init(_:text:). Use View.onSubmit(of:_:) for functionality previously provided by the onCommit parameter.")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, text: SwiftUICore.Binding<Swift.String>, onCommit: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(tvOS, introduced: 17.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
extension SwiftUI.MenuStyle where Self == SwiftUI.BorderlessButtonMenuStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderlessButton: SwiftUI.BorderlessButtonMenuStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(tvOS, introduced: 17.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
@_Concurrency.MainActor @preconcurrency public struct BorderlessButtonMenuStyle : SwiftUI.MenuStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 12.0, message: "Use ``View/menuIndicator(_)`` instead.")
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(showsMenuIndicator: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderlessButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(tvOS, introduced: 17.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(watchOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.borderless).")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25BorderlessButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderlessButtonMenuStyle : Swift.Sendable {
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlWidgetTemplate {
  associatedtype Body : SwiftUI.ControlWidgetTemplate
  @SwiftUI.ControlWidgetTemplateBuilder @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
  @_Concurrency.MainActor @preconcurrency static var _kind: Swift.UInt { get }
  @_Concurrency.MainActor @preconcurrency static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplate {
  @_Concurrency.MainActor @preconcurrency public static var _kind: Swift.UInt {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension Swift.Never : SwiftUI.ControlWidgetTemplate {
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_functionBuilder public struct ControlWidgetTemplateBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.ControlWidgetTemplate {
       content
    }
  @_alwaysEmitIntoClient public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.ControlWidgetTemplate where Content : SwiftUI.ControlWidgetTemplate {
        return content
    }
  
}
@available(*, unavailable)
extension SwiftUI.ControlWidgetTemplateBuilder : Swift.Sendable {
}
@available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
public struct DialogSeverity : Swift.Equatable {
  public static let automatic: SwiftUI.DialogSeverity
  public static let critical: SwiftUI.DialogSeverity
  @available(macOS 14.0, *)
  public static let standard: SwiftUI.DialogSeverity
  @_spi(Private) public static let informational: SwiftUI.DialogSeverity
  public static func == (a: SwiftUI.DialogSeverity, b: SwiftUI.DialogSeverity) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.DialogSeverity : Swift.Sendable {
}
@available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
@_spi_available(iOS, introduced: 16.0)
@_spi_available(tvOS, introduced: 16.0)
extension SwiftUICore.View {
  nonisolated public func dialogSeverity(_ severity: SwiftUI.DialogSeverity) -> some SwiftUICore.View
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func dialogSeverity(_ severity: SwiftUI.DialogSeverity) -> some SwiftUI.Scene
  
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public var undoManager: Foundation.UndoManager? {
    get
  }
  #else
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  public var undoManager: Foundation.UndoManager? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var _undoManager: Foundation.UndoManager? {
    get
    set
  }
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var _undoManager: Foundation.UndoManager? {
    get
    set
  }
  #endif
}
@available(iOS 16.4, macOS 13.3, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.MenuControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var menu: SwiftUI.MenuControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 16.4, macOS 13.3, tvOS 17.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MenuControlGroupStyle : SwiftUI.ControlGroupStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.MenuControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.4, tvOS 17.0, macOS 13.3, *)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21MenuControlGroupStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.MenuControlGroupStyle : Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ControlGroupStyle where Self == SwiftUI.CompactMenuControlGroupStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var compactMenu: SwiftUI.CompactMenuControlGroupStyle {
    get { .init() }
  }
}
@available(iOS 16.4, macOS 13.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CompactMenuControlGroupStyle : SwiftUI.ControlGroupStyle {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CompactMenuControlGroupStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.4, macOS 13.3, *)
  @available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28CompactMenuControlGroupStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CompactMenuControlGroupStyle : Swift.Sendable {
}
extension SwiftUICore.TypesettingConfigurationKey {
  package static func read(from traitCollection: UIKit.UITraitCollection) -> SwiftUICore.TypesettingConfiguration
  package static func write(to mutableTraits: inout any UIKit.UIMutableTraits, value typesettingConfiguration: SwiftUICore.TypesettingConfiguration)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Group : SwiftUI.ToolbarContent where Content : SwiftUI.ToolbarContent {
  nonisolated public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @_Concurrency.MainActor @preconcurrency public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Group : SwiftUI.CustomizableToolbarContent where Content : SwiftUI.CustomizableToolbarContent {
  public init(@SwiftUI.ToolbarContentBuilder content: () -> Content)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct TupleToolbarContent<T> : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_ value: T)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @usableFromInline
  nonisolated internal static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.TupleToolbarContent<T>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TupleToolbarContent<T>>, inputs: SwiftUICore._GraphInputs, resolved: inout SwiftUI._ToolbarItemList)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  @usableFromInline
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleToolbarContent : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, message: "replaced by ContentTransition")
extension SwiftUICore.Text {
  @_spi(_) public struct Transition {
    @_spi(_) public static let identity: SwiftUICore.Text.Transition
    @_spi(_) public static let opacity: SwiftUICore.Text.Transition
    @_spi(_) public static let interpolate: SwiftUICore.Text.Transition
  }
}
@_spi(_) @available(*, unavailable)
extension SwiftUICore.Text.Transition : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, message: "replaced by ContentTransition")
extension SwiftUICore.View {
  @_spi(_) @inlinable nonisolated public func textTransition(_ transition: SwiftUICore.Text.Transition) -> some SwiftUICore.View {
        return environment(\.textTransition, transition)
    }
  
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, message: "replaced by ContentTransition")
extension SwiftUICore.EnvironmentValues {
  @_spi(_) public var textTransition: SwiftUICore.Text.Transition {
    @_spi(_) get
    @_spi(_) set
  }
  @_spi(_) public var textTransitionAddsDrawingGroup: Swift.Bool {
    @_spi(_) get
    @_spi(_) set
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public enum TypedPayloadError : Swift.Error {
    case invalidContent
    case encodingError
    public static func == (a: Foundation.NSUserActivity.TypedPayloadError, b: Foundation.NSUserActivity.TypedPayloadError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func typedPayload<T>(_ type: T.Type) throws -> T where T : Swift.Decodable, T : Swift.Encodable
  public func setTypedPayload<T>(_ payload: T) throws where T : Swift.Decodable, T : Swift.Encodable
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol HostingViewProtocol : AnyObject {
  @_spi(Private) func preferenceValue<K>(_ key: K.Type) -> K.Value where K : SwiftUICore.HostPreferenceKey
  @_spi(Private) func convertAnchor<Value>(_ anchor: SwiftUICore.Anchor<Value>) -> Value
}
@_spi(Private) @_hasMissingDesignatedInitializers @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public class HostingViewRegistry {
  @_spi(Private) public static let shared: SwiftUI.HostingViewRegistry
  @_spi(Private) public func forEach(_ body: (any SwiftUI.HostingViewProtocol) throws -> Swift.Void) rethrows
  @_spi(Private) @objc deinit
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.HostingViewRegistry : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @inlinable nonisolated public func scrollViewBoundsModifier<T>(transform: @escaping (CoreFoundation.CGRect?) -> T) -> some SwiftUICore.View where T : SwiftUICore.ViewModifier {
        return modifier(_ScrollViewBoundsModifier(transform: transform))
    }
  
  #else
  @_spi(Private) @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @inlinable nonisolated public func scrollViewBoundsModifier<T>(transform: @escaping (CoreFoundation.CGRect?) -> T) -> some SwiftUICore.View where T : SwiftUICore.ViewModifier {
        return modifier(_ScrollViewBoundsModifier(transform: transform))
    }
  
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
@frozen @_Concurrency.MainActor @preconcurrency public struct _ScrollViewBoundsModifier<Result> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Result : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public var transform: (CoreFoundation.CGRect?) -> Result
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public init(transform: @escaping (CoreFoundation.CGRect?) -> Result) {
        self.transform = transform
    }
  #else
  @inlinable nonisolated public init(transform: @escaping (CoreFoundation.CGRect?) -> Result) {
        self.transform = transform
    }
  #endif
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ScrollViewBoundsModifier<Result>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(iOS, introduced: 14.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(tvOS, introduced: 14.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(watchOS, introduced: 7.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(macOS, introduced: 11.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ScrollViewBoundsModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @inlinable nonisolated public func scrollViewBoundsModifier<T>(transform: @escaping (CoreFoundation.CGSize, CoreFoundation.CGRect?) -> T) -> some SwiftUICore.View where T : SwiftUICore.ViewModifier {
        return modifier(_ScrollViewBoundsModifier2(transform: transform))
    }
  
  #else
  @_spi(Private) @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @inlinable nonisolated public func scrollViewBoundsModifier<T>(transform: @escaping (CoreFoundation.CGSize, CoreFoundation.CGRect?) -> T) -> some SwiftUICore.View where T : SwiftUICore.ViewModifier {
        return modifier(_ScrollViewBoundsModifier2(transform: transform))
    }
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
@frozen @_Concurrency.MainActor @preconcurrency public struct _ScrollViewBoundsModifier2<Result> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Result : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public var transform: (CoreFoundation.CGSize, CoreFoundation.CGRect?) -> Result
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public init(transform: @escaping (CoreFoundation.CGSize, CoreFoundation.CGRect?) -> Result) {
        self.transform = transform
    }
  #else
  @inlinable nonisolated public init(transform: @escaping (CoreFoundation.CGSize, CoreFoundation.CGRect?) -> Result) {
        self.transform = transform
    }
  #endif
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ScrollViewBoundsModifier2<Result>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(*, deprecated, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(iOS, introduced: 15.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(tvOS, introduced: 15.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(watchOS, introduced: 8.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  @available(macOS, introduced: 12.0, message: "Use visualEffect, scrollTransition, or onGeometryChange instead")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ScrollViewBoundsModifier2 : Swift.Sendable {
}
@_spi(ClarityBoard) @_hasMissingDesignatedInitializers @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public class ClarityUIBackButtonActionWrapper {
  @_spi(ClarityBoard) public static func makeBackButtonAction() -> Any
  @_spi(ClarityBoard) public static func makeBackButtonAction(isAnimated: Swift.Bool) -> Any
  @_spi(ClarityBoard) @objc deinit
}
@_spi(ClarityBoard) @available(*, unavailable)
extension SwiftUI.ClarityUIBackButtonActionWrapper : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _onBindingChange<Value>(_ binding: SwiftUICore.Binding<Value>, perform action: @escaping (Value) -> Swift.Void) -> some SwiftUICore.View where Value : Swift.Equatable {
        return modifier(_BindingActionModifier(
            binding: binding, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _BindingActionModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier where Value : Swift.Equatable {
  @_Concurrency.MainActor @preconcurrency public var binding: SwiftUICore.Binding<Value>
  @_Concurrency.MainActor @preconcurrency public var action: (Value) -> Swift.Void
  @inlinable nonisolated public init(binding: SwiftUICore.Binding<Value>, action: @escaping (Value) -> Swift.Void) {
        (self.binding, self.action) = (binding, action)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._BindingActionModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._BindingActionModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._BindingActionModifier : Swift.Sendable {
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public protocol ClarityUIApplicationSceneSettingsProtocol : ObjectiveC.NSObject {
  @_spi(ClarityBoard) var navigationBarHost: SwiftUI.NavigationBarHost { get }
  @_spi(ClarityBoard) var isAdminModeEnabled: Swift.Bool { get }
  @_spi(ClarityBoard) var listLayout: SwiftUI.MultimodalListStyle.Layout { get }
  @_spi(ClarityBoard) var areBadgesEnabled: Swift.Bool { get }
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public protocol ClarityUIMutableApplicationSceneSettingsProtocol : SwiftUI.ClarityUIApplicationSceneSettingsProtocol {
  @_spi(ClarityBoard) var navigationBarHost: SwiftUI.NavigationBarHost { get set }
  @_spi(ClarityBoard) var isAdminModeEnabled: Swift.Bool { get set }
  @_spi(ClarityBoard) var listLayout: SwiftUI.MultimodalListStyle.Layout { get set }
  @_spi(ClarityBoard) var areBadgesEnabled: Swift.Bool { get set }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public enum EditMode : Swift.Sendable {
  case inactive
  case transient
  case active
  public var isEditing: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.EditMode, b: SwiftUI.EditMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public var editMode: SwiftUICore.Binding<SwiftUI.EditMode>? {
    get
    set
  }
  #else
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public var editMode: SwiftUICore.Binding<SwiftUI.EditMode>? {
    get
    set
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.PlainTextFieldStyle {
  @_alwaysEmitIntoClient public static var plain: SwiftUI.PlainTextFieldStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PlainTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.PlainTextFieldStyle._Label>) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI19PlainTextFieldStyleV5_body13configurationQrAA0dE0VyAA01_deF5LabelVG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PlainTextFieldStyle : Swift.Sendable {
}
extension SwiftUICore.Transaction {
  @_spi(Internal) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var scrollToRequiresCompleteVisibility: Swift.Bool {
    get
    set
  }
}
@_spi(Private) @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "LabeledContent")
@_Concurrency.MainActor @preconcurrency public struct LabeledView<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_spi(Private) nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "LabeledContent")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "LabeledContent")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11LabeledViewV4bodyQrvp", 0) __<Label, Content>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LabeledView : Swift.Sendable {
}
@_spi(Private) @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "LabeledContent")
extension SwiftUI.LabeledView where Label == SwiftUICore.Text {
  @_spi(Private) nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) @_disfavoredOverload nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(macOS, introduced: 13.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(tvOS, introduced: 16.0, deprecated: 100000.0, renamed: "LabeledContent")
@available(watchOS, introduced: 9.0, deprecated: 100000.0, renamed: "LabeledContent")
extension SwiftUI.LabeledView where Label == SwiftUICore.Text, Content == SwiftUICore.Text {
  @_spi(Private) nonisolated public init<S>(_ titleKey: SwiftUICore.LocalizedStringKey, value: S) where S : Swift.StringProtocol
  @_spi(Private) @_disfavoredOverload nonisolated public init<S1, S2>(_ title: S1, value: S2) where S1 : Swift.StringProtocol, S2 : Swift.StringProtocol
  @_spi(Private) nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: F.FormatInput, format: F) where F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
  @_spi(Private) nonisolated public init<S, F>(_ title: S, value: F.FormatInput, format: F) where S : Swift.StringProtocol, F : Foundation.FormatStyle, F.FormatInput : Swift.Equatable, F.FormatOutput == Swift.String
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ToolbarDefaultItemKind {
  public static let sidebarToggle: SwiftUI.ToolbarDefaultItemKind
  @available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let title: SwiftUI.ToolbarDefaultItemKind
}
@available(*, unavailable)
extension SwiftUI.ToolbarDefaultItemKind : Swift.Sendable {
}
@available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderedButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var bordered: SwiftUI.BorderedButtonStyle {
    get { .init() }
  }
}
@available(iOS 15.0, macOS 10.15, tvOS 13.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct BorderedButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 13.0, watchOS 7.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19BorderedButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedButtonStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.Text.LineStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(nsUnderlineStyle: UIFoundation.NSUnderlineStyle)
  #else
  public init?(nsUnderlineStyle: UIFoundation.NSUnderlineStyle)
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension UIFoundation.NSUnderlineStyle {
  public init(_ lineStyle: SwiftUICore.Text.LineStyle)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_functionBuilder public struct SceneBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.Scene {
       content
    }
  @available(*, unavailable, message: "Provide at leas one scene")
  public static func buildBlock() -> some SwiftUI.Scene
  
  public static func buildBlock<Content>(_ content: Content) -> Content where Content : SwiftUI.Scene
  #if compiler(>=5.3) && $ParameterPacks
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildBlock<each Content>(_ content: repeat each Content) -> some SwiftUI.Scene where repeat each Content : SwiftUI.Scene {
        _TupleScene((repeat each content))
    }
  #if compiler(>=5.3) && $ParameterPacks

  #endif
  #endif
}
@available(*, unavailable)
extension SwiftUI.SceneBuilder : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.SceneBuilder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildOptional(_ scene: (any SwiftUI.Scene & SwiftUI._LimitedAvailabilitySceneMarker)?) -> some SwiftUI.Scene {
        if #available(iOS 16.1, macOS 13.0, watchOS 9.1, tvOS 16.1, *) {
            guard let scene else {
                 
                 
                 
                fatalError("""
                    if #available in SceneBuilder includes an unknown OS version
                    """)
            }

            return scene as! LimitedAvailabilityScene
        } else {
            return _EmptyScene()
        }
    }
  
  #else
  @_alwaysEmitIntoClient public static func buildOptional(_ scene: (any SwiftUI.Scene & SwiftUI._LimitedAvailabilitySceneMarker)?) -> some SwiftUI.Scene {
        if #available(iOS 16.1, macOS 13.0, watchOS 9.1, tvOS 16.1, *) {
            guard let scene else {
                 
                 
                 
                fatalError("""
                    if #available in SceneBuilder includes an unknown OS version
                    """)
            }

            return scene as! LimitedAvailabilityScene
        } else {
            return _EmptyScene()
        }
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(*, unavailable, message: "if statements in a SceneBuilder can only be used with #available clauses")
  public static func buildOptional<S>(_ scene: S?) where S : SwiftUI.Scene
  #else
  @available(*, unavailable, message: "if statements in a SceneBuilder can only be used with #available clauses")
  public static func buildOptional<S>(_ scene: S?) where S : SwiftUI.Scene
  #endif
  @available(iOS 16.1, macOS 13.0, watchOS 9.1, tvOS 16.1, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ scene: some Scene) -> any SwiftUI.Scene & SwiftUI._LimitedAvailabilitySceneMarker {
        return LimitedAvailabilityScene(scene)
    }
  @available(iOS, deprecated: 14.0, obsoleted: 16.1, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 16.1, *)' or newer instead")
  @available(macOS, deprecated: 11.0, obsoleted: 13.0, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 13.0, *)' or newer instead")
  @available(watchOS, deprecated: 7.0, obsoleted: 9.1, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 9.1, *)' or newer instead")
  @available(tvOS, deprecated: 14.0, obsoleted: 16.1, message: "this code may crash on earlier versions of the OS; specify '#available(tvOS 16.1, *)' or newer instead")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ scene: any SwiftUI.Scene) -> any SwiftUI.Scene & SwiftUI._LimitedAvailabilitySceneMarker {
        fatalError("Unavailable")
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_marker public protocol _LimitedAvailabilitySceneMarker {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
  nonisolated public func navigationDocument<D>(_ document: D) -> some SwiftUICore.View where D : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D>(_ document: D, preview: SwiftUI.SharePreview<Swift.Never, Swift.Never>) -> some SwiftUICore.View where D : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D, I>(_ document: D, preview: SwiftUI.SharePreview<Swift.Never, I>) -> some SwiftUICore.View where D : CoreTransferable.Transferable, I : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D, I>(_ document: D, preview: SwiftUI.SharePreview<I, Swift.Never>) -> some SwiftUICore.View where D : CoreTransferable.Transferable, I : CoreTransferable.Transferable
  
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func navigationDocument<D, I1, I2>(_ document: D, preview: SwiftUI.SharePreview<I1, I2>) -> some SwiftUICore.View where D : CoreTransferable.Transferable, I1 : CoreTransferable.Transferable, I2 : CoreTransferable.Transferable
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
  nonisolated public func navigationDocument(_ url: Foundation.URL) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.TabViewStyle where Self == SwiftUI.DefaultTabViewStyle {
  @_alwaysEmitIntoClient public static var automatic: SwiftUI.DefaultTabViewStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct DefaultTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.DefaultTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.DefaultTabViewStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PlainTextEditorStyle : SwiftUI.TextEditorStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.PlainTextEditorStyle.Configuration) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20PlainTextEditorStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PlainTextEditorStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TextEditorStyle where Self == SwiftUI.PlainTextEditorStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var plain: SwiftUI.PlainTextEditorStyle {
    get { .init() }
  }
}
extension SwiftUI.TimelineView where Content : SwiftUICore.View {
  @available(iOS 16.4, macOS 13.3, watchOS 9.4, tvOS 16.4, *)
  @usableFromInline
  @_disfavoredOverload internal init(_ schedule: Schedule, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.TimelineView<SwiftUICore.PeriodicTimelineSchedule, Swift.Never>.Context) -> Content)
}
@available(iOS 13.0, watchOS 10.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.WheelDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var wheel: SwiftUI.WheelDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, watchOS 10.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@_Concurrency.MainActor @preconcurrency public struct WheelDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.WheelDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, watchOS 10.0, *)
  @_spi_available(tvOS, introduced: 18.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20WheelDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 13.0, watchOS 10.0, *)
  @_spi_available(tvOS, introduced: 18.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.WheelDatePickerStyle : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityIdentifier(_ identifier: Swift.String, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.Scene {
  @_spi(Private) nonisolated public func accessibilityIdentifier(_ identifier: Swift.String, isEnabled: Swift.Bool = true) -> some SwiftUI.Scene
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityIdentifier(_ identifier: Swift.String) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func listRowSpacing(_ spacing: CoreFoundation.CGFloat?) -> some SwiftUICore.View {
        environment(\.listRowSpacing, spacing)
    }
  
  #else
  @inlinable nonisolated public func listRowSpacing(_ spacing: CoreFoundation.CGFloat?) -> some SwiftUICore.View {
        environment(\.listRowSpacing, spacing)
    }
  
  #endif
}
@available(iOS 15.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  internal var listRowSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
  #else
  @usableFromInline
  internal var listRowSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
  #endif
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onNavigationTitleChange(perform action: @escaping (Swift.String?) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onNavigationTitleChange(perform action: @escaping (Swift.String?) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onNavigationSubtitleChange(perform action: @escaping (Foundation.NSAttributedString?) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onNavigationSubtitleChange(perform action: @escaping (Foundation.NSAttributedString?) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(macOS 14.0, *)
  nonisolated public func onNavigationIconChange(perform action: @escaping (SwiftUICore.AnyView?) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(macOS 14.0, *)
  nonisolated public func onNavigationIconChange(perform action: @escaping (SwiftUICore.AnyView?) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func toolbar(removing defaultItemKind: SwiftUI.ToolbarDefaultItemKind?) -> some SwiftUICore.View
  
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func toolbar(removing defaultItemKind: SwiftUI.ToolbarDefaultItemKind?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
public struct LongPressGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  public var minimumDuration: Swift.Double
  @_spi_available(tvOS, introduced: 18.0)
  public var maximumDistance: CoreFoundation.CGFloat {
    get
    set
  }
  @available(tvOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5)
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.LongPressGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.LongPressGesture.Value>
  public typealias Value = Swift.Bool
  package var internalBody: some SwiftUICore.Gesture<Swift.Bool> {
    get
  }
  @available(iOS 13.0, tvOS 14.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 14.0, watchOS 6.0, macOS 10.15, *)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI16LongPressGestureV12internalBodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.LongPressGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            maximumDistance: maximumDistance,
            pressing: onPressingChanged,
            perform: action)
    }
  
  #else
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            maximumDistance: maximumDistance,
            pressing: onPressingChanged,
            perform: action)
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            pressing: onPressingChanged,
            perform: action)
    }
  
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View {
        onLongPressGesture(
            minimumDuration: minimumDuration,
            pressing: onPressingChanged,
            perform: action)
    }
  
  #endif
}
@available(iOS 13.0, macOS 10.15, watchOS 6.0, tvOS 14.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @_disfavoredOverload nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @available(iOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:maximumDuration:perform:onPressingChanged:)")
  @_disfavoredOverload nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(tvOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:perform:onPressingChanged:)")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(tvOS, deprecated: 100000.0, renamed: "onLongPressGesture(minimumDuration:perform:onPressingChanged:)")
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_disfavoredOverload nonisolated public func onLongPressGesture(minimumDuration: Swift.Double = 0.5, pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct DelayedLongPressGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  @_spi(Private) public var minimumDuration: Swift.Double
  @_spi(Private) @available(tvOS, unavailable)
  public var maximumDistance: CoreFoundation.CGFloat {
    @_spi(Private) get
    @_spi(Private) set
  }
  @_spi(Private) @available(tvOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10)
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init(minimumDuration: Swift.Double = 0.5)
  @_spi(Private) public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.DelayedLongPressGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.DelayedLongPressGesture.Value>
  @_spi(Private) public typealias Value = Swift.Bool
  @_spi(Private) package var internalBody: some SwiftUICore.Gesture<Swift.Bool> {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI23DelayedLongPressGestureV12internalBodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DelayedLongPressGesture : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(tvOS, unavailable)
  nonisolated public func onDelayedLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(tvOS, unavailable)
  nonisolated public func onDelayedLongPressGesture(minimumDuration: Swift.Double = 0.5, maximumDistance: CoreFoundation.CGFloat = 10, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onDelayedLongPressGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func onDelayedLongPressGesture(minimumDuration: Swift.Double = 0.5, perform action: @escaping () -> Swift.Void, onPressingChanged: ((Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func delay(phase: SwiftUI.CustomHoverEffectPhase, by duration: Foundation.TimeInterval?) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func delay(phase: SwiftUI.CustomHoverEffectPhase, by duration: Foundation.TimeInterval?) -> some SwiftUICore.CustomHoverEffect
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func _delay(phase toPhase: SwiftUI.CustomHoverEffectPhase, by duration: Foundation.TimeInterval?) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func _delay(phase toPhase: SwiftUI.CustomHoverEffectPhase, by duration: Foundation.TimeInterval?) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
extension SwiftUICore.View {
  @_spi(ClarityBoard) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func multimodalNavigationChrome(shouldDisplay: SwiftUICore.Binding<Swift.Bool>, isAdminModeEnabled: Swift.Bool, titles: [SwiftUI.MultimodalNavigationTitle], backButtonAction: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @_spi(ClarityBoard) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func multimodalNavigationChrome(shouldDisplay: SwiftUICore.Binding<Swift.Bool>, backButtonAction: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ClarityBoard) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func multimodalNavigationChrome(shouldDisplay: SwiftUICore.Binding<Swift.Bool> = .constant(true), bottomBarTransitionProgress: CoreFoundation.CGFloat? = nil, backButtonAction: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @_spi(ClarityBoard) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func multimodalNavigationChrome(shouldDisplay: SwiftUICore.Binding<Swift.Bool> = .constant(true), bottomBarTransitionProgress: CoreFoundation.CGFloat? = nil, backButtonAction: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func scrollsUnderMultimodalNavigationChrome(scrollInfo: SwiftUI.MultimodalNavigationChromeScrollInfo?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 17.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func scrollsUnderMultimodalNavigationChrome(scrollInfo: SwiftUI.MultimodalNavigationChromeScrollInfo?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct MultimodalNavigationChromeScrollInfo : Swift.Equatable, Swift.Sendable {
  @_spi(Private) public init(scrollView: UIKit.UIScrollView, representedView: UIKitCore.UIView)
  @_spi(Private) public static func == (a: SwiftUI.MultimodalNavigationChromeScrollInfo, b: SwiftUI.MultimodalNavigationChromeScrollInfo) -> Swift.Bool
}
@_spi(ClarityUI_InCallService) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MultimodalNavigationTitleLabelStyle : SwiftUI.LabelStyle {
  @_spi(ClarityUI_InCallService) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(ClarityUI_InCallService) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.MultimodalNavigationTitleLabelStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(ClarityUI_InCallService) @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI35MultimodalNavigationTitleLabelStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@_spi(ClarityUI_InCallService) @available(*, unavailable)
extension SwiftUI.MultimodalNavigationTitleLabelStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct MultimodalCustomKeyboardActionKeyData : Swift.Equatable {
  @_spi(Private) public let title: Swift.String
  @_spi(Private) public let systemImageName: Swift.String
  @_spi(Private) public let action: () -> Swift.Void
  @_spi(Private) public init(title: Swift.String, systemImageName: Swift.String, action: @escaping () -> Swift.Void)
  @_spi(Private) public static func == (lhs: SwiftUI.MultimodalCustomKeyboardActionKeyData, rhs: SwiftUI.MultimodalCustomKeyboardActionKeyData) -> Swift.Bool
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.MultimodalCustomKeyboardActionKeyData : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct MultimodalCustomKeyboardActionKey : SwiftUICore.PreferenceKey, Swift.Sendable {
  @_spi(Private) public static var defaultValue: SwiftUI.MultimodalCustomKeyboardActionKeyData?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public static func reduce(value: inout SwiftUI.MultimodalCustomKeyboardActionKeyData?, nextValue: () -> SwiftUI.MultimodalCustomKeyboardActionKeyData?)
  #else
  @_spi(Private) public static func reduce(value: inout SwiftUI.MultimodalCustomKeyboardActionKeyData?, nextValue: () -> SwiftUI.MultimodalCustomKeyboardActionKeyData?)
  #endif
  @_spi(Private) @available(iOS 17.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(macCatalyst, unavailable)
  public typealias Value = SwiftUI.MultimodalCustomKeyboardActionKeyData?
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct MultimodalChromeVisiblePreferenceKey : SwiftUICore.PreferenceKey, Swift.Sendable {
  @_spi(Private) public static var defaultValue: Swift.Bool
  @_spi(Private) public static func reduce(value: inout Swift.Bool, nextValue: () -> Swift.Bool)
  @_spi(Private) @available(iOS 17.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(macCatalyst, unavailable)
  public typealias Value = Swift.Bool
}
@_spi(ClarityUI_InCallService) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MultimodalNavigationBackButtonLabelStyle : SwiftUI.LabelStyle {
  @_spi(ClarityUI_InCallService) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(ClarityUI_InCallService) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.MultimodalNavigationBackButtonLabelStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(ClarityUI_InCallService) @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI40MultimodalNavigationBackButtonLabelStyleV8makeBody13configurationQrAA0gH13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MultimodalNavigationKeyboardLabelStyle : SwiftUI.LabelStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.MultimodalNavigationKeyboardLabelStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 17.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI38MultimodalNavigationKeyboardLabelStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@_spi(ClarityUI_InCallService) @available(*, unavailable)
extension SwiftUI.MultimodalNavigationBackButtonLabelStyle : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.MultimodalNavigationKeyboardLabelStyle : Swift.Sendable {
}
@_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func effectAppearance(_ phase: SwiftUI.CustomHoverEffectPhase?) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func effectAppearance(_ phase: SwiftUI.CustomHoverEffectPhase?) -> some SwiftUICore.CustomHoverEffect
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func _effectAppearance(_ phase: SwiftUI.CustomHoverEffectPhase?) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(Private) @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func _effectAppearance(_ phase: SwiftUI.CustomHoverEffectPhase?) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func confirmationDialog<A>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  nonisolated public func confirmationDialog<A>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func confirmationDialog<A, M>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, M>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  nonisolated public func confirmationDialog<A, M>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, @SwiftUICore.ViewBuilder actions: () -> A, @SwiftUICore.ViewBuilder message: () -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func confirmationDialog<A, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #else
  nonisolated public func confirmationDialog<A, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  #else
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func confirmationDialog<A, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #else
  nonisolated public func confirmationDialog<A, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A) -> some SwiftUICore.View where A : SwiftUICore.View
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func confirmationDialog<A, M, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #else
  nonisolated public func confirmationDialog<A, M, T>(_ titleKey: SwiftUICore.LocalizedStringKey, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, M, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  #else
  @_disfavoredOverload nonisolated public func confirmationDialog<S, A, M, T>(_ title: S, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where S : Swift.StringProtocol, A : SwiftUICore.View, M : SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func confirmationDialog<A, M, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #else
  nonisolated public func confirmationDialog<A, M, T>(_ title: SwiftUICore.Text, isPresented: SwiftUICore.Binding<Swift.Bool>, titleVisibility: SwiftUI.Visibility = .automatic, presenting data: T?, @SwiftUICore.ViewBuilder actions: (T) -> A, @SwiftUICore.ViewBuilder message: (T) -> M) -> some SwiftUICore.View where A : SwiftUICore.View, M : SwiftUICore.View
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct ContentUnavailableView<Label, Description, Actions> : SwiftUICore.View where Label : SwiftUICore.View, Description : SwiftUICore.View, Actions : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder description: () -> Description = { EmptyView() }, @SwiftUICore.ViewBuilder actions: () -> Actions = { EmptyView() })
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22ContentUnavailableViewV4bodyQrvp", 0) __<Label, Description, Actions>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ContentUnavailableView where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>, Description == SwiftUICore.Text?, Actions == SwiftUICore.EmptyView {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, image name: Swift.String, description: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, image name: Swift.String, description: SwiftUICore.Text? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, systemImage name: Swift.String, description: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, systemImage name: Swift.String, description: SwiftUICore.Text? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image name: Swift.String, description: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image name: Swift.String, description: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage name: Swift.String, description: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage name: Swift.String, description: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ContentUnavailableView where Label == SwiftUI.SearchUnavailableContent.Label, Description == SwiftUI.SearchUnavailableContent.Description, Actions == SwiftUI.SearchUnavailableContent.Actions {
  @_Concurrency.MainActor @preconcurrency public static var search: SwiftUI.ContentUnavailableView<SwiftUI.SearchUnavailableContent.Label, SwiftUI.SearchUnavailableContent.Description, SwiftUI.SearchUnavailableContent.Actions> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func search(text: Swift.String) -> SwiftUI.ContentUnavailableView<Label, Description, Actions>
}
@available(*, unavailable)
extension SwiftUI.ContentUnavailableView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct SearchUnavailableContent {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24SearchUnavailableContentV5LabelV4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor @preconcurrency public struct Description : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24SearchUnavailableContentV11DescriptionV4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor @preconcurrency public struct Actions : SwiftUICore.View {
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24SearchUnavailableContentV7ActionsV4bodyQrvp", 0) __
  }
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent.Description : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SearchUnavailableContent.Actions : Swift.Sendable {
}
package func isVisionInterfaceIdiom() -> Swift.Bool
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct OpenSettingsAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var openSettings: SwiftUI.OpenSettingsAction {
    get
  }
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public enum MapKitUpdate {
  @_spi(ForMapKitOnly) public static func ensure<T>(_ callback: () throws -> T) rethrows -> T
  @_spi(ForMapKitOnly) public static func enqueueAction(_ action: @escaping () -> Swift.Void)
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitUpdate : Swift.Sendable {
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
  nonisolated public func focusScope(_ namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
}
@available(iOS, unavailable)
@available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func _prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 12.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func _prefersDefaultFocus(_ prefersDefaultFocus: Swift.Bool = true, in namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func _focusScope(_ namespace: SwiftUICore.Namespace.ID) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct _DefaultFocusModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._DefaultFocusModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DefaultFocusModifier : Swift.Sendable {
}
@available(macOS 11.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct _FocusSystem {
  @available(macOS, introduced: 11.0, deprecated: 11.0, message: "Prototype SPI, do not use.")
  public func resetToDefault()
}
@available(*, unavailable)
extension SwiftUI._FocusSystem : Swift.Sendable {
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(visionOS, unavailable)
public struct ResetFocusAction {
  public func callAsFunction(in namespace: SwiftUICore.Namespace.ID)
}
@available(*, unavailable)
extension SwiftUI.ResetFocusAction : Swift.Sendable {
}
@available(macOS 12.0, tvOS 14.0, watchOS 7.0, *)
@available(iOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var resetFocus: SwiftUI.ResetFocusAction {
    get
  }
}
@_spi(Private) @available(iOS 16.0, macOS 12.0, tvOS 14.0, watchOS 7.0, *)
public struct _ResetFocusAction {
  @_spi(Private) public func callAsFunction(in namespace: SwiftUICore.Namespace.ID)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._ResetFocusAction : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 12.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var _resetFocus: SwiftUI._ResetFocusAction {
    @_spi(Private) get
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var _focusSystem: SwiftUI._FocusSystem {
    get
    set
  }
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _ControlWidgetAdaptor<Base> : SwiftUI.Widget where Base : SwiftUI.ControlWidget {
  nonisolated public init()
  nonisolated public init(_ base: Base)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.WidgetConfiguration {
    get
  }
  @available(iOS 18.0, *)
  @_spi_available(tvOS, unavailable, introduced: 17.0)
  @available(watchOS, unavailable, introduced: 9.0)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21_ControlWidgetAdaptorV4bodyQrvp", 0) __<Base>
}
@available(*, unavailable)
extension SwiftUI._ControlWidgetAdaptor : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 13.0, tvOS 15.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) @inlinable nonisolated public func listItemReuseIdentifier(_ identifier: Swift.String) -> some SwiftUICore.View {
        _trait(ListItemReuseIdentifierTrait.self, identifier)
    }
  
}
@available(iOS 15.0, macOS 13.0, tvOS 15.0, watchOS 7.0, *)
@usableFromInline
internal struct ListItemReuseIdentifierTrait : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.String {
    get { "ListCell" }
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 7.0, macOS 13.0, *)
  @usableFromInline
  internal typealias Value = Swift.String
}
@available(*, unavailable)
extension SwiftUI.ListItemReuseIdentifierTrait : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.Gesture {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public func modifiers(_ modifiers: SwiftUICore.EventModifiers) -> SwiftUI._ModifiersGesture<Self>
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _ModifiersGesture<Content> : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture where Content : SwiftUICore.Gesture {
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI._ModifiersGesture<Content>>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Content.Value>
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Value = Content.Value
}
@available(*, unavailable)
extension SwiftUI._ModifiersGesture : Swift.Sendable {
}
@available(tvOS 14.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.CardButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var card: SwiftUI.CardButtonStyle {
    get { .init() }
  }
}
@available(tvOS 14.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CardButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CardButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(tvOS 14.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15CardButtonStyleV8makeBody13configurationQrAA09PrimitivedE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.CardButtonStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func commandsRemoved() -> some SwiftUI.Scene
  
  nonisolated public func commandsReplaced<Content>(@SwiftUI.CommandsBuilder content: () -> Content) -> some SwiftUI.Scene where Content : SwiftUI.Commands
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _DigitalCrownModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._DigitalCrownModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(watchOS 6.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DigitalCrownModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol FileDocument {
  static var readableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  static var writableContentTypes: [UniformTypeIdentifiers.UTType] { get }
  init(configuration: Self.ReadConfiguration) throws
  typealias ReadConfiguration = SwiftUI.FileDocumentReadConfiguration
  func fileWrapper(configuration: Self.WriteConfiguration) throws -> Foundation.FileWrapper
  typealias WriteConfiguration = SwiftUI.FileDocumentWriteConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.FileDocument {
  public static var writableContentTypes: [UniformTypeIdentifiers.UTType] {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup where Document : SwiftUI.FileDocument {
  nonisolated public init(newDocument: @autoclosure @escaping () -> Document, @SwiftUICore.ViewBuilder editor: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
  nonisolated public init(viewing documentType: Document.Type, @SwiftUICore.ViewBuilder viewer: @escaping (SwiftUI.FileDocumentConfiguration<Document>) -> Content)
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FileDocumentConfiguration<Document> where Document : SwiftUI.FileDocument {
  @SwiftUICore.Binding @_projectedValueProperty($document) public var document: Document {
    get
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating set
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    nonmutating _modify
  }
  public var $document: SwiftUICore.Binding<Document> {
    get
  }
  public var fileURL: Foundation.URL?
  public var isEditable: Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.FileDocumentConfiguration : Swift.Sendable {
}
@_spi(Widget) @available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct WidgetCurvesContentModifier : SwiftUICore.ViewModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public var curvesContent: Swift.Bool
  @_spi(Widget) nonisolated public init(curvesContent: Swift.Bool)
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.WidgetCurvesContentModifier.Content) -> some SwiftUICore.View
  
  @_spi(Widget) @available(iOS 17.0, watchOS 10.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27WidgetCurvesContentModifierV4body7contentQrAA05_Viewf1_E0VyACG_tF", 0) __
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.WidgetCurvesContentModifier : Swift.Sendable {
}
@_spi(Widget) @available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
public struct WidgetAuxiliaryCurvedContentKey : SwiftUICore.HostPreferenceKey {
  @_spi(Widget) public static var defaultValue: SwiftUI.WidgetAuxiliaryViewMetadata?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Widget) public static func reduce(value: inout SwiftUI.WidgetAuxiliaryViewMetadata?, nextValue: () -> SwiftUI.WidgetAuxiliaryViewMetadata?)
  #else
  @_spi(Widget) public static func reduce(value: inout SwiftUI.WidgetAuxiliaryViewMetadata?, nextValue: () -> SwiftUI.WidgetAuxiliaryViewMetadata?)
  #endif
  @_spi(Widget) @available(iOS 17.0, watchOS 10.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Value = SwiftUI.WidgetAuxiliaryViewMetadata?
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.WidgetAuxiliaryCurvedContentKey : Swift.Sendable {
}
@_spi(Widget) @available(iOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Widget) nonisolated public func widgetCurvedContentAllowed() -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct Grid<Content> : SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _tree: SwiftUICore._VariadicView.Tree<SwiftUI.GridLayout, Content>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        let root = GridLayout(alignment: alignment,
            horizontalSpacing: horizontalSpacing,
            verticalSpacing: verticalSpacing)
        _tree = .init(root) { content() }
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        let root = GridLayout(alignment: alignment,
            horizontalSpacing: horizontalSpacing,
            verticalSpacing: verticalSpacing)
        _tree = .init(root) { content() }
    }
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.Grid<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.Grid : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct GridRow<Content> : SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var alignment: SwiftUICore.VerticalAlignment?
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var content: Content
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.VerticalAlignment? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.alignment = alignment
        self.content = content()
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(alignment: SwiftUICore.VerticalAlignment? = nil, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.alignment = alignment
        self.content = content()
    }
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.GridRow<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.GridRow<Content>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.GridRow : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func gridCellColumns(_ count: Swift.Int) -> some SwiftUICore.View {
        return modifier(_GridCellSizeModifier(
            count: count, axis: .horizontal))
    }
  
  @inlinable nonisolated public func gridCellAnchor(_ anchor: SwiftUICore.UnitPoint) -> some SwiftUICore.View {
        return modifier(_GridAnchorModifier(anchor: anchor))
    }
  
  @inlinable nonisolated public func gridColumnAlignment(_ guide: SwiftUICore.HorizontalAlignment) -> some SwiftUICore.View {
        return modifier(_GridAlignmentModifier(alignment: guide.key))
    }
  
  @inlinable nonisolated public func gridCellUnsizedAxes(_ axes: SwiftUICore.Axis.Set) -> some SwiftUICore.View {
        return modifier(_GridUnsizedAxesModifier(axes: axes))
    }
  
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @_spi(_) @inlinable nonisolated public func gridCell(x: Swift.Range<Swift.Int>, y: Swift.Range<Swift.Int>) -> some SwiftUICore.View {
        return modifier(_GridCellRangeModifier(
            horizontal: Int32(x.lowerBound) ..< Int32(x.upperBound),
            vertical: Int32(y.lowerBound) ..< Int32(y.upperBound)))
    }
  
  @_spi(_) @inlinable nonisolated public func gridRowAlignment(_ guide: SwiftUICore.VerticalAlignment) -> some SwiftUICore.View {
        return modifier(_GridAlignmentModifier(alignment: guide.key))
    }
  
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GridCellRangeModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier {
  @_spi(_) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var horizontal: Swift.Range<Swift.Int32>
  @_spi(_) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var vertical: Swift.Range<Swift.Int32>
  @_spi(_) @inlinable @_Concurrency.MainActor @preconcurrency internal init(horizontal: Swift.Range<Swift.Int32>, vertical: Swift.Range<Swift.Int32>) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
  @_spi(_) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridCellRangeModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(_) nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridCellRangeModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GridCellSizeModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var count: Swift.Int
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var axis: SwiftUICore.Axis
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(count: Swift.Int, axis: SwiftUICore.Axis) {
        self.count = count
        self.axis = axis
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridCellSizeModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridCellSizeModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GridAnchorModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var anchor: SwiftUICore.UnitPoint
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(anchor: SwiftUICore.UnitPoint) { self.anchor = anchor }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridAnchorModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridAnchorModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GridAlignmentModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var alignment: SwiftUICore.AlignmentKey
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(alignment: SwiftUICore.AlignmentKey) { self.alignment = alignment }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridAlignmentModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridAlignmentModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _GridUnsizedAxesModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var axes: SwiftUICore.Axis.Set
  @inlinable @_Concurrency.MainActor @preconcurrency internal init(axes: SwiftUICore.Axis.Set) { self.axes = axes }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._GridUnsizedAxesModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._GridUnsizedAxesModifier>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen public struct GridLayout : SwiftUICore._VariadicView.UnaryViewRoot {
  public var alignment: SwiftUICore.Alignment
  public var horizontalSpacing: CoreFoundation.CGFloat?
  public var verticalSpacing: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.horizontalSpacing = horizontalSpacing
        self.verticalSpacing = verticalSpacing
    }
  #else
  @inlinable public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.horizontalSpacing = horizontalSpacing
        self.verticalSpacing = verticalSpacing
    }
  #endif
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI.GridLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridLayout : SwiftUICore.Layout {
  public func makeCache(subviews: SwiftUI.GridLayout.Subviews) -> SwiftUI.GridLayout.Cache
  public func updateCache(_ cache: inout SwiftUI.GridLayout.Cache, subviews: SwiftUI.GridLayout.Subviews)
  public func spacing(subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> SwiftUICore.ViewSpacing
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.HorizontalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGFloat?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGFloat?
  #else
  public func explicitAlignment(of guide: SwiftUICore.VerticalAlignment, in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.GridLayout.Subviews, cache: inout SwiftUI.GridLayout.Cache) -> CoreFoundation.CGFloat?
  #endif
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated)
@frozen public struct _GridLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {
  @_spi(_) public var alignment: SwiftUICore.Alignment
  @_spi(_) public var horizontalSpacing: CoreFoundation.CGFloat?
  @_spi(_) public var verticalSpacing: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @inlinable public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.horizontalSpacing = horizontalSpacing
        self.verticalSpacing = verticalSpacing
    }
  #else
  @_spi(_) @inlinable public init(alignment: SwiftUICore.Alignment = .center, horizontalSpacing: CoreFoundation.CGFloat? = nil, verticalSpacing: CoreFoundation.CGFloat? = nil) {
        self.alignment = alignment
        self.horizontalSpacing = horizontalSpacing
        self.verticalSpacing = verticalSpacing
    }
  #endif
  @_spi(_) nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI._GridLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(*, deprecated)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(*, deprecated)
  public typealias Body = Swift.Never
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated)
extension SwiftUI._GridLayout : SwiftUICore.DerivedLayout {
  @_spi(_) package var base: SwiftUI.GridLayout {
    @_spi(_) get
  }
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(*, deprecated)
  package typealias Base = SwiftUI.GridLayout
  @_spi(_) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(*, deprecated)
  public typealias Cache = SwiftUI.GridLayout.Cache
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridLayout {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public struct Cache {
  }
}
@available(*, unavailable)
extension SwiftUI.GridLayout.Cache : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct SearchField<Control> : SwiftUICore.View where Control : SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11SearchFieldV4bodyQrvp", 0) __<Control>
}
@_spi(Private) extension SwiftUI.SearchField {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) where Control == SwiftUI.SearchFieldTokenControl<C, T>, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (C.Element) -> T) where Control == SwiftUI.SearchFieldTokenControl<C, T>, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> T) where Control == SwiftUI.SearchFieldTokenControl<C, T>, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public init<C, T>(text: SwiftUICore.Binding<Swift.String>, tokens: SwiftUICore.Binding<C>, prompt: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder token: @escaping (SwiftUICore.Binding<C.Element>) -> T) where Control == SwiftUI.SearchFieldTokenControl<C, T>, C : Swift.RandomAccessCollection, C : Swift.RangeReplaceableCollection, T : SwiftUICore.View, C.Element : Swift.Identifiable
  #endif
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct SearchFieldTokenControl<Data, Token> : SwiftUICore.View where Data : Swift.RandomAccessCollection, Data : Swift.RangeReplaceableCollection, Token : SwiftUICore.View, Data.Element : Swift.Identifiable {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI23SearchFieldTokenControlV4bodyQrvp", 0) __<Data, Token>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SearchField : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.SearchFieldTokenControl : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(ForMapKitOnly) @_Concurrency.MainActor @preconcurrency public static func makeMapKitView(inputs: SwiftUICore._ViewInputs, _ makeChild: (SwiftUI.MapKitGraphInputs, SwiftUICore._ViewInputs) -> Any) -> Any
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.MapKitViewTraitCollection {
  @_spi(ForMapKitOnly) public mutating func updateTraitKeysWithForEach<ID>(contentID: Swift.Int, id: ID, offset: Swift.Int, isConstant: Swift.Bool) where ID : Swift.Hashable
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _EventDirections : Swift.OptionSet {
  public let rawValue: Swift.Int8
  public init(rawValue: Swift.Int8)
  public static let left: SwiftUI._EventDirections
  public static let right: SwiftUI._EventDirections
  public static let up: SwiftUI._EventDirections
  public static let down: SwiftUI._EventDirections
  public static let horizontal: SwiftUI._EventDirections
  public static let vertical: SwiftUI._EventDirections
  public static let all: SwiftUI._EventDirections
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ArrayLiteralElement = SwiftUI._EventDirections
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = SwiftUI._EventDirections
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias RawValue = Swift.Int8
}
@available(*, unavailable)
extension SwiftUI._EventDirections : Swift.Sendable {
}
@_spi(Private) @available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func sidebarState(isCollapsed: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func fixedSidebar(_ isFixed: Swift.Bool = true) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func resizesContainerOnCollapse(_ resizesContainer: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public var defaultWheelPickerItemHeight: CoreFoundation.CGFloat {
    get
    set
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @inlinable nonisolated public func defaultWheelPickerItemHeight(_ height: CoreFoundation.CGFloat) -> some SwiftUICore.View {
        return environment(\.defaultWheelPickerItemHeight, height)
    }
  
}
extension SwiftUICore.View {
  @_spi(ForSettingsOnly) @available(iOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func platformNavigationPresentationBridgingEnabled(_ enabled: Swift.Bool) -> some SwiftUICore.View
  
}
@_spi(DoNotImport) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public func inferToolbar() -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  nonisolated public func backgroundTask<D, R>(_ task: SwiftUI.BackgroundTask<D, R>, action: @escaping @Sendable (D) async -> R) -> some SwiftUI.Scene where D : Swift.Sendable, R : Swift.Sendable
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct BackgroundTask<Request, Response> : Swift.Sendable {
  @_spi(Private) public init<T>(_ task: T) where Request == T.Request, Response == T.Response, T : SwiftUI.BackgroundTaskProtocol
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.BackgroundTask {
  public static var urlSession: SwiftUI.BackgroundTask<Swift.String, Swift.Void> {
    get
  }
  public static func urlSession(_ identifier: Swift.String) -> SwiftUI.BackgroundTask<Swift.Void, Swift.Void>
  public static func urlSession(matching: @escaping @Sendable (Swift.String) -> Swift.Bool) -> SwiftUI.BackgroundTask<Swift.String, Swift.Void>
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static var appRefresh: SwiftUI.BackgroundTask<Swift.String?, Swift.Void> {
    get
  }
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static var appRefresh: SwiftUI.BackgroundTask<Swift.String?, Swift.Void> {
    get
  }
  #endif
  @available(macOS, unavailable)
  public static func appRefresh(_ identifier: Swift.String) -> SwiftUI.BackgroundTask<Swift.Void, Swift.Void>
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.WidgetConfiguration {
  nonisolated public func backgroundTask<D, R>(_ task: SwiftUI.BackgroundTask<D, R>, action: @escaping @Sendable (D) async -> R) -> some SwiftUI.WidgetConfiguration where D : Swift.Sendable, R : Swift.Sendable
  
}
@_spi(Widget) @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol BackgroundTaskProtocol : Swift.Sendable {
  associatedtype Request : Swift.Sendable = Swift.Void
  associatedtype Response : Swift.Sendable = Swift.Void
  associatedtype RequestIdentifier : Swift.Sendable = Self.Request
  @_spi(Widget) @_spi(Private) func register()
  @_spi(Widget) @_spi(Private) static var taskIdentifier: Swift.String { get }
  @_spi(Widget) @_spi(Private) func predicate(_ data: Self.RequestIdentifier) -> Swift.Bool
  @_spi(Widget) @_spi(Private) static func reduce(_ first: Self.Response, _ second: Self.Response) -> Self.Response
  @_spi(Widget) @_spi(Private) static var defaultResponse: Self.Response { get }
}
@_spi(Widget) @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.BackgroundTaskProtocol {
  @_spi(Widget) @_spi(Private) public func register()
  @_spi(Widget) @_spi(Private) public func predicate(_ data: Self.RequestIdentifier) -> Swift.Bool
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.BackgroundTaskProtocol where Self.Request == Self.RequestIdentifier {
  @_spi(Private) public static func runTasks(_ data: Self.Request) async -> Self.Response
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.BackgroundTaskProtocol where Self.Request == () {
  @_spi(Private) public static func runTasks(identifier: Self.RequestIdentifier) async -> Self.Response
}
@_spi(Private) @_spi(Widget) @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.BackgroundTaskProtocol {
  @_spi(Private) @_spi(Widget) public static func runTasks(from host: SwiftUI.WidgetBundleHost) -> @Sendable (Self.Request, Self.RequestIdentifier) async -> Self.Response
  @_spi(Private) @_spi(Widget) public static func runTasks<C>(from host: SwiftUI.WidgetHost<C>) -> @Sendable (Self.Request, Self.RequestIdentifier) async -> Self.Response where C : SwiftUI.Widget
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.BackgroundTaskProtocol where Self.Response == () {
  @_spi(Private) public static func reduce(_ first: Self.Response, _ second: Self.Response) -> Self.Response
  @_spi(Private) public static var defaultResponse: () {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct URLSessionBackgroundTask : SwiftUI.BackgroundTaskProtocol {
  @_spi(Private) public typealias Request = Swift.Void
  @_spi(Private) public func predicate(_ data: Swift.String) -> Swift.Bool
  @_spi(Private) public static var taskIdentifier: Swift.String {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias RequestIdentifier = Swift.String
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Response = ()
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct UnidentifiedURLSessionBackgroundTask : SwiftUI.BackgroundTaskProtocol {
  @_spi(Private) public typealias Request = Swift.String
  @_spi(Private) public func predicate(_ data: Swift.String) -> Swift.Bool
  @_spi(Private) public static var taskIdentifier: Swift.String {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias RequestIdentifier = Swift.String
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Response = ()
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func accessibilityAutomationType(_ rawAutomationType: Swift.UInt64) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func accessibilityAutomationType(_ rawAutomationType: Swift.UInt64) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension libAccessibilityPrivate.AXAutomationType : @retroactive SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.UInt64 {
    get
  }
  package static func unwrap(codingProxy rawValue: Swift.UInt64) -> libAccessibilityPrivate.AXAutomationType
  @available(iOS 13.0, *)
  package typealias CodingProxy = Swift.UInt64
}
#else
extension libAccessibilityPrivate.AXAutomationType : SwiftUICore.CodableByProxy {
  package var codingProxy: Swift.UInt64 {
    get
  }
  package static func unwrap(codingProxy rawValue: Swift.UInt64) -> libAccessibilityPrivate.AXAutomationType
  @available(iOS 13.0, *)
  package typealias CodingProxy = Swift.UInt64
}
#endif
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct NSHostingSceneBridgingOptions : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let title: SwiftUI.NSHostingSceneBridgingOptions
  @_spi(Private) @available(*, deprecated, renamed: "title")
  public static let titles: SwiftUI.NSHostingSceneBridgingOptions
  public static let toolbars: SwiftUI.NSHostingSceneBridgingOptions
  public static let all: SwiftUI.NSHostingSceneBridgingOptions
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.NSHostingSceneBridgingOptions
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Element = SwiftUI.NSHostingSceneBridgingOptions
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias RawValue = Swift.Int
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct PencilPreferredAction : Swift.Hashable {
  public static let switchEraser: SwiftUI.PencilPreferredAction
  public static let switchPrevious: SwiftUI.PencilPreferredAction
  public static let showColorPalette: SwiftUI.PencilPreferredAction
  public static let showInkAttributes: SwiftUI.PencilPreferredAction
  public static let showContextualPalette: SwiftUI.PencilPreferredAction
  public static let runSystemShortcut: SwiftUI.PencilPreferredAction
  public static let ignore: SwiftUI.PencilPreferredAction
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.PencilPreferredAction, b: SwiftUI.PencilPreferredAction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PencilPreferredAction : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var preferredPencilDoubleTapAction: SwiftUI.PencilPreferredAction {
    get
  }
}
@available(iOS 17.5, macOS 14.5, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var preferredPencilSqueezeAction: SwiftUI.PencilPreferredAction {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public class _PreviewHost : Combine.ObservableObject {
  final public let objectWillChange: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  public var environment: SwiftUICore.EnvironmentValues
  public var focusedValues: SwiftUI.FocusedValues
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func makeHost(providerType: any Any.Type) -> SwiftUI._PreviewHost?
  #else
  public static func makeHost(providerType: any Any.Type) -> SwiftUI._PreviewHost?
  #endif
  public func invalidatePreviews()
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public static func makeHost<T>(content: T) -> SwiftUI._PreviewHost where T : SwiftUICore.View
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  final public func updateContent<T>(_ content: T) where T : SwiftUICore.View
  public func invalidateEverything()
  public var previews: [SwiftUI._Preview] {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ObjectWillChangePublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @objc deinit
}
@available(*, unavailable)
extension SwiftUI._PreviewHost : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
@available(watchOS, unavailable)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
public struct DoubleColumnNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, unavailable, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI31DoubleColumnNavigationViewStyleV5_body13configurationQrAA01_efG13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(watchOS, unavailable, introduced: 7.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace styled NavigationView with NavigationStack or NavigationSplitView instead")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI31DoubleColumnNavigationViewStyleV16_columnBasedBody13configurationQrAA01_efG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DoubleColumnNavigationViewStyle : Swift.Sendable {
}
@_spi(Private_Selection) public protocol Selection {
  @_spi(Private_Selection) var isEmpty: Swift.Bool { get }
  @_spi(Private_Selection) var allowsMultiple: Swift.Bool { get }
  @_spi(Private_Selection) var count: Swift.Int { get }
  @_spi(Private_Selection) func contains<T>(id: T) -> Swift.Bool where T : Swift.Hashable
  @_spi(Private_Selection) func apply<T>(as type: T.Type, operation: (T) -> Swift.Void) where T : Swift.Hashable
}
#if compiler(>=5.3) && $NoncopyableGenerics
@_spi(Private_Selection) extension Swift.Optional : SwiftUI.Selection where Wrapped : Swift.Hashable {
  @_spi(Private_Selection) public var isEmpty: Swift.Bool {
    @_spi(Private_Selection) get
  }
  @_spi(Private_Selection) public var allowsMultiple: Swift.Bool {
    @_spi(Private_Selection) get
  }
  @_spi(Private_Selection) public var count: Swift.Int {
    @_spi(Private_Selection) get
  }
  @_spi(Private_Selection) public func contains<T>(id: T) -> Swift.Bool where T : Swift.Hashable
  @_spi(Private_Selection) public func apply<T>(as type: T.Type, operation: (T) -> Swift.Void) where T : Swift.Hashable
}
#else
@_spi(Private_Selection) extension Swift.Optional : SwiftUI.Selection where Wrapped : Swift.Hashable {
  @_spi(Private_Selection) public var isEmpty: Swift.Bool {
    @_spi(Private_Selection) get
  }
  @_spi(Private_Selection) public var allowsMultiple: Swift.Bool {
    @_spi(Private_Selection) get
  }
  @_spi(Private_Selection) public var count: Swift.Int {
    @_spi(Private_Selection) get
  }
  @_spi(Private_Selection) public func contains<T>(id: T) -> Swift.Bool where T : Swift.Hashable
  @_spi(Private_Selection) public func apply<T>(as type: T.Type, operation: (T) -> Swift.Void) where T : Swift.Hashable
}
#endif
@_spi(Private_Selection) extension Swift.Set : SwiftUI.Selection {
  @_spi(Private_Selection) public var allowsMultiple: Swift.Bool {
    @_spi(Private_Selection) get
  }
  @_spi(Private_Selection) public func contains<T>(id: T) -> Swift.Bool where T : Swift.Hashable
  @_spi(Private_Selection) public func apply<T>(as type: T.Type, operation: (T) -> Swift.Void) where T : Swift.Hashable
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private_Selection) public var isSelected: Swift.Bool {
    get
  }
  @_spi(Private_Selection) public var isSelectable: Swift.Bool {
    get
  }
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct HelpLink : SwiftUICore.View {
  nonisolated public init(action: @escaping () -> Swift.Void)
  nonisolated public init(destination: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(macOS 14.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI8HelpLinkV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.HelpLink : Swift.Sendable {
}
@_spi(Private) @available(iOS, unavailable)
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "HelpLink")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct HelpButton : SwiftUICore.View {
  @_spi(Private) nonisolated public init(action: @escaping () -> Swift.Void)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS, unavailable, introduced: 13.0, renamed: "HelpLink")
  @available(tvOS, unavailable, introduced: 13.0, renamed: "HelpLink")
  @available(watchOS, unavailable, introduced: 6.0, renamed: "HelpLink")
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "HelpLink")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10HelpButtonV4bodyQrvp", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.HelpButton : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func toolbar<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  nonisolated public func toolbar<Content>(@SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUI.ToolbarContent
  
  nonisolated public func toolbar<Content>(id: Swift.String, @SwiftUI.ToolbarContentBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUI.CustomizableToolbarContent
  
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ShareLink<Data, PreviewImage, PreviewIcon, Label> : SwiftUICore.View where Data : Swift.RandomAccessCollection, PreviewImage : CoreTransferable.Transferable, PreviewIcon : CoreTransferable.Transferable, Label : SwiftUICore.View, Data.Element : CoreTransferable.Transferable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI9ShareLinkV4bodyQrvp", 0) __<Data, PreviewImage, PreviewIcon, Label>
}
@available(*, unavailable)
extension SwiftUI.ShareLink : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #else
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Data.Element == Foundation.URL {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Data.Element == Swift.String {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<Foundation.URL>
  #else
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<Foundation.URL>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<Swift.String>
  #else
  nonisolated public init(item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder label: () -> Label) where Data == Swift.CollectionOfOne<Swift.String>
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultShareLinkLabel : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21DefaultShareLinkLabelV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultShareLinkLabel : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where Label == SwiftUI.DefaultShareLinkLabel {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  #else
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>, onPresentationChanged: ((Swift.Bool) -> Swift.Void)?)
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>, onPresentationChanged: ((Swift.Bool) -> Swift.Void)?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  #else
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: @escaping (Data.Element) -> SwiftUI.SharePreview<PreviewImage, PreviewIcon>)
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where Label == SwiftUI.DefaultShareLinkLabel {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #else
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>, onPresentationChanged: ((Swift.Bool) -> Swift.Void)?) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  nonisolated public init<I>(item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>, onPresentationChanged: ((Swift.Bool) -> Swift.Void)?) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<I>(_ titleKey: SwiftUICore.LocalizedStringKey, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #else
  nonisolated public init<I>(_ titleKey: SwiftUICore.LocalizedStringKey, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S, I>(_ title: S, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, S : Swift.StringProtocol, I : CoreTransferable.Transferable
  #else
  @_disfavoredOverload nonisolated public init<S, I>(_ title: S, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, S : Swift.StringProtocol, I : CoreTransferable.Transferable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<I>(_ title: SwiftUICore.Text, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #else
  nonisolated public init<I>(_ title: SwiftUICore.Text, item: I, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, preview: SwiftUI.SharePreview<PreviewImage, PreviewIcon>) where Data == Swift.CollectionOfOne<I>, I : CoreTransferable.Transferable
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Label == SwiftUI.DefaultShareLinkLabel, Data.Element == Foundation.URL {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Label == SwiftUI.DefaultShareLinkLabel, Data.Element == Swift.String {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #else
  nonisolated public init(_ title: SwiftUICore.Text, items: Data, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil)
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.ShareLink where PreviewImage == Swift.Never, PreviewIcon == Swift.Never, Label == SwiftUI.DefaultShareLinkLabel {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  #else
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  #else
  nonisolated public init(item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>, S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>, S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>, S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>, S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  #else
  nonisolated public init(_ title: SwiftUICore.Text, item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Foundation.URL>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  #else
  nonisolated public init(_ title: SwiftUICore.Text, item: Swift.String, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil) where Data == Swift.CollectionOfOne<Swift.String>
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, onPresentationChanged: ((Swift.Bool) -> Swift.Void)?) where Data == Swift.CollectionOfOne<Foundation.URL>
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, watchOS 11.0, *)
  @available(tvOS, unavailable)
  nonisolated public init(item: Foundation.URL, subject: SwiftUICore.Text? = nil, message: SwiftUICore.Text? = nil, onPresentationChanged: ((Swift.Bool) -> Swift.Void)?) where Data == Swift.CollectionOfOne<Foundation.URL>
  #endif
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_spi_available(iOS, introduced: 17.0)
@_spi_available(tvOS, introduced: 17.0)
@_spi_available(watchOS, introduced: 10.0)
@_spi_available(visionOS, introduced: 1.0)
public protocol WindowToolbarStyle {
  associatedtype _Body : SwiftUICore.View
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  static func _makeInputs(style: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._GraphInputs)
  @_spi(Private) func configureWindowToolbar(_ window: Swift.AnyObject)
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_spi_available(iOS, introduced: 17.0)
@_spi_available(tvOS, introduced: 17.0)
@_spi_available(watchOS, introduced: 10.0)
@_spi_available(visionOS, introduced: 1.0)
extension SwiftUI.WindowToolbarStyle {
  @_spi(Private) public func configureWindowToolbar(_ window: Swift.AnyObject)
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_spi_available(iOS, introduced: 17.0)
@_spi_available(tvOS, introduced: 17.0)
@_spi_available(watchOS, introduced: 10.0)
@_spi_available(visionOS, introduced: 1.0)
extension SwiftUI.WindowToolbarStyle {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public static func _makeInputs(style: SwiftUICore._GraphValue<Self>, inputs: inout SwiftUICore._GraphInputs)
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_spi_available(iOS, introduced: 17.0)
@_spi_available(tvOS, introduced: 17.0)
@_spi_available(watchOS, introduced: 10.0)
@_spi_available(visionOS, introduced: 1.0)
extension SwiftUI.Scene {
  nonisolated public func windowToolbarStyle<S>(_ style: S) -> some SwiftUI.Scene where S : SwiftUI.WindowToolbarStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func presentedWindowToolbarStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.WindowToolbarStyle
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where C : SwiftUI.Commands {
        content
    }
  #else
  @_alwaysEmitIntoClient public static func buildIf<C>(_ content: C?) -> C? where C : SwiftUI.Commands {
        content
    }
  #endif
  @_alwaysEmitIntoClient public static func buildEither<T, F>(first: T) -> SwiftUICore._ConditionalContent<T, F> where T : SwiftUI.Commands, F : SwiftUI.Commands {
        _ConditionalContent<T, F>(storage: .trueContent(first))
    }
  @_alwaysEmitIntoClient public static func buildEither<T, F>(second: F) -> SwiftUICore._ConditionalContent<T, F> where T : SwiftUI.Commands, F : SwiftUI.Commands {
        _ConditionalContent<T, F>(storage: .falseContent(second))
    }
  @available(iOS 17.5, macOS 14.5, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ content: any SwiftUI.Commands) -> some SwiftUI.Commands {
        if #unavailable(iOS 17.5, macOS 14.5) {
            return EmptyCommands()
        } else {
            return LimitedAvailabilityCommandContent(erasing: content)
        }
    }
  
  @available(iOS, deprecated: 16.0, obsoleted: 17.5, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 17.5, *)' or newer instead")
  @available(macOS, deprecated: 13.0, obsoleted: 14.5, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 14.5, *)' or newer instead")
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<C>(_ content: C) -> some SwiftUI.Commands where C : SwiftUI.Commands {
        content
    }
  
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._ConditionalContent : SwiftUI.Commands where TrueContent : SwiftUI.Commands, FalseContent : SwiftUI.Commands {
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @usableFromInline
  internal init(storage: SwiftUICore._ConditionalContent<TrueContent, FalseContent>.Storage)
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.Commands where Wrapped : SwiftUI.Commands {
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
#else
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Optional : SwiftUI.Commands where Wrapped : SwiftUI.Commands {
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = Swift.Never
}
#endif
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetConfiguration {
  @_spi(Widget) nonisolated public func preference<K>(key _: K.Type = K.self, value: K.Value) -> some SwiftUI.ControlWidgetConfiguration where K : SwiftUICore.PreferenceKey
  
  @_spi(Widget) nonisolated public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.ControlWidgetConfiguration where K : SwiftUICore.PreferenceKey
  
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetControlConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
extension SwiftUICore.EdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ nsEdgeInsets: UIKit.NSDirectionalEdgeInsets)
}
extension UIKit.NSDirectionalEdgeInsets {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, *)
  @available(watchOS, unavailable)
  public init(_ edgeInsets: SwiftUICore.EdgeInsets)
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol AnyDefaultStyle {
  @_spi(UIFrameworks) init()
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DragReorderableVStack<Content, Placeholder> : SwiftUICore.View where Content : SwiftUICore.View, Placeholder : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, padding: SwiftUICore.EdgeInsets? = nil, contentTypes: [UniformTypeIdentifiers.UTType], insertionPlaceholder: SwiftUICore.Binding<Placeholder?>, delegate: any SwiftUI.DragReorderableDelegate, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, padding: SwiftUICore.EdgeInsets? = nil, contentTypes: [UniformTypeIdentifiers.UTType], insertionPlaceholder: SwiftUICore.Binding<Placeholder?>, delegate: any SwiftUI.DragReorderableDelegate, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI21DragReorderableVStackV4bodyQrvp", 0) __<Content, Placeholder>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DragReorderableVStack : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DragReorderableLazyVStack<Content, Placeholder> : SwiftUICore.View where Content : SwiftUICore.View, Placeholder : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, padding: SwiftUICore.EdgeInsets? = nil, contentTypes: [UniformTypeIdentifiers.UTType], insertionPlaceholder: SwiftUICore.Binding<Placeholder?>, delegate: any SwiftUI.DragReorderableDelegate, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, padding: SwiftUICore.EdgeInsets? = nil, contentTypes: [UniformTypeIdentifiers.UTType], insertionPlaceholder: SwiftUICore.Binding<Placeholder?>, delegate: any SwiftUI.DragReorderableDelegate, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI25DragReorderableLazyVStackV4bodyQrvp", 0) __<Content, Placeholder>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DragReorderableLazyVStack : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.3, macOS 12.3, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func dragSourceProxy() -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func navigationTitle(_ title: SwiftUICore.Text) -> some SwiftUICore.View
  
  nonisolated public func navigationTitle(_ titleKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func navigationTitle<S>(_ title: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func navigationTitle<V>(@SwiftUICore.ViewBuilder _ title: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func navigationTitle<Icon>(_ title: SwiftUICore.Text, icon: Icon) -> some SwiftUICore.View where Icon : SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  nonisolated public func navigationTitle<I>(_ titleKey: SwiftUICore.LocalizedStringKey, icon: I) -> some SwiftUICore.View where I : SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  @_disfavoredOverload nonisolated public func navigationTitle<S, I>(_ title: S, icon: I) -> some SwiftUICore.View where S : Swift.StringProtocol, I : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
  nonisolated public func navigationTitle(_ title: SwiftUICore.Binding<Swift.String>) -> some SwiftUICore.View
  
}
@available(iOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func navigationBarTitleDisplayMode(_ displayMode: SwiftUI.NavigationBarItem.TitleDisplayMode) -> some SwiftUICore.View
  
}
@available(macCatalyst 14.0, macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func navigationSubtitle(_ subtitle: SwiftUICore.Text) -> some SwiftUICore.View
  
  nonisolated public func navigationSubtitle(_ subtitleKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func navigationSubtitle<S>(_ subtitle: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func navigationStackHistoryUTType(_ utType: Swift.String) -> some SwiftUICore.View
  
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ImmersiveSpace<Content, Data> : SwiftUI.Scene where Content : SwiftUI.ImmersiveSpaceContent, Data : Swift.Decodable, Data : Swift.Encodable, Data : Swift.Hashable {
  nonisolated public init(@SwiftUI.ImmersiveSpaceContentBuilder content: @escaping () -> Content) where Data == Swift.Never
  @_spi(_) @available(*, deprecated, message: "Use the regular initializers instead.")
  @_disfavoredOverload nonisolated public init(@SwiftUI.ImmersiveSpaceContentBuilder content: @escaping () -> Content) where Data == SwiftUI.NoImmersiveSpaceData
  nonisolated public init(id: Swift.String, @SwiftUI.ImmersiveSpaceContentBuilder content: () -> Content) where Data == Swift.Never
  @_spi(_) @available(*, deprecated, message: "Use the regular initializers instead.")
  @_disfavoredOverload nonisolated public init(id: Swift.String, @SwiftUI.ImmersiveSpaceContentBuilder content: () -> Content) where Data == SwiftUI.NoImmersiveSpaceData
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(id: Swift.String, for type: Data.Type, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> Content)
  #else
  nonisolated public init(id: Swift.String, for type: Data.Type, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(for type: Data.Type, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> Content)
  #else
  nonisolated public init(for type: Data.Type, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> Content)
  #endif
  nonisolated public init(id: Swift.String, for type: Data.Type = Data.self, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data>) -> Content, defaultValue: @escaping () -> Data)
  nonisolated public init(for type: Data.Type = Data.self, @SwiftUI.ImmersiveSpaceContentBuilder content: @escaping (SwiftUICore.Binding<Data>) -> Content, defaultValue: @escaping () -> Data)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(visionOS 1.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14ImmersiveSpaceV4bodyQrvp", 0) __<Content, Data>
}
@available(*, unavailable)
extension SwiftUI.ImmersiveSpace : Swift.Sendable {
}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ImmersiveSpace {
  nonisolated public init<V>(@SwiftUICore.ViewBuilder content: @escaping () -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, Data == Swift.Never, V : SwiftUICore.View
  @_spi(_) @available(*, deprecated, message: "Use the regular initializers instead.")
  @_disfavoredOverload nonisolated public init<V>(@SwiftUICore.ViewBuilder content: @escaping () -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, Data == SwiftUI.NoImmersiveSpaceData, V : SwiftUICore.View
  nonisolated public init<V>(id: Swift.String, @SwiftUICore.ViewBuilder content: () -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, Data == Swift.Never, V : SwiftUICore.View
  @_spi(_) @available(*, deprecated, message: "Use the regular initializers instead.")
  @_disfavoredOverload nonisolated public init<V>(id: Swift.String, @SwiftUICore.ViewBuilder content: () -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, Data == SwiftUI.NoImmersiveSpaceData, V : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(id: Swift.String, for type: Data.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  #else
  nonisolated public init<V>(id: Swift.String, for type: Data.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<V>(for type: Data.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  #else
  nonisolated public init<V>(for type: Data.Type, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data?>) -> V) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  #endif
  nonisolated public init<V>(id: Swift.String, for type: Data.Type = Data.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data>) -> V, defaultValue: @escaping () -> Data) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
  nonisolated public init<V>(for type: Data.Type = Data.self, @SwiftUICore.ViewBuilder content: @escaping (SwiftUICore.Binding<Data>) -> V, defaultValue: @escaping () -> Data) where Content == SwiftUI.ImmersiveSpaceViewContent<V>, V : SwiftUICore.View
}
@_spi(_) @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(*, deprecated, message: "Don't use this.")
public struct NoImmersiveSpaceData : Swift.Codable, Swift.Hashable {
  @_spi(_) public init(from decoder: any Swift.Decoder) throws
  @_spi(_) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(_) public func hash(into hasher: inout Swift.Hasher)
  @_spi(_) public static func == (a: SwiftUI.NoImmersiveSpaceData, b: SwiftUI.NoImmersiveSpaceData) -> Swift.Bool
  @_spi(_) public var hashValue: Swift.Int {
    @_spi(_) get
  }
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.NoImmersiveSpaceData : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(visionOS, introduced: 1.0)
  nonisolated public func defersSystemGestures(on edges: SwiftUICore.Edge.Set) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.DefaultDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
@_Concurrency.MainActor @preconcurrency public struct DefaultDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22DefaultDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.DefaultDatePickerStyle : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.StepperFieldDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var stepperField: SwiftUI.StepperFieldDatePickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.FieldDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var field: SwiftUI.FieldDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.GraphicalDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var graphical: SwiftUI.GraphicalDatePickerStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct StepperFieldDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.StepperFieldDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27StepperFieldDatePickerStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  @available(visionOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.StepperFieldDatePickerStyle : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct FieldDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.FieldDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20FieldDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  @available(visionOS, unavailable)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.FieldDatePickerStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct GraphicalDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.GraphicalDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, macOS 10.15, *)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24GraphicalDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 14.0, macOS 10.15, *)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.GraphicalDatePickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.AutomaticTableStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticTableStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AutomaticTableStyle : SwiftUI.TableStyle {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticTableStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19AutomaticTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticTableStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryLinearCapacityGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryLinearCapacityGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI33AccessoryLinearCapacityGaugeStyleV8makeBody13configurationQrAA0fG13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryLinearCapacityGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryLinearCapacityGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryLinearCapacity: SwiftUI.AccessoryLinearCapacityGaugeStyle {
    get {
        .init()
    }
  }
}
@_spi(Private) @available(iOS, deprecated)
@available(macOS, deprecated)
@available(tvOS, unavailable)
@available(watchOS, deprecated)
extension SwiftUI.GaugeStyle where Self == SwiftUI.LinearPercentageGaugeStyle {
  @_spi(Private) @available(iOS, deprecated, message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
  @available(macOS, deprecated, message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
  @available(watchOS, deprecated, renamed: "linearCapacity")
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linearPercentage: SwiftUI.LinearPercentageGaugeStyle {
    @_spi(Private) get {
        .init()
    }
  }
}
@_spi(Private) @available(iOS, deprecated, message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
@available(macOS, deprecated, message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
@available(watchOS, deprecated, renamed: "linearCapacity")
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LinearPercentageGaugeStyle : SwiftUI.GaugeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearPercentageGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, deprecated, introduced: 16.0, renamed: "linearCapacity", message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
  @available(tvOS, unavailable, renamed: "linearCapacity", message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
  @available(watchOS, deprecated, introduced: 7.0, renamed: "linearCapacity", message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
  @available(macOS, deprecated, introduced: 13.0, renamed: "linearCapacity", message: "In complication-like contexts, use `accessoryLinearCapacity`, otherwise, use `linearCapacity`.")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI26LinearPercentageGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LinearPercentageGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CarPlay<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @_spi(Private) nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7CarPlayV4bodyQrvp", 0) __<Content>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CarPlay : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PrintItem<Content> : SwiftUI.PrintContent where Content : SwiftUICore.View {
  @_spi(DoNotImport) public var content: Content
  @_spi(DoNotImport) public init(@SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_spi(DoNotImport) public static func _makePrintContent(content: SwiftUICore._GraphValue<SwiftUI.PrintItem<Content>>, inputs: SwiftUI._PrintingInputs) -> SwiftUI._PrintingOutputs
  @_spi(DoNotImport) @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias PrintBody = Swift.Never
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.PrintItem : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ToggleStyle where Self == SwiftUI.DefaultToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultToggleStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct DefaultToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DefaultToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultToggleStyle : Swift.Sendable {
}
extension SwiftUICore.Transaction {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var animationFrameInterval: Swift.Double? {
    get
    set
  }
  #else
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var animationFrameInterval: Swift.Double? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var animationReason: Swift.UInt32? {
    get
    set
  }
  #else
  @_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var animationReason: Swift.UInt32? {
    get
    set
  }
  #endif
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func digitalCrownAccessory<Content>(@SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_spi(Private) @available(watchOS, introduced: 9.0, deprecated: 100000.0, message: "Use digitalCrownAccessory(_ visibility: Visibility) instead")
  nonisolated public func digitalCrownAccessory(visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
  nonisolated public func digitalCrownAccessory(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@_spi(Private) @available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func digitalCrownIndicator<Content>(@SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 16.0, watchOS 8.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.TimelineView.Context {
  public func invalidateTimelineContent()
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
@available(watchOS, introduced: 6.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use Color(uiColor:) when converting a UIColor, or create a standard Color directly")
extension SwiftUICore.Color {
  @_disfavoredOverload public init(_ color: UIKit.UIColor)
}
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUICore.Color {
  public init(uiColor: UIKit.UIColor)
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension UIKit.UIColor : @retroactive SwiftUICore.ColorProvider {
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  @available(macOS, unavailable)
  convenience public init(_ color: SwiftUICore.Color)
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #else
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #endif
}
#else
extension UIKit.UIColor : SwiftUICore.ColorProvider {
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
  @available(macOS, unavailable)
  convenience public init(_ color: SwiftUICore.Color)
  package func resolve(in environment: SwiftUICore.EnvironmentValues) -> SwiftUICore.Color.Resolved
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #else
  package var staticColor: CoreGraphics.CGColor? {
    get
  }
  #endif
}
#endif
extension SwiftUICore.ColorScheme {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceStyle: UIKit.UIUserInterfaceStyle)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceStyle: UIKit.UIUserInterfaceStyle)
  #endif
}
extension UIKit.UIUserInterfaceStyle {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorScheme: SwiftUICore.ColorScheme?)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorScheme: SwiftUICore.ColorScheme?)
  #endif
}
extension SwiftUICore.ColorSchemeContrast {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiAccessibilityContrast: UIKit.UIAccessibilityContrast)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiAccessibilityContrast: UIKit.UIAccessibilityContrast)
  #endif
}
extension UIKit.UIAccessibilityContrast {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorSchemeContrast: SwiftUICore.ColorSchemeContrast?)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ colorSchemeContrast: SwiftUICore.ColorSchemeContrast?)
  #endif
}
extension SwiftUICore.ContentSizeCategory {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiSizeCategory: UIKit.UIContentSizeCategory)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiSizeCategory: UIKit.UIContentSizeCategory)
  #endif
}
@available(iOS 15.0, tvOS 15.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.DynamicTypeSize {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ uiSizeCategory: UIKit.UIContentSizeCategory)
  #else
  public init?(_ uiSizeCategory: UIKit.UIContentSizeCategory)
  #endif
}
extension UIKit.UIContentSizeCategory {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeCategory: SwiftUICore.ContentSizeCategory?)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeCategory: SwiftUICore.ContentSizeCategory?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, tvOS 15.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ dynamicTypeSize: SwiftUICore.DynamicTypeSize?)
  #else
  @available(iOS 15.0, tvOS 15.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ dynamicTypeSize: SwiftUICore.DynamicTypeSize?)
  #endif
}
extension SwiftUICore.LayoutDirection {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLayoutDirection: UIKit.UITraitEnvironmentLayoutDirection)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLayoutDirection: UIKit.UITraitEnvironmentLayoutDirection)
  #endif
}
extension UIKit.UITraitEnvironmentLayoutDirection {
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ layoutDirection: SwiftUICore.LayoutDirection)
}
extension SwiftUICore.LegibilityWeight {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLegibilityWeight: UIKit.UILegibilityWeight)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiLegibilityWeight: UIKit.UILegibilityWeight)
  #endif
}
extension UIKit.UILegibilityWeight {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ legibilityWeight: SwiftUICore.LegibilityWeight?)
  #else
  @available(iOS 14.0, tvOS 14.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ legibilityWeight: SwiftUICore.LegibilityWeight?)
  #endif
}
extension SwiftUICore.UserInterfaceSizeClass {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceSizeClass: UIKit.UIUserInterfaceSizeClass)
  #else
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init?(_ uiUserInterfaceSizeClass: UIKit.UIUserInterfaceSizeClass)
  #endif
}
extension UIKit.UIUserInterfaceSizeClass {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeClass: SwiftUICore.UserInterfaceSizeClass?)
  #else
  @available(iOS 14.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ sizeClass: SwiftUICore.UserInterfaceSizeClass?)
  #endif
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.CarouselListStyle {
  @_alwaysEmitIntoClient public static var carousel: SwiftUI.CarouselListStyle {
    get { .init() }
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct CarouselListStyle : SwiftUI.ListStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.CarouselListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.CarouselListStyle : Swift.Sendable {
}
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@freestanding(declaration) public macro Preview(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>, _ additionalTraits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor () -> any SwiftUICore.View) = #externalMacro(module: "PreviewsMacros", type: "SwiftUIView")
#endif
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@freestanding(declaration) public macro Preview<T>(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., arguments: [T], @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor (T) -> any SwiftUICore.View) = #externalMacro(module: "PreviewsMacros", type: "SwiftUIViewGroup_1")
#endif
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@freestanding(declaration) public macro Preview<T>(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor (T) -> any SwiftUICore.View, @DeveloperToolsSupport.PreviewArgumentsBuilder<T> arguments: () -> DeveloperToolsSupport.PreviewArguments<T>) = #externalMacro(module: "PreviewsMacros", type: "SwiftUIViewGroup_1")
#endif
#if compiler(>=5.3) && $Macros && $FreestandingMacros
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@freestanding(declaration) public macro Preview(_ name: Swift.String? = nil, @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor () -> any SwiftUICore.View) = #externalMacro(module: "PreviewsMacros", type: "SwiftUIView")
#endif
extension DeveloperToolsSupport.Preview {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., body: @escaping @_Concurrency.MainActor () -> any SwiftUICore.View)
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor public init(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., body: @escaping @_Concurrency.MainActor () -> any SwiftUICore.View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor public init<T>(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., arguments: [T], @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor (T) -> any SwiftUICore.View)
  #else
  @_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor public init<T>(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., arguments: [T], @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor (T) -> any SwiftUICore.View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor public init<T>(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor (T) -> any SwiftUICore.View, @DeveloperToolsSupport.PreviewArgumentsBuilder<T> arguments: () -> DeveloperToolsSupport.PreviewArguments<T>)
  #else
  @_spi(DoNotImport) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @_Concurrency.MainActor public init<T>(_ name: Swift.String? = nil, traits: DeveloperToolsSupport.PreviewTrait<DeveloperToolsSupport.Preview.ViewTraits>..., @SwiftUICore.ViewBuilder body: @escaping @_Concurrency.MainActor (T) -> any SwiftUICore.View, @DeveloperToolsSupport.PreviewArgumentsBuilder<T> arguments: () -> DeveloperToolsSupport.PreviewArguments<T>)
  #endif
}
@_spi(Previews) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_weakLinked @_Concurrency.MainActor public struct ViewPreviewSource : DeveloperToolsSupport.PreviewSource, @unchecked Swift.Sendable {
  @_spi(Previews) @_Concurrency.MainActor public var makeView: @_Concurrency.MainActor () -> any SwiftUICore.View
  @_spi(Previews) @_Concurrency.MainActor public var contentCategory: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
  @_spi(Previews) @_Concurrency.MainActor public var contentDomain: DeveloperToolsSupport.PreviewSourceContentDomain {
    @_spi(Previews) get
  }
}
@_spi(Previews) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct ViewPreviewBody {
  @_spi(Previews) public let body: any SwiftUICore.View
  @_spi(Previews) public init(body: some View)
}
@_spi(Previews) @available(*, unavailable)
extension SwiftUI.ViewPreviewBody : Swift.Sendable {
}
@_spi(Previews) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension DeveloperToolsSupport.PreviewSourceContentCategory {
  @_spi(Previews) public static var swiftUIView: DeveloperToolsSupport.PreviewSourceContentCategory {
    @_spi(Previews) get
  }
}
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@attached(peer) public macro Previewable() = #externalMacro(
    module: "PreviewsMacros",
    type: "Previewable"
)
#endif
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct _Previewable {
  public init()
}
@available(*, unavailable)
extension SwiftUI._Previewable : Swift.Sendable {
}
@_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct JindoTripleVStack : SwiftUICore.Layout {
  @_spi(Jindo) public struct Configuration {
    @_spi(Jindo) public var notchSize: CoreFoundation.CGSize
    @_spi(Jindo) @available(*, deprecated, message: "Use horizontalSizing")
    public var mode: SwiftUI.JindoTripleVStack.HorizontalMode {
      @_spi(Jindo) get
      @_spi(Jindo) set
    }
    @_spi(Jindo) @available(*, deprecated, message: "Use layoutMargins")
    public var defaultInsets: SwiftUICore.EdgeInsets {
      @_spi(Jindo) get
      @_spi(Jindo) set
    }
    @_spi(Jindo) public var centerAlignment: SwiftUICore.TextAlignment
    @_spi(Jindo) public var bottomAlignment: SwiftUICore.TextAlignment
    @_spi(Jindo) public var uniformSpacing: CoreFoundation.CGFloat?
    @_spi(Jindo) @available(*, deprecated, renamed: "init(notchSize:mode:layoutMargins:)")
    public init(notchSize: CoreFoundation.CGSize, mode: SwiftUI.JindoTripleVStack.HorizontalMode, defaultInsets: SwiftUICore.EdgeInsets)
    @_spi(Jindo) public init(notchSize: CoreFoundation.CGSize, horizontalSizing: SwiftUI.JindoTripleVStack.HorizontalSizing, layoutMargins: SwiftUICore.EdgeInsets)
  }
  @_spi(Jindo) public init(configuration: SwiftUI.JindoTripleVStack.Configuration)
  @_spi(Jindo) public struct Position : Swift.Equatable {
    @_spi(Jindo) public static func == (a: SwiftUI.JindoTripleVStack.Position, b: SwiftUI.JindoTripleVStack.Position) -> Swift.Bool
  }
  @_spi(Jindo) public struct VerticalPlacement : Swift.Equatable {
    @_spi(Jindo) public static let `default`: SwiftUI.JindoTripleVStack.VerticalPlacement
    @_spi(Jindo) public static let belowNotchIfTooWide: SwiftUI.JindoTripleVStack.VerticalPlacement
    @_spi(Jindo) public static func == (a: SwiftUI.JindoTripleVStack.VerticalPlacement, b: SwiftUI.JindoTripleVStack.VerticalPlacement) -> Swift.Bool
  }
  @_spi(Jindo) @available(*, deprecated, message: "Use HorizontalSizing")
  public enum HorizontalMode {
    @_spi(Jindo) case split
    @_spi(Jindo) case leading
    @_spi(Jindo) case trailing
    @_spi(Jindo) public static func == (a: SwiftUI.JindoTripleVStack.HorizontalMode, b: SwiftUI.JindoTripleVStack.HorizontalMode) -> Swift.Bool
    @_spi(Jindo) public func hash(into hasher: inout Swift.Hasher)
    @_spi(Jindo) public var hashValue: Swift.Int {
      @_spi(Jindo) get
    }
  }
  @_spi(Jindo) public struct HorizontalSizing : Swift.Equatable {
    @_spi(Jindo) public static let automatic: SwiftUI.JindoTripleVStack.HorizontalSizing
    @_spi(Jindo) public static let leading: SwiftUI.JindoTripleVStack.HorizontalSizing
    @_spi(Jindo) public static let trailing: SwiftUI.JindoTripleVStack.HorizontalSizing
    @_spi(Jindo) public static let split: SwiftUI.JindoTripleVStack.HorizontalSizing
    @_spi(Jindo) public static func == (a: SwiftUI.JindoTripleVStack.HorizontalSizing, b: SwiftUI.JindoTripleVStack.HorizontalSizing) -> Swift.Bool
  }
  @_spi(Jindo) public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.JindoTripleVStack.Subviews, cache: inout ()) -> CoreFoundation.CGSize
  @_spi(Jindo) public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI.JindoTripleVStack.Subviews, cache: inout ())
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable, introduced: 13.0)
  public typealias Cache = ()
}
@_spi(Jindo) @available(*, unavailable)
extension SwiftUI.JindoTripleVStack : Swift.Sendable {
}
@_spi(Jindo) @available(*, unavailable)
extension SwiftUI.JindoTripleVStack.VerticalPlacement : Swift.Sendable {
}
@_spi(Jindo) @available(*, unavailable)
extension SwiftUI.JindoTripleVStack.Configuration : Swift.Sendable {
}
@_spi(Jindo) @available(*, unavailable)
extension SwiftUI.JindoTripleVStack.HorizontalMode : Swift.Sendable {
}
@_spi(Jindo) @available(*, unavailable)
extension SwiftUI.JindoTripleVStack.HorizontalSizing : Swift.Sendable {
}
@_spi(Jindo) @available(*, unavailable)
extension SwiftUI.JindoTripleVStack.Position : Swift.Sendable {
}
@_spi(Jindo) @available(watchOS 11.0, tvOS 18.0, *)
extension SwiftUI.JindoTripleVStack.Position {
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let leading: SwiftUI.JindoTripleVStack.Position
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static func leading(inset: CoreFoundation.CGFloat? = nil) -> SwiftUI.JindoTripleVStack.Position
  #else
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static func leading(inset: CoreFoundation.CGFloat? = nil) -> SwiftUI.JindoTripleVStack.Position
  #endif
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let trailing: SwiftUI.JindoTripleVStack.Position
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static func trailing(inset: CoreFoundation.CGFloat? = nil) -> SwiftUI.JindoTripleVStack.Position
  #else
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static func trailing(inset: CoreFoundation.CGFloat? = nil) -> SwiftUI.JindoTripleVStack.Position
  #endif
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let center: SwiftUI.JindoTripleVStack.Position
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let bottom: SwiftUI.JindoTripleVStack.Position
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static func bottom(leadingInset: CoreFoundation.CGFloat? = nil, trailingInset: CoreFoundation.CGFloat? = nil) -> SwiftUI.JindoTripleVStack.Position
  #else
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static func bottom(leadingInset: CoreFoundation.CGFloat? = nil, trailingInset: CoreFoundation.CGFloat? = nil) -> SwiftUI.JindoTripleVStack.Position
  #endif
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public static let notch: SwiftUI.JindoTripleVStack.Position
}
@_spi(Jindo) @available(watchOS 11.0, tvOS 18.0, *)
extension SwiftUI.JindoTripleVStack {
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public struct ContentMargins {
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(Jindo) public init(top: CoreFoundation.CGFloat? = nil, leading: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil)
    #else
    @_spi(Jindo) public init(top: CoreFoundation.CGFloat? = nil, leading: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil)
    #endif
  }
}
@_spi(Jindo) @available(*, unavailable)
extension SwiftUI.JindoTripleVStack.ContentMargins : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  nonisolated public func jindoPosition(_ position: SwiftUI.JindoTripleVStack.Position) -> some SwiftUICore.View
  
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  nonisolated public func jindoVerticalPlacement(_ verticalPlacement: SwiftUI.JindoTripleVStack.VerticalPlacement) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  nonisolated public func jindoPriority(_ priority: Swift.Double?) -> some SwiftUICore.View
  
  #else
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  nonisolated public func jindoPriority(_ priority: Swift.Double?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  nonisolated public func jindoContentMargins(_ contentMargins: SwiftUI.JindoTripleVStack.ContentMargins?) -> some SwiftUICore.View
  
  #else
  @_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  nonisolated public func jindoContentMargins(_ contentMargins: SwiftUI.JindoTripleVStack.ContentMargins?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onReselect(isEnabled: Swift.Bool = false, perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onReselect(isEnabled: Swift.Bool = false, perform action: (() -> Swift.Void)?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func transformAnchorPreference<A, K>(key _: K.Type = K.self, value: SwiftUICore.Anchor<A>.Source, transform: @escaping (inout K.Value, SwiftUICore.Anchor<A>) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_AnchorTransformModifier<A, K>(
            anchor: value, transform: transform))
    }
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_alwaysEmitIntoClient nonisolated public func transformAnchorPreference<A, K>(key: K.Type, unanimatedValue value: SwiftUICore.Anchor<A>.Source, transform: @escaping (inout K.Value, SwiftUICore.Anchor<A>) -> Swift.Void) -> some SwiftUICore.View where K : SwiftUICore.PreferenceKey {
        return modifier(_AnchorTransformModifier2<A, K>(
            anchor: value, transform: transform))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AnchorTransformModifier<AnchorValue, Key> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey {
  @_Concurrency.MainActor @preconcurrency public var anchor: SwiftUICore.Anchor<AnchorValue>.Source
  @_Concurrency.MainActor @preconcurrency public var transform: (inout Key.Value, SwiftUICore.Anchor<AnchorValue>) -> Swift.Void
  @inlinable nonisolated public init(anchor: SwiftUICore.Anchor<AnchorValue>.Source, transform: @escaping (inout Key.Value, SwiftUICore.Anchor<AnchorValue>) -> Swift.Void) {
        self.anchor = anchor
        self.transform = transform
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AnchorTransformModifier<AnchorValue, Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._AnchorTransformModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _AnchorTransformModifier2<AnchorValue, Key> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where Key : SwiftUICore.PreferenceKey {
  @_spi(Private) @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var base: SwiftUI._AnchorTransformModifier<AnchorValue, Key>
  @_spi(Private) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency internal init(anchor: SwiftUICore.Anchor<AnchorValue>.Source, transform: @escaping (inout Key.Value, SwiftUICore.Anchor<AnchorValue>) -> Swift.Void) {
        base = .init(anchor: anchor, transform: transform)
    }
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._AnchorTransformModifier2<AnchorValue, Key>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._AnchorTransformModifier2 : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct TuplePrintContent<T> : SwiftUI.PrintContent {
  @_spi(DoNotImport) @usableFromInline
  internal init(_ value: T)
  @_spi(DoNotImport) public var body: Swift.Never {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) public static func _makePrintContent(content: SwiftUICore._GraphValue<SwiftUI.TuplePrintContent<T>>, inputs: SwiftUI._PrintingInputs) -> SwiftUI._PrintingOutputs
  @_spi(DoNotImport) @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias PrintBody = Swift.Never
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.TuplePrintContent : Swift.Sendable {
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUICore._PreferenceWritingModifier : SwiftUI.WidgetConfigurationModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias WidgetBody = Swift.Never
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUICore._PreferenceTransformModifier : SwiftUI.WidgetConfigurationModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeWidgetConfiguration(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 14.0, watchOS 9.0, macOS 11.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias WidgetBody = Swift.Never
}
@_spi(Widget) @available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetConfiguration {
  @_spi(Widget) nonisolated public func preference<K>(key _: K.Type = K.self, value: K.Value) -> some SwiftUI.WidgetConfiguration where K : SwiftUICore.PreferenceKey
  
  @_spi(Widget) nonisolated public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.WidgetConfiguration where K : SwiftUICore.PreferenceKey
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ListStyle where Self == SwiftUI.BorderedListStyle {
  @_alwaysEmitIntoClient public static var bordered: SwiftUI.BorderedListStyle {
    get {
        .init(alternatesRowBackgrounds: false)
    }
  }
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  @_alwaysEmitIntoClient public static func bordered(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.BorderedListStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct BorderedListStyle : SwiftUI.ListStyle {
  public init()
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  public init(alternatesRowBackgrounds: Swift.Bool)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.BorderedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._ListValue<SwiftUI.BorderedListStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.BorderedListStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func unanimatable() -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContentShapeModifier<ContentShape> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier where ContentShape : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: ContentShape
  @_Concurrency.MainActor @preconcurrency public var eoFill: Swift.Bool
  @inlinable nonisolated public init(shape: ContentShape, eoFill: Swift.Bool = false) {
        self.shape = shape
        self.eoFill = eoFill
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ContentShapeModifier<ContentShape>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ContentShapeModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func contentShape<S>(_ shape: S, eoFill: Swift.Bool = false) -> some SwiftUICore.View where S : SwiftUICore.Shape {
        return modifier(_ContentShapeModifier(shape: shape, eoFill: eoFill))
    }
  
}
extension SwiftUI._ContentShapeModifier : SwiftUICore.ContentResponder {
  @_Concurrency.MainActor @preconcurrency package func contains(points: [SwiftUICore.PlatformPoint], size: CoreFoundation.CGSize) -> SwiftUICore.BitVector64
  @_Concurrency.MainActor @preconcurrency package func contentPath(size: CoreFoundation.CGSize) -> SwiftUICore.Path
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TableRowContent<TableRowValue> {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableRowBody.TableRowValue
  associatedtype TableRowBody : SwiftUI.TableRowContent
  var tableRowBody: Self.TableRowBody { get }
  static func _makeRows(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
#else
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TableRowContent {
  associatedtype TableRowValue : Swift.Identifiable = Self.TableRowBody.TableRowValue
  associatedtype TableRowBody : SwiftUI.TableRowContent
  var tableRowBody: Self.TableRowBody { get }
  static func _makeRows(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
#endif
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableRowInputs {
}
@available(*, unavailable)
extension SwiftUI._TableRowInputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct _TableRowOutputs {
}
@available(*, unavailable)
extension SwiftUI._TableRowOutputs : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowContent {
  public static func _makeRows(content: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never {
  public typealias TableRowValue = Swift.Never
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.TableRowContent {
  public typealias TableRowBody = Swift.Never
  public var tableRowBody: Swift.Never {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_functionBuilder public struct TableRowBuilder<Value> where Value : Swift.Identifiable {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Value == Content.TableRowValue, Content : SwiftUI.TableRowContent {
       content
    }
  @_alwaysEmitIntoClient public static func buildBlock<C>(_ content: C) -> C where Value == C.TableRowValue, C : SwiftUI.TableRowContent {
        content
    }
}
@available(*, unavailable)
extension SwiftUI.TableRowBuilder : Swift.Sendable {
}
extension SwiftUICore._IdentifiedViewProxy {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Ultraviolet) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var accessibilityNode: SwiftUI.AccessibilityNodeProxy? {
    get
  }
  #else
  @_spi(Ultraviolet) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public var accessibilityNode: SwiftUI.AccessibilityNodeProxy? {
    get
  }
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _IdentifiedViewTree {
  case empty
  case proxy(SwiftUICore._IdentifiedViewProxy)
  case array([SwiftUI._IdentifiedViewTree])
  public func forEach(_ body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
}
@available(*, unavailable)
extension SwiftUI._IdentifiedViewTree : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _IdentifiedViewsKey {
  public typealias Value = SwiftUI._IdentifiedViewTree
  public static let defaultValue: SwiftUI._IdentifiedViewTree
  public static func reduce(value: inout SwiftUI._IdentifiedViewsKey.Value, nextValue: () -> SwiftUI._IdentifiedViewsKey.Value)
}
@available(*, unavailable)
extension SwiftUI._IdentifiedViewsKey : Swift.Sendable {
}
@_spi(Private) @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._IdentifiedViewsKey : SwiftUICore.HostPreferenceKey {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _IdentifiedModifier<Identifier> : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier, Swift.Equatable where Identifier : Swift.Hashable {
  @_Concurrency.MainActor @preconcurrency public var identifier: Identifier
  @inlinable nonisolated public init(identifier: Identifier) {
        self.identifier = identifier
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._IdentifiedModifier<Identifier>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func == (a: SwiftUI._IdentifiedModifier<Identifier>, b: SwiftUI._IdentifiedModifier<Identifier>) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._IdentifiedModifier : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func _identified<I>(by identifier: I) -> some SwiftUICore.View where I : Swift.Hashable {
        return modifier(_IdentifiedModifier(identifier: identifier))
    }
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AnyTransition {
  public static func move(edge: SwiftUICore.Edge) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition where Self == SwiftUI.MoveTransition {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func move(edge: SwiftUICore.Edge) -> Self { Self(edge: edge) }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct MoveTransition : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var edge: SwiftUICore.Edge
  @_Concurrency.MainActor @preconcurrency public init(edge: SwiftUICore.Edge)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.MoveTransition.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI14MoveTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACG_AA0D5PhaseOtF", 0) __
}
@available(*, unavailable)
extension SwiftUI.MoveTransition : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 16.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  @_spi_available(tvOS, introduced: 17.0)
  nonisolated public func complicationIdiom() -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  nonisolated public func widgetIdiom() -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable nonisolated public func textContentType(_ textContentType: UIKit.UITextContentType?) -> some SwiftUICore.View {
        environment(\.textContentType, textContentType?.rawValue)
    }
  
  #else
  @available(iOS 13.0, tvOS 13.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @inlinable nonisolated public func textContentType(_ textContentType: UIKit.UITextContentType?) -> some SwiftUICore.View {
        environment(\.textContentType, textContentType?.rawValue)
    }
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  internal var textContentType: Swift.String? {
    get
    set
  }
  #else
  @usableFromInline
  internal var textContentType: Swift.String? {
    get
    set
  }
  #endif
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, tvOS 16.0, *)
@_Concurrency.MainActor @preconcurrency public struct ToolbarTitleMenu<Content> : SwiftUI.ToolbarContent, SwiftUI.CustomizableToolbarContent where Content : SwiftUICore.View {
  nonisolated public init() where Content == SwiftUICore.EmptyView
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUI.ToolbarTitleMenu<Content>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.ToolbarTitleMenu : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarTitleMenu<C>(@SwiftUICore.ViewBuilder content: () -> C) -> some SwiftUICore.View where C : SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct ScrollViewReader<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var content: (SwiftUI.ScrollViewProxy) -> Content
  @inlinable nonisolated public init(@SwiftUICore.ViewBuilder content: @escaping (SwiftUI.ScrollViewProxy) -> Content) {
        self.content = content
    }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16ScrollViewReaderV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.ScrollViewReader : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct ScrollViewProxy {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func scrollTo<ID>(_ id: ID, anchor: SwiftUICore.UnitPoint? = nil) where ID : Swift.Hashable
  #else
  public func scrollTo<ID>(_ id: ID, anchor: SwiftUICore.UnitPoint? = nil) where ID : Swift.Hashable
  #endif
  @_spi(Private) public func setContentOffset(_ p: CoreFoundation.CGPoint)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func scrollTo(rect r: CoreFoundation.CGRect, anchor: SwiftUICore.UnitPoint? = nil)
  #else
  @_spi(Private) public func scrollTo(rect r: CoreFoundation.CGRect, anchor: SwiftUICore.UnitPoint? = nil)
  #endif
  @_spi(Private) public func runScrollTest(_ test: SwiftUI.PPTTestCase)
  @_spi(Private) public func runScrollTest(_ test: SwiftUI.PPTTestCase, scrollMode: SwiftUI.PPTTestCase.ScrollMode)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func runScrollTest(_ test: SwiftUI.PPTTestCase, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func runScrollTest(_ test: SwiftUI.PPTTestCase, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func runScrollSubTest(_ test: SwiftUI.PPTTestCase, subTestName: SwiftUI.PPTTestCase.SubTestName, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func runScrollSubTest(_ test: SwiftUI.PPTTestCase, subTestName: SwiftUI.PPTTestCase.SubTestName, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func runScrollSubTest(_ test: SwiftUI.PPTTestCase, subTestName: SwiftUI.PPTTestCase.SubTestName, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func runScrollSubTest(_ test: SwiftUI.PPTTestCase, subTestName: SwiftUI.PPTTestCase.SubTestName, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #endif
}
@available(*, unavailable)
extension SwiftUI.ScrollViewProxy : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityRepresentation<V>(@SwiftUICore.ViewBuilder representation: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  nonisolated public func accessibilityChildren<V>(@SwiftUICore.ViewBuilder children: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.NavigationLinkPickerStyle {
  @_alwaysEmitIntoClient public static var navigationLink: SwiftUI.NavigationLinkPickerStyle {
    get { .init() }
  }
  @_spi(Private) @_alwaysEmitIntoClient public static func navigationLink(labelAxis: SwiftUICore.Axis) -> SwiftUI.NavigationLinkPickerStyle {
        .init(labelAxis: labelAxis)
    }
}
@available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
@available(macOS, unavailable)
public struct NavigationLinkPickerStyle : SwiftUI.PickerStyle {
  public init()
  @_spi(Private) public init(labelAxis: SwiftUICore.Axis)
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.NavigationLinkPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.NavigationLinkPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.NavigationLinkPickerStyle : Swift.Sendable {
}
@_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, visionOS 1.0, *)
@preconcurrency @_Concurrency.MainActor public protocol BadgedViewStyle {
  associatedtype Body : SwiftUICore.View
  @_spi(UIFrameworks) @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @_spi(UIFrameworks) typealias Configuration = SwiftUI.BadgeViewStyleConfiguration
}
@_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, visionOS 1.0, *)
public struct BadgeViewStyleConfiguration {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @_spi(UIFrameworks) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, visionOS 1.0, *)
    public typealias Body = Swift.Never
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) public var badgeText: SwiftUICore.Text? {
    @_spi(UIFrameworks) get
  }
  #else
  @_spi(UIFrameworks) public var badgeText: SwiftUICore.Text? {
    @_spi(UIFrameworks) get
  }
  #endif
  @_spi(UIFrameworks) public let content: SwiftUI.BadgeViewStyleConfiguration.Content
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.BadgeViewStyleConfiguration : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.BadgeViewStyleConfiguration.Content : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, visionOS 1.0, *)
  nonisolated public func badgedViewStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.BadgedViewStyle
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  @available(iOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(macOS, deprecated: 14.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(tvOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(watchOS, deprecated: 10.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(visionOS, deprecated: 1.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @inlinable nonisolated public func onChange<V>(of value: V, perform action: @escaping (_ newValue: V) -> Swift.Void) -> some SwiftUICore.View where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Scene {
  @available(iOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(macOS, deprecated: 14.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(tvOS, deprecated: 17.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(watchOS, deprecated: 10.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @available(visionOS, deprecated: 1.0, message: "Use `onChange` with a two or zero parameter action closure instead.")
  @inlinable nonisolated public func onChange<V>(of value: V, perform action: @escaping (_ newValue: V) -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable {
        modifier(_ValueActionModifier(value: value, action: action))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ValueActionModifier<Value> : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier where Value : Swift.Equatable {
  public typealias Body = Swift.Never
  @_Concurrency.MainActor @preconcurrency public var value: Value
  @_Concurrency.MainActor @preconcurrency public var action: (Value) -> Swift.Void
  @inlinable nonisolated public init(value: Value, action: @escaping (Value) -> Swift.Void) {
        (self.value, self.action) = (value, action)
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
}
@available(*, unavailable)
extension SwiftUI._ValueActionModifier : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ValueActionModifier : SwiftUI._SceneModifier {
  @_Concurrency.MainActor @preconcurrency public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUI._ValueActionModifier<Value>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping (_ oldValue: V, _ newValue: V) -> Swift.Void) -> some SwiftUICore.View where V : Swift.Equatable
  
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping () -> Swift.Void) -> some SwiftUICore.View where V : Swift.Equatable
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Scene {
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping (_ oldValue: V, _ newValue: V) -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable
  
  nonisolated public func onChange<V>(of value: V, initial: Swift.Bool = false, _ action: @escaping () -> Swift.Void) -> some SwiftUI.Scene where V : Swift.Equatable
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func _transactionalOnChange<V>(of value: V, _ action: @escaping (_ oldValue: V, _ newValue: V, SwiftUICore.Transaction) -> Swift.Void) -> some SwiftUICore.View where V : Swift.Equatable
  
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, introduced: 6.0, deprecated: 11.0, message: "Please switch to a NavigationStack .navigationDestination")
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Item, Content>(item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Item, Content>(item: SwiftUICore.Binding<Item?>, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
  #endif
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination(isPresented: SwiftUICore.Binding<Swift.Bool>, storyboardName: Swift.String) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Item>(item: SwiftUICore.Binding<Item?>, storyboardName: Swift.String) -> some SwiftUICore.View where Item : Swift.Identifiable
  
  #else
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func _navigationDestination<Item>(item: SwiftUICore.Binding<Item?>, storyboardName: Swift.String) -> some SwiftUICore.View where Item : Swift.Identifiable
  
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct _AccessibilityQuickActionStyle {
}
@available(*, unavailable)
extension SwiftUI._AccessibilityQuickActionStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public protocol AccessibilityQuickActionStyle {
  static var _style: SwiftUI._AccessibilityQuickActionStyle { get }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct AccessibilityQuickActionPromptStyle : SwiftUI.AccessibilityQuickActionStyle {
  public static var _style: SwiftUI._AccessibilityQuickActionStyle {
    get
  }
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUI.AccessibilityQuickActionPromptStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.AccessibilityQuickActionStyle where Self == SwiftUI.AccessibilityQuickActionPromptStyle {
  @_alwaysEmitIntoClient public static var prompt: SwiftUI.AccessibilityQuickActionPromptStyle {
    get { .init() }
  }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct AccessibilityQuickActionOutlineStyle : SwiftUI.AccessibilityQuickActionStyle {
  public static var _style: SwiftUI._AccessibilityQuickActionStyle {
    get
  }
  @usableFromInline
  internal init()
}
@available(*, unavailable)
extension SwiftUI.AccessibilityQuickActionOutlineStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.AccessibilityQuickActionStyle where Self == SwiftUI.AccessibilityQuickActionOutlineStyle {
  @_alwaysEmitIntoClient public static var outline: SwiftUI.AccessibilityQuickActionOutlineStyle {
    get { .init() }
  }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func accessibilityQuickAction<Style, Content>(style: Style, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Style : SwiftUI.AccessibilityQuickActionStyle, Content : SwiftUICore.View
  
  nonisolated public func accessibilityQuickAction<Style, Content>(style: Style, isActive: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Style : SwiftUI.AccessibilityQuickActionStyle, Content : SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var accessibilityQuickActionsEnabled: Swift.Bool {
    get
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var _accessibilityQuickActionsEnabled: Swift.Bool {
    get
    set
  }
}
extension SwiftUICore._ViewInputs {
  @_spi(DoNotImport) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  public mutating func enableAccessibility()
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onKeyPress(_ key: SwiftUI.KeyEquivalent, action: @escaping () -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(_ key: SwiftUI.KeyEquivalent, phases: SwiftUI.KeyPress.Phases, action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(keys: Swift.Set<SwiftUI.KeyEquivalent>, phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(characters: Foundation.CharacterSet, phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  nonisolated public func onKeyPress(phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct KeyPress : Swift.Sendable {
  public let phase: SwiftUI.KeyPress.Phases
  public let key: SwiftUI.KeyEquivalent
  public let characters: Swift.String
  public let modifiers: SwiftUICore.EventModifiers
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyPress : Swift.CustomDebugStringConvertible {
  public struct Phases : Swift.OptionSet, Swift.Sendable, Swift.CustomDebugStringConvertible {
    public static let down: SwiftUI.KeyPress.Phases
    public static let `repeat`: SwiftUI.KeyPress.Phases
    public static let up: SwiftUI.KeyPress.Phases
    public static let all: SwiftUI.KeyPress.Phases
    public var debugDescription: Swift.String {
      get
    }
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    public typealias ArrayLiteralElement = SwiftUI.KeyPress.Phases
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    public typealias Element = SwiftUI.KeyPress.Phases
    @available(iOS 17.0, tvOS 17.0, macOS 14.0, *)
    @available(watchOS, unavailable)
    public typealias RawValue = Swift.Int
  }
  public enum Result : Swift.Sendable {
    case handled
    case ignored
    public static func == (a: SwiftUI.KeyPress.Result, b: SwiftUI.KeyPress.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var debugDescription: Swift.String {
    get
  }
}
@_spi(_) extension SwiftUICore.View {
  @_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "onKeyPress(keys:phases:action:)")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "onKeyPress(keys:phases:action:)")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "onKeyPress(keys:phases:action:)")
  @available(watchOS, unavailable)
  nonisolated public func onKeyPress(keysIn keys: Swift.Set<SwiftUI.KeyEquivalent>, phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "onKeyPress(characters:phases:action:)")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "onKeyPress(characters:phases:action:)")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "onKeyPress(characters:phases:action:)")
  @available(watchOS, unavailable)
  nonisolated public func onKeyPress(charactersIn characters: Foundation.CharacterSet, phases: SwiftUI.KeyPress.Phases = [.down, .repeat], action: @escaping (SwiftUI.KeyPress) -> SwiftUI.KeyPress.Result) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Gauge<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels> : SwiftUICore.View where Label : SwiftUICore.View, CurrentValueLabel : SwiftUICore.View, BoundsLabel : SwiftUICore.View, MarkedValueLabels : SwiftUICore.View {
  nonisolated public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label) where CurrentValueLabel == SwiftUICore.EmptyView, BoundsLabel == SwiftUICore.EmptyView, MarkedValueLabels == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel) where BoundsLabel == SwiftUICore.EmptyView, MarkedValueLabels == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUICore.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> BoundsLabel) where MarkedValueLabels == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUICore.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where BoundsLabel == SwiftUICore.EmptyView, V : Swift.BinaryFloatingPoint
  nonisolated public init<V>(value: V, in bounds: Swift.ClosedRange<V> = 0...1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, @SwiftUICore.ViewBuilder minimumValueLabel: () -> BoundsLabel, @SwiftUICore.ViewBuilder maximumValueLabel: () -> BoundsLabel, @SwiftUICore.ViewBuilder markedValueLabels: () -> MarkedValueLabels) where V : Swift.BinaryFloatingPoint
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5GaugeV4bodyQrvp", 0) __<Label, CurrentValueLabel, BoundsLabel, MarkedValueLabels>
}
@available(*, unavailable)
extension SwiftUI.Gauge : Swift.Sendable {
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.UnifiedWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var unified: SwiftUI.UnifiedWindowToolbarStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func unified(showsTitle: Swift.Bool) -> SwiftUI.UnifiedWindowToolbarStyle {
        .init(showsTitle: showsTitle)
    }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UnifiedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
  @_spi(Private) public func configureWindowToolbar(_ window: Swift.AnyObject)
  @_spi(Private) @available(macOS 14.0, *)
  public static func _makeInputs(style: SwiftUICore._GraphValue<SwiftUI.UnifiedWindowToolbarStyle>, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.UnifiedWindowToolbarStyle : Swift.Sendable {
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.BackgroundTask {
  public static var snapshot: SwiftUI.BackgroundTask<SwiftUI.SnapshotData, SwiftUI.SnapshotResponse> {
    get
  }
  public static var intentDidRun: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
  public static var relevantShortcut: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
  public static var watchConnectivity: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
  public static var bluetoothAlert: SwiftUI.BackgroundTask<Swift.Void, Swift.Void> {
    get
  }
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SnapshotResponse : Swift.Sendable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(restoredDefaultState: Swift.Bool = false, estimatedSnapshotExpiration: Foundation.Date? = nil, identifier: Swift.String? = nil)
  #else
  public init(restoredDefaultState: Swift.Bool = false, estimatedSnapshotExpiration: Foundation.Date? = nil, identifier: Swift.String? = nil)
  #endif
}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SnapshotData : Swift.Sendable {
  public let reason: SwiftUI.SnapshotData.SnapshotReason
  public let identifier: Swift.String?
  @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public enum SnapshotReason : Swift.Sendable {
    case appScheduled
    case returnToDefaultState
    case complicationUpdate
    case prelaunch
    case appBackgrounded
    public static func == (a: SwiftUI.SnapshotData.SnapshotReason, b: SwiftUI.SnapshotData.SnapshotReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SwiftUICore.Animation {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @available(*, deprecated, message: "Use the `timingCurve(_:duration:)` overload that takes a UnitCurve instead")
  public static func timingCurve(_ curve: SwiftUI.BezierTimingCurve, duration: Foundation.TimeInterval = 0.35) -> SwiftUICore.Animation
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(*, deprecated, message: "Use UnitCurve instead")
public struct BezierTimingCurve : Swift.Sendable, Swift.Hashable {
  @_spi(Private) public var startControlPoint: SwiftUICore.UnitPoint
  @_spi(Private) public var endControlPoint: SwiftUICore.UnitPoint
  @_spi(Private) public init(startControlPoint: SwiftUICore.UnitPoint, endControlPoint: SwiftUICore.UnitPoint)
  @_spi(Private) public func value(at time: Swift.Double) -> Swift.Double
  @_spi(Private) public func velocity(at time: Swift.Double) -> Swift.Double
  @_spi(Private) public var inverse: SwiftUI.BezierTimingCurve {
    @_spi(Private) get
  }
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public static func == (a: SwiftUI.BezierTimingCurve, b: SwiftUI.BezierTimingCurve) -> Swift.Bool
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(*, deprecated, message: "Use UnitCurve instead")
extension SwiftUI.BezierTimingCurve {
  @_spi(Private) public static let easeInEaseOut: SwiftUI.BezierTimingCurve
  @_spi(Private) public static let easeIn: SwiftUI.BezierTimingCurve
  @_spi(Private) public static let easeOut: SwiftUI.BezierTimingCurve
  @_spi(Private) public static let linear: SwiftUI.BezierTimingCurve
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  nonisolated public func textInputValidation(_ validate: ((Swift.String) -> Swift.Bool)?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  nonisolated public func textInputValidation(_ validate: ((Swift.String) -> Swift.Bool)?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _HiddenModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  @inlinable nonisolated public init() {}
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._HiddenModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
package struct AllowedPreferenceKeysWhileHidden : Swift.OptionSet {
  package let rawValue: Swift.Int
  package init(rawValue: Swift.Int)
  package static let accessibility: SwiftUI.AllowedPreferenceKeysWhileHidden
  package static let platformItemList: SwiftUI.AllowedPreferenceKeysWhileHidden
  package static let viewResponders: SwiftUI.AllowedPreferenceKeysWhileHidden
  package static let hostPreferences: SwiftUI.AllowedPreferenceKeysWhileHidden
  package static let displayList: SwiftUI.AllowedPreferenceKeysWhileHidden
  package typealias ArrayLiteralElement = SwiftUI.AllowedPreferenceKeysWhileHidden
  package typealias Element = SwiftUI.AllowedPreferenceKeysWhileHidden
  package typealias RawValue = Swift.Int
}
@_Concurrency.MainActor @preconcurrency package struct DynamicHiddenModifier : SwiftUICore.ViewModifier, SwiftUICore.PrimitiveViewModifier, SwiftUICore.MultiViewModifier {
  nonisolated package static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI.DynamicHiddenModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func hidden() -> some SwiftUICore.View {
        return modifier(_HiddenModifier())
    }
  
  @_Concurrency.MainActor @preconcurrency package func hiddenAllowingPlatformItemList() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency package func hiddenAllowingAccessibility() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency package func hiddenAllowingViewResponders() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency package func hidden(_ isHidden: Swift.Bool, allowingDisplayList: Swift.Bool = false) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency package func hiddenAllowingHostPreferences(_ isHidden: Swift.Bool, allowingDisplayList: Swift.Bool = false) -> some SwiftUICore.View
  
}
package protocol PlatformHiddenRepresentable {
  static func makeRepresentation(inputs: inout SwiftUICore._ViewInputs, allowedKeys: SwiftUI.AllowedPreferenceKeysWhileHidden)
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedHiddenRepresentation: (any SwiftUI.PlatformHiddenRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedHiddenRepresentation: (any SwiftUI.PlatformHiddenRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedHiddenRepresentation: (any SwiftUI.PlatformHiddenRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedHiddenRepresentation: (any SwiftUI.PlatformHiddenRepresentable.Type)? {
    get
    set
  }
  #endif
}
package protocol PlatformDynamicHiddenRepresentable {
  static func shouldMakeRepresentation(inputs: SwiftUICore._ViewInputs) -> Swift.Bool
  static func makeRepresentation(inputs: SwiftUICore._ViewInputs, modifier: AttributeGraph.Attribute<SwiftUI.DynamicHiddenModifier>, outputs: inout SwiftUICore._ViewOutputs)
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedDynamicHiddenRepresentation: (any SwiftUI.PlatformDynamicHiddenRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedDynamicHiddenRepresentation: (any SwiftUI.PlatformDynamicHiddenRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedDynamicHiddenRepresentation: (any SwiftUI.PlatformDynamicHiddenRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedDynamicHiddenRepresentation: (any SwiftUI.PlatformDynamicHiddenRepresentable.Type)? {
    get
    set
  }
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._UIHostingView : SwiftUI.HostingViewProtocol {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func convertAnchor<Value>(_ anchor: SwiftUICore.Anchor<Value>) -> Value
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
@_Concurrency.MainActor @preconcurrency public struct DatePicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  public typealias Components = SwiftUI.DatePickerComponents
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10DatePickerV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.DatePicker : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 16.0, macOS 13.0, tvOS 18.0, watchOS 10.0, *)
extension SwiftUI.DatePicker where Label == SwiftUI.DatePickerStyleConfiguration.Label {
  @_spi(DoNotImport) nonisolated public init(_ configuration: SwiftUI.DatePickerStyleConfiguration)
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.DatePicker {
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date], @SwiftUICore.ViewBuilder label: () -> Label)
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.DatePicker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date])
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.ClosedRange<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeFrom<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<Foundation.Date>, in range: Swift.PartialRangeThrough<Foundation.Date>, displayedComponents: SwiftUI.DatePicker<Label>.Components = [.hourAndMinute, .date]) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
public struct DatePickerComponents : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let hourAndMinute: SwiftUI.DatePickerComponents
  public static let date: SwiftUI.DatePickerComponents
  @available(watchOS 10.0, *)
  @available(iOS, unavailable)
  @_spi_available(macOS, introduced: 12.1)
  @available(visionOS, unavailable)
  public static let hourMinuteAndSecond: SwiftUI.DatePickerComponents
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias ArrayLiteralElement = SwiftUI.DatePickerComponents
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias Element = SwiftUI.DatePickerComponents
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @_spi_available(tvOS, introduced: 18.0)
  public typealias RawValue = Swift.UInt
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct TouchBarItemPresenceTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUI.TouchBarItemPresence? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUI.TouchBarItemPresence? {
    get { nil }
  }
  #endif
  @available(macOS 10.15, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  internal typealias Value = SwiftUI.TouchBarItemPresence?
}
@available(*, unavailable)
extension SwiftUI.TouchBarItemPresenceTraitKey : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable nonisolated public func touchBarItemPresence(_ presence: SwiftUI.TouchBarItemPresence) -> some SwiftUICore.View {
        return _trait(TouchBarItemPresenceTraitKey.self, presence)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct TouchBarItemPrincipalTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(macOS 10.15, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.TouchBarItemPrincipalTraitKey : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @inlinable nonisolated public func touchBarItemPrincipal(_ principal: Swift.Bool = true) -> some SwiftUICore.View {
        return _trait(TouchBarItemPrincipalTraitKey.self, principal)
    }
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@usableFromInline
internal struct TouchBarCustomizationLabelTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: SwiftUICore.Text {
    get { Text("") }
  }
  @available(macOS 10.15, *)
  @usableFromInline
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  internal typealias Value = SwiftUICore.Text
}
@available(*, unavailable)
extension SwiftUI.TouchBarCustomizationLabelTraitKey : Swift.Sendable {
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func touchBarCustomizationLabel(_ label: SwiftUICore.Text) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityChartDescriptor<R>(_ representable: R) -> some SwiftUICore.View where R : SwiftUICore.AXChartDescriptorRepresentable
  
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
public struct SearchPresentationToolbarBehavior {
  public static var automatic: SwiftUI.SearchPresentationToolbarBehavior {
    get
  }
  public static var avoidHidingContent: SwiftUI.SearchPresentationToolbarBehavior {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.SearchPresentationToolbarBehavior : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
  nonisolated public func searchPresentationToolbarBehavior(_ behavior: SwiftUI.SearchPresentationToolbarBehavior) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, visionOS 1.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func searchDictationBehavior(_ dictationBehavior: SwiftUI.TextInputDictationBehavior) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private_Search) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func searchSuffix(alwaysVisible suffix: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #else
  @_spi(Private_Search) @available(iOS 18.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func searchSuffix(alwaysVisible suffix: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DatePickerStyle where Self == SwiftUI.CompactDatePickerStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var compact: SwiftUI.CompactDatePickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macCatalyst 13.4, macOS 10.15.4, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CompactDatePickerStyle : SwiftUI.DatePickerStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CompactDatePickerStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, macOS 10.15.4, macCatalyst 13.4, *)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22CompactDatePickerStyleV8makeBody13configurationQrAA0deF13ConfigurationV_tF", 0) __
  @available(iOS 14.0, macOS 10.15.4, macCatalyst 13.4, *)
  @_spi_available(tvOS, unavailable, introduced: 18.0)
  @available(watchOS, unavailable, introduced: 10.0)
  public typealias _Body = SwiftUICore.EmptyView
}
@available(*, unavailable)
extension SwiftUI.CompactDatePickerStyle : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _OverlayLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(contentIndex: Swift.Int? = nil)
  #else
  public init(contentIndex: Swift.Int? = nil)
  #endif
  nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI._OverlayLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._OverlayLayout : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._OverlayLayout : SwiftUICore.Layout {
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI._OverlayLayout.Subviews, cache: inout Swift.Void)
  public static var layoutProperties: SwiftUICore.LayoutProperties {
    get
  }
  public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI._OverlayLayout.Subviews, cache: inout Swift.Void) -> CoreFoundation.CGSize
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Cache = Swift.Void
}
extension SwiftUI._OverlayLayout : SwiftUICore._VariadicView.ImplicitRoot {
  package static var implicitRoot: SwiftUI._OverlayLayout {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: SwiftUICore.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #else
  nonisolated public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: SwiftUICore.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  #endif
  nonisolated public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<V>(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where V : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityCustomContent(_ label: SwiftUICore.Text, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<V>(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where V : Swift.StringProtocol
  @available(*, unavailable, message: "Using non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.")
  @_disfavoredOverload nonisolated public func accessibilityCustomContent<L, V>(_ label: L, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where L : Swift.StringProtocol, V : Swift.StringProtocol
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: SwiftUICore.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  #else
  public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: SwiftUICore.Text?, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  #endif
  public func accessibilityCustomContent(_ key: SwiftUICore.AccessibilityCustomContentKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityCustomContent<V>(_ key: SwiftUICore.AccessibilityCustomContentKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier> where V : Swift.StringProtocol
  public func accessibilityCustomContent(_ label: SwiftUICore.Text, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: SwiftUICore.Text, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityCustomContent(_ labelKey: SwiftUICore.LocalizedStringKey, _ valueKey: SwiftUICore.LocalizedStringKey, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityCustomContent<V>(_ labelKey: SwiftUICore.LocalizedStringKey, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier> where V : Swift.StringProtocol
  @available(*, unavailable, message: "Using non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.")
  @_disfavoredOverload public func accessibilityCustomContent<L, V>(_ label: L, _ value: V, importance: Accessibility.AXCustomContent.Importance = .default) -> SwiftUICore.ModifiedContent<Content, Modifier> where L : Swift.StringProtocol, V : Swift.StringProtocol
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func accessibilityCustomContent(_ list: [SwiftUICore.AccessibilityCustomContentEntry]) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func accessibilityCustomContent(_ list: [SwiftUICore.AccessibilityCustomContentEntry]) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TextSelection : Swift.Equatable, Swift.Hashable {
  public enum Indices : Swift.Equatable, Swift.Hashable {
    case selection(Swift.Range<Swift.String.Index>)
    case multiSelection(Swift.RangeSet<Swift.String.Index>)
    public static func == (a: SwiftUI.TextSelection.Indices, b: SwiftUI.TextSelection.Indices) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var indices: SwiftUI.TextSelection.Indices
  public var affinity: SwiftUI.TextSelectionAffinity {
    get
  }
  public init(range: Swift.Range<Swift.String.Index>)
  public init(ranges: Swift.RangeSet<Swift.String.Index>)
  public init(insertionPoint: Swift.String.Index)
  public var isInsertion: Swift.Bool {
    get
  }
  public static func == (a: SwiftUI.TextSelection, b: SwiftUI.TextSelection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TextSelection : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.TextSelection.Indices : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func textSelectionAffinity(_ affinity: SwiftUI.TextSelectionAffinity) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public enum TextSelectionAffinity : Swift.Equatable, Swift.Hashable {
  case automatic
  case upstream
  case downstream
  public static func == (a: SwiftUI.TextSelectionAffinity, b: SwiftUI.TextSelectionAffinity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TextSelectionAffinity : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var textSelectionAffinity: SwiftUI.TextSelectionAffinity {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var menuIndicatorVisibility: SwiftUI.Visibility {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func menuIndicator(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View {
        environment(\.menuIndicatorVisibility, visibility)
    }
  
}
extension SwiftUICore.View {
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func menuIndicatorProminenceReduced(_ reduce: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct TupleTableColumnContent<RowValue, Sort, T> : SwiftUI.TableColumnContent where RowValue : Swift.Identifiable, Sort : Foundation.SortComparator {
  public typealias TableRowValue = RowValue
  public typealias TableColumnSortComparator = Sort
  public var value: T
  @inlinable internal init(_ value: T, valueType: RowValue.Type, sortType: Sort.Type) {
        self.value = value
    }
  public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUI.TupleTableColumnContent<RowValue, Sort, T>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #else
  @available(iOS 17.4, macOS 14.4, visionOS 1.1, *)
  public static func _tableColumnCount(inputs: SwiftUI._TableColumnInputs) -> Swift.Int?
  #endif
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableColumnBody = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleTableColumnContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Group : SwiftUI.TableColumnContent where Content : SwiftUI.TableColumnContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableColumnSortComparator = Content.TableColumnSortComparator
  public typealias TableColumnBody = Swift.Never
  @inlinable public init<R, C>(@SwiftUI.TableColumnBuilder<R, C> content: () -> Content) where R == Content.TableRowValue, C == Content.TableColumnSortComparator {
        self = Self._make(content: content())
    }
  public static func _makeContent(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._TableColumnInputs) -> SwiftUI._TableColumnOutputs
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedValue<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
    case value(Value?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedValue<Value>.Content
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
  #else
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, Value?>)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public var wrappedValue: Value? {
    get {
        if case .value(let value) = content {
            return value
        } else {
            return nil
        }
    }
  }
  #else
  @inlinable public var wrappedValue: Value? {
    get {
        if case .value(let value) = content {
            return value
        } else {
            return nil
        }
    }
  }
  #endif
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.FocusedValue : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusedValue.Content : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@propertyWrapper public struct FocusedBinding<Value> : SwiftUICore.DynamicProperty {
  @usableFromInline
  @frozen internal enum Content {
    case keyPath(Swift.KeyPath<SwiftUI.FocusedValues, SwiftUICore.Binding<Value>?>)
    case value(SwiftUICore.Binding<Value>?)
  }
  @usableFromInline
  internal var content: SwiftUI.FocusedBinding<Value>.Content
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, SwiftUICore.Binding<Value>?>)
  #else
  public init(_ keyPath: Swift.KeyPath<SwiftUI.FocusedValues, SwiftUICore.Binding<Value>?>)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable public var wrappedValue: Value? {
    get {
            if case .value(let value) = content {
                return value?.wrappedValue
            } else {
                return nil
            }
        }
    nonmutating set {
            if case .value(let value) = content, let newValue = newValue {
                value?.wrappedValue = newValue
            }
        }
  }
  #else
  @inlinable public var wrappedValue: Value? {
    get {
            if case .value(let value) = content {
                return value?.wrappedValue
            } else {
                return nil
            }
        }
    nonmutating set {
            if case .value(let value) = content, let newValue = newValue {
                value?.wrappedValue = newValue
            }
        }
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var projectedValue: SwiftUICore.Binding<Value?> {
    get
  }
  #else
  public var projectedValue: SwiftUICore.Binding<Value?> {
    get
  }
  #endif
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.FocusedBinding : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusedBinding.Content : Swift.Sendable {
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value) -> some SwiftUICore.View
  
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value?) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func focusedValue<Value>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, Value?>, _ value: Value?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func focusedSceneValue<T>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, T?>, _ value: T) -> some SwiftUICore.View
  
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func focusedSceneValue<T>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, T?>, _ value: T) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func focusedSceneValue<T>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, T?>, _ value: T?) -> some SwiftUICore.View
  
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func focusedSceneValue<T>(_ keyPath: Swift.WritableKeyPath<SwiftUI.FocusedValues, T?>, _ value: T?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol FocusedValueKey {
  associatedtype Value
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct FocusedValues {
  @usableFromInline
  internal init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript<Key>(key: Key.Type) -> Key.Value? where Key : SwiftUI.FocusedValueKey {
    get
    set
  }
  #else
  public subscript<Key>(key: Key.Type) -> Key.Value? where Key : SwiftUI.FocusedValueKey {
    get
    set
  }
  #endif
}
@available(*, unavailable)
extension SwiftUI.FocusedValues : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FocusedValues : Swift.Equatable {
  public static func == (lhs: SwiftUI.FocusedValues, rhs: SwiftUI.FocusedValues) -> Swift.Bool
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_functionBuilder public struct NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.NavigationDestination {
       content
    }
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock() -> some SwiftUI.NavigationDestination {
        TupleNavigationDestination(())
    }
  
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C>(_ content: C) -> some SwiftUI.NavigationDestination where C : SwiftUI.NavigationDestination {
        TupleNavigationDestination((content))
    }
  
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.NavigationDestinationBuilder : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct Subview : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView, Swift.Identifiable {
  public struct ID : Swift.Hashable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUI.Subview.ID, b: SwiftUI.Subview.ID) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var id: SwiftUI.Subview.ID {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var containerValues: SwiftUI.ContainerValues {
    get
  }
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "containerValues")
  @_Concurrency.MainActor @preconcurrency public var traits: SwiftUI.TraitValues {
    get
  }
  @_spi(DoNotImportVariadicView) @available(*, deprecated, message: "Use tag APIs on ContainerValues instead.")
  @_Concurrency.MainActor @preconcurrency public func isSelected<V>(selection: V) -> Swift.Bool where V : Swift.Hashable
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImportVariadicView) @available(*, deprecated, message: "Use tag APIs on ContainerValues instead.")
  @_Concurrency.MainActor @preconcurrency public func tagValue<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #else
  @_spi(DoNotImportVariadicView) @available(*, deprecated, message: "Use tag APIs on ContainerValues instead.")
  @_Concurrency.MainActor @preconcurrency public func tagValue<V>(for type: V.Type) -> V? where V : Swift.Hashable
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.Subview>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.Subview>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.Subview : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.Subview.ID : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS 16.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  public var multimodalListLayout: SwiftUI.MultimodalListStyle.Layout {
    get
  }
}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public enum NavigationBarHost : Swift.Int, Swift.CaseIterable {
  @_spi(ClarityBoard) case app
  @_spi(ClarityBoard) case systemShell
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ClarityBoard) public init?(rawValue: Swift.Int)
  #else
  @_spi(ClarityBoard) public init?(rawValue: Swift.Int)
  #endif
  @_spi(ClarityBoard) @available(iOS 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias AllCases = [SwiftUI.NavigationBarHost]
  @_spi(ClarityBoard) @available(iOS 16.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias RawValue = Swift.Int
  @_spi(ClarityBoard) public static var allCases: [SwiftUI.NavigationBarHost] {
    @_spi(ClarityBoard) get
  }
  @_spi(ClarityBoard) public var rawValue: Swift.Int {
    @_spi(ClarityBoard) get
  }
}
@_spi(ClarityBoard) @available(*, unavailable)
extension SwiftUI.NavigationBarHost : Swift.Sendable {
}
extension SwiftUICore.View {
  @_spi(Widget) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func _gaugeTintOverride(primaryColor: SwiftUICore.Color, secondaryColor: SwiftUICore.Color) -> some SwiftUICore.View
  
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AnimatedValueTrack<Value> : Swift.Equatable {
  @_spi(DoNotImport) public init(@SwiftUI.AnimatedValueTrackBuilder<Value> track: () -> SwiftUI.AnimatedValueTrack<Value>)
  @_spi(DoNotImport) public init(path: SwiftUICore.Path, velocity: Swift.Double = 1000.0) where Value == CoreFoundation.CGPoint
  @_spi(DoNotImport) public static func == (lhs: SwiftUI.AnimatedValueTrack<Value>, rhs: SwiftUI.AnimatedValueTrack<Value>) -> Swift.Bool
  @_spi(DoNotImport) public func keyPath<Root>(_ keyPath: Swift.WritableKeyPath<Root, Value>) -> SwiftUI.AnimatedValueTrack<Root>
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack {
  @_spi(DoNotImport) public var duration: Swift.Double {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) public func update(value: inout Value, at time: Swift.Double)
  @_spi(DoNotImport) public func update(velocity: inout Value, at time: Swift.Double)
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValueTrack : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValueTrack where Value : SwiftUICore.Animatable {
  @_spi(DoNotImport) public init(duration: Swift.Double, interpolation: SwiftUI.AnimatedValueKeyframeInterpolation = .cubic, constantVelocity: Swift.Bool = false, keyframes: [SwiftUI.AnimatedValueKeyframe<Value>])
  @_spi(DoNotImport) public init(duration: Swift.Double, interpolation: SwiftUI.AnimatedValueKeyframeInterpolation = .cubic, constantVelocity: Swift.Bool = false, values: [Value])
  @_spi(DoNotImport) public init(interpolation: SwiftUI.AnimatedValueKeyframeInterpolation = .cubic, keyframes: [Swift.Double : SwiftUI.AnimatedValueKeyframe<Value>])
  @_spi(DoNotImport) public init(interpolation: SwiftUI.AnimatedValueKeyframeInterpolation = .cubic, values: [Swift.Double : Value])
  @_spi(DoNotImport) public init(duration: Swift.Double, value: Value)
  @_spi(DoNotImport) public init(discreteValues: [Swift.Double : Value])
  @_spi(DoNotImport) public init(discreteValues: [Value])
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 17.0, tvOS 17.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public subscript<K>(key: K.Type) -> K.Value where K : SwiftUI.UITraitBridgedEnvironmentKey {
    get
    set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AnyTransition {
  public static func asymmetric(insertion: SwiftUICore.AnyTransition, removal: SwiftUICore.AnyTransition) -> SwiftUICore.AnyTransition
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct AsymmetricTransition<Insertion, Removal> : SwiftUICore.Transition where Insertion : SwiftUICore.Transition, Removal : SwiftUICore.Transition {
  @_Concurrency.MainActor @preconcurrency public var insertion: Insertion
  @_Concurrency.MainActor @preconcurrency public var removal: Removal
  @_Concurrency.MainActor @preconcurrency public init(insertion: Insertion, removal: Removal)
  @_Concurrency.MainActor @preconcurrency public func body(content: SwiftUI.AsymmetricTransition<Insertion, Removal>.Content, phase: SwiftUICore.TransitionPhase) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public static var properties: SwiftUICore.TransitionProperties {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _makeContentTransition(transition: inout SwiftUICore._Transition_ContentTransition)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20AsymmetricTransitionV4body7content5phaseQrAA22PlaceholderContentViewVyACyxq_GG_AA0D5PhaseOtF", 0) __<Insertion, Removal>
}
@available(*, unavailable)
extension SwiftUI.AsymmetricTransition : Swift.Sendable {
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TabViewStyle where Self == SwiftUI.GroupedTabViewStyle {
  @_alwaysEmitIntoClient public static var grouped: SwiftUI.GroupedTabViewStyle {
    get { .init() }
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct GroupedTabViewStyle : SwiftUI.TabViewStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.GroupedTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._TabViewValue<SwiftUI.GroupedTabViewStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.GroupedTabViewStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol TableStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.TableStyleConfiguration
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableStyleConfiguration {
}
@available(*, unavailable)
extension SwiftUI.TableStyleConfiguration : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func tableStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.TableStyle
  
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func modifierKeyAlternate<V>(_ modifiers: SwiftUICore.EventModifiers, @SwiftUICore.ViewBuilder _ alternate: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public enum AccessibilityActionResult : Swift.Sendable {
  @_spi(Private) case failure(Swift.Bool)
  @_spi(Private) case success
  @_spi(Private) case passive
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AccessibilityActionResult : Swift.ExpressibleByBooleanLiteral {
  @_spi(Private) public init(booleanLiteral value: Swift.Bool)
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias BooleanLiteralType = Swift.Bool
}
#if compiler(>=5.3) && $RetroactiveAttribute
@_spi(ForSwiftUIOnly) extension SwiftUICore.ViewTransform : @retroactive Swift.Encodable {
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func encode(to encoder: any Swift.Encoder) throws
}
#else
@_spi(ForSwiftUIOnly) extension SwiftUICore.ViewTransform : Swift.Encodable {
  @_spi(ForSwiftUIOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public func encode(to encoder: any Swift.Encoder) throws
}
#endif
@_spi(ClarityBoard) @_hasMissingDesignatedInitializers @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public class ClarityUIApplicationSceneSpecificationWrapper {
  @_spi(ClarityBoard) public static let specificationClass: Swift.AnyClass
  @_spi(ClarityBoard) @objc deinit
}
@_spi(ClarityBoard) @available(*, unavailable)
extension SwiftUI.ClarityUIApplicationSceneSpecificationWrapper : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol GaugeStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GaugeStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
public struct GaugeStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct CurrentValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct MinimumValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct MaximumValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct MarkedValueLabel : SwiftUICore.View {
    @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    public typealias Body = Swift.Never
  }
  public var value: Swift.Double
  public var label: SwiftUI.GaugeStyleConfiguration.Label
  public var currentValueLabel: SwiftUI.GaugeStyleConfiguration.CurrentValueLabel?
  public var minimumValueLabel: SwiftUI.GaugeStyleConfiguration.MinimumValueLabel?
  public var maximumValueLabel: SwiftUI.GaugeStyleConfiguration.MaximumValueLabel?
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.MaximumValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.MinimumValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.CurrentValueLabel : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GaugeStyleConfiguration.MarkedValueLabel : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func gaugeStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.GaugeStyle
  
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Stepper<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient nonisolated public init(@SwiftUICore.ViewBuilder label: () -> Label, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) {
        self.init(
            onIncrement: onIncrement,
            onDecrement: onDecrement,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  #else
  @_alwaysEmitIntoClient nonisolated public init(@SwiftUICore.ViewBuilder label: () -> Label, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) {
        self.init(
            onIncrement: onIncrement,
            onDecrement: onDecrement,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public init<CurrentValueLabel>(@SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where CurrentValueLabel : SwiftUICore.View
  #else
  @_spi(Private) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public init<CurrentValueLabel>(@SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> CurrentValueLabel, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where CurrentValueLabel : SwiftUICore.View
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, watchOS 9.0, macOS 10.15, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI7StepperV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Stepper : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable {
        self.init(
            value: value,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @_spi(Private) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public init<V, C>(value: SwiftUICore.Binding<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> C, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable, C : SwiftUICore.View
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_alwaysEmitIntoClient nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable {
        self.init(
            value: value,
            in: bounds,
            step: step,
            onEditingChanged: onEditingChanged,
            label: label)
    }
  @_spi(Private) @available(watchOS 9.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public init<V, C>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, @SwiftUICore.ViewBuilder label: () -> Label, @SwiftUICore.ViewBuilder currentValueLabel: () -> C, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable, C : SwiftUICore.View
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  #else
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol
  #else
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol
  #endif
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.Strideable
  @available(watchOS 9.0, *)
  @available(tvOS, unavailable)
  @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.Strideable
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  nonisolated public init<F>(value: SwiftUICore.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper where Label == SwiftUICore.Text {
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  nonisolated public init<F>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
  @_disfavoredOverload nonisolated public init<S, F>(_ title: S, value: SwiftUICore.Binding<F.FormatInput>, in bounds: Swift.ClosedRange<F.FormatInput>, step: F.FormatInput.Stride = 1, format: F, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, F : Foundation.ParseableFormatStyle, F.FormatInput : Swift.BinaryFloatingPoint, F.FormatOutput == Swift.String
}
@available(iOS 13.0, macOS 10.15, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.Stepper {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init(onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Stepper(label:onIncrement:onDecrement:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init(onIncrement: (() -> Swift.Void)?, onDecrement: (() -> Swift.Void)?, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Stepper(value:step:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Strideable
  @available(iOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(macOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(watchOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @available(visionOS, deprecated: 100000.0, renamed: "Stepper(value:in:step:label:onEditingChanged:)")
  @_disfavoredOverload nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, step: V.Stride = 1, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }, @SwiftUICore.ViewBuilder label: () -> Label) where V : Swift.Strideable
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Shape {
  @_spi(Private) @inlinable public func fillShadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> some SwiftUICore.View {
        return _ShadowView(shape: self, effect: _ShadowEffect(color: color,
            radius: radius, offset: CGSize(width: x, height: y)))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ShadowView<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: Content
  @_Concurrency.MainActor @preconcurrency public var effect: SwiftUICore._ShadowEffect
  @inlinable nonisolated public init(shape: Content, effect: SwiftUICore._ShadowEffect) {
        self.shape = shape
        self.effect = effect
    }
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._ShadowView<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ShadowView : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func tableColumnHeaders(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@_spi(Private) @available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func tableHeaderBezelVisibility(_ tableHeaderBezelVisibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS, introduced: 16.0, deprecated: 17.0, renamed: "tableColumnHeaders()")
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "tableColumnHeaders()")
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func tableHeaders(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@preconcurrency @_Concurrency.MainActor public struct FetchedResults<Result> : Swift.RandomAccessCollection where Result : CoreData.NSFetchRequestResult {
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public var nsSortDescriptors: [Foundation.NSSortDescriptor] {
    get
    nonmutating set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  #else
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  #endif
  nonisolated public var startIndex: Swift.Int {
    get
  }
  nonisolated public var endIndex: Swift.Int {
    get
  }
  nonisolated public subscript(position: Swift.Int) -> Result {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = Result
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Index = Swift.Int
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.FetchedResults<Result>>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.FetchedResults<Result>>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@propertyWrapper @preconcurrency @_Concurrency.MainActor public struct FetchRequest<Result> where Result : CoreData.NSFetchRequestResult {
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: SwiftUI.FetchedResults<Result> {
    get
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @preconcurrency @_Concurrency.MainActor public struct Configuration {
    @_Concurrency.MainActor @preconcurrency public var nsSortDescriptors: [Foundation.NSSortDescriptor]
    @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate?
  }
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.Binding<SwiftUI.FetchRequest<Result>.Configuration> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest : SwiftUICore.DynamicProperty {
  @_Concurrency.MainActor @preconcurrency public mutating func update()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(entity: CoreData.NSEntityDescription, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(entity: CoreData.NSEntityDescription, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, animation: SwiftUICore.Animation? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, animation: SwiftUICore.Animation? = nil)
  #endif
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, transaction: SwiftUICore.Transaction)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest where Result : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest where Result : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #else
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest.Configuration where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchedResults where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    nonmutating set
  }
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TabViewCustomization : Swift.Equatable, Swift.Sendable, Swift.Codable {
  public init()
  public subscript(sidebarVisibility id: Swift.String) -> SwiftUI.Visibility {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public subscript(sectionID id: Swift.String) -> [Swift.String]? {
    get
  }
  #else
  public subscript(sectionID id: Swift.String) -> [Swift.String]? {
    get
  }
  #endif
  public mutating func resetVisibility()
  public mutating func resetSectionOrder(for sectionID: Swift.String)
  public mutating func resetSectionOrder()
  public static func == (a: SwiftUI.TabViewCustomization, b: SwiftUI.TabViewCustomization) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.SceneStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value = TabViewCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabViewCustomization
  #else
  public init(wrappedValue: Value = TabViewCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabViewCustomization
  #endif
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.AppStorage {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(wrappedValue: Value = TabViewCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabViewCustomization
  #else
  public init(wrappedValue: Value = TabViewCustomization(), _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftUI.TabViewCustomization
  #endif
}
@_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@available(macOS, unavailable)
public protocol _UIInteractionRepresentable {
  associatedtype UIInteractionType : ObjectiveC.NSObject, UIKit.UIInteraction
  @_spi(Private) @_Concurrency.MainActor func makeUIInteraction() -> Self.UIInteractionType
  @_spi(Private) @_Concurrency.MainActor func updateUIInteraction(_ uiInteraction: Self.UIInteractionType)
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  nonisolated public func interactionRepresentable(_ representable: some _UIInteractionRepresentable) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ToolbarTitleDisplayMode {
  public static var automatic: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static var large: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var inlineLarge: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
  public static var inline: SwiftUI.ToolbarTitleDisplayMode {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ToolbarTitleDisplayMode : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func toolbarTitleDisplayMode(_ mode: SwiftUI.ToolbarTitleDisplayMode) -> some SwiftUICore.View
  
}
@_spi(DoNotImport) @available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct LimitedAvailabilityTableRowContent<TableRowValue> : SwiftUI.TableRowContent where TableRowValue : Swift.Identifiable {
  @_spi(DoNotImport) public typealias TableRowValue = TableRowValue
  @_spi(DoNotImport) public typealias TableRowBody = Swift.Never
  @_spi(DoNotImport) internal let storage: SwiftUI.LimitedAvailabilityTableRowContentStorageBase<TableRowValue>
  @_spi(DoNotImport) @usableFromInline
  internal init(erasing: some TableRowContent<TableRowValue>)
  @_spi(DoNotImport) public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.LimitedAvailabilityTableRowContent<TableRowValue>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @_alwaysEmitIntoClient public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int? {
        return nil
    }
  #else
  @_spi(DoNotImport) @_alwaysEmitIntoClient public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int? {
        return nil
    }
  #endif
  @_spi(DoNotImport) @_alwaysEmitIntoClient public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool {
        return true
    }
  @_spi(DoNotImport) public var tableRowBody: Swift.Never {
    @_spi(DoNotImport) get
  }
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.LimitedAvailabilityTableRowContent : Swift.Sendable {
}
@_spi(DoNotImport) @_hasMissingDesignatedInitializers @available(iOS 17.5, macOS 14.5, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public class LimitedAvailabilityTableRowContentStorageBase<TableRowValue> where TableRowValue : Swift.Identifiable {
  @_spi(DoNotImport) @objc deinit
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.LimitedAvailabilityTableRowContentStorageBase : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct ClarityUIPreviewContext : SwiftUI.PreviewContext {
  @_spi(Private) public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey {
    @_spi(Private) get
  }
  @_spi(Private) public init()
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ClarityUIPreviewContext : Swift.Sendable {
}
@_spi(Previews) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct ClarityUIPreviewContextKey : SwiftUI.PreviewContextKey {
  @_spi(Previews) public static var defaultValue: SwiftUI.ClarityUIPreviewContextKey?
  @_spi(Previews) @available(iOS 16.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  @available(macCatalyst, unavailable)
  public typealias Value = SwiftUI.ClarityUIPreviewContextKey?
}
@_spi(Previews) @available(*, unavailable)
extension SwiftUI.ClarityUIPreviewContextKey : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func badge(_ count: Swift.Int) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #else
  nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func badge(_ key: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View
  
  #else
  nonisolated public func badge(_ key: SwiftUICore.LocalizedStringKey?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public func badge<S>(_ label: S?) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  #else
  @_disfavoredOverload nonisolated public func badge<S>(_ label: S?) -> some SwiftUICore.View where S : Swift.StringProtocol
  
  #endif
}
@_spi(DoNotImport) @available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.Scene {
  @_spi(DoNotImport) nonisolated public func badge(_ count: Swift.Int) -> some SwiftUI.Scene
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUI.Scene
  
  #else
  @_spi(DoNotImport) nonisolated public func badge(_ label: SwiftUICore.Text?) -> some SwiftUI.Scene
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) nonisolated public func badge(_ key: SwiftUICore.LocalizedStringKey?) -> some SwiftUI.Scene
  
  #else
  @_spi(DoNotImport) nonisolated public func badge(_ key: SwiftUICore.LocalizedStringKey?) -> some SwiftUI.Scene
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @_disfavoredOverload nonisolated public func badge<S>(_ label: S?) -> some SwiftUI.Scene where S : Swift.StringProtocol
  
  #else
  @_spi(DoNotImport) @_disfavoredOverload nonisolated public func badge<S>(_ label: S?) -> some SwiftUI.Scene where S : Swift.StringProtocol
  
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol ControlGroupStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.ControlGroupStyleConfiguration
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct ControlGroupStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 15.0, tvOS 17.0, macOS 12.0, *)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  public let content: SwiftUI.ControlGroupStyleConfiguration.Content
  @available(iOS 16.0, macOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, tvOS 17.0, macOS 13.0, *)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  @available(iOS 16.0, macOS 13.0, *)
  public let label: SwiftUI.ControlGroupStyleConfiguration.Label
}
@available(*, unavailable)
extension SwiftUI.ControlGroupStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ControlGroupStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.ControlGroupStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func controlGroupStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.ControlGroupStyle
  
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@frozen @_Concurrency.MainActor @preconcurrency public struct EmptyControlWidgetTemplate {
  public typealias Body = Swift.Never
  @inlinable @_Concurrency.MainActor @preconcurrency public init() {}
  @_Concurrency.MainActor @preconcurrency public static var _kind: Swift.UInt {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetTemplate>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@available(*, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command) -> some SwiftUICore.View
  
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 15.4, macOS 12.3, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUICore.View
  
  #else
  @available(iOS 15.4, macOS 12.3, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization) -> some SwiftUICore.View
  
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.Scene {
  nonisolated public func keyboardShortcut(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization = .automatic) -> some SwiftUI.Scene
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUI.Scene
  
  #else
  nonisolated public func keyboardShortcut(_ shortcut: SwiftUI.KeyboardShortcut?) -> some SwiftUI.Scene
  
  #endif
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct KeyboardShortcut : Swift.Sendable {
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct Localization : Swift.Sendable {
    public static let automatic: SwiftUI.KeyboardShortcut.Localization
    public static let withoutMirroring: SwiftUI.KeyboardShortcut.Localization
    public static let custom: SwiftUI.KeyboardShortcut.Localization
  }
  public static let defaultAction: SwiftUI.KeyboardShortcut
  public static let cancelAction: SwiftUI.KeyboardShortcut
  public var key: SwiftUI.KeyEquivalent
  public var modifiers: SwiftUICore.EventModifiers
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public var localization: SwiftUI.KeyboardShortcut.Localization
  public init(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command)
  @available(iOS 15.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public init(_ key: SwiftUI.KeyEquivalent, modifiers: SwiftUICore.EventModifiers = .command, localization: SwiftUI.KeyboardShortcut.Localization)
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct KeyEquivalent : Swift.Sendable {
  public static let upArrow: SwiftUI.KeyEquivalent
  public static let downArrow: SwiftUI.KeyEquivalent
  public static let leftArrow: SwiftUI.KeyEquivalent
  public static let rightArrow: SwiftUI.KeyEquivalent
  public static let escape: SwiftUI.KeyEquivalent
  public static let delete: SwiftUI.KeyEquivalent
  public static let deleteForward: SwiftUI.KeyEquivalent
  public static let home: SwiftUI.KeyEquivalent
  public static let end: SwiftUI.KeyEquivalent
  public static let pageUp: SwiftUI.KeyEquivalent
  public static let pageDown: SwiftUI.KeyEquivalent
  public static let clear: SwiftUI.KeyEquivalent
  public static let tab: SwiftUI.KeyEquivalent
  public static let space: SwiftUI.KeyEquivalent
  public static let `return`: SwiftUI.KeyEquivalent
  public var character: Swift.Character
  public init(_ character: Swift.Character)
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyEquivalent : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.KeyEquivalent, b: SwiftUI.KeyEquivalent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyEquivalent : Swift.ExpressibleByExtendedGraphemeClusterLiteral {
  public init(extendedGraphemeClusterLiteral: Swift.Character)
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.Character
  @available(iOS 14.0, tvOS 17.0, macOS 11.0, *)
  @available(watchOS, unavailable)
  public typealias UnicodeScalarLiteralType = Swift.Character
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var keyboardShortcut: SwiftUI.KeyboardShortcut? {
    get
  }
  #else
  public var keyboardShortcut: SwiftUI.KeyboardShortcut? {
    get
  }
  #endif
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.KeyboardShortcut : Swift.Hashable {
  public static func == (lhs: SwiftUI.KeyboardShortcut, rhs: SwiftUI.KeyboardShortcut) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.AccessibilityAttachment : @retroactive SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityAttachment) -> Swift.Bool
  package static func combine(_ children: [SwiftUICore.AccessibilityAttachment]) -> SwiftUICore.AccessibilityAttachment
}
#else
extension SwiftUICore.AccessibilityAttachment : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityAttachment) -> Swift.Bool
  package static func combine(_ children: [SwiftUICore.AccessibilityAttachment]) -> SwiftUICore.AccessibilityAttachment
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.AccessibilityProperties : @retroactive SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityProperties) -> Swift.Bool
}
#else
extension SwiftUICore.AccessibilityProperties : SwiftUICore.AccessibilityCombinable {
  @discardableResult
  package mutating func merge(with child: SwiftUICore.AccessibilityProperties) -> Swift.Bool
}
#endif
extension SwiftUICore.View {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient nonisolated public func autocorrectionDisabled(_ disable: Swift.Bool = true) -> some SwiftUICore.View {
        return disableAutocorrection(disable)
    }
  
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 8.0, *)
  @_alwaysEmitIntoClient public var autocorrectionDisabled: Swift.Bool {
    get { disableAutocorrection ?? false }
    set { disableAutocorrection = newValue }
  }
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  nonisolated public func disableAutocorrection(_ disable: Swift.Bool?) -> some SwiftUICore.View
  
  #else
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "autocorrectionDisabled(_:)")
  nonisolated public func disableAutocorrection(_ disable: Swift.Bool?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  public var disableAutocorrection: Swift.Bool? {
    get
    set
  }
  #else
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(watchOS, introduced: 8.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "autocorrectionDisabled")
  public var disableAutocorrection: Swift.Bool? {
    get
    set
  }
  #endif
}
@_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public protocol UINavigationItemAdaptor {
  @_spi(Private_UINavigationItemAdaptor) var options: SwiftUI.UINavigationItemAdaptorOptions { get }
  @_spi(Private_UINavigationItemAdaptor) func updateUINavigationItem(_ uiNavigationItem: UIKit.UINavigationItem, context: Self.Context)
  @_spi(Private_UINavigationItemAdaptor) func viewControllerWillAppear(_ viewController: UIKit.UIViewController, child: UIKitCore.UIViewController) -> Swift.Bool
  @_spi(Private_UINavigationItemAdaptor) func viewControllerWillDisappear(_ viewController: UIKit.UIViewController, child: UIKitCore.UIViewController) -> Swift.Bool
  @_spi(Private_UINavigationItemAdaptor) typealias Context = SwiftUI.UINavigationItemAdaptorContext
}
@_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct UINavigationItemAdaptorContext {
}
@_spi(Private_UINavigationItemAdaptor) @available(*, unavailable)
extension SwiftUI.UINavigationItemAdaptorContext : Swift.Sendable {
}
@_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension SwiftUI.UINavigationItemAdaptor {
  @_spi(Private_UINavigationItemAdaptor) public var options: SwiftUI.UINavigationItemAdaptorOptions {
    @_spi(Private_UINavigationItemAdaptor) get
  }
  @_spi(Private_UINavigationItemAdaptor) public func viewControllerWillAppear(_ viewController: UIKit.UIViewController, child: UIKitCore.UIViewController) -> Swift.Bool
  @_spi(Private_UINavigationItemAdaptor) public func viewControllerWillDisappear(_ viewController: UIKit.UIViewController, child: UIKitCore.UIViewController) -> Swift.Bool
}
@_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
public struct UINavigationItemAdaptorOptions : Swift.OptionSet, Swift.Sendable {
  @_spi(Private_UINavigationItemAdaptor) public let rawValue: Swift.Int
  @_spi(Private_UINavigationItemAdaptor) public init(rawValue: Swift.Int)
  @_spi(Private_UINavigationItemAdaptor) public static let propagatesChildViewControllers: SwiftUI.UINavigationItemAdaptorOptions
  @_spi(Private_UINavigationItemAdaptor) public static let disableUpdates: SwiftUI.UINavigationItemAdaptorOptions
  @_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.UINavigationItemAdaptorOptions
  @_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public typealias Element = SwiftUI.UINavigationItemAdaptorOptions
  @_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.Int
}
extension SwiftUICore.View {
  @_spi(Private_UINavigationItemAdaptor) @available(iOS 18.0, tvOS 18.0, watchOS 11.0, *)
  @available(macOS, unavailable)
  nonisolated public func navigationItemAdaptor(_ adaptor: some UINavigationItemAdaptor) -> some SwiftUICore.View
  
}
@_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
public typealias NavigationSplit = SwiftUI.NavigationSplitView
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct NavigationSplitView<Sidebar, Content, Detail> : SwiftUICore.View where Sidebar : SwiftUICore.View, Content : SwiftUICore.View, Detail : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  nonisolated public init(@SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  @_spi(_) @available(*, deprecated, message: "switch from Visibility to NavigationSplitViewVisibility for two-column NavigationSplitView")
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.Visibility>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19NavigationSplitViewV4bodyQrvp", 0) __<Sidebar, Content, Detail>
}
@available(*, unavailable)
extension SwiftUI.NavigationSplitView : Swift.Sendable {
}
@_spi(ForWeatherOnly) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationSplitView {
  @_spi(ForWeatherOnly) nonisolated public init(columnVisibility: SwiftUI.NavigationSplitViewVisibility, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  @_spi(ForWeatherOnly) nonisolated public init(columnVisibility: SwiftUI.NavigationSplitViewVisibility, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.NavigationSplitView {
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(preferredCompactColumn:sidebar:content:detail:)")
  nonisolated public init(topColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(columnVisibility:preferredCompactColumn:sidebar:content:detail:)")
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, topColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(preferredCompactColumn:sidebar:detail:)")
  nonisolated public init(topColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(columnVisibility:preferredCompactColumn:sidebar:detail:)")
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, topColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(columnVisibility:preferredCompactColumn:sidebar:content:detail:)")
  nonisolated public init(columnVisibility: SwiftUI.NavigationSplitViewVisibility, topColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(columnVisibility:preferredCompactColumn:sidebar:detail:)")
  nonisolated public init(columnVisibility: SwiftUI.NavigationSplitViewVisibility, topColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.NavigationSplitView {
  nonisolated public init(preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  nonisolated public init(preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
  nonisolated public init(columnVisibility: SwiftUICore.Binding<SwiftUI.NavigationSplitViewVisibility>, preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
}
@_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.NavigationSplitView {
  @_spi(_) nonisolated public init(columnVisibility: SwiftUI.NavigationSplitViewVisibility, preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder detail: () -> Detail)
  @_spi(_) nonisolated public init(columnVisibility: SwiftUI.NavigationSplitViewVisibility, preferredCompactColumn: SwiftUICore.Binding<SwiftUI.NavigationSplitViewColumn>, @SwiftUICore.ViewBuilder sidebar: () -> Sidebar, @SwiftUICore.ViewBuilder detail: () -> Detail) where Content == SwiftUICore.EmptyView
}
@_spi(ForWeatherOnly) @available(*, deprecated, message: "Deprecated navigation SPI. Will be removed in Dawnburst, M2.")
public typealias NavigationSplitVisibility = SwiftUI.NavigationSplitViewVisibility
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct NavigationSplitViewVisibility : Swift.Equatable, Swift.Codable, Swift.Sendable {
  public static var detailOnly: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static var doubleColumn: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static var all: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static var automatic: SwiftUI.NavigationSplitViewVisibility {
    get
  }
  public static func == (lhs: SwiftUI.NavigationSplitViewVisibility, rhs: SwiftUI.NavigationSplitViewVisibility) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol ControlWidgetTemplateModifier {
  associatedtype Body : SwiftUI.ControlWidgetTemplate
  @_spi(Widget) func body(content: Self.Content) -> Self.Body
  @_spi(Widget) typealias Content = SwiftUI.ControlWidgetTemplateModifier_Content<Self>
  @_spi(Widget) static func _makeControlWidgetTemplate(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) static var _kind: Swift.UInt { get }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplateModifier {
  @_spi(Widget) public static func _makeControlWidgetTemplate(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) public static var _kind: Swift.UInt {
    @_spi(Widget) get
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplateModifier where Self.Body == Swift.Never {
  @_spi(Widget) public func body(content: Self.Content) -> Self.Body
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(modifier: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetTemplate>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplate {
  @_spi(Widget) @inlinable @_Concurrency.MainActor @preconcurrency public func modifier<T>(_ modifier: T) -> SwiftUICore.ModifiedContent<Self, T> {
        return .init(content: self, modifier: modifier)
    }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetTemplate where Content : SwiftUI.ControlWidgetTemplate, Modifier : SwiftUI.ControlWidgetTemplateModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static var _kind: Swift.UInt {
    @_spi(Widget) get
  }
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    @_spi(Widget) get
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.ModifiedContent : SwiftUI.ControlWidgetTemplateModifier where Content : SwiftUI.ControlWidgetTemplateModifier, Modifier : SwiftUI.ControlWidgetTemplateModifier {
  @_spi(Widget) public static func _makeControlWidgetTemplate(modifier: SwiftUICore._GraphValue<SwiftUICore.ModifiedContent<Content, Modifier>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ControlWidgetTemplateModifier_Content<Modifier> : SwiftUI.ControlWidgetTemplate where Modifier : SwiftUI.ControlWidgetTemplateModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static var _kind: Swift.UInt {
    @_spi(Widget) get
  }
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(control: SwiftUICore._GraphValue<SwiftUI.ControlWidgetTemplateModifier_Content<Modifier>>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  @_spi(Widget) @available(iOS 18.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_spi_available(macOS, introduced: 15.0)
  @available(visionOS, unavailable)
  public typealias Body = Swift.Never
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.ControlWidgetTemplateModifier_Content : Swift.Sendable {
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.CustomHoverEffect
  
  #else
  public func hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.CustomHoverEffect
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.CustomHoverEffect
  
  #else
  public func hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.View
  
  #else
  nonisolated public func hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.View
  
  #else
  nonisolated public func hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.View
  
  #endif
  nonisolated public func hoverEffectGroup() -> some SwiftUICore.View
  
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct HoverEffectGroup : Swift.Equatable, Swift.Sendable {
  public struct Behavior : Swift.Equatable, Swift.Sendable {
    public static let activatesGroup: SwiftUI.HoverEffectGroup.Behavior
    public static let followsGroup: SwiftUI.HoverEffectGroup.Behavior
    public static let ignoresGroup: SwiftUI.HoverEffectGroup.Behavior
    public static func == (a: SwiftUI.HoverEffectGroup.Behavior, b: SwiftUI.HoverEffectGroup.Behavior) -> Swift.Bool
  }
  public init(_ namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(id: Swift.String?, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup)
  #else
  public init(id: Swift.String?, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup)
  #endif
  public func behavior(_ behavior: SwiftUI.HoverEffectGroup.Behavior) -> SwiftUI.HoverEffectGroup
  public static func == (a: SwiftUI.HoverEffectGroup, b: SwiftUI.HoverEffectGroup) -> Swift.Bool
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func _hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func _hoverEffectGroup(id: Swift.String? = nil, in namespace: SwiftUICore.Namespace.ID, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup) -> some SwiftUICore.CustomHoverEffect
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func _hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func _hoverEffectGroup(_ group: SwiftUI.HoverEffectGroup?) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.HoverEffectGroup {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public init(id: SwiftUI.HoverEffectGroup.Identifier, behavior: SwiftUI.HoverEffectGroup.Behavior = .activatesGroup, scope: SwiftUI.HoverEffectGroup.Scope = .local)
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static func namespace(_ namespace: SwiftUICore.Namespace.ID) -> SwiftUI.HoverEffectGroup
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static func named(_ name: Swift.String, in namespace: SwiftUICore.Namespace.ID) -> SwiftUI.HoverEffectGroup
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static func custom(_ name: Swift.String) -> SwiftUI.HoverEffectGroup
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func scope(_ scope: SwiftUI.HoverEffectGroup.Scope) -> SwiftUI.HoverEffectGroup
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.HoverEffectGroup {
  package static func implicit(_ identity: SwiftUICore.DisplayList.Identity) -> SwiftUI.HoverEffectGroup
  package static func view(_ namespace: SwiftUICore.Namespace.ID) -> SwiftUI.HoverEffectGroup
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.HoverEffectGroup {
  @_spi(CustomHoverEffects) public struct Identifier : Swift.Hashable, Swift.Sendable {
    @_spi(CustomHoverEffects) public init(_ namespace: SwiftUICore.Namespace.ID)
    #if compiler(>=5.3) && $NoncopyableGenerics
    @_spi(CustomHoverEffects) public init(id: Swift.String?, in namespace: SwiftUICore.Namespace.ID)
    #else
    @_spi(CustomHoverEffects) public init(id: Swift.String?, in namespace: SwiftUICore.Namespace.ID)
    #endif
    @_spi(CustomHoverEffects) public static func namespace(_ namespace: SwiftUICore.Namespace.ID) -> SwiftUI.HoverEffectGroup.Identifier
    @_spi(CustomHoverEffects) public static func named(_ name: Swift.String, in namespace: SwiftUICore.Namespace.ID) -> SwiftUI.HoverEffectGroup.Identifier
    @_spi(CustomHoverEffects) public static func custom(_ name: Swift.String) -> SwiftUI.HoverEffectGroup.Identifier
    @_spi(CustomHoverEffects) package static func implicit(_ identity: SwiftUICore.DisplayList.Identity) -> SwiftUI.HoverEffectGroup.Identifier
    @_spi(CustomHoverEffects) public static func view(_ namespace: SwiftUICore.Namespace.ID) -> SwiftUI.HoverEffectGroup.Identifier
    @_spi(CustomHoverEffects) public func hash(into hasher: inout Swift.Hasher)
    @_spi(CustomHoverEffects) public static func == (a: SwiftUI.HoverEffectGroup.Identifier, b: SwiftUI.HoverEffectGroup.Identifier) -> Swift.Bool
    @_spi(CustomHoverEffects) public var hashValue: Swift.Int {
      @_spi(CustomHoverEffects) get
    }
  }
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.HoverEffectGroup {
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct Scope : Swift.Equatable, Swift.Sendable {
    @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static let local: SwiftUI.HoverEffectGroup.Scope
    @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static let global: SwiftUI.HoverEffectGroup.Scope
    @_spi(UIFrameworks) @_spi(CustomHoverEffects) public static func == (a: SwiftUI.HoverEffectGroup.Scope, b: SwiftUI.HoverEffectGroup.Scope) -> Swift.Bool
  }
}
@available(iOS 13.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct EditButton : SwiftUICore.View {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI10EditButtonV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.EditButton : Swift.Sendable {
}
@_spi(UIFrameworks) @available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.SystemShadowStyleMetrics.Separated {
  @_spi(UIFrameworks) public var color: UIKit.UIColor {
    @_spi(UIFrameworks) get
    @_spi(UIFrameworks) set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _IgnoredByLayoutEffect<Base> : SwiftUICore.GeometryEffect where Base : SwiftUICore.GeometryEffect {
  @_Concurrency.MainActor @preconcurrency public var base: Base
  @_Concurrency.MainActor @preconcurrency public static var _affectsLayout: Swift.Bool {
    get
  }
  @inlinable @_Concurrency.MainActor @preconcurrency public init(_ base: Base) {
        self.base = base
    }
  @_Concurrency.MainActor @preconcurrency public func effectValue(size: CoreFoundation.CGSize) -> SwiftUICore.ProjectionTransform
  @_Concurrency.MainActor @preconcurrency public var animatableData: Base.AnimatableData {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias AnimatableData = Base.AnimatableData
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._IgnoredByLayoutEffect : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._IgnoredByLayoutEffect : Swift.Equatable where Base : Swift.Equatable {
  nonisolated public static func == (a: SwiftUI._IgnoredByLayoutEffect<Base>, b: SwiftUI._IgnoredByLayoutEffect<Base>) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.GeometryEffect {
  @inlinable public func ignoredByLayout() -> SwiftUI._IgnoredByLayoutEffect<Self> {
        return _IgnoredByLayoutEffect(self)
    }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.LinearGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var linear: SwiftUI.LinearGaugeStyle {
    get { .init() }
  }
}
@_spi(Private) @available(iOS, deprecated)
@available(macOS, deprecated)
@available(tvOS, unavailable)
@available(watchOS, deprecated)
extension SwiftUI.GaugeStyle where Self == SwiftUI.ComplicationLinearGaugeStyle {
  @_spi(Private) @available(*, deprecated, renamed: "accessoryLinear")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var complicationLinear: SwiftUI.ComplicationLinearGaugeStyle {
    @_spi(Private) get {
        .init()
    }
  }
}
@available(watchOS 7.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct LinearGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Color)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Gradient)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.LinearGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(watchOS 7.0, *)
  @available(iOS, unavailable, introduced: 16.0)
  @available(tvOS, unavailable)
  @available(macOS, unavailable, introduced: 13.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI16LinearGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.LinearGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated, renamed: "AccessoryLinearGaugeStyle")
@available(macOS, deprecated, renamed: "AccessoryLinearGaugeStyle")
@available(watchOS, deprecated, renamed: "AccessoryLinearGaugeStyle")
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ComplicationLinearGaugeStyle : SwiftUI.GaugeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Gradient)
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.ComplicationLinearGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, deprecated, introduced: 16.0, renamed: "AccessoryLinearGaugeStyle")
  @available(tvOS, unavailable, renamed: "AccessoryLinearGaugeStyle")
  @available(watchOS, deprecated, introduced: 7.0, renamed: "AccessoryLinearGaugeStyle")
  @available(macOS, deprecated, introduced: 13.0, renamed: "AccessoryLinearGaugeStyle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28ComplicationLinearGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ComplicationLinearGaugeStyle : Swift.Sendable {
}
@_spi(DoNotImport) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public func printRepresentation<Content>(@SwiftUI.PageBuilder _ representation: () -> Content) -> some SwiftUICore.View where Content : SwiftUI.PrintContent
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _EmptyScene : SwiftUI.Scene {
  @inlinable nonisolated public init() {}
  nonisolated public static func _makeScene(scene: SwiftUICore._GraphValue<SwiftUI._EmptyScene>, inputs: SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollView.Main : SwiftUICore.PrimitiveView {
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI._ScrollView<Provider>.Main>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum _ScrollViewAnimationMode {
  case never
  case discreteChanges
  case always
  public static func == (a: SwiftUI._ScrollViewAnimationMode, b: SwiftUI._ScrollViewAnimationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI._ScrollViewAnimationMode : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Transaction {
  public var _scrollViewAnimates: SwiftUI._ScrollViewAnimationMode {
    get
    set
  }
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.ControlWidgetTemplate {
  @_spi(Widget) nonisolated public func preference<K>(key _: K.Type = K.self, value: K.Value) -> some SwiftUI.ControlWidgetTemplate where K : SwiftUICore.PreferenceKey
  
  @_spi(Widget) nonisolated public func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.ControlWidgetTemplate where K : SwiftUICore.PreferenceKey
  
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier {
  @_spi(Widget) @_Concurrency.MainActor @preconcurrency public static func _makeControlWidgetTemplate(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUI._WidgetInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs) -> SwiftUI._WidgetOutputs
}
extension SwiftUICore.View {
  @_spi(Uniquely) @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead")
  nonisolated public func zoomPresentationTransitionSource(id: some Hashable) -> some SwiftUICore.View
  
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  nonisolated public func presentationSource(id: some Hashable) -> some SwiftUICore.View
  
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use the presentationSource modifier with a trailing closure instead.")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  nonisolated public func presentationSource(id: some Hashable, cornerRadius: CoreFoundation.CGFloat, style: SwiftUICore.RoundedCornerStyle = .continuous) -> some SwiftUICore.View
  
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  @available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
  nonisolated public func presentationSource(id: some Hashable, configuration: (SwiftUI.PresentationSourceConfiguration) -> SwiftUI.PresentationSourceConfiguration) -> some SwiftUICore.View
  
}
@_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
@available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
@available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
@available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
@available(visionOS, introduced: 2.0, deprecated: 100000.0, message: "Use matchedTransitionSource instead.")
public struct PresentationSourceConfiguration : Swift.Sendable {
  @_spi(Uniquely) public func shadow(color: SwiftUICore.Color = Color(.sRGBLinear, white: 0, opacity: 0.33), radius: CoreFoundation.CGFloat, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0) -> SwiftUI.PresentationSourceConfiguration
  @_spi(Uniquely) public func cornerRadius(_ radius: CoreFoundation.CGFloat, stye: SwiftUICore.RoundedCornerStyle = .continuous) -> SwiftUI.PresentationSourceConfiguration
  @_spi(Uniquely) public func backgroundColor(_ color: SwiftUICore.Color) -> SwiftUI.PresentationSourceConfiguration
}
extension UIKit.UIView {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @_Concurrency.MainActor @preconcurrency public func findZoomPresentationTransitionSourceView(id: some Hashable) -> UIKit.UIView?
  #else
  @_spi(Uniquely) @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @_Concurrency.MainActor @preconcurrency public func findZoomPresentationTransitionSourceView(id: some Hashable) -> UIKit.UIView?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @_Concurrency.MainActor @preconcurrency public func findPresentationSourceView(id: some Hashable) -> UIKit.UIView?
  #else
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @available(macOS, introduced: 15.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @available(tvOS, introduced: 18.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @available(watchOS, introduced: 11.0, deprecated: 100000.0, message: "Use findMatchedPresentationSource instead.")
  @_Concurrency.MainActor @preconcurrency public func findPresentationSourceView(id: some Hashable) -> UIKit.UIView?
  #endif
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct CommandGroup<Content> : SwiftUI.Commands where Content : SwiftUICore.View {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.CommandGroup<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  nonisolated public init(before group: SwiftUI.CommandGroupPlacement, @SwiftUICore.ViewBuilder addition: () -> Content)
  nonisolated public init(after group: SwiftUI.CommandGroupPlacement, @SwiftUICore.ViewBuilder addition: () -> Content)
  nonisolated public init(replacing group: SwiftUI.CommandGroupPlacement, @SwiftUICore.ViewBuilder addition: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Commands {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12CommandGroupV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.CommandGroup : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommandGroupPlacement {
  public static let appInfo: SwiftUI.CommandGroupPlacement
  public static let appSettings: SwiftUI.CommandGroupPlacement
  public static let systemServices: SwiftUI.CommandGroupPlacement
  public static let appVisibility: SwiftUI.CommandGroupPlacement
  public static let appTermination: SwiftUI.CommandGroupPlacement
  public static let newItem: SwiftUI.CommandGroupPlacement
  public static let saveItem: SwiftUI.CommandGroupPlacement
  public static let importExport: SwiftUI.CommandGroupPlacement
  public static let printItem: SwiftUI.CommandGroupPlacement
  public static let undoRedo: SwiftUI.CommandGroupPlacement
  public static let pasteboard: SwiftUI.CommandGroupPlacement
  public static let textEditing: SwiftUI.CommandGroupPlacement
  public static let textFormatting: SwiftUI.CommandGroupPlacement
  public static let toolbar: SwiftUI.CommandGroupPlacement
  public static let sidebar: SwiftUI.CommandGroupPlacement
  public static let windowSize: SwiftUI.CommandGroupPlacement
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  public static let windowList: SwiftUI.CommandGroupPlacement
  @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let singleWindowList: SwiftUI.CommandGroupPlacement
  public static let windowArrangement: SwiftUI.CommandGroupPlacement
  public static let help: SwiftUI.CommandGroupPlacement
  @_spi(ForPasswordsOnly) @_spi(DoNotImport) @available(macOS 15.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let appShortcuts: SwiftUI.CommandGroupPlacement
}
@available(*, unavailable)
extension SwiftUI.CommandGroupPlacement : Swift.Sendable {
}
extension SwiftUICore.Gesture {
  @_spi(DoNotImport) public func allowsIncompleteEventSequences() -> some SwiftUICore.Gesture
  
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TextFieldStyle where Self == SwiftUI.SquareBorderTextFieldStyle {
  @_alwaysEmitIntoClient public static var squareBorder: SwiftUI.SquareBorderTextFieldStyle {
    get { .init() }
  }
}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct SquareBorderTextFieldStyle : SwiftUI.TextFieldStyle {
  public init()
  public func _body(configuration: SwiftUI.TextField<SwiftUI.SquareBorderTextFieldStyle._Label>) -> some SwiftUICore.View
  
  @available(macOS 10.15, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI26SquareBorderTextFieldStyleV5_body13configurationQrAA0eF0VyAA01_efG5LabelVG_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SquareBorderTextFieldStyle : Swift.Sendable {
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
@_Concurrency.MainActor @preconcurrency public struct NavigationView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use NavigationStack or NavigationSplitView instead")
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.NavigationView : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct AnimatedValuePlaybackConfiguration : Swift.Equatable {
  @_spi(DoNotImport) public static func == (a: SwiftUI.AnimatedValuePlaybackConfiguration, b: SwiftUI.AnimatedValuePlaybackConfiguration) -> Swift.Bool
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValuePlaybackConfiguration {
  @_spi(DoNotImport) public static func scrubbing(time: Swift.Double) -> SwiftUI.AnimatedValuePlaybackConfiguration
  @_spi(DoNotImport) public static func scrubbing(progress: Swift.Double) -> SwiftUI.AnimatedValuePlaybackConfiguration
  @_spi(DoNotImport) public static func onChange(of value: some Equatable, interruptionBehavior: SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior = .restart) -> SwiftUI.AnimatedValuePlaybackConfiguration
  @_spi(DoNotImport) public static func repeating(autoreverses: Swift.Bool) -> SwiftUI.AnimatedValuePlaybackConfiguration
  @_spi(DoNotImport) public static let repeating: SwiftUI.AnimatedValuePlaybackConfiguration
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValuePlaybackConfiguration {
  @_spi(DoNotImport) public struct InterruptionBehavior : Swift.Equatable {
    @_spi(DoNotImport) public static func == (a: SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior, b: SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior) -> Swift.Bool
  }
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior {
  @_spi(DoNotImport) public static var ignore: SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) public static func restart(blendDuration: Swift.Double) -> SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior
  @_spi(DoNotImport) public static var restart: SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior {
    @_spi(DoNotImport) get
  }
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValuePlaybackConfiguration : Swift.Sendable {
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.AnimatedValuePlaybackConfiguration.InterruptionBehavior : Swift.Sendable {
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUI.IndexViewStyle where Self == SwiftUI.PageIndexViewStyle {
  @_alwaysEmitIntoClient public static var page: SwiftUI.PageIndexViewStyle {
    get { .init() }
  }
  @_alwaysEmitIntoClient public static func page(backgroundDisplayMode: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode) -> SwiftUI.PageIndexViewStyle {
        .init(backgroundDisplayMode: backgroundDisplayMode)
    }
}
@available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
@available(macOS, unavailable)
public struct PageIndexViewStyle : SwiftUI.IndexViewStyle {
  public struct BackgroundDisplayMode : Swift.Sendable {
    public static let automatic: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    @available(watchOS, unavailable)
    public static let interactive: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    @available(watchOS, unavailable)
    public static let always: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
    public static let never: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode
  }
  public init(backgroundDisplayMode: SwiftUI.PageIndexViewStyle.BackgroundDisplayMode = .automatic)
  public func _makeBody(configuration: SwiftUI.PageIndexViewStyle._Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI18PageIndexViewStyleV9_makeBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.PageIndexViewStyle : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@propertyWrapper @frozen public struct AccessibilityFocusState<Value> : SwiftUICore.DynamicProperty where Value : Swift.Hashable {
  @propertyWrapper @frozen public struct Binding {
    private var _binding: SwiftUICore.Binding<Value>
    public var wrappedValue: Value {
      get
      nonmutating set
    }
    public var projectedValue: SwiftUI.AccessibilityFocusState<Value>.Binding {
      get
    }
  }
  internal var technologies: SwiftUI.AccessibilityTechnologies? = nil
  internal var value: Value
  internal var location: SwiftUICore.AnyLocation<Value>?
  internal var resetValue: Value
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.AccessibilityFocusState<Value>.Binding {
    get
  }
  public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
  public init() where Value == Swift.Bool
  public init(for technologies: SwiftUI.AccessibilityTechnologies) where Value == Swift.Bool
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<T>() where Value == T?, T : Swift.Hashable
  #else
  public init<T>() where Value == T?, T : Swift.Hashable
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<T>(for technologies: SwiftUI.AccessibilityTechnologies) where Value == T?, T : Swift.Hashable
  #else
  public init<T>(for technologies: SwiftUI.AccessibilityTechnologies) where Value == T?, T : Swift.Hashable
  #endif
}
@available(*, unavailable)
extension SwiftUI.AccessibilityFocusState.Binding : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityFocusState : Swift.Sendable where Value : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityFocused<Value>(_ binding: SwiftUI.AccessibilityFocusState<Value>.Binding, equals value: Value) -> some SwiftUICore.View where Value : Swift.Hashable
  
  nonisolated public func accessibilityFocused(_ condition: SwiftUI.AccessibilityFocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._ConditionalContent : SwiftUI.ToolbarContent where TrueContent : SwiftUI.ToolbarContent, FalseContent : SwiftUI.ToolbarContent {
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<SwiftUICore._ConditionalContent<TrueContent, FalseContent>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore._ConditionalContent : SwiftUI.CustomizableToolbarContent where TrueContent : SwiftUI.CustomizableToolbarContent, FalseContent : SwiftUI.CustomizableToolbarContent {
}
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.ToolbarContent where Wrapped : SwiftUI.ToolbarContent {
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
#else
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.ToolbarContent where Wrapped : SwiftUI.ToolbarContent {
  nonisolated public static func _makeToolbar(content: SwiftUICore._GraphValue<Swift.Optional<Wrapped>>, inputs: SwiftUI._ToolbarInputs) -> SwiftUI._ToolbarOutputs
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.CustomizableToolbarContent where Wrapped : SwiftUI.CustomizableToolbarContent {
}
#else
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Swift.Optional : SwiftUI.CustomizableToolbarContent where Wrapped : SwiftUI.CustomizableToolbarContent {
}
#endif
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct Spacer {
  @_Concurrency.MainActor @preconcurrency public var minLength: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minLength: CoreFoundation.CGFloat? = nil) {
        self.minLength = minLength
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minLength: CoreFoundation.CGFloat? = nil) {
        self.minLength = minLength
    }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TextBaselineRelativeSpacer {
  @_Concurrency.MainActor @preconcurrency public var minLength: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minLength: CoreFoundation.CGFloat? = nil) {
        self.minLength = minLength
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minLength: CoreFoundation.CGFloat? = nil) {
        self.minLength = minLength
    }
  #endif
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _HSpacer {
  @_Concurrency.MainActor @preconcurrency public var minWidth: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minWidth: CoreFoundation.CGFloat? = nil) {
        self.minWidth = minWidth
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minWidth: CoreFoundation.CGFloat? = nil) {
        self.minWidth = minWidth
    }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _VSpacer {
  @_Concurrency.MainActor @preconcurrency public var minHeight: CoreFoundation.CGFloat?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minHeight: CoreFoundation.CGFloat? = nil) {
        self.minHeight = minHeight
    }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public init(minHeight: CoreFoundation.CGFloat? = nil) {
        self.minHeight = minHeight
    }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
package protocol PlatformSpacerRepresentable {
  static func shouldMakeRepresentation(inputs: SwiftUICore._ViewInputs) -> Swift.Bool
  static func makeRepresentation(inputs: SwiftUICore._ViewInputs, outputs: inout SwiftUICore._ViewOutputs)
}
extension SwiftUICore._ViewInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedSpacerRepresentation: (any SwiftUI.PlatformSpacerRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedSpacerRepresentation: (any SwiftUI.PlatformSpacerRepresentable.Type)? {
    get
    set
  }
  #endif
}
extension SwiftUICore._GraphInputs {
  #if compiler(>=5.3) && $NoncopyableGenerics
  package var requestedSpacerRepresentation: (any SwiftUI.PlatformSpacerRepresentable.Type)? {
    get
    set
  }
  #else
  package var requestedSpacerRepresentation: (any SwiftUI.PlatformSpacerRepresentable.Type)? {
    get
    set
  }
  #endif
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct ToolbarLabelStyle : Swift.Sendable, Swift.Equatable {
  public static var automatic: SwiftUI.ToolbarLabelStyle {
    get
  }
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var titleAndIcon: SwiftUI.ToolbarLabelStyle {
    get
  }
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var iconOnly: SwiftUI.ToolbarLabelStyle {
    get
  }
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static var titleOnly: SwiftUI.ToolbarLabelStyle {
    get
  }
  public static func == (a: SwiftUI.ToolbarLabelStyle, b: SwiftUI.ToolbarLabelStyle) -> Swift.Bool
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUI.Scene {
  nonisolated public func windowToolbarLabelStyle(fixed: SwiftUI.ToolbarLabelStyle) -> some SwiftUI.Scene
  
  nonisolated public func windowToolbarLabelStyle(_ toolbarLabelStyle: SwiftUICore.Binding<SwiftUI.ToolbarLabelStyle>) -> some SwiftUI.Scene
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public var toolbarLabelStyle: SwiftUI.ToolbarLabelStyle? {
    get
  }
  #else
  public var toolbarLabelStyle: SwiftUI.ToolbarLabelStyle? {
    get
  }
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.PrimitiveButtonStyle where Self == SwiftUI.BorderedProminentButtonStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var borderedProminent: SwiftUI.BorderedProminentButtonStyle {
    get {
        .init()
    }
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@_Concurrency.MainActor @preconcurrency public struct BorderedProminentButtonStyle : SwiftUI.PrimitiveButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedProminentButtonStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI28BorderedProminentButtonStyleV8makeBody13configurationQrAA09PrimitiveeF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedProminentButtonStyle : Swift.Sendable {
}
@_spi(UIFrameworks) extension SwiftUI.BorderedProminentButtonStyle : SwiftUI.ButtonStyleConvertible {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public var buttonStyleRepresentation: some SwiftUI.ButtonStyle {
    @_spi(UIFrameworks) get
  }
  @_spi(UIFrameworks) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ButtonStyleRepresentation = @_opaqueReturnTypeOf("$s7SwiftUI28BorderedProminentButtonStyleV06buttonF14RepresentationQrvp", 0) __
}
@available(macOS 15.0, visionOS 2.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PointerStyle {
  public static let `default`: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let horizontalText: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let verticalText: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let rectSelection: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let grabIdle: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let grabActive: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let link: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let zoomIn: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let zoomOut: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let columnResize: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func columnResize(directions: SwiftUICore.HorizontalDirection.Set) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static let rowResize: SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func rowResize(directions: SwiftUICore.VerticalDirection.Set) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func frameResize(position: SwiftUI.FrameResizePosition, directions: SwiftUI.FrameResizeDirection.Set = .all) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func image(_ image: SwiftUICore.Image, hotSpot: SwiftUICore.UnitPoint) -> SwiftUI.PointerStyle
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  public static func image(_ resource: DeveloperToolsSupport.ImageResource, hotSpot: SwiftUICore.UnitPoint) -> SwiftUI.PointerStyle
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  public static func shape(_ shape: some Shape, eoFill: Swift.Bool = false, size: CoreFoundation.CGSize) -> SwiftUI.PointerStyle
}
@available(*, unavailable)
extension SwiftUI.PointerStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol GroupBoxStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.GroupBoxStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct GroupBoxStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 14.0, macOS 11.0, *)
    @available(tvOS, unavailable, introduced: 13.0)
    @available(watchOS, unavailable, introduced: 6.0)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.GroupBoxStyleConfiguration.Label
  public let content: SwiftUI.GroupBoxStyleConfiguration.Content
}
@available(*, unavailable)
extension SwiftUI.GroupBoxStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GroupBoxStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.GroupBoxStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func groupBoxStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.GroupBoxStyle
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func automaticListButtonStyle(_ style: some ButtonStyle) -> some SwiftUICore.View
  
  @_spi(Private) nonisolated public func automaticListButtonStyle(_ style: some PrimitiveButtonStyle) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS, unavailable)
@available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.plain).")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PlainButtonMenuStyle : SwiftUI.MenuStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.PlainButtonMenuStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, unavailable, introduced: 14.0, message: "Use .menuStyle(.button) and .buttonStyle(.plain).")
  @available(tvOS, unavailable, introduced: 17.0, message: "Use .menuStyle(.button) and .buttonStyle(.plain).")
  @available(watchOS, unavailable, message: "Use .menuStyle(.button) and .buttonStyle(.plain).")
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use .menuStyle(.button) and .buttonStyle(.plain).")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20PlainButtonMenuStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PlainButtonMenuStyle : Swift.Sendable {
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TabContent {
  nonisolated public func defaultVisibility(_ visibility: SwiftUI.Visibility, for placements: SwiftUI.AdaptableTabBarPlacement...) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.0, visionOS 2.0, *)
@_spi_available(macOS, introduced: 15.0)
@_spi_available(tvOS, introduced: 18.0)
@_spi_available(watchOS, introduced: 11.0)
extension SwiftUI.TabContent {
  nonisolated public func hidden(_ hidden: Swift.Bool = true) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct TabPlacement : Swift.Hashable {
  public static let automatic: SwiftUI.TabPlacement
  public static let pinned: SwiftUI.TabPlacement
  public static let sidebarOnly: SwiftUI.TabPlacement
  @_spi(DoNotImport) @available(iOS, introduced: 18.0, deprecated: 18.0)
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public static let bottomBar: SwiftUI.TabPlacement
  @_spi(DoNotImport) @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public static let topBar: SwiftUI.TabPlacement
  @_spi(DoNotImport) @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0)
  @available(macOS, introduced: 15.0, deprecated: 15.0)
  @available(tvOS, introduced: 18.0, deprecated: 18.0)
  @available(watchOS, introduced: 11.0, deprecated: 11.0)
  @available(visionOS, introduced: 2.0, deprecated: 2.0)
  public static let sidebar: SwiftUI.TabPlacement
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.TabPlacement, b: SwiftUI.TabPlacement) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.TabPlacement : Swift.Sendable {
}
@available(macOS 15.0, *)
@_spi_available(iOS, introduced: 18.0)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_spi_available(visionOS, introduced: 2.0)
extension SwiftUICore.View {
  nonisolated public func sectionActions<Content>(@SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@_Concurrency.MainActor @preconcurrency open class _UIHostingView<Content> : UIKit.UIView, SwiftUICore.XcodeViewDebugDataProvider where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency final package let viewGraph: SwiftUICore.ViewGraph
  @_Concurrency.MainActor @preconcurrency final package let renderer: SwiftUICore.DisplayList.ViewRenderer
  @_Concurrency.MainActor @preconcurrency final package let eventBindingManager: SwiftUICore.EventBindingManager
  @_Concurrency.MainActor @preconcurrency package var currentTimestamp: SwiftUICore.Time
  @_Concurrency.MainActor @preconcurrency package var propertiesNeedingUpdate: SwiftUICore.ViewRendererHostProperties
  @_Concurrency.MainActor @preconcurrency package var renderingPhase: SwiftUICore.ViewRenderingPhase
  @_Concurrency.MainActor @preconcurrency package var externalUpdateCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency package var isHiddenForReuse: Swift.Bool {
    get
    set
  }
  @_spi(Private) @available(iOS 16.4, tvOS 16.4, watchOS 9.4, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var safeAreaRegions: SwiftUICore.SafeAreaRegions {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package var environmentOverride: SwiftUICore.EnvironmentValues? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency package var accessibilityEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency required public init(rootView: Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  #else
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  #endif
  @objc deinit
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency final public var _rendererConfiguration: SwiftUICore._RendererConfiguration {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency final public var _rendererObject: Swift.AnyObject? {
    get
  }
  #else
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency final public var _rendererObject: Swift.AnyObject? {
    get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency package func modifyViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var transform3D: QuartzCore.CATransform3D {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var transform: CoreFoundation.CGAffineTransform {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var clipsToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func tintColorDidChange()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func safeAreaInsetsDidChange()
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public func setRootView(_ newRootView: Content, transaction: SwiftUICore.Transaction)
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public var rootView: Content {
    get
    set
  }
  @_spi(Private) @available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
  @_Concurrency.MainActor @preconcurrency public var invalidatesIntrinsicContentSizeOnIdealSizeChange: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var safeAreaInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var automationElements: [Any]? {
    @objc get
    @objc set
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var automationElements: [Any]? {
    @objc get
    @objc set
  }
  #endif
  @_Concurrency.MainActor @preconcurrency final package func forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency final package func forEachDescendantHost(body: (any SwiftUICore.TestHost) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency final public func _viewDebugData() -> [SwiftUICore._ViewDebug.Data]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var next: UIKit.UIResponder? {
    @objc get
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var next: UIKit.UIResponder? {
    @objc get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func focusItems(in rect: CoreFoundation.CGRect) -> [any UIKit.UIFocusItem]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredFocusEnvironments: [any UIKit.UIFocusEnvironment] {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKitCore.UIFocusAnimationCoordinator)
  @_spi(Private) @available(iOS, introduced: 15.0, deprecated: 16.4, message: "Use UIHostingController/safeAreaRegions or _UIHostingView/safeAreaRegions")
  @_Concurrency.MainActor @preconcurrency final public var addsKeyboardToSafeAreaInsets: Swift.Bool {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc package func makeViewDebugData() -> Foundation.Data?
  #else
  @_Concurrency.MainActor @preconcurrency @objc package func makeViewDebugData() -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKitCore.UIView?
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKitCore.UIView?
  #endif
  @_spi(UIIntelligenceSupport) @_Concurrency.MainActor @preconcurrency @objc override dynamic open var _intelligenceBaseClass: Swift.AnyClass {
    @objc get
  }
  @_spi(UIIntelligenceSupport) @_Concurrency.MainActor @preconcurrency @objc override dynamic open func _intelligenceCollectContent(in visibleRect: CoreFoundation.CGRect, collector: UIIntelligenceSupport.UIIntelligenceElementCollector)
  @_spi(UIIntelligenceSupport) @_Concurrency.MainActor @preconcurrency @objc override dynamic open func _intelligenceCollectRemoteContent(in visibleRect: CoreFoundation.CGRect, remoteContextWrapper: UIIntelligenceSupport.UIIntelligenceCollectionRemoteContextWrapper)
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
extension SwiftUI._UIHostingView : SwiftUICore.TestHost {
  @_Concurrency.MainActor @preconcurrency package func setTestSize(_ size: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency package var attributeCountInfo: SwiftUICore.AttributeCountTestInfo {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func setTestSafeAreaInsets(_ insets: SwiftUICore.EdgeInsets)
  @_Concurrency.MainActor @preconcurrency package func testIntentsChanged(before: SwiftUICore.TestIntents, after: SwiftUICore.TestIntents)
  @_Concurrency.MainActor @preconcurrency public func _renderForTest(interval: Swift.Double)
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public func _renderAsyncForTest(interval: Swift.Double) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency package func renderForTest(interval: Swift.Double)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func _performScrollTest(startOffset: CoreFoundation.CGFloat = 0.0, iterations: Swift.Int = 0, delta: CoreFoundation.CGFloat = 0.0, length: CoreFoundation.CGFloat = 0.0, completion: (() -> Swift.Void)? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public func _performScrollTest(startOffset: CoreFoundation.CGFloat = 0.0, iterations: Swift.Int = 0, delta: CoreFoundation.CGFloat = 0.0, length: CoreFoundation.CGFloat = 0.0, completion: (() -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor @preconcurrency package var viewCacheIsEmpty: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency package var hasActivePresentation: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency package func dismissActivePresentations()
}
@_spi(Private) @available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func windowContentAspectRatio(_ aspectRatio: CoreFoundation.CGSize? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func windowContentAspectRatio(_ aspectRatio: CoreFoundation.CGSize? = nil) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@_functionBuilder public struct WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : SwiftUI.Widget {
       content
    }
  public static func buildBlock() -> some SwiftUI.Widget
  
  public static func buildBlock<Content>(_ content: Content) -> some SwiftUI.Widget where Content : SwiftUI.Widget
  
  #if compiler(>=5.3) && $ParameterPacks
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildBlock<each C>(_ c: repeat each C) -> some SwiftUI.Widget where repeat each C : SwiftUI.Widget {
        TupleWidget((repeat each c))
    }
  #if compiler(>=5.3) && $ParameterPacks

  #endif
  #endif
}
@available(*, unavailable)
extension SwiftUI.WidgetBundleBuilder : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetBundleBuilder {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public static func buildOptional(_ widget: (any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker)?) -> some SwiftUI.Widget {
        guard let widget else {
             
             
             
            fatalError("""
                if #available in WidgetBundleBuilder includes an unknown OS \
                version
                """)
        }
        if #available(iOS 16.1, macOS 13.0, watchOS 9.1, *) {
            return widget as! LimitedAvailabilityWidget
        } else {
             
             
             
             
             
             
            return buildBlock()
        }
    }
  
  #else
  @_alwaysEmitIntoClient public static func buildOptional(_ widget: (any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker)?) -> some SwiftUI.Widget {
        guard let widget else {
             
             
             
            fatalError("""
                if #available in WidgetBundleBuilder includes an unknown OS \
                version
                """)
        }
        if #available(iOS 16.1, macOS 13.0, watchOS 9.1, *) {
            return widget as! LimitedAvailabilityWidget
        } else {
             
             
             
             
             
             
            return buildBlock()
        }
    }
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(*, unavailable, message: "if statements in a WidgetBundleBuilder can only be used with #available clauses")
  public static func buildOptional<W>(_ widget: W?) where W : SwiftUI.Widget
  #else
  @available(*, unavailable, message: "if statements in a WidgetBundleBuilder can only be used with #available clauses")
  public static func buildOptional<W>(_ widget: W?) where W : SwiftUI.Widget
  #endif
  @available(iOS 16.1, macOS 13.0, watchOS 9.1, *)
  @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ widget: some Widget) -> any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker {
        return LimitedAvailabilityWidget(widget)
    }
  @available(iOS, deprecated: 14.0, obsoleted: 16.1, message: "this code may crash on earlier versions of the OS; specify '#available(iOS 16.1, *)' or newer instead")
  @available(macOS, deprecated: 11.0, obsoleted: 13.0, message: "this code may crash on earlier versions of the OS; specify '#available(macOS 13.0, *)' or newer instead")
  @available(watchOS, deprecated: 9.0, obsoleted: 9.1, message: "this code may crash on earlier versions of the OS; specify '#available(watchOS 9.1, *)' or newer instead")
  @_disfavoredOverload @_alwaysEmitIntoClient public static func buildLimitedAvailability(_ widget: any SwiftUI.Widget) -> any SwiftUI.Widget & SwiftUI._LimitedAvailabilityWidgetMarker {
        fatalError("Unavailable")
    }
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@_marker public protocol _LimitedAvailabilityWidgetMarker {
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_spi(SSC) @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> some SwiftUI.Widget where Content : SwiftUI.ControlWidget_V1 {
         
        _ControlWidgetAdaptor_V1(content)
    }
  
}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WidgetBundleBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> some SwiftUI.Widget where Content : SwiftUI.ControlWidget {
        _ControlWidgetAdaptor(content)
    }
  
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@_Concurrency.MainActor @preconcurrency open class UIHostingController<Content> : UIKit.UIViewController where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var undoManager: Foundation.UndoManager? {
    @objc get
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var undoManager: Foundation.UndoManager? {
    @objc get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  #endif
  @_spi(Private) @available(iOS 17.1, tvOS 17.1, watchOS 10.1, visionOS 1.0, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var centersRootView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(rootView: Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init?(coder aDecoder: Foundation.NSCoder, rootView: Content)
  #else
  @_Concurrency.MainActor @preconcurrency public init?(coder aDecoder: Foundation.NSCoder, rootView: Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  #else
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  #endif
  @_spi(ForAccessibilityUIServerOnly) @_spi(ClarityBoard) @available(iOS 17.4, *)
  @available(macOS, unavailable)
  @available(visionOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(hostingView: SwiftUI._UIHostingView<Content>)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isModalInPresentation: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var rootView: Content {
    get
    set
  }
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  @_spi_available(watchOS, introduced: 9.0)
  @_Concurrency.MainActor @preconcurrency public var sizingOptions: SwiftUI.UIHostingControllerSizingOptions {
    get
    set
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public func setRootView(_ newRootView: Content, transaction: SwiftUICore.Transaction)
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(in size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public func _render(seconds: Swift.Double)
  @_Concurrency.MainActor @preconcurrency public func _forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  @available(iOS, introduced: 13.0, deprecated: 16.4, message: "Use UIHostingController/safeAreaRegions or _UIHostingView/safeAreaRegions")
  @available(macOS, unavailable)
  @available(tvOS, introduced: 13.0, deprecated: 16.4, message: "Use UIHostingController/safeAreaRegions or _UIHostingView/safeAreaRegions")
  @available(watchOS, introduced: 6.0, deprecated: 9.4, message: "Use UIHostingController/safeAreaRegions or _UIHostingView/safeAreaRegions")
  @_Concurrency.MainActor @preconcurrency public var _disableSafeArea: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func preferredContentSizeDidChange(forChildContentContainer container: any UIKit.UIContentContainer)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toParent parent: UIKit.UIViewController?)
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toParent parent: UIKit.UIViewController?)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMove(toParent parent: UIKit.UIViewController?)
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMove(toParent parent: UIKit.UIViewController?)
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForScreenEdgesDeferringSystemGestures: UIKit.UIViewController? {
    @objc get
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForScreenEdgesDeferringSystemGestures: UIKit.UIViewController? {
    @objc get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForHomeIndicatorAutoHidden: UIKit.UIViewController? {
    @objc get
  }
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForHomeIndicatorAutoHidden: UIKit.UIViewController? {
    @objc get
  }
  #endif
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency final public var _rendererConfiguration: SwiftUICore._RendererConfiguration {
    get
    set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency final public var _rendererObject: Swift.AnyObject? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency final public var _rendererObject: Swift.AnyObject? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func target(forAction action: ObjectiveC.Selector, withSender sender: Any?) -> Any?
  #else
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func target(forAction action: ObjectiveC.Selector, withSender sender: Any?) -> Any?
  #endif
  @objc deinit
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ForEach : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore.ForEach<Data, ID, Content>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @_alwaysEmitIntoClient public init<V>(_ data: Data, @SwiftUI.TableRowBuilder<V> content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, V == Content.TableRowValue, Data.Element : Swift.Identifiable {
        self.init(
            data, id: \Data.Element.id, content: content)
    }
  public init<V>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @SwiftUI.TableRowBuilder<V> content: @escaping (Data.Element) -> Content) where V == Content.TableRowValue
  @_alwaysEmitIntoClient public init(_ data: Data) where ID == Data.Element.ID, Content == SwiftUI.TableRow<Data.Element>, Data.Element : Swift.Identifiable {
        self.init(data, id: \Data.Element.id) {
            TableRow($0)
        }
    }
  public init<V>(_ data: Swift.Range<Swift.Int>, @SwiftUI.TableRowBuilder<V> content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int, V == Content.TableRowValue
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ForEach where Content : SwiftUI.TableRowContent {
  @available(*, unavailable, message: "This symbol only exists for ABI compatibility and should never be used directly.")
  @usableFromInline
  internal init(_ data: Data, @SwiftUI.TableRowBuilder<Data.Element> content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element == Content.TableRowValue
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol DynamicTableRowContent : SwiftUI.TableRowContent {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ForEach : SwiftUI.DynamicTableRowContent where Content : SwiftUI.TableRowContent {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.EnvironmentValues {
  public var managedObjectContext: CoreData.NSManagedObjectContext {
    get
    set
  }
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitPreferenceKeys : Swift.Equatable {
  @_spi(ForMapKitOnly) public static func == (a: SwiftUI.MapKitPreferenceKeys, b: SwiftUI.MapKitPreferenceKeys) -> Swift.Bool
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitPreferenceKeys : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitPreferencesInputs : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitPreferencesInputs {
  @_spi(ForMapKitOnly) public init(inputs: SwiftUICore._ViewInputs)
  @_spi(ForMapKitOnly) public mutating func remove<K>(_ key: K.Type) where K : SwiftUICore.PreferenceKey
  @_spi(ForMapKitOnly) public mutating func add<K>(_ key: K.Type) where K : SwiftUICore.PreferenceKey
  @_spi(ForMapKitOnly) public func contains<K>(_ key: K.Type) -> Swift.Bool where K : SwiftUICore.PreferenceKey
  @_spi(ForMapKitOnly) public func visitKeys<V>(_ visitor: inout V) where V : SwiftUI.MapKitPreferenceKeyVisitor
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct MapKitPreferencesOutputs {
  @_spi(ForMapKitOnly) public init()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(ForMapKitOnly) public subscript<K>(key: K.Type) -> SwiftUICore._GraphValue<K.Value>? where K : SwiftUICore.PreferenceKey {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
  #else
  @_spi(ForMapKitOnly) public subscript<K>(key: K.Type) -> SwiftUICore._GraphValue<K.Value>? where K : SwiftUICore.PreferenceKey {
    @_spi(ForMapKitOnly) get
    @_spi(ForMapKitOnly) set
  }
  #endif
  @_spi(ForMapKitOnly) public mutating func makePreferenceWriter<K>(inputs: SwiftUI.MapKitPreferencesInputs, key _: K.Type, value: @autoclosure () -> SwiftUICore._GraphValue<K.Value>) where K : SwiftUICore.PreferenceKey
  @_spi(ForMapKitOnly) public func visitKeys<V>(_ visitor: inout V) where V : SwiftUI.MapKitPreferenceKeyVisitor
}
@_spi(ForMapKitOnly) @available(*, unavailable)
extension SwiftUI.MapKitPreferencesOutputs : Swift.Sendable {
}
@_spi(ForMapKitOnly) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public protocol MapKitPreferenceKeyVisitor {
  @_spi(ForMapKitOnly) mutating func visit<K>(key: K.Type) where K : SwiftUICore.PreferenceKey
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func presentationDetents(_ detents: Swift.Set<SwiftUI.PresentationDetent>) -> some SwiftUICore.View
  
  nonisolated public func presentationDetents(_ detents: Swift.Set<SwiftUI.PresentationDetent>, selection: SwiftUICore.Binding<SwiftUI.PresentationDetent>) -> some SwiftUICore.View
  
  nonisolated public func presentationDragIndicator(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.View {
  nonisolated public func presentationBackgroundInteraction(_ interaction: SwiftUI.PresentationBackgroundInteraction) -> some SwiftUICore.View
  
  nonisolated public func presentationCompactAdaptation(_ adaptation: SwiftUI.PresentationAdaptation) -> some SwiftUICore.View
  
  nonisolated public func presentationCompactAdaptation(horizontal horizontalAdaptation: SwiftUI.PresentationAdaptation, vertical verticalAdaptation: SwiftUI.PresentationAdaptation) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func presentationCornerRadius(_ cornerRadius: CoreFoundation.CGFloat?) -> some SwiftUICore.View
  
  #else
  nonisolated public func presentationCornerRadius(_ cornerRadius: CoreFoundation.CGFloat?) -> some SwiftUICore.View
  
  #endif
  nonisolated public func presentationContentInteraction(_ behavior: SwiftUI.PresentationContentInteraction) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func presentationDragIndicator(_ visibility: SwiftUI.Visibility, offset: CoreFoundation.CGFloat?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func presentationDragIndicator(_ visibility: SwiftUI.Visibility, offset: CoreFoundation.CGFloat?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func presentationBackgroundInteraction(_ interaction: SwiftUI.PresentationBackgroundInteraction, for presentation: SwiftUI.PresentationKind) -> some SwiftUICore.View
  
}
@_spi(ForFitnessOnly) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
extension SwiftUICore.View {
  @_spi(ForFitnessOnly) nonisolated public func popoverAutomaticDismissalEnabled(_ enabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct PresentationDetent : Swift.Hashable, Swift.Sendable {
  public static let medium: SwiftUI.PresentationDetent
  public static let large: SwiftUI.PresentationDetent
  public static func fraction(_ fraction: CoreFoundation.CGFloat) -> SwiftUI.PresentationDetent
  public static func height(_ height: CoreFoundation.CGFloat) -> SwiftUI.PresentationDetent
  public static func custom<D>(_ type: D.Type) -> SwiftUI.PresentationDetent where D : SwiftUI.CustomPresentationDetent
  @dynamicMemberLookup public struct Context {
    public var maxDetentValue: CoreFoundation.CGFloat {
      get
    }
    public subscript<T>(dynamicMember keyPath: Swift.KeyPath<SwiftUICore.EnvironmentValues, T>) -> T {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.PresentationDetent, b: SwiftUI.PresentationDetent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.PresentationDetent.Context : Swift.Sendable {
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct PresentationAdaptation : Swift.Sendable {
  public static var automatic: SwiftUI.PresentationAdaptation {
    get
  }
  public static var none: SwiftUI.PresentationAdaptation {
    get
  }
  public static var popover: SwiftUI.PresentationAdaptation {
    get
  }
  public static var sheet: SwiftUI.PresentationAdaptation {
    get
  }
  public static var fullScreenCover: SwiftUI.PresentationAdaptation {
    get
  }
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
  public static var blurOverFullScreen: SwiftUI.PresentationAdaptation {
    get
  }
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, *)
public struct PresentationPassthroughBehavior : Swift.Equatable, Swift.Sendable {
  @_spi(Private) public static var automatic: SwiftUI.PresentationPassthroughBehavior {
    @_spi(Private) get
  }
  @_spi(Private) public static var enabled: SwiftUI.PresentationPassthroughBehavior {
    @_spi(Private) get
  }
  @_spi(Private) public static var disabled: SwiftUI.PresentationPassthroughBehavior {
    @_spi(Private) get
  }
  @_spi(Private) public static func == (a: SwiftUI.PresentationPassthroughBehavior, b: SwiftUI.PresentationPassthroughBehavior) -> Swift.Bool
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct PresentationContentInteraction : Swift.Equatable, Swift.Sendable {
  public static var automatic: SwiftUI.PresentationContentInteraction {
    get
  }
  public static var resizes: SwiftUI.PresentationContentInteraction {
    get
  }
  public static var scrolls: SwiftUI.PresentationContentInteraction {
    get
  }
  public static func == (a: SwiftUI.PresentationContentInteraction, b: SwiftUI.PresentationContentInteraction) -> Swift.Bool
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct PresentationBackgroundInteraction : Swift.Sendable {
  public static var automatic: SwiftUI.PresentationBackgroundInteraction {
    get
  }
  public static var enabled: SwiftUI.PresentationBackgroundInteraction {
    get
  }
  public static func enabled(upThrough detent: SwiftUI.PresentationDetent) -> SwiftUI.PresentationBackgroundInteraction
  public static var disabled: SwiftUI.PresentationBackgroundInteraction {
    get
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public protocol CustomPresentationDetent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  static func height(in context: Self.Context) -> CoreFoundation.CGFloat?
  #else
  static func height(in context: Self.Context) -> CoreFoundation.CGFloat?
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.CustomPresentationDetent {
  public typealias Context = SwiftUI.PresentationDetent.Context
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContent {
  nonisolated public func tabPlacement(_ placement: SwiftUI.TabPlacement) -> some SwiftUI.TabContent<Self.TabValue>
  
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.TableStyle where Self == SwiftUI.BorderedTableStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var bordered: SwiftUI.BorderedTableStyle {
    get { .init() }
  }
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static func bordered(alternatesRowBackgrounds: Swift.Bool) -> SwiftUI.BorderedTableStyle {
        .init(alternatesRowBackgrounds: alternatesRowBackgrounds)
    }
}
@available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct BorderedTableStyle : SwiftUI.TableStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(macOS, introduced: 12.0, deprecated: 100000.0, message: "Use the `.bordered` style with the `.alternatingRowBackgrounds()` view modifier")
  @_Concurrency.MainActor @preconcurrency public init(alternatesRowBackgrounds: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.BorderedTableStyle.Configuration) -> some SwiftUICore.View
  
  @available(macOS 12.0, *)
  @available(iOS, unavailable, introduced: 16.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18BorderedTableStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.BorderedTableStyle : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ButtonRepeatBehavior : Swift.Hashable, Swift.Sendable {
  public static let automatic: SwiftUI.ButtonRepeatBehavior
  public static let enabled: SwiftUI.ButtonRepeatBehavior
  public static let disabled: SwiftUI.ButtonRepeatBehavior
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.ButtonRepeatBehavior, b: SwiftUI.ButtonRepeatBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  nonisolated public func buttonRepeatBehavior(_ behavior: SwiftUI.ButtonRepeatBehavior) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  public var buttonRepeatBehavior: SwiftUI.ButtonRepeatBehavior {
    get
  }
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct ButtonRepeatTiming : Swift.Sendable {
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(DoNotImport) public var buttonRepeatTiming: SwiftUI.ButtonRepeatTiming {
    @_spi(DoNotImport) get
    @_spi(DoNotImport) set
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ButtonGesture : SwiftUICore.PrimitiveGesture, SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  public var action: () -> Swift.Void
  public var pressingAction: ((Swift.Bool) -> Swift.Void)?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(action: @escaping () -> Swift.Void, pressing: ((Swift.Bool) -> Swift.Void)? = nil)
  #else
  public init(action: @escaping () -> Swift.Void, pressing: ((Swift.Bool) -> Swift.Void)? = nil)
  #endif
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI._ButtonGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<Swift.Void>
  package var internalBody: some SwiftUICore.Gesture<()> {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI14_ButtonGestureV12internalBodyQrvp", 0) __
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Value = Swift.Void
}
@available(*, unavailable)
extension SwiftUI._ButtonGesture : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func _onButtonGesture(pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #else
  @_Concurrency.MainActor @preconcurrency public func _onButtonGesture(pressing: ((Swift.Bool) -> Swift.Void)? = nil, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func contextMenu<I, M>(forSelectionType itemType: I.Type = I.self, @SwiftUICore.ViewBuilder menu: @escaping (Swift.Set<I>) -> M, primaryAction: ((Swift.Set<I>) -> Swift.Void)? = nil) -> some SwiftUICore.View where I : Swift.Hashable, M : SwiftUICore.View
  
  #else
  nonisolated public func contextMenu<I, M>(forSelectionType itemType: I.Type = I.self, @SwiftUICore.ViewBuilder menu: @escaping (Swift.Set<I>) -> M, primaryAction: ((Swift.Set<I>) -> Swift.Void)? = nil) -> some SwiftUICore.View where I : Swift.Hashable, M : SwiftUICore.View
  
  #endif
  @_spi(_) @_disfavoredOverload nonisolated public func contextMenu<I, M>(forSelectionType itemType: I.Type = I.self, @SwiftUICore.ViewBuilder menu: @escaping (Swift.Set<I>) -> M) -> some SwiftUICore.View where I : Swift.Hashable, M : SwiftUICore.View
  
  @_spi(_) @available(*, deprecated, renamed: "contextMenu(forSelectionType:menu:)")
  nonisolated public func contextMenu<I, M>(presenting itemType: I.Type = I.self, @SwiftUICore.ViewBuilder menu: @escaping (Swift.Set<I>) -> M) -> some SwiftUICore.View where I : Swift.Hashable, M : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @available(tvOS, unavailable)
  nonisolated public func selectionDisabled<S>(for selectionType: S.Type = S.self, _ isDisabled: @escaping (S) -> Swift.Bool) -> some SwiftUICore.View where S : Swift.Hashable
  
}
extension SwiftUICore.View {
  @_spi(_) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func contextAction<I>(forSelectionType type: I.Type = I.self, action: @escaping (Swift.Set<I>) -> Swift.Void) -> some SwiftUICore.View where I : Swift.Hashable
  
}
@_spi(Private_Selection) extension SwiftUICore.View {
  @_spi(Private_Selection) nonisolated public func selectionContainer(_ selection: SwiftUICore.Binding<some Selection>) -> some SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private_Selection) nonisolated public func optionalSelectionContainer(_ selection: SwiftUICore.Binding<some Selection>?) -> some SwiftUICore.View
  
  #else
  @_spi(Private_Selection) nonisolated public func optionalSelectionContainer(_ selection: SwiftUICore.Binding<some Selection>?) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private_Selection) @available(tvOS 18.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private_Selection) nonisolated public func focusedSelectionContainer<V>(_ selection: SwiftUICore.Binding<V>, focusState: SwiftUI.FocusState<V>.Binding, priority: SwiftUI.DefaultFocusEvaluationPriority = .automatic) -> some SwiftUICore.View where V : Swift.Hashable, V : SwiftUI.Selection
  
}
extension UIKit.NSTextAlignment {
  package init(_ alignment: SwiftUICore.TextAlignment, layoutDirection: SwiftUICore.LayoutDirection, writingMode: SwiftUICore.Text.WritingMode)
  package init(in environment: SwiftUICore.EnvironmentValues)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_spi_available(visionOS, introduced: 2.0)
@preconcurrency @_Concurrency.MainActor public protocol UIGestureRecognizerRepresentable {
  associatedtype UIGestureRecognizerType : UIKit.UIGestureRecognizer
  associatedtype Coordinator = Swift.Void
  typealias Context = SwiftUI.UIGestureRecognizerRepresentableContext<Self>
  typealias CoordinateSpaceConverter = SwiftUI.UIGestureRecognizerRepresentableCoordinateSpaceConverter
  @_spi(_) @available(*, deprecated, message: "Use version that takes a CoordinateSpaceConverter")
  @_weakLinked @_Concurrency.MainActor @preconcurrency func makeCoordinator(proxy: SwiftUI.UIGestureRecognizerRepresentableProxy<Self>) -> Self.Coordinator
  @_Concurrency.MainActor @preconcurrency func makeCoordinator(converter: Self.CoordinateSpaceConverter) -> Self.Coordinator
  @_Concurrency.MainActor @preconcurrency func makeUIGestureRecognizer(context: Self.Context) -> Self.UIGestureRecognizerType
  @_Concurrency.MainActor @preconcurrency func updateUIGestureRecognizer(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
  @_Concurrency.MainActor @preconcurrency func handleUIGestureRecognizerAction(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_spi_available(visionOS, introduced: 2.0)
extension SwiftUI.UIGestureRecognizerRepresentable {
  @_Concurrency.MainActor @preconcurrency public func updateUIGestureRecognizer(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
  @_Concurrency.MainActor @preconcurrency public func handleUIGestureRecognizerAction(_ recognizer: Self.UIGestureRecognizerType, context: Self.Context)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_spi_available(visionOS, introduced: 2.0)
extension SwiftUI.UIGestureRecognizerRepresentable where Self.Coordinator == () {
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator(converter: Self.CoordinateSpaceConverter)
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_spi_available(visionOS, introduced: 2.0)
public struct UIGestureRecognizerRepresentableContext<Representable> where Representable : SwiftUI.UIGestureRecognizerRepresentable {
  public let coordinator: Representable.Coordinator
  public let converter: SwiftUI.UIGestureRecognizerRepresentableCoordinateSpaceConverter
}
@available(*, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentableContext : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_spi_available(visionOS, introduced: 2.0)
public struct UIGestureRecognizerRepresentableCoordinateSpaceConverter {
  @_alwaysEmitIntoClient public var localLocation: CoreFoundation.CGPoint {
    get { location(in: .local) }
  }
  public func convert(globalPoint: CoreFoundation.CGPoint, to coordinateSpace: some CoordinateSpaceProtocol = .local) -> CoreFoundation.CGPoint
  public func location(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public var localVelocity: CoreFoundation.CGPoint? {
    get { velocity(in: .local) }
  }
  #else
  @_alwaysEmitIntoClient public var localVelocity: CoreFoundation.CGPoint? {
    get { velocity(in: .local) }
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func velocity(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  #else
  public func velocity(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient public var localTranslation: CoreFoundation.CGPoint? {
    get { translation(in: .local) }
  }
  #else
  @_alwaysEmitIntoClient public var localTranslation: CoreFoundation.CGPoint? {
    get { translation(in: .local) }
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func translation(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  #else
  public func translation(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
  #endif
}
@available(*, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentableCoordinateSpaceConverter : Swift.Sendable {
}
@_spi(_) @available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentable {
  @_spi(_) @available(*, deprecated, renamed: "CoordinateSpaceConverter")
  public typealias Proxy = SwiftUI.UIGestureRecognizerRepresentableProxy<Self>
}
@_spi(_) @available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentable where Self.Coordinator == () {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public func makeCoordinator(proxy: SwiftUI.UIGestureRecognizerRepresentableProxy<Self>)
}
@_spi(_) @available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentable {
  @_spi(_) @_Concurrency.MainActor @preconcurrency public func makeCoordinator(proxy: SwiftUI.UIGestureRecognizerRepresentableProxy<Self>) -> Self.Coordinator
}
@_spi(_) @available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UIGestureRecognizerRepresentableProxy<Representable> where Representable : SwiftUI.UIGestureRecognizerRepresentable {
  @_spi(_) public func convert(globalPoint: CoreFoundation.CGPoint, to coordinateSpace: some CoordinateSpaceProtocol = .local) -> CoreFoundation.CGPoint
  @_spi(_) public func location(in coordinateSpace: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint
}
@_spi(_) @available(*, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentableProxy : Swift.Sendable {
}
@_spi(_) @available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.UIGestureRecognizerRepresentableContext {
  @_spi(_) public var proxy: SwiftUI.UIGestureRecognizerRepresentableProxy<Representable> {
    @_spi(_) get
  }
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@_spi_available(tvOS, introduced: 18.0)
@available(watchOS, unavailable)
@_spi_available(visionOS, introduced: 2.0)
extension SwiftUICore.View {
  @_spi(_) @available(*, deprecated, renamed: "gesture")
  nonisolated public func gestureRecognizer(_ representable: some UIGestureRecognizerRepresentable) -> some SwiftUICore.View
  
  nonisolated public func gesture(_ representable: some UIGestureRecognizerRepresentable) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public protocol ContainerValueKey {
  associatedtype Value
  static var defaultValue: Self.Value { get }
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol MenuButtonStyle {
  associatedtype _Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder func _body(configuration: Self._Configuration) -> Self._Body
  typealias _Configuration = SwiftUI._MenuButtonStyleConfiguration
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct _MenuButtonStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS, unavailable, introduced: 13.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(tvOS, unavailable, introduced: 13.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(watchOS, unavailable, introduced: 6.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(visionOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS, unavailable, introduced: 13.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(tvOS, unavailable, introduced: 13.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(watchOS, unavailable, introduced: 6.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `MenuStyle.Configuration` instead.")
    @available(visionOS, unavailable, message: "Use `MenuStyle.Configuration` instead.")
    public typealias Body = Swift.Never
  }
  public var label: SwiftUI._MenuButtonStyleConfiguration.Label
  public var content: SwiftUI._MenuButtonStyleConfiguration.Content
  public init()
}
@available(*, unavailable)
extension SwiftUI._MenuButtonStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._MenuButtonStyleConfiguration.Content : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI._MenuButtonStyleConfiguration : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use `menuStyle(_:)` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func menuButtonStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.MenuButtonStyle
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct NavigationSplitViewColumn : Swift.Hashable, Swift.Sendable {
  public static var sidebar: SwiftUI.NavigationSplitViewColumn {
    get
  }
  public static var content: SwiftUI.NavigationSplitViewColumn {
    get
  }
  public static var detail: SwiftUI.NavigationSplitViewColumn {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.NavigationSplitViewColumn, b: SwiftUI.NavigationSplitViewColumn) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@usableFromInline
@_Concurrency.MainActor @preconcurrency internal struct TupleCommandContent<T> : SwiftUI.Commands {
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var body: Swift.Never {
    get
  }
  @available(iOS 15.0, macOS 12.0, *)
  @usableFromInline
  nonisolated internal static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUI.TupleCommandContent<T>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(_ value: T)
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
  @available(iOS 14.0, macOS 11.0, *)
  @usableFromInline
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  internal typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleCommandContent : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Group : SwiftUI.Commands where Content : SwiftUI.Commands {
  @available(iOS 15.0, macOS 12.0, *)
  nonisolated public static func _makeCommands(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._CommandsInputs) -> SwiftUI._CommandsOutputs
  @inlinable nonisolated public init(@SwiftUI.CommandsBuilder content: () -> Content) {
        self = Self._make(content: content())
    }
  @_Concurrency.MainActor @preconcurrency public func _resolve(into resolved: inout SwiftUI._ResolvedCommands)
}
extension SwiftUICore.View {
  @_spi(Private) @available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
  @available(tvOS, unavailable)
  nonisolated public func menuSectionsControlSize(_ controlSize: SwiftUI.ControlSize) -> some SwiftUICore.View
  
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public var presentationKind: SwiftUI.PresentationKind {
    get
  }
}
@_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
public struct PresentationKind : Swift.Equatable, Swift.Sendable {
  @_spi(Private) public static var none: SwiftUI.PresentationKind {
    @_spi(Private) get
  }
  @_spi(Private) public static var popover: SwiftUI.PresentationKind {
    @_spi(Private) get
  }
  @_spi(Private) public static var sheet: SwiftUI.PresentationKind {
    @_spi(Private) get
  }
  @_spi(Private) public static var fullScreenCover: SwiftUI.PresentationKind {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 18.0, tvOS 18.0, macOS 15.0, watchOS 11.0, *)
  public static var blurOverFullScreen: SwiftUI.PresentationKind {
    @_spi(Private) get
  }
  @_spi(Private) public static func == (a: SwiftUI.PresentationKind, b: SwiftUI.PresentationKind) -> Swift.Bool
}
@_spi(Private) extension SwiftUI.PresentationKind : Swift.CustomStringConvertible {
  @_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
  public var description: Swift.String {
    @_spi(Private) get
  }
}
@available(iOS 16.0, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct PasteButton : SwiftUICore.View {
  @available(iOS 16.0, macOS 11.0, *)
  nonisolated public init(supportedContentTypes: [UniformTypeIdentifiers.UTType], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 100000.0)
  @available(visionOS, unavailable)
  nonisolated public init<Payload>(supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
  #else
  @available(iOS, unavailable)
  @available(macOS, introduced: 11.0, deprecated: 100000.0)
  @available(visionOS, unavailable)
  nonisolated public init<Payload>(supportedContentTypes: [UniformTypeIdentifiers.UTType], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
  #endif
  @available(iOS 16.0, macOS 13.0, *)
  nonisolated public init<T>(payloadType: T.Type, onPaste: @escaping ([T]) -> Swift.Void) where T : CoreTransferable.Transferable
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, macOS 10.15, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11PasteButtonV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.PasteButton : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Provide `UTType`s as the `supportedContentTypes` instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.PasteButton {
  nonisolated public init(supportedTypes: [Swift.String], payloadAction: @escaping ([Foundation.NSItemProvider]) -> Swift.Void)
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<Payload>(supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
  #else
  nonisolated public init<Payload>(supportedTypes: [Swift.String], validator: @escaping ([Foundation.NSItemProvider]) -> Payload?, payloadAction: @escaping (Payload) -> Swift.Void)
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazyFixedSizeHStack<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(width: CoreFoundation.CGFloat, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @_spi(Private) nonisolated public init(width: CoreFoundation.CGFloat, alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  @_spi(Private) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyFixedSizeHStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.LazyFixedSizeHStack {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LazyFixedSizeHStack : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazyFixedSizeVStack<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(height: CoreFoundation.CGFloat, alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @_spi(Private) nonisolated public init(height: CoreFoundation.CGFloat, alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  @_spi(Private) nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyFixedSizeVStack<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.LazyFixedSizeVStack {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  @_spi(Private) nonisolated public init(alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.LazyFixedSizeVStack : Swift.Sendable {
}
@_spi(Ultraviolet) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityNodeProxy : Swift.Equatable, Swift.Hashable, Swift.Identifiable, Swift.Codable {
  @_spi(Ultraviolet) public var id: Swift.Int
  @_spi(Ultraviolet) public var isOpaque: Swift.Bool
  @_spi(Ultraviolet) public var isPlatformNode: Swift.Bool
  @_spi(Ultraviolet) public var visibility: SwiftUI.AccessibilityVisibilityStorageProxy
  @_spi(Ultraviolet) public var label: Swift.String?
  @_spi(Ultraviolet) public var value: Swift.String?
  @_spi(Ultraviolet) public var hint: Swift.String?
  @_spi(Ultraviolet) public var identifier: Swift.String?
  @_spi(Ultraviolet) public var traits: SwiftUI.AccessibilityTraitStorageProxy
  @_spi(Ultraviolet) public var isDisabled: Swift.Bool
  @_spi(Ultraviolet) public var sortPriority: Swift.Double?
  @_spi(Ultraviolet) public var actions: [Swift.String]?
  @_spi(Ultraviolet) public var customContent: [Swift.String : Swift.String]?
  @_spi(Ultraviolet) public var children: [SwiftUI.AccessibilityNodeProxy]
  @_spi(Ultraviolet) public var inputLabels: [Swift.String]?
  @_spi(Ultraviolet) public var url: Swift.String?
  @_spi(Ultraviolet) public var metadata: [Swift.String : Swift.String]?
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Ultraviolet) public var serializedData: Foundation.Data? {
    @_spi(Ultraviolet) get
  }
  #else
  @_spi(Ultraviolet) public var serializedData: Foundation.Data? {
    @_spi(Ultraviolet) get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Ultraviolet) public static func deserialize(_ data: Foundation.Data) -> SwiftUI.AccessibilityNodeProxy?
  #else
  @_spi(Ultraviolet) public static func deserialize(_ data: Foundation.Data) -> SwiftUI.AccessibilityNodeProxy?
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Ultraviolet) public init(id: Swift.Int, isOpaque: Swift.Bool, isPlatformNode: Swift.Bool, visibility: SwiftUI.AccessibilityVisibilityStorageProxy, label: Swift.String? = nil, value: Swift.String? = nil, hint: Swift.String? = nil, identifier: Swift.String? = nil, traits: SwiftUI.AccessibilityTraitStorageProxy, isDisabled: Swift.Bool, sortPriority: Swift.Double? = nil, actions: [Swift.String]? = nil, customContent: [Swift.String : Swift.String]? = nil, children: [SwiftUI.AccessibilityNodeProxy], inputLabels: [Swift.String]? = nil, url: Swift.String? = nil, metadata: [Swift.String : Swift.String]? = nil)
  #else
  @_spi(Ultraviolet) public init(id: Swift.Int, isOpaque: Swift.Bool, isPlatformNode: Swift.Bool, visibility: SwiftUI.AccessibilityVisibilityStorageProxy, label: Swift.String? = nil, value: Swift.String? = nil, hint: Swift.String? = nil, identifier: Swift.String? = nil, traits: SwiftUI.AccessibilityTraitStorageProxy, isDisabled: Swift.Bool, sortPriority: Swift.Double? = nil, actions: [Swift.String]? = nil, customContent: [Swift.String : Swift.String]? = nil, children: [SwiftUI.AccessibilityNodeProxy], inputLabels: [Swift.String]? = nil, url: Swift.String? = nil, metadata: [Swift.String : Swift.String]? = nil)
  #endif
  @_spi(Ultraviolet) public static func == (a: SwiftUI.AccessibilityNodeProxy, b: SwiftUI.AccessibilityNodeProxy) -> Swift.Bool
  @_spi(Ultraviolet) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Ultraviolet) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ID = Swift.Int
  @_spi(Ultraviolet) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Ultraviolet) public var hashValue: Swift.Int {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Ultraviolet) @available(*, unavailable)
extension SwiftUI.AccessibilityNodeProxy : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileMover(isPresented: SwiftUICore.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileMover(isPresented: SwiftUICore.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileMover<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, files: C, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element == Foundation.URL
  
  #else
  nonisolated public func fileMover<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, files: C, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element == Foundation.URL
  
  #endif
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileMover(isPresented: SwiftUICore.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #else
  nonisolated public func fileMover(isPresented: SwiftUICore.Binding<Swift.Bool>, file: Foundation.URL?, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileMover<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, files: C, onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element == Foundation.URL
  
  #else
  nonisolated public func fileMover<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, files: C, onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element == Foundation.URL
  
  #endif
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DocumentGroup<Document, Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI13DocumentGroupV4bodyQrvp", 0) __<Document, Content>
}
@available(*, unavailable)
extension SwiftUI.DocumentGroup : Swift.Sendable {
}
extension CoreFoundation.CGSize {
  package var magnitude: Swift.Double {
    get
  }
  package mutating func normalize()
  package func normalized() -> CoreFoundation.CGSize
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public protocol UIViewRepresentable : SwiftUICore.View where Self.Body == Swift.Never {
  associatedtype UIViewType : UIKit.UIView
  @_Concurrency.MainActor @preconcurrency func makeUIView(context: Self.Context) -> Self.UIViewType
  @_Concurrency.MainActor @preconcurrency func updateUIView(_ uiView: Self.UIViewType, context: Self.Context)
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, *)
  @_Concurrency.MainActor @preconcurrency func _resetUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency static func dismantleUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator)
  associatedtype Coordinator = Swift.Void
  @_Concurrency.MainActor @preconcurrency func makeCoordinator() -> Self.Coordinator
  @_Concurrency.MainActor @preconcurrency func _identifiedViewTree(in uiView: Self.UIViewType) -> SwiftUI._IdentifiedViewTree
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CoreFoundation.CGSize?
  #else
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CoreFoundation.CGSize?
  #endif
  @_Concurrency.MainActor @preconcurrency func _overrideSizeThatFits(_ size: inout CoreFoundation.CGSize, in proposedSize: SwiftUICore._ProposedSize, uiView: Self.UIViewType)
  @_Concurrency.MainActor @preconcurrency func _overrideLayoutTraits(_ layoutTraits: inout SwiftUICore._LayoutTraits, for uiView: Self.UIViewType)
  @available(iOS 15.0, tvOS 15.0, *)
  @_Concurrency.MainActor @preconcurrency static func _modifyBridgedViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 17.0, tvOS 17.0, *)
  @_Concurrency.MainActor @preconcurrency static func _layoutOptions(_ provider: Self.UIViewType) -> Self.LayoutOptions
  typealias Context = SwiftUI.UIViewRepresentableContext<Self>
  @available(iOS 17.0, tvOS 17.0, *)
  typealias LayoutOptions = SwiftUI._PlatformViewRepresentableLayoutOptions
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewRepresentable where Self.Coordinator == () {
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> Self.Coordinator
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIViewRepresentable {
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public func _resetUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator, destroy: () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIView(_ uiView: Self.UIViewType, coordinator: Self.Coordinator)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  @_Concurrency.MainActor @preconcurrency public func _identifiedViewTree(in uiView: Self.UIViewType) -> SwiftUI._IdentifiedViewTree
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CoreFoundation.CGSize?
  #else
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, *)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CoreFoundation.CGSize?
  #endif
  @_Concurrency.MainActor @preconcurrency public func _overrideSizeThatFits(_ size: inout CoreFoundation.CGSize, in proposedSize: SwiftUICore._ProposedSize, uiView: Self.UIViewType)
  @_Concurrency.MainActor @preconcurrency public func _overrideLayoutTraits(_ layoutTraits: inout SwiftUICore._LayoutTraits, for uiView: Self.UIViewType)
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @_Concurrency.MainActor @preconcurrency public static func _modifyBridgedViewInputs(_ inputs: inout SwiftUICore._ViewInputs)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
  @_Concurrency.MainActor @preconcurrency public static func _layoutOptions(_ provider: Self.UIViewType) -> Self.LayoutOptions
  @_Concurrency.MainActor @preconcurrency public var body: Swift.Never {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct UIViewRepresentableContext<Representable> where Representable : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public let coordinator: Representable.Coordinator
  @_Concurrency.MainActor @preconcurrency public var transaction: SwiftUICore.Transaction {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var environment: SwiftUICore.EnvironmentValues {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func animate(changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  #else
  @available(iOS 18.0, tvOS 18.0, visionOS 2.0, *)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func animate(changes: () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  #endif
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct TupleTableRowContent<Value, T> : SwiftUI.TableRowContent where Value : Swift.Identifiable {
  public typealias TableRowValue = Value
  public var value: T
  @inlinable internal init(_ value: T, ofType: SwiftUI.TupleTableRowContent<Value, T>.TableRowValue.Type) { self.value = value }
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.TupleTableRowContent<Value, T>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 16.0, macOS 12.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.TupleTableRowContent : Swift.Sendable {
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.Group : SwiftUI.TableRowContent where Content : SwiftUI.TableRowContent {
  public typealias TableRowValue = Content.TableRowValue
  public typealias TableRowBody = Swift.Never
  @inlinable public init<R>(@SwiftUI.TableRowBuilder<R> content: () -> Content) where R == Content.TableRowValue {
        self = Self._make(content: content())
    }
  public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUICore.Group<Content>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyle where Self == SwiftUI.TitleOnlyLabelStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var titleOnly: SwiftUI.TitleOnlyLabelStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct TitleOnlyLabelStyle : SwiftUI.LabelStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.TitleOnlyLabelStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI19TitleOnlyLabelStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.TitleOnlyLabelStyle : Swift.Sendable {
}
package typealias CoreEventType = SwiftUICore.EventType
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func scrollPosition(_ position: SwiftUICore.Binding<SwiftUICore.ScrollPosition>, anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.View
  
  #else
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func scrollPosition(_ position: SwiftUICore.Binding<SwiftUICore.ScrollPosition>, anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollPosition(id: SwiftUICore.Binding<(some Hashable)?>, anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.View
  
  #else
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollPosition(id: SwiftUICore.Binding<(some Hashable)?>, anchor: SwiftUICore.UnitPoint? = nil) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_disfavoredOverload nonisolated public func scrollPosition(id: SwiftUICore.Binding<(some Hashable)?>) -> some SwiftUICore.View
  
  #else
  @_spi(_) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  @_disfavoredOverload nonisolated public func scrollPosition(id: SwiftUICore.Binding<(some Hashable)?>) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollPosition(initialID: (some Hashable)?) -> some SwiftUICore.View
  
  #else
  @_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func scrollPosition(initialID: (some Hashable)?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "defaultScrollAnchor(_:)")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "defaultScrollAnchor(_:)")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "defaultScrollAnchor(_:)")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "defaultScrollAnchor(_:)")
  nonisolated public func scrollPosition(initialAnchor: SwiftUICore.UnitPoint?) -> some SwiftUICore.View
  
  #else
  @_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "defaultScrollAnchor(_:)")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "defaultScrollAnchor(_:)")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "defaultScrollAnchor(_:)")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "defaultScrollAnchor(_:)")
  nonisolated public func scrollPosition(initialAnchor: SwiftUICore.UnitPoint?) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "scrollPosition(id:)")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "scrollPosition(id:)")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "scrollPosition(id:)")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "scrollPosition(id:)")
  nonisolated public func scrolled<V>(to id: SwiftUICore.Binding<V?>) -> some SwiftUICore.View where V : Swift.Hashable
  
  #else
  @_spi(Private) @available(iOS, introduced: 17.0, deprecated: 17.0, renamed: "scrollPosition(id:)")
  @available(macOS, introduced: 14.0, deprecated: 14.0, renamed: "scrollPosition(id:)")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, renamed: "scrollPosition(id:)")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, renamed: "scrollPosition(id:)")
  nonisolated public func scrolled<V>(to id: SwiftUICore.Binding<V?>) -> some SwiftUICore.View where V : Swift.Hashable
  
  #endif
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func tabViewCustomization(_ customization: SwiftUICore.Binding<SwiftUI.TabViewCustomization>?) -> some SwiftUICore.View
  
  #else
  nonisolated public func tabViewCustomization(_ customization: SwiftUICore.Binding<SwiftUI.TabViewCustomization>?) -> some SwiftUICore.View
  
  #endif
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public func focusable(_ isFocusable: Swift.Bool = true) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func focusable(_ isFocusable: Swift.Bool = true, interactions: SwiftUI.FocusInteractions) -> some SwiftUICore.View
  
  @_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use focusEffectDisabled(_:) instead")
  @available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use focusEffectDisabled(_:) instead")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use focusEffectDisabled(_:) instead")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, message: "Use focusEffectDisabled(_:) instead")
  nonisolated public func focusEffect(_ effect: SwiftUI.FocusEffect) -> some SwiftUICore.View
  
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public func focusEffectDisabled(_ disabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct FocusInteractions : Swift.OptionSet, Swift.Sendable {
  public static let activate: SwiftUI.FocusInteractions
  public static let edit: SwiftUI.FocusInteractions
  @_spi(Private) public static let navigate: SwiftUI.FocusInteractions
  public static var automatic: SwiftUI.FocusInteractions {
    get
  }
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias ArrayLiteralElement = SwiftUI.FocusInteractions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Element = SwiftUI.FocusInteractions
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias RawValue = Swift.Int
}
@_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use focusEffectDisabled(_:) instead")
@available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use focusEffectDisabled(_:) instead")
@available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use focusEffectDisabled(_:) instead")
@available(watchOS, introduced: 10.0, deprecated: 10.0, message: "Use focusEffectDisabled(_:) instead")
public struct FocusEffect : Swift.Equatable, Swift.Sendable {
  @_spi(_) public static let automatic: SwiftUI.FocusEffect
  @_spi(_) public static let disabled: SwiftUI.FocusEffect
  @_spi(_) public static func == (a: SwiftUI.FocusEffect, b: SwiftUI.FocusEffect) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.EnvironmentValues {
  @_spi(_) @available(iOS, introduced: 17.0, deprecated: 17.0, message: "Use isFocusEffectEnabled instead")
  @available(macOS, introduced: 14.0, deprecated: 14.0, message: "Use isFocusEffectEnabled instead")
  @available(tvOS, introduced: 17.0, deprecated: 17.0, message: "Use isFocusEffectEnabled instead")
  @available(watchOS, introduced: 10.0, deprecated: 10.0, message: "Use isFocusEffectEnabled instead")
  public var focusEffect: SwiftUI.FocusEffect {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var isFocusEffectEnabled: Swift.Bool {
    get
    set
  }
}
@available(iOS 13.4, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct _FocusableModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._FocusableModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.4, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._FocusableModifier : Swift.Sendable {
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct FocusableOptions : Swift.OptionSet {
  @_spi(Private) public static let fromMouse: SwiftUI.FocusableOptions
  @_spi(Private) public static let fromKeyboard: SwiftUI.FocusableOptions
  @_spi(Private) public static let platformItemDrawsFocusRingMask: SwiftUI.FocusableOptions
  @_spi(Private) public static let platformContainerHandlesFocus: SwiftUI.FocusableOptions
  @_spi(Private) public static let preventNavigationToSubviews: SwiftUI.FocusableOptions
  @_spi(Private) public static let all: SwiftUI.FocusableOptions
  @_spi(Private) public let rawValue: Swift.Int
  @_spi(Private) public init(rawValue: Swift.Int)
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias ArrayLiteralElement = SwiftUI.FocusableOptions
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUI.FocusableOptions
  @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias RawValue = Swift.Int
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.FocusableOptions : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public var isFocused: Swift.Bool {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS, unavailable)
  @available(macOS, introduced: 10.15, deprecated: 12.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(tvOS, introduced: 13.0, deprecated: 15.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "Use FocusState<T> and View.focused(_:equals) for functionality previously provided by the onChange parameter.")
  @available(visionOS, unavailable)
  nonisolated public func focusable(_ isFocusable: Swift.Bool = true, onFocusChange: @escaping (_ isFocused: Swift.Bool) -> Swift.Void = { _ in }) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Use View.focusable(_:interactions:) instead.")
  @available(macOS, introduced: 12.0, deprecated: 14.0, message: "Use View.focusable(_:interactions:) instead.")
  @available(tvOS, introduced: 15.0, deprecated: 17.0, message: "Use View.focusable(_:interactions:) instead.")
  @available(watchOS, introduced: 8.0, deprecated: 10.0, message: "Use View.focusable(_:interactions:) instead.")
  nonisolated public func focusable(_ isFocusable: Swift.Bool = true, options: SwiftUI.FocusableOptions) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  nonisolated public func labelsVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  @available(iOS, introduced: 16.0, deprecated: 100000.0, message: "Use labelsVisibility(_:) instead")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, message: "Use labelsVisibility(_:) instead")
  @available(tvOS, introduced: 16.0, deprecated: 100000.0, message: "Use labelsVisibility(_:) instead")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, message: "Use labelsVisibility(_:) instead")
  nonisolated public func labels(_ visibility: SwiftUI.Visibility) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.EnvironmentValues {
  public var labelsVisibility: SwiftUI.Visibility {
    get
    set
  }
}
@_spi(_) @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@available(*, deprecated, message: "this layout is obsolete")
public struct _CircleLayout : SwiftUICore._VariadicView.UnaryViewRoot, SwiftUICore.Animatable {
  @_spi(_) public let radius: CoreFoundation.CGFloat
  @_spi(_) public init(radius: CoreFoundation.CGFloat)
  @_spi(_) nonisolated public static func _makeView(root: SwiftUICore._GraphValue<SwiftUI._CircleLayout>, inputs: SwiftUICore._ViewInputs, body: (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewOutputs
  @_spi(_) @available(*, deprecated, message: "this layout is obsolete")
  @available(iOS, introduced: 13.0, message: "this layout is obsolete")
  @available(tvOS, introduced: 13.0, message: "this layout is obsolete")
  @available(watchOS, introduced: 6.0, message: "this layout is obsolete")
  @available(macOS, introduced: 10.15, message: "this layout is obsolete")
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  @_spi(_) @available(*, deprecated, message: "this layout is obsolete")
  @available(iOS, introduced: 13.0, message: "this layout is obsolete")
  @available(tvOS, introduced: 13.0, message: "this layout is obsolete")
  @available(watchOS, introduced: 6.0, message: "this layout is obsolete")
  @available(macOS, introduced: 10.15, message: "this layout is obsolete")
  public typealias Body = Swift.Never
}
@_spi(_) @available(*, unavailable)
extension SwiftUI._CircleLayout : Swift.Sendable {
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated, message: "this layout is obsolete")
extension SwiftUI._CircleLayout : SwiftUICore.Layout {
  @_spi(_) public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI._CircleLayout.Subviews, cache: inout Swift.Void)
  @_spi(_) public func sizeThatFits(proposal: SwiftUICore.ProposedViewSize, subviews: SwiftUI._CircleLayout.Subviews, cache: inout Swift.Void) -> CoreFoundation.CGSize
  @_spi(_) @available(*, deprecated, message: "this layout is obsolete")
  @available(iOS, introduced: 16.0, message: "this layout is obsolete")
  @available(tvOS, introduced: 16.0, message: "this layout is obsolete")
  @available(watchOS, introduced: 9.0, message: "this layout is obsolete")
  @available(macOS, introduced: 13.0, message: "this layout is obsolete")
  public typealias Cache = Swift.Void
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct TimelineView<Schedule, Content> where Schedule : SwiftUICore.TimelineSchedule {
  public struct Context {
    public enum Cadence : Swift.Comparable, Swift.Sendable {
      case live
      case seconds
      case minutes
      public static func == (a: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence, b: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public static func < (a: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence, b: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public let date: Foundation.Date
    public let cadence: SwiftUI.TimelineView<Schedule, Content>.Context.Cadence
  }
}
@available(*, unavailable)
extension SwiftUI.TimelineView : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.TimelineView.Context : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public typealias TimelineViewDefaultContext = SwiftUI.TimelineView<SwiftUICore.EveryMinuteTimelineSchedule, Swift.Never>.Context
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineView : SwiftUICore.View, SwiftUICore.PrimitiveView, SwiftUICore.UnaryView where Content : SwiftUICore.View {
  public typealias Body = Swift.Never
  @_alwaysEmitIntoClient nonisolated public init(_ schedule: Schedule, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.TimelineViewDefaultContext) -> Content) {
        self.init(schedule) { (context: Context) -> Content in
             
             
             
            content(unsafeBitCast(
                context,
                to: TimelineViewDefaultContext.self))
        }
    }
  @available(iOS, deprecated, introduced: 15.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(macOS, deprecated, introduced: 12.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(watchOS, deprecated, introduced: 8.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(tvOS, deprecated, introduced: 15.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @available(visionOS, deprecated, introduced: 1.0, message: "Use TimelineViewDefaultContext for the type of the context parameter passed into TimelineView's content closure to resolve this warning. The new version of this initializer, using TimelineViewDefaultContext, improves compilation performance by using an independent generic type signature, which helps avoid unintended cyclical type dependencies.")
  @_disfavoredOverload nonisolated public init(_ schedule: Schedule, @SwiftUICore.ViewBuilder content: @escaping (SwiftUI.TimelineView<Schedule, Content>.Context) -> Content)
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.TimelineView<Schedule, Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.DefaultGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.DefaultGaugeStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, watchOS 7.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.DefaultGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 7.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17DefaultGaugeStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.DefaultGaugeStyle : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(visionOS 2.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func supportedVolumeViewpoints(_ viewpoints: SwiftUI.SquareAzimuth.Set) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_spi(_) @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Provide a ``SquareAzimuth.Set`` instead.")
  @_disfavoredOverload nonisolated public func supportedVolumeViewpoints(_ viewpoints: SwiftUI.Viewpoint3D.FourFacetAzimuth.Set) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct Button<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  nonisolated public init(action: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
  @_spi(Private) nonisolated public init(_ label: Label, action: @escaping () -> Swift.Void) where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6ButtonV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.Button : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, action: @escaping () -> Swift.Void)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, action: @escaping () -> Swift.Void) {
        self.init(action: action) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, systemImage: Swift.String, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(action: action) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, action: @escaping () -> Swift.Void)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Button where Label == SwiftUI.PrimitiveButtonStyleConfiguration.Label {
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
  nonisolated public init(_ configuration: SwiftUI.PrimitiveButtonStyleConfiguration)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  nonisolated public init(role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void)
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) {
        self.init(role: role, action: action) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  #else
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) {
        self.init(role: role, action: action) {
            SwiftUI.Label(titleKey, systemImage: systemImage)
        }
    }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(role: role, action: action) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  #else
  @_alwaysEmitIntoClient @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage: Swift.String, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol {
        self.init(role: role, action: action) {
            SwiftUI.Label(title, systemImage: systemImage)
        }
    }
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void)
  #else
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, role: SwiftUI.ButtonRole?, action: @escaping () -> Swift.Void) where S : Swift.StringProtocol
  #endif
}
@_spi(AppIntent) @available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Button {
  @_spi(AppIntent) nonisolated public init(lnAction: ObjectiveC.NSObject, @SwiftUICore.ViewBuilder label: () -> Label)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(AppIntent) nonisolated public init(role: SwiftUI.ButtonRole?, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
  #else
  @_spi(AppIntent) nonisolated public init(role: SwiftUI.ButtonRole?, lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
  #endif
  @_spi(AppIntent) nonisolated public init(lnAction: ObjectiveC.NSObject, perform: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label)
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct PushDestination<Data, Content> : SwiftUI.NavigationDestination where Data : Swift.Hashable, Content : SwiftUICore.View {
  @_spi(Private) public init(@SwiftUICore.ViewBuilder destination: @escaping (Data) -> Content)
  @_spi(Private) public init(for data: Data.Type, @SwiftUICore.ViewBuilder destination: @escaping (Data) -> Content)
  @_spi(_) @available(*, deprecated, renamed: "init(for:destination:)")
  public init(presenting data: Data.Type, @SwiftUICore.ViewBuilder destination: @escaping (Data) -> Content)
  @_spi(Private) public static func _makeDestinations(content: SwiftUICore._GraphValue<SwiftUI.PushDestination<Data, Content>>, inputs: SwiftUICore._ViewInputs, resolved: inout SwiftUI._NavigationDestinationCollection)
  @_spi(Private) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = Swift.Never
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PushDestination : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityChildBehavior : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftUI.AccessibilityChildBehavior, rhs: SwiftUI.AccessibilityChildBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.AccessibilityChildBehavior : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, introduced: 10.15, deprecated: 100000.0, message: "Use the `menu` style instead.")
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct PopUpButtonPickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.PopUpButtonPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.PopUpButtonPickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarRole : Swift.Sendable {
  public static var automatic: SwiftUI.ToolbarRole {
    get
  }
  @available(macOS, unavailable)
  public static var navigationStack: SwiftUI.ToolbarRole {
    get
  }
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var browser: SwiftUI.ToolbarRole {
    get
  }
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var editor: SwiftUI.ToolbarRole {
    get
  }
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func toolbarRole(_ role: SwiftUI.ToolbarRole) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where D : SwiftUI.FileDocument
  
  #else
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where D : SwiftUI.FileDocument
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  #else
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where D : SwiftUI.ReferenceFileDocument
  
  #else
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentType: UniformTypeIdentifiers.UTType, defaultFilename: Swift.String? = nil, onCompletion: @escaping (_ result: Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where D : SwiftUI.ReferenceFileDocument
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
  #else
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentType: UniformTypeIdentifiers.UTType, onCompletion: @escaping (_ result: Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
  #endif
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<T>(isPresented: SwiftUICore.Binding<Swift.Bool>, item: T?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  #else
  nonisolated public func fileExporter<T>(isPresented: SwiftUICore.Binding<Swift.Bool>, item: T?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<C, T>(isPresented: SwiftUICore.Binding<Swift.Bool>, items: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where C : Swift.Collection, T : CoreTransferable.Transferable, T == C.Element
  
  #else
  nonisolated public func fileExporter<C, T>(isPresented: SwiftUICore.Binding<Swift.Bool>, items: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = { }) -> some SwiftUICore.View where C : Swift.Collection, T : CoreTransferable.Transferable, T == C.Element
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where D : SwiftUI.FileDocument
  
  #else
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where D : SwiftUI.FileDocument
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where D : SwiftUI.ReferenceFileDocument
  
  #else
  nonisolated public func fileExporter<D>(isPresented: SwiftUICore.Binding<Swift.Bool>, document: D?, contentTypes: [UniformTypeIdentifiers.UTType] = [], defaultFilename: Swift.String? = nil, onCompletion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where D : SwiftUI.ReferenceFileDocument
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  #else
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.FileDocument
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
  #else
  nonisolated public func fileExporter<C>(isPresented: SwiftUICore.Binding<Swift.Bool>, documents: C, contentTypes: [UniformTypeIdentifiers.UTType] = [], onCompletion: @escaping (Swift.Result<[Foundation.URL], any Swift.Error>) -> Swift.Void, onCancellation: @escaping () -> Swift.Void = {}) -> some SwiftUICore.View where C : Swift.Collection, C.Element : SwiftUI.ReferenceFileDocument
  
  #endif
}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func animation(_ animation: SwiftUICore.Animation?, body: (SwiftUICore.EmptyHoverEffectContent) -> some HoverEffectContent) -> some SwiftUICore.HoverEffectContent
  
  #else
  public func animation(_ animation: SwiftUICore.Animation?, body: (SwiftUICore.EmptyHoverEffectContent) -> some HoverEffectContent) -> some SwiftUICore.HoverEffectContent
  
  #endif
}
@_spi(UIFrameworks) @_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func animation(_ animation: SwiftUICore.Animation?, to toPhase: SwiftUI.CustomHoverEffectPhase? = nil) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(UIFrameworks) @_spi(CustomHoverEffects) public func animation(_ animation: SwiftUICore.Animation?, to toPhase: SwiftUI.CustomHoverEffectPhase? = nil) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.CustomHoverEffect {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func _animation(_ animation: SwiftUICore.Animation?, to toPhase: SwiftUI.CustomHoverEffectPhase? = nil) -> some SwiftUICore.CustomHoverEffect
  
  #else
  @_spi(CustomHoverEffects) public func _animation(_ animation: SwiftUICore.Animation?, to toPhase: SwiftUI.CustomHoverEffectPhase? = nil) -> some SwiftUICore.CustomHoverEffect
  
  #endif
}
@_spi(CustomHoverEffects) @available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.HoverEffectContent {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(CustomHoverEffects) public func _animation(_ animation: SwiftUICore.Animation?, body: (SwiftUICore.EmptyHoverEffectContent) -> some HoverEffectContent) -> some SwiftUICore.HoverEffectContent
  
  #else
  @_spi(CustomHoverEffects) public func _animation(_ animation: SwiftUICore.Animation?, body: (SwiftUICore.EmptyHoverEffectContent) -> some HoverEffectContent) -> some SwiftUICore.HoverEffectContent
  
  #endif
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol HelpStyle {
  associatedtype Body : SwiftUICore.View
  @_spi(UIFrameworks) @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @_spi(UIFrameworks) typealias Configuration = SwiftUI.HelpStyleConfiguration
}
@_spi(UIFrameworks) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct HelpStyleConfiguration {
  @_spi(UIFrameworks) @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @_spi(UIFrameworks) @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  @_spi(UIFrameworks) public let content: SwiftUI.HelpStyleConfiguration.Content
  @_spi(UIFrameworks) public let text: SwiftUICore.Text
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.HelpStyleConfiguration.Content : Swift.Sendable {
}
@_spi(UIFrameworks) @available(*, unavailable)
extension SwiftUI.HelpStyleConfiguration : Swift.Sendable {
}
@_spi(Ultraviolet) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct AccessibilityTraitStorageProxy : Swift.Equatable, Swift.Hashable, Swift.Codable {
  @_spi(Ultraviolet) public init()
  @_spi(Ultraviolet) public var isDefault: Swift.Bool {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) public var uv_descriptions: [Swift.String] {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) public static func == (a: SwiftUI.AccessibilityTraitStorageProxy, b: SwiftUI.AccessibilityTraitStorageProxy) -> Swift.Bool
  @_spi(Ultraviolet) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Ultraviolet) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(Ultraviolet) public var hashValue: Swift.Int {
    @_spi(Ultraviolet) get
  }
  @_spi(Ultraviolet) public init(from decoder: any Swift.Decoder) throws
}
@_spi(Ultraviolet) @available(*, unavailable)
extension SwiftUI.AccessibilityTraitStorageProxy : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAddTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityRemoveTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAddTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityRemoveTraits(_ traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
extension SwiftUICore.View {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  nonisolated public func accessibility(addTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  nonisolated public func accessibility(removeTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityAddTraits(_:)")
  public func accessibility(addTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @available(iOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(macOS, introduced: 10.15, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(watchOS, introduced: 6, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "accessibilityRemoveTraits(_:)")
  public func accessibility(removeTraits traits: SwiftUICore.AccessibilityTraits) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_alwaysEmitIntoClient nonisolated public func containerValue<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.ContainerValues, V>, _ value: V) -> some SwiftUICore.View {
        modifier(_ContainerValueWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _ContainerValueWritingModifier<Value> : SwiftUICore.PrimitiveViewModifier {
  @_Concurrency.MainActor @preconcurrency public var keyPath: Swift.WritableKeyPath<SwiftUI.ContainerValues, Value>
  @_Concurrency.MainActor @preconcurrency public var value: Value
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(keyPath: Swift.WritableKeyPath<SwiftUI.ContainerValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._ContainerValueWritingModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._ContainerValueWritingModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._ContainerValueWritingModifier : Swift.Sendable {
}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@frozen public struct EmptyControlWidgetTemplate_V1 {
  @_spi(SSC) @inlinable public init() {}
  @_spi(SSC) public static var _controlType: Swift.UInt {
    @_spi(SSC) get
  }
  @_spi(SSC) public static func _makeControlTemplate(control: SwiftUICore._GraphValue<SwiftUI.EmptyControlWidgetTemplate_V1>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
}
@_spi(SSC) @available(*, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate_V1 : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DocumentLaunchView<Actions, DocumentView> : SwiftUICore.View where Actions : SwiftUICore.View, DocumentView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View)
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> some View)
  #endif
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  #endif
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView)
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView)
  #endif
  @available(iOS 18.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18DocumentLaunchViewV4bodyQrvp", 0) __<Actions, DocumentView>
}
@available(*, unavailable)
extension SwiftUI.DocumentLaunchView : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DocumentLaunchGeometryProxy {
  public var frame: CoreFoundation.CGRect
  public var titleViewFrame: CoreFoundation.CGRect
}
@available(*, unavailable)
extension SwiftUI.DocumentLaunchGeometryProxy : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DefaultDocumentGroupLaunchActions : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  nonisolated public init()
  @available(iOS 18.0, macOS 15.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI33DefaultDocumentGroupLaunchActionsV4bodyQrvp", 0) __
}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use DocumentLaunchView instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _IntroDocumentView<Actions, DocumentView, ScreenBackground> : SwiftUICore.View where Actions : SwiftUICore.View, DocumentView : SwiftUICore.View, ScreenBackground : SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use DocumentLaunchView instead")
  @available(tvOS, unavailable, introduced: 13.0, message: "Use DocumentLaunchView instead")
  @available(watchOS, unavailable, introduced: 6.0, message: "Use DocumentLaunchView instead")
  @available(macOS, unavailable, introduced: 10.15, message: "Use DocumentLaunchView instead")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18_IntroDocumentViewV4bodyQrvp", 0) __<Actions, DocumentView, ScreenBackground>
}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use DocumentLaunchView instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._IntroDocumentView where ScreenBackground == SwiftUICore.EmptyView {
  @_spi(Private) @available(*, deprecated, message: "Use init(_:for:backgroundStyle:_:onDocumentOpen:) instead")
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, onDocumentOpen: @escaping ([Foundation.URL]) -> DocumentView)
  @_spi(Private) @available(*, deprecated, message: "Use init(_:for:backgroundStyle:_:onDocumentOpen:) instead")
  nonisolated public init(for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, onDocumentOpen: @escaping ([Foundation.URL]) -> DocumentView)
  @_spi(Private) @available(*, deprecated, message: "Use init(_:for:backgroundStyle:_:onDocumentOpen:) instead")
  @_disfavoredOverload nonisolated public init<S>(_ title: S, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, onDocumentOpen: @escaping ([Foundation.URL]) -> DocumentView) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use DocumentLaunchView instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._IntroDocumentView {
  @_spi(Private) nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory)
  @_spi(Private) @_disfavoredOverload nonisolated public init<S>(_ title: S, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where S : Swift.StringProtocol
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory)
  #else
  @_spi(Private) nonisolated public init(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory)
  #endif
  @_spi(Private) nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUICore.ViewBuilder background: () -> ScreenBackground)
}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use DocumentLaunchView instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._IntroDocumentView where ScreenBackground == SwiftUICore.AnyView {
  @_spi(Private) nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where B : SwiftUICore.ShapeStyle
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, B>(_ title: S, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where S : Swift.StringProtocol, B : SwiftUICore.ShapeStyle
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where B : SwiftUICore.ShapeStyle
  #else
  @_spi(Private) nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where B : SwiftUICore.ShapeStyle
  #endif
  @_spi(Private) nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, B>(_ title: S, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where S : Swift.StringProtocol, B : SwiftUICore.ShapeStyle
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  #else
  @_spi(Private) nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, for contentTypes: [UniformTypeIdentifiers.UTType], backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder onDocumentOpen: @escaping (Foundation.URL) -> DocumentView) where B : SwiftUICore.ShapeStyle
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._IntroDocumentView : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct GridItem : Swift.Sendable {
  public enum Size : Swift.Sendable {
    case fixed(_: CoreFoundation.CGFloat)
    case flexible(minimum: CoreFoundation.CGFloat = 10, maximum: CoreFoundation.CGFloat = .infinity)
    case adaptive(minimum: CoreFoundation.CGFloat, maximum: CoreFoundation.CGFloat = .infinity)
  }
  public var size: SwiftUI.GridItem.Size
  public var spacing: CoreFoundation.CGFloat?
  public var alignment: SwiftUICore.Alignment?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ size: SwiftUI.GridItem.Size = .flexible(), spacing: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment? = nil)
  #else
  public init(_ size: SwiftUI.GridItem.Size = .flexible(), spacing: CoreFoundation.CGFloat? = nil, alignment: SwiftUICore.Alignment? = nil)
  #endif
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazyHGrid<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(rows: [SwiftUI.GridItem], alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  nonisolated public init(rows: [SwiftUI.GridItem], alignment: SwiftUICore.VerticalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyHGrid<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyHGrid : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazyVGrid<Content> : SwiftUICore.View, SwiftUICore.UnaryView, SwiftUICore.PrimitiveView where Content : SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(columns: [SwiftUI.GridItem], alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #else
  nonisolated public init(columns: [SwiftUI.GridItem], alignment: SwiftUICore.HorizontalAlignment = .center, spacing: CoreFoundation.CGFloat? = nil, pinnedViews: SwiftUICore.PinnedScrollableViews = .init(), @SwiftUICore.ViewBuilder content: () -> Content)
  #endif
  nonisolated public static func _makeView(view: SwiftUICore._GraphValue<SwiftUI.LazyVGrid<Content>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.LazyVGrid : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@preconcurrency @_Concurrency.MainActor public struct DismissWindowAction {
  @_Concurrency.MainActor @preconcurrency public func callAsFunction()
  @_Concurrency.MainActor @preconcurrency public func callAsFunction(id: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
  @_Concurrency.MainActor @preconcurrency public func callAsFunction<D>(id: Swift.String, value: D) where D : Swift.Decodable, D : Swift.Encodable, D : Swift.Hashable
}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var dismissWindow: SwiftUI.DismissWindowAction {
    get
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func interactiveDismissDisabled(_ isDisabled: Swift.Bool = true) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func interactiveDismissDisabled(_ isDisabled: Swift.Bool = true, attemptHandler: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@preconcurrency @_Concurrency.MainActor public struct SectionedFetchResults<SectionIdentifier, Result> : Swift.RandomAccessCollection where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {
  @preconcurrency @_Concurrency.MainActor public struct Section : Swift.Identifiable, Swift.RandomAccessCollection {
    nonisolated public var startIndex: Swift.Int {
      get
    }
    nonisolated public var endIndex: Swift.Int {
      get
    }
    nonisolated public subscript(position: Swift.Int) -> Result {
      get
    }
    @_Concurrency.MainActor @preconcurrency public let id: SectionIdentifier
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Element = Result
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias ID = SectionIdentifier
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Index = Swift.Int
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Indices = Swift.Range<Swift.Int>
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias Iterator = Swift.IndexingIterator<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section>
    @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias SubSequence = Swift.Slice<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section>
  }
  @_Concurrency.MainActor @preconcurrency public var nsSortDescriptors: [Foundation.NSSortDescriptor] {
    get
    nonmutating set
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  #else
  @_Concurrency.MainActor @preconcurrency public var nsPredicate: Foundation.NSPredicate? {
    get
    nonmutating set
  }
  #endif
  @_Concurrency.MainActor @preconcurrency public var sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier> {
    get
    nonmutating set
  }
  nonisolated public var startIndex: Swift.Int {
    get
  }
  nonisolated public var endIndex: Swift.Int {
    get
  }
  nonisolated public subscript(position: Swift.Int) -> SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section {
    get
  }
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Element = SwiftUI.SectionedFetchResults<SectionIdentifier, Result>.Section
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Index = Swift.Int
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>>
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.SectionedFetchResults<SectionIdentifier, Result>>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
@propertyWrapper @_Concurrency.MainActor @preconcurrency public struct SectionedFetchRequest<SectionIdentifier, Result> where SectionIdentifier : Swift.Hashable, Result : CoreData.NSFetchRequestResult {
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: SwiftUI.SectionedFetchResults<SectionIdentifier, Result> {
    get
  }
  public struct Configuration {
    public var sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>
    public var nsSortDescriptors: [Foundation.NSSortDescriptor]
    public var nsPredicate: Foundation.NSPredicate?
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUICore.Binding<SwiftUI.SectionedFetchRequest<SectionIdentifier, Result>.Configuration> {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.SectionedFetchRequest : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SectionedFetchRequest.Configuration : Swift.Sendable {
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest : SwiftUICore.DynamicProperty {
  @_Concurrency.MainActor @preconcurrency public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func update()
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(entity: CoreData.NSEntityDescription, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(entity: CoreData.NSEntityDescription, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, animation: SwiftUICore.Animation? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, animation: SwiftUICore.Animation? = nil)
  #endif
  @_Concurrency.MainActor @preconcurrency public init(fetchRequest: CoreData.NSFetchRequest<Result>, sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, transaction: SwiftUICore.Transaction)
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest where Result : CoreData.NSManagedObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #else
  @_Concurrency.MainActor @preconcurrency public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.NSSortDescriptor], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #else
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init(sectionIdentifier: Swift.KeyPath<Result, SectionIdentifier>, sortDescriptors: [Foundation.SortDescriptor<Result>], predicate: Foundation.NSPredicate? = nil, animation: SwiftUICore.Animation? = nil)
  #endif
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchRequest.Configuration where Result : CoreData.NSManagedObject {
  public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    set
  }
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchResults where Result : CoreData.NSManagedObject {
  @_Concurrency.MainActor @preconcurrency public var sortDescriptors: [Foundation.SortDescriptor<Result>] {
    get
    nonmutating set
  }
}
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
  public var isNavigationEnabled: Swift.Bool {
    get
  }
}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _WKStoryboardContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(watchOS 6.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(macOS, unavailable, introduced: 10.15)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_WKStoryboardContentV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._WKStoryboardContent : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityElement(children: SwiftUI.AccessibilityChildBehavior = .ignore) -> some SwiftUICore.View
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityChildBehavior {
  public static let ignore: SwiftUI.AccessibilityChildBehavior
  public static let contain: SwiftUI.AccessibilityChildBehavior
  public static let combine: SwiftUI.AccessibilityChildBehavior
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct SearchSuggestionsPlacement : Swift.Equatable, Swift.Sendable {
  public static var automatic: SwiftUI.SearchSuggestionsPlacement {
    get
  }
  public static var menu: SwiftUI.SearchSuggestionsPlacement {
    get
  }
  public static var content: SwiftUI.SearchSuggestionsPlacement {
    get
  }
  public struct Set : Swift.OptionSet, Swift.Sendable {
    public typealias Element = SwiftUI.SearchSuggestionsPlacement.Set
    public var rawValue: Swift.Int
    public static var menu: SwiftUI.SearchSuggestionsPlacement.Set {
      get
    }
    public static var content: SwiftUI.SearchSuggestionsPlacement.Set {
      get
    }
    public init(rawValue: Swift.Int)
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias ArrayLiteralElement = SwiftUI.SearchSuggestionsPlacement.Set.Element
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias RawValue = Swift.Int
  }
  public static func == (a: SwiftUI.SearchSuggestionsPlacement, b: SwiftUI.SearchSuggestionsPlacement) -> Swift.Bool
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.FormStyle where Self == SwiftUI.AutomaticFormStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var automatic: SwiftUI.AutomaticFormStyle {
    get { .init() }
  }
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct AutomaticFormStyle : SwiftUI.FormStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AutomaticFormStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI18AutomaticFormStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AutomaticFormStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@preconcurrency @_Concurrency.MainActor public protocol LabeledContentStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.LabeledContentStyleConfiguration
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct LabeledContentStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Content : SwiftUICore.View {
    @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.LabeledContentStyleConfiguration.Label
  public let content: SwiftUI.LabeledContentStyleConfiguration.Content
}
@available(*, unavailable)
extension SwiftUI.LabeledContentStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabeledContentStyleConfiguration.Label : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabeledContentStyleConfiguration.Content : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func labeledContentStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.LabeledContentStyle
  
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.ExpandedWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var expanded: SwiftUI.ExpandedWindowToolbarStyle {
    get { .init() }
  }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ExpandedWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  @_spi(Private) public func configureWindowToolbar(_ window: Swift.AnyObject)
  @_spi(Private) @available(macOS 14.0, *)
  public static func _makeInputs(style: SwiftUICore._GraphValue<SwiftUI.ExpandedWindowToolbarStyle>, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.ExpandedWindowToolbarStyle : Swift.Sendable {
}
@available(iOS 16.0, tvOS 16.0, *)
@available(macOS, unavailable)
public struct UIHostingControllerSizingOptions : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let preferredContentSize: SwiftUI.UIHostingControllerSizingOptions
  public static let intrinsicContentSize: SwiftUI.UIHostingControllerSizingOptions
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public typealias ArrayLiteralElement = SwiftUI.UIHostingControllerSizingOptions
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public typealias Element = SwiftUI.UIHostingControllerSizingOptions
  @available(iOS 16.0, tvOS 16.0, *)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.Int
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
extension SwiftUICore.ShapeStyle where Self == SwiftUI.WindowBackgroundShapeStyle {
  @_alwaysEmitIntoClient public static var windowBackground: SwiftUI.WindowBackgroundShapeStyle {
    get { .init() }
  }
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, unavailable)
public struct WindowBackgroundShapeStyle : SwiftUICore.ShapeStyle {
  public init()
  public func _apply(to shape: inout SwiftUICore._ShapeStyle_Shape)
  public static func _apply(to type: inout SwiftUICore._ShapeStyle_ShapeType)
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @available(visionOS, unavailable)
  public typealias Resolved = Swift.Never
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.PickerStyle where Self == SwiftUI.MenuPickerStyle {
  @_alwaysEmitIntoClient public static var menu: SwiftUI.MenuPickerStyle {
    get { .init() }
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct MenuPickerStyle : SwiftUI.PickerStyle {
  public init()
  nonisolated public static func _makeView<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs where SelectionValue : Swift.Hashable
  nonisolated public static func _makeViewList<SelectionValue>(value: SwiftUICore._GraphValue<SwiftUI._PickerValue<SwiftUI.MenuPickerStyle, SelectionValue>>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs where SelectionValue : Swift.Hashable
}
@available(*, unavailable)
extension SwiftUI.MenuPickerStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, visionOS 1.0, *)
@_spi_available(tvOS, introduced: 17.0)
public struct SpatialTapGesture : SwiftUICore.PrimitiveGesture, SwiftUICore.Gesture {
  public struct Value : Swift.Equatable, @unchecked Swift.Sendable {
    public var location: CoreFoundation.CGPoint
    public static func == (a: SwiftUI.SpatialTapGesture.Value, b: SwiftUI.SpatialTapGesture.Value) -> Swift.Bool
  }
  public var count: Swift.Int
  public var coordinateSpace: SwiftUICore.CoordinateSpace
  @available(iOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload public init(count: Swift.Int = 1, coordinateSpace: SwiftUICore.CoordinateSpace = .local)
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public init(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local)
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.SpatialTapGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.SpatialTapGesture.Value>
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, visionOS 1.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI.SpatialTapGesture : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS, introduced: 16.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(macOS, introduced: 13.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(watchOS, introduced: 9.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @available(tvOS, unavailable)
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "use overload that accepts a CoordinateSpaceProtocol instead")
  @_disfavoredOverload nonisolated public func onTapGesture(count: Swift.Int = 1, coordinateSpace: SwiftUICore.CoordinateSpace = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 17.0, macOS 14.0, watchOS 10.0, *)
  @_spi_available(tvOS, introduced: 17.0)
  nonisolated public func onTapGesture(count: Swift.Int = 1, coordinateSpace: some CoordinateSpaceProtocol = .local, perform action: @escaping (CoreFoundation.CGPoint) -> Swift.Void) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func interactionActivityTrackingTag(_ tag: Swift.String) -> some SwiftUICore.View
  
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public protocol _UIHostingViewable : AnyObject {
  var rootView: SwiftUICore.AnyView { get set }
  func _render(seconds: Swift.Double)
  func _forEachIdentifiedView(body: (SwiftUICore._IdentifiedViewProxy) -> Swift.Void)
  func sizeThatFits(in size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  var _disableSafeArea: Swift.Bool { get set }
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  var _rendererConfiguration: SwiftUICore._RendererConfiguration { get set }
  #if compiler(>=5.3) && $NoncopyableGenerics
  var _rendererObject: Swift.AnyObject? { get }
  #else
  var _rendererObject: Swift.AnyObject? { get }
  #endif
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIHostingController : SwiftUI._UIHostingViewable where Content == SwiftUICore.AnyView {
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
public func _makeUIHostingController(_ view: SwiftUICore.AnyView) -> any ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
public func _makeUIHostingController(_ view: SwiftUICore.AnyView, tracksContentSize: Swift.Bool, secure: Swift.Bool = false) -> any ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public func _makeWatchKitUIHostingController(_ view: SwiftUICore.AnyView) -> any ObjectiveC.NSObject & SwiftUI._UIHostingViewable
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, visionOS 1.0, *)
extension SwiftUI.WindowGroup {
  @_alwaysEmitIntoClient nonisolated public init(id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.2, *
        ) {
            self.init(id: id, lazyContent: makeContent)
        } else {
            self.init(id: id, content: makeContent)
        }
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.2, *
        ) {
            self.init(id: id, title: title, lazyContent: makeContent)
        } else {
            self.init(title, id: id, content: makeContent)
        }
    }
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        self.init(Text(titleKey), id: id, makeContent: makeContent)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) where S : Swift.StringProtocol {
        self.init(Text(title), id: id, makeContent: makeContent)
    }
  @_alwaysEmitIntoClient nonisolated public init(@SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.2, *
        ) {
            self.init(lazyContent: makeContent)
        } else {
            self.init(content: makeContent)
        }
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init(_ title: SwiftUICore.Text, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        if #available(
            iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.2, *
        ) {
            self.init(title: title, lazyContent: makeContent)
        } else {
            self.init(title, content: makeContent)
        }
    }
  @_alwaysEmitIntoClient nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) {
        self.init(Text(titleKey), makeContent: makeContent)
    }
  @_disfavoredOverload @_alwaysEmitIntoClient nonisolated public init<S>(_ title: S, @SwiftUICore.ViewBuilder makeContent: @escaping () -> Content) where S : Swift.StringProtocol {
        self.init(Text(title), makeContent: makeContent)
    }
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.WindowGroup {
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(id:makeContent:)")
  nonisolated public init<C>(id: Swift.String, @SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, C : SwiftUICore.View
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(_:id:makeContent:)")
  @_disfavoredOverload nonisolated public init<C>(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, C : SwiftUICore.View
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(_:id:makeContent:)")
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, C : SwiftUICore.View
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(_:id:makeContent:)")
  @_disfavoredOverload nonisolated public init<S, C>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, S : Swift.StringProtocol, C : SwiftUICore.View
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(makeContent:)")
  nonisolated public init<C>(@SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, C : SwiftUICore.View
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(_:makeContent:)")
  @_disfavoredOverload nonisolated public init<C>(_ title: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, C : SwiftUICore.View
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(_:makeContent:)")
  nonisolated public init<C>(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, C : SwiftUICore.View
  @_spi(DoNotImport) @available(*, deprecated, renamed: "init(_:makeContent:)")
  @_disfavoredOverload nonisolated public init<S, C>(_ title: S, @SwiftUICore.ViewBuilder content: @escaping () -> C) where Content == SwiftUI.LazyWindowGroupContent<C>, S : Swift.StringProtocol, C : SwiftUICore.View
}
@_spi(DoNotImport) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(*, deprecated, message: "Use WindowGroup initializers that take an escaping closure")
@_Concurrency.MainActor @preconcurrency public struct LazyWindowGroupContent<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_spi(DoNotImport) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(DoNotImport) get
  }
  @_spi(DoNotImport) @available(*, deprecated, message: "Use WindowGroup initializers that take an escaping closure")
  @available(iOS, introduced: 17.0, message: "Use WindowGroup initializers that take an escaping closure")
  @available(tvOS, introduced: 17.0, message: "Use WindowGroup initializers that take an escaping closure")
  @available(watchOS, introduced: 10.0, message: "Use WindowGroup initializers that take an escaping closure")
  @available(macOS, introduced: 14.0, message: "Use WindowGroup initializers that take an escaping closure")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22LazyWindowGroupContentV4bodyQrvp", 0) __<Content>
}
@_spi(DoNotImport) @available(*, unavailable)
extension SwiftUI.LazyWindowGroupContent : Swift.Sendable {
}
@available(iOS 17.5, macOS 14.5, tvOS 17.5, watchOS 10.5, visionOS 1.2, *)
extension SwiftUI.WindowGroup {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(id: Swift.String? = nil, title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder lazyContent: @escaping () -> Content)
  #else
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal init(id: Swift.String? = nil, title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder lazyContent: @escaping () -> Content)
  #endif
}
@available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUICore.View {
  nonisolated public func presentationBackground<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
  nonisolated public func presentationBackground<V>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder content: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  @_spi(_) @available(*, deprecated, message: "use presentationBackground(BackgroundStyle.background)")
  nonisolated public func presentationBackground() -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public protocol _ArchivableViewModifier : Swift.Decodable, Swift.Encodable, SwiftUICore.ViewModifier {
}
@_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ArchivableViewModifier {
  @_spi(Private) public static func registerDecoder()
  @_spi(Private) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(Private) nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<Self>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @_spi(Private) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct WindowDragGesture : SwiftUICore.Gesture {
  public struct Value : Swift.Equatable {
    public static func == (a: SwiftUI.WindowDragGesture.Value, b: SwiftUI.WindowDragGesture.Value) -> Swift.Bool
  }
  @_spi(DoNotImport) public init(minimumDistance: CoreFoundation.CGFloat)
  public init()
  @_spi(DoNotImport) public var minimumDistance: CoreFoundation.CGFloat
  public var body: some SwiftUICore.Gesture<SwiftUI.WindowDragGesture.Value> {
    get
  }
  @available(macOS 15.0, *)
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17WindowDragGestureV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.WindowDragGesture : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.WindowDragGesture.Value : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@_Concurrency.MainActor @preconcurrency public struct RenameButton<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  nonisolated public init() where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image>
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI12RenameButtonV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.RenameButton : Swift.Sendable {
}
extension SwiftUICore.View {
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func renameAction(_ isFocused: SwiftUI.FocusState<Swift.Bool>.Binding) -> some SwiftUICore.View
  
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func renameAction(_ action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct RenameAction {
  public func callAsFunction()
}
@available(*, unavailable)
extension SwiftUI.RenameAction : Swift.Sendable {
}
extension SwiftUICore.EnvironmentValues {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var rename: SwiftUI.RenameAction? {
    get
  }
  #else
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  public var rename: SwiftUI.RenameAction? {
    get
  }
  #endif
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
extension SwiftUI.NavigationViewStyle where Self == SwiftUI.StackNavigationViewStyle {
  @_alwaysEmitIntoClient public static var stack: SwiftUI.StackNavigationViewStyle {
    get { .init() }
  }
}
@available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(macOS, unavailable)
@available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
@available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
public struct StackNavigationViewStyle : SwiftUI.NavigationViewStyle {
  public init()
  public func _body(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  @available(macOS, unavailable)
  public func _columnBasedBody(configuration: SwiftUI._NavigationViewStyleConfiguration) -> some SwiftUICore.View
  
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(macOS, unavailable, introduced: 10.15, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  public typealias _Body = @_opaqueReturnTypeOf("$s7SwiftUI24StackNavigationViewStyleV5_body13configurationQrAA01_deF13ConfigurationV_tF", 0) __
  @available(iOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(tvOS, introduced: 13.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(macOS, unavailable, introduced: 10.15, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "replace stack-styled NavigationView with NavigationStack")
  public typealias _Body2 = @_opaqueReturnTypeOf("$s7SwiftUI24StackNavigationViewStyleV16_columnBasedBody13configurationQrAA01_deF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.StackNavigationViewStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct Label<Title, Icon> : SwiftUICore.View where Title : SwiftUICore.View, Icon : SwiftUICore.View {
  nonisolated public init(@SwiftUICore.ViewBuilder title: () -> Title, @SwiftUICore.ViewBuilder icon: () -> Icon)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI5LabelV4bodyQrvp", 0) __<Title, Icon>
}
@available(*, unavailable)
extension SwiftUI.Label : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Label where Title == SwiftUICore.Text, Icon == SwiftUICore.Image {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image name: Swift.String)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage name: Swift.String)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image name: Swift.String) where S : Swift.StringProtocol
  @_disfavoredOverload nonisolated public init<S>(_ title: S, systemImage name: Swift.String) where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Label where Title == SwiftUICore.Text, Icon == SwiftUICore.Image {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, image resource: DeveloperToolsSupport.ImageResource)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, image resource: DeveloperToolsSupport.ImageResource) where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.Label where Title == SwiftUI.LabelStyleConfiguration.Title, Icon == SwiftUI.LabelStyleConfiguration.Icon {
  nonisolated public init(_ configuration: SwiftUI.LabelStyleConfiguration)
}
@_spi(Private) @available(macOS 12.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct FloatingPanelWindowStyle : SwiftUI.WindowStyle {
  @_spi(Private) public typealias _Body = Swift.Never
  @_spi(Private) public init()
  @_spi(Private) public func configureWindow(_ window: Swift.AnyObject)
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.FloatingPanelWindowStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 13.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func appIntentExecutor(_ action: @escaping (ObjectiveC.NSObject) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DisclosureTableRow<Label, Content> : SwiftUI.TableRowContent where Label : SwiftUI.TableRowContent, Content : SwiftUI.TableRowContent, Label.TableRowValue == Content.TableRowValue {
  public typealias TableRowValue = Label.TableRowValue
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(isExpanded: SwiftUICore.Binding<Swift.Bool>? = nil, @SwiftUI.TableRowBuilder<SwiftUI.DisclosureTableRow<Label, Content>.TableRowValue> content: @escaping () -> Content, @SwiftUI.TableRowBuilder<SwiftUI.DisclosureTableRow<Label, Content>.TableRowValue> label: @escaping () -> Label)
  #else
  @_spi(Private) public init(isExpanded: SwiftUICore.Binding<Swift.Bool>? = nil, @SwiftUI.TableRowBuilder<SwiftUI.DisclosureTableRow<Label, Content>.TableRowValue> content: @escaping () -> Content, @SwiftUI.TableRowBuilder<SwiftUI.DisclosureTableRow<Label, Content>.TableRowValue> label: @escaping () -> Label)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init<Value>(_ value: Value, isExpanded: SwiftUICore.Binding<Swift.Bool>? = nil, @SwiftUI.TableRowBuilder<Value> content: @escaping () -> Content) where Label == SwiftUI.TableRow<Value>, Value == Content.TableRowValue
  #else
  public init<Value>(_ value: Value, isExpanded: SwiftUICore.Binding<Swift.Bool>? = nil, @SwiftUI.TableRowBuilder<Value> content: @escaping () -> Content) where Label == SwiftUI.TableRow<Value>, Value == Content.TableRowValue
  #endif
  public var tableRowBody: some SwiftUI.TableRowContent {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias TableRowBody = @_opaqueReturnTypeOf("$s7SwiftUI18DisclosureTableRowV05tableE4BodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension SwiftUI.DisclosureTableRow : Swift.Sendable {
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct BadgeProminence : Swift.Hashable, Swift.Sendable {
  public static let decreased: SwiftUI.BadgeProminence
  public static let standard: SwiftUI.BadgeProminence
  public static let increased: SwiftUI.BadgeProminence
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.BadgeProminence, b: SwiftUI.BadgeProminence) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @inlinable nonisolated public func badgeProminence(_ prominence: SwiftUI.BadgeProminence) -> some SwiftUICore.View {
        environment(\.badgeProminence, prominence)
    }
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  public var badgeProminence: SwiftUI.BadgeProminence {
    get
    set
  }
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public protocol PPTTestHost {
  @_spi(Private) func runTest(_ testName: Swift.String, options: [Swift.AnyHashable : Any])
}
@_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
@available(macOS, unavailable)
extension SwiftUI.UIHostingController : SwiftUI.PPTTestHost {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func runTest(_ testName: Swift.String, options: [Swift.AnyHashable : Any])
}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct PPTTestCase {
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public typealias testCompletion = ((_ testCase: SwiftUI.PPTTestCase) -> Swift.Void)
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public typealias subTestCompletion = ((_ testCase: SwiftUI.PPTTestCase, SwiftUI.PPTTestCase.SubTestName) -> Swift.Void)
  @_spi(Private) public static var dummyTest: SwiftUI.PPTTestCase
  @_spi(Private) public struct Name : Swift.Equatable, Swift.RawRepresentable {
    @_spi(Private) public var rawValue: Swift.String
    @_spi(Private) public init(_ rawValue: Swift.String)
    @_spi(Private) public init(rawValue: Swift.String)
    @_spi(Private) @available(iOS 15.0, tvOS 15.0, watchOS 8.0, macOS 12.0, *)
    public typealias RawValue = Swift.String
  }
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public struct SubTestName : Swift.Equatable, Swift.RawRepresentable {
    @_spi(Private) public var rawValue: Swift.String
    @_spi(Private) public init(_ rawValue: Swift.String)
    @_spi(Private) public init(rawValue: Swift.String)
    @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias RawValue = Swift.String
  }
  @_spi(Private) public var name: SwiftUI.PPTTestCase.Name
  @_spi(Private) public var parameters: [Swift.AnyHashable : Any]
  @_spi(Private) public func startTest()
  @_spi(Private) public func finishTest()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func failTest(reason: Swift.String? = nil)
  #else
  @_spi(Private) public func failTest(reason: Swift.String? = nil)
  #endif
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func startSubTest(named subTestName: SwiftUI.PPTTestCase.SubTestName)
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func finishSubTest(named subTestName: SwiftUI.PPTTestCase.SubTestName)
  @_spi(Private) public func performScrollTest(_ proxy: SwiftUI.ScrollViewProxy)
  @_spi(Private) public func performScrollTest(_ proxy: SwiftUI.ScrollViewProxy, scrollMode: SwiftUI.PPTTestCase.ScrollMode)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollTest(_ proxy: SwiftUI.ScrollViewProxy, onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollTest(_ proxy: SwiftUI.ScrollViewProxy, onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollTest(_ proxy: SwiftUI.ScrollViewProxy, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollTest(_ proxy: SwiftUI.ScrollViewProxy, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollSubTest(_ proxy: SwiftUI.ScrollViewProxy, subTestName: SwiftUI.PPTTestCase.SubTestName, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollSubTest(_ proxy: SwiftUI.ScrollViewProxy, subTestName: SwiftUI.PPTTestCase.SubTestName, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollSubTest(_ proxy: SwiftUI.ScrollViewProxy, subTestName: SwiftUI.PPTTestCase.SubTestName, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public func performScrollSubTest(_ proxy: SwiftUI.ScrollViewProxy, subTestName: SwiftUI.PPTTestCase.SubTestName, scrollMode: SwiftUI.PPTTestCase.ScrollMode, onComplete completion: SwiftUI.PPTTestCase.subTestCompletion? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
  public func performResizeTest(onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #else
  @_spi(Private) @available(iOS 18.0, macOS 15.0, macCatalyst 18.0, *)
  public func performResizeTest(onComplete completion: SwiftUI.PPTTestCase.testCompletion? = nil)
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PPTTestCase.Name : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PPTTestCase : Swift.Sendable {
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PPTTestCase.SubTestName : Swift.Sendable {
}
@_spi(Private) extension SwiftUI.PPTTestCase {
  @_spi(Private) public enum ScrollMode : Swift.Equatable {
    @_spi(Private) case automatic
    @_spi(Private) case oscillate
    @_spi(Private) case linear
    @_spi(Private) case artificial
    @_spi(Private) @available(iOS 18.0, watchOS 11.0, visionOS 2.0, *)
    @available(tvOS, unavailable)
    case custom((UIKit.UIScrollView) -> any RecapPerformanceTesting.RPTTestParameters)
    @_spi(Private) public static func == (lhs: SwiftUI.PPTTestCase.ScrollMode, rhs: SwiftUI.PPTTestCase.ScrollMode) -> Swift.Bool
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.PPTTestCase.ScrollMode : Swift.Sendable {
}
@_spi(DoNotImportVariadicView) extension SwiftUICore.Group {
  @_spi(DoNotImportVariadicView) @available(*, deprecated, message: "Use the public API instead.")
  @_disfavoredOverload public init<Base, Result>(elementsOf view: Base, @SwiftUICore.ViewBuilder transform: @escaping (SwiftUI.SubviewCollection) -> Result) where Content == SwiftUI.GroupElementsOfContent<Base, Result>, Base : SwiftUICore.View, Result : SwiftUICore.View
}
@_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "SubviewsCollection")
public struct SubviewCollection : Swift.RandomAccessCollection {
  @_spi(DoNotImportVariadicView) public subscript(index: Swift.Int) -> SwiftUI.Subview {
    @_spi(DoNotImportVariadicView) get
  }
  @_spi(DoNotImportVariadicView) public subscript(bounds: Swift.Range<Swift.Int>) -> Swift.Slice<SwiftUI.SubviewCollection> {
    @_spi(DoNotImportVariadicView) get
  }
  @_spi(DoNotImportVariadicView) public var startIndex: Swift.Int {
    @_spi(DoNotImportVariadicView) get
  }
  @_spi(DoNotImportVariadicView) public var endIndex: Swift.Int {
    @_spi(DoNotImportVariadicView) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImportVariadicView) public func selectedSubview<V>(selection: V) -> SwiftUI.Subview? where V : Swift.Hashable
  #else
  @_spi(DoNotImportVariadicView) public func selectedSubview<V>(selection: V) -> SwiftUI.Subview? where V : Swift.Hashable
  #endif
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "SubviewsCollection")
  public typealias Element = SwiftUI.Subview
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "SubviewsCollection")
  public typealias Index = Swift.Int
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "SubviewsCollection")
  public typealias Indices = Swift.Range<Swift.Int>
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "SubviewsCollection")
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.SubviewCollection>
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "SubviewsCollection")
  public typealias SubSequence = Swift.Slice<SwiftUI.SubviewCollection>
}
@_spi(DoNotImportVariadicView) @available(*, unavailable)
extension SwiftUI.SubviewCollection : Swift.Sendable {
}
@_spi(DoNotImportVariadicView) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.SubviewCollection : SwiftUICore.View, SwiftUICore.MultiView, SwiftUICore.PrimitiveView {
  @_spi(DoNotImportVariadicView) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(DoNotImportVariadicView) get
  }
  @_spi(DoNotImportVariadicView) nonisolated public static func _makeViewList(view: SwiftUICore._GraphValue<SwiftUI.SubviewCollection>, inputs: SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImportVariadicView) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #else
  @_spi(DoNotImportVariadicView) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs) -> Swift.Int?
  #endif
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "SubviewsCollection")
  @available(iOS, introduced: 18.0, renamed: "SubviewsCollection")
  @available(tvOS, introduced: 18.0, renamed: "SubviewsCollection")
  @available(watchOS, introduced: 11.0, renamed: "SubviewsCollection")
  @available(macOS, introduced: 15.0, renamed: "SubviewsCollection")
  @available(visionOS, introduced: 2.0, renamed: "SubviewsCollection")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17SubviewCollectionV4bodyQrvp", 0) __
}
@_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "ContainerValues")
public struct TraitValues {
  @_spi(DoNotImportVariadicView) public subscript<Trait>(key: Trait.Type) -> Trait.Value where Trait : SwiftUICore._ViewTraitKey {
    @_spi(DoNotImportVariadicView) get
    @_spi(DoNotImportVariadicView) set
  }
}
@_spi(DoNotImportVariadicView) @available(*, unavailable)
extension SwiftUI.TraitValues : Swift.Sendable {
}
@_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "ContainerValueKey")
public typealias TraitKey = SwiftUICore._ViewTraitKey
@_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "containerValue")
extension SwiftUICore.View {
  @_spi(DoNotImportVariadicView) @_alwaysEmitIntoClient nonisolated public func trait<V>(_ keyPath: Swift.WritableKeyPath<SwiftUI.TraitValues, V>, _ value: V) -> some SwiftUICore.View {
        modifier(_TraitKeyWritingModifier(keyPath: keyPath, value: value))
    }
  
}
@_spi(DoNotImportVariadicView) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  @_spi(DoNotImportVariadicView) @available(*, deprecated, message: "Use overload which takes a keypath with no argument labels instead.")
  @_alwaysEmitIntoClient nonisolated public func trait<K>(key: K.Type, value: K.Value) -> some SwiftUICore.View where K : SwiftUICore._ViewTraitKey {
        modifier(_TraitWritingModifier<K>(value: value))
    }
  
}
@_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "_ContainerValueWritingModifier")
@frozen @_Concurrency.MainActor @preconcurrency public struct _TraitKeyWritingModifier<Value> : SwiftUICore.PrimitiveViewModifier {
  @_spi(DoNotImportVariadicView) @_Concurrency.MainActor @preconcurrency public var keyPath: Swift.WritableKeyPath<SwiftUI.TraitValues, Value>
  @_spi(DoNotImportVariadicView) @_Concurrency.MainActor @preconcurrency public var value: Value
  @_spi(DoNotImportVariadicView) @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(keyPath: Swift.WritableKeyPath<SwiftUI.TraitValues, Value>, value: Value) {
        self.keyPath = keyPath
        self.value = value
    }
  @_spi(DoNotImportVariadicView) nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._TraitKeyWritingModifier<Value>>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @_spi(DoNotImportVariadicView) nonisolated public static func _makeViewList(modifier: SwiftUICore._GraphValue<SwiftUI._TraitKeyWritingModifier<Value>>, inputs: SwiftUICore._ViewListInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewListInputs) -> SwiftUICore._ViewListOutputs) -> SwiftUICore._ViewListOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(DoNotImportVariadicView) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #else
  @_spi(DoNotImportVariadicView) nonisolated public static func _viewListCount(inputs: SwiftUICore._ViewListCountInputs, body: (SwiftUICore._ViewListCountInputs) -> Swift.Int?) -> Swift.Int?
  #endif
  @_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "_ContainerValueWritingModifier")
  @available(iOS, introduced: 13.0, renamed: "_ContainerValueWritingModifier")
  @available(tvOS, introduced: 13.0, renamed: "_ContainerValueWritingModifier")
  @available(watchOS, introduced: 6.0, renamed: "_ContainerValueWritingModifier")
  @available(macOS, introduced: 10.15, renamed: "_ContainerValueWritingModifier")
  public typealias Body = Swift.Never
}
@_spi(DoNotImportVariadicView) @available(*, unavailable)
extension SwiftUI._TraitKeyWritingModifier : Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
public struct AccessibilityZoomGestureAction {
  @frozen public enum Direction {
    case zoomIn
    case zoomOut
    public static func == (a: SwiftUI.AccessibilityZoomGestureAction.Direction, b: SwiftUI.AccessibilityZoomGestureAction.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let direction: SwiftUI.AccessibilityZoomGestureAction.Direction
  public let location: SwiftUICore.UnitPoint
  public let point: CoreFoundation.CGPoint
}
@available(*, unavailable)
extension SwiftUI.AccessibilityZoomGestureAction : Swift.Sendable {
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityZoomAction(_ handler: @escaping (SwiftUI.AccessibilityZoomGestureAction) -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityZoomAction(_ handler: @escaping (SwiftUI.AccessibilityZoomGestureAction) -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 18.0, watchOS 6.0, *)
extension SwiftUI.ToggleStyle where Self == SwiftUI.SwitchToggleStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var `switch`: SwiftUI.SwitchToggleStyle {
    get { .init() }
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 18.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct SwitchToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @available(iOS, introduced: 14.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(macOS, introduced: 11.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(tvOS, unavailable)
  @available(watchOS, introduced: 7.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @available(visionOS, introduced: 1.0, deprecated: 100000.0, message: "Use ``View/tint(_)`` instead.")
  @_Concurrency.MainActor @preconcurrency public init(tint: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.SwitchToggleStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 18.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI17SwitchToggleStyleV8makeBody13configurationQrAA0dE13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.SwitchToggleStyle : Swift.Sendable {
}
extension SwiftUICore.Log {
  package static let focus: os.Logger?
  package static let navigation: os.Logger?
  package static let listSelection: os.Logger?
  package static let listDiffing: os.Logger?
  package static let listMisc: os.Logger?
  package static let presentation: os.Logger?
  package static let tabView: os.Logger?
  package static let urlHandling: os.Logger?
  package static let splitViewVisibility: os.Logger?
  package static let dragAndDrop: os.Logger?
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, macOS 15.0, visionOS 2.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S, isEnabled: Swift.Bool) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityActivationPoint(_ activationPoint: CoreFoundation.CGPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityActivationPoint(_ activationPoint: SwiftUICore.UnitPoint) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
  nonisolated public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_Concurrency.MainActor @preconcurrency public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityDragPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityDragPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
  public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.Text) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityDropPoint(_ point: SwiftUICore.UnitPoint, description: SwiftUICore.LocalizedStringKey) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityDropPoint<S>(_ point: SwiftUICore.UnitPoint, description: S) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func defaultAdaptableTabBarPlacement(_ defaultPlacement: SwiftUI.AdaptableTabBarPlacement = .automatic) -> some SwiftUICore.View
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct AdaptableTabBarPlacement : Swift.Hashable {
  public static let automatic: SwiftUI.AdaptableTabBarPlacement
  public static let tabBar: SwiftUI.AdaptableTabBarPlacement
  @_spi_available(macOS, introduced: 15.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static let sidebar: SwiftUI.AdaptableTabBarPlacement
  @_spi(Uniquely) @available(iOS, introduced: 18.0, deprecated: 18.0, renamed: "tabBar")
  @available(macOS, introduced: 15.0, deprecated: 15.0, renamed: "tabBar")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, introduced: 2.0, deprecated: 2.0, renamed: "tabBar")
  public static let topBar: SwiftUI.AdaptableTabBarPlacement
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftUI.AdaptableTabBarPlacement, b: SwiftUI.AdaptableTabBarPlacement) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.AdaptableTabBarPlacement : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ColorPicker<Label> : SwiftUICore.View where Label : SwiftUICore.View {
  nonisolated public init(selection: SwiftUICore.Binding<SwiftUICore.Color>, supportsOpacity: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label)
  nonisolated public init(selection: SwiftUICore.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, macOS 11.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI11ColorPickerV4bodyQrvp", 0) __<Label>
}
@available(*, unavailable)
extension SwiftUI.ColorPicker : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.ColorPicker where Label == SwiftUICore.Text {
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<SwiftUICore.Color>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<SwiftUICore.Color>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, selection: SwiftUICore.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, selection: SwiftUICore.Binding<CoreGraphics.CGColor>, supportsOpacity: Swift.Bool = true) where S : Swift.StringProtocol
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TableRowSpan<Value, Content> : SwiftUI.TableRowContent where Value : Swift.Identifiable, Content : SwiftUICore.View {
  @_spi(Private) public typealias TableRowValue = Value
  @_spi(Private) public typealias TableRowBody = Swift.Never
  @_spi(Private) public init(@SwiftUICore.ViewBuilder content: () -> Content)
  @_spi(Private) @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static func _containsOutlineSymbol(inputs: SwiftUI._TableRowInputs) -> Swift.Bool
  @_spi(Private) public static func _makeRows(content: SwiftUICore._GraphValue<SwiftUI.TableRowSpan<Value, Content>>, inputs: SwiftUI._TableRowInputs) -> SwiftUI._TableRowOutputs
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #else
  @_spi(Private) public static func _tableRowCount(inputs: SwiftUI._TableRowInputs) -> Swift.Int?
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.TableRowSpan : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct MeasurementView<Label, UnitType> : SwiftUICore.View where Label : SwiftUICore.View, UnitType : Foundation.Dimension {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init(value: SwiftUICore.Binding<Foundation.Measurement<UnitType>>, bounds: Swift.ClosedRange<Foundation.Measurement<UnitType>>? = nil, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  #else
  @_spi(Private) nonisolated public init(value: SwiftUICore.Binding<Foundation.Measurement<UnitType>>, bounds: Swift.ClosedRange<Foundation.Measurement<UnitType>>? = nil, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>? = nil, unit: UnitType, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint
  #else
  @_spi(Private) nonisolated public init<V>(value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>? = nil, unit: UnitType, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, @SwiftUICore.ViewBuilder label: () -> Label, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint
  #endif
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS 16.0, macOS 13.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI15MeasurementViewV4bodyQrvp", 0) __<Label, UnitType>
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.MeasurementView : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.MeasurementView where Label == SwiftUICore.Text {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, unit: UnitType, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint
  #else
  @_spi(Private) nonisolated public init<V>(_ titleKey: SwiftUICore.LocalizedStringKey, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, unit: UnitType, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where V : Swift.BinaryFloatingPoint
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, unit: UnitType, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.BinaryFloatingPoint
  #else
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, V>(_ title: S, value: SwiftUICore.Binding<V>, in bounds: Swift.ClosedRange<V>, unit: UnitType, format: Foundation.Measurement<UnitType>.FormatStyle? = nil, onEditingChanged: @escaping (Swift.Bool) -> Swift.Void = { _ in }) where S : Swift.StringProtocol, V : Swift.BinaryFloatingPoint
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@frozen @propertyWrapper @preconcurrency @_Concurrency.MainActor public struct FocusedObject<ObjectType> : SwiftUICore.DynamicProperty where ObjectType : Combine.ObservableObject {
  @preconcurrency @_Concurrency.MainActor @dynamicMemberLookup @frozen public struct Wrapper {
    @_Concurrency.MainActor @preconcurrency internal let root: ObjectType
    @_Concurrency.MainActor @preconcurrency public subscript<T>(dynamicMember keyPath: Swift.ReferenceWritableKeyPath<ObjectType, T>) -> SwiftUICore.Binding<T> {
      get
    }
  }
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _store: ObjectType?
  @usableFromInline
  @_Concurrency.MainActor @preconcurrency internal var _seed: Swift.Int = 0
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType? {
    get { _store }
  }
  #else
  @inlinable @_Concurrency.MainActor @preconcurrency public var wrappedValue: ObjectType? {
    get { _store }
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.FocusedObject<ObjectType>.Wrapper? {
    get
  }
  #else
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftUI.FocusedObject<ObjectType>.Wrapper? {
    get
  }
  #endif
  nonisolated public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  nonisolated public static func _makeProperty<V>(in buffer: inout SwiftUICore._DynamicPropertyBuffer, container: SwiftUICore._GraphValue<V>, fieldOffset: Swift.Int, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.FocusedObject.Wrapper : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.FocusedObject : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @inlinable nonisolated public func focusedObject<T>(_ object: T) -> some SwiftUICore.View where T : Combine.ObservableObject {
        focusedValue(T.focusedValueKey, object)
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func focusedObject<T>(_ object: T?) -> some SwiftUICore.View where T : Combine.ObservableObject { focusedValue(T.focusedValueKey, object) }
  
  #else
  @inlinable nonisolated public func focusedObject<T>(_ object: T?) -> some SwiftUICore.View where T : Combine.ObservableObject { focusedValue(T.focusedValueKey, object) }
  
  #endif
  @inlinable nonisolated public func focusedSceneObject<T>(_ object: T) -> some SwiftUICore.View where T : Combine.ObservableObject {
        focusedSceneValue(T.focusedValueKey, object)
    }
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func focusedSceneObject<T>(_ object: T?) -> some SwiftUICore.View where T : Combine.ObservableObject { focusedSceneValue(T.focusedValueKey, object) }
  
  #else
  @inlinable nonisolated public func focusedSceneObject<T>(_ object: T?) -> some SwiftUICore.View where T : Combine.ObservableObject { focusedSceneValue(T.focusedValueKey, object) }
  
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension Combine.ObservableObject {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @usableFromInline
  internal static var focusedValueKey: Swift.WritableKeyPath<SwiftUI.FocusedValues, Self?> {
    get
  }
  #else
  @usableFromInline
  internal static var focusedValueKey: Swift.WritableKeyPath<SwiftUI.FocusedValues, Self?> {
    get
  }
  #endif
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
public struct ToolbarPlacement {
  public static var automatic: SwiftUI.ToolbarPlacement {
    get
  }
  @available(watchOS 10.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public static var bottomBar: SwiftUI.ToolbarPlacement {
    get
  }
  @_spi(Private) @available(macOS 13.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var _bottomBar: SwiftUI.ToolbarPlacement {
    get
  }
  @_spi(DoNotImport) @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var keyboardBar: SwiftUI.ToolbarPlacement {
    get
  }
  @available(macOS, unavailable)
  public static var navigationBar: SwiftUI.ToolbarPlacement {
    get
  }
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static var windowToolbar: SwiftUI.ToolbarPlacement {
    get
  }
  @available(macOS, unavailable)
  @available(watchOS, unavailable)
  public static var tabBar: SwiftUI.ToolbarPlacement {
    get
  }
  @backDeployed(before: macOS 14.0)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static func accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarPlacement where ID : Swift.Hashable
  @available(macOS 14.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @usableFromInline
  internal static func backDeployable_accessoryBar<ID>(id: ID) -> SwiftUI.ToolbarPlacement where ID : Swift.Hashable
  @available(visionOS 1.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public static var bottomOrnament: SwiftUI.ToolbarPlacement {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.ToolbarPlacement : Swift.Sendable {
}
extension SwiftUI.ToolbarPlacement {
  @available(iOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "accessoryBar")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public init<ID>(id: ID) where ID : Swift.Hashable
}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
final public class ControlWidgetTemplateHost {
  @_spi(Widget) public init<Content>(content: Content) where Content : SwiftUI.ControlWidgetTemplate_V1
  @_spi(Widget) public init<Content>(content: Content) where Content : SwiftUI.ControlWidgetTemplate
  @_spi(Widget) @_Concurrency.MainActor final public func readPreference<K>(_ key: K.Type) -> K.Value where K : SwiftUICore.PreferenceKey
  @_spi(Widget) @_Concurrency.MainActor final public func setEnvironment(_ environment: SwiftUICore.EnvironmentValues)
  @_spi(Widget) @objc deinit
}
@_spi(Widget) @available(*, unavailable)
extension SwiftUI.ControlWidgetTemplateHost : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
extension SwiftUICore.EnvironmentValues {
  @_spi(Private) public var withCurrentHostingController: SwiftUI.WithCurrentHostingControllerAction {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@available(macOS, unavailable)
public struct WithCurrentHostingControllerAction {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public func callAsFunction(_ body: (UIKit.UIViewController?) -> Swift.Void)
  #else
  @_spi(Private) public func callAsFunction(_ body: (UIKit.UIViewController?) -> Swift.Void)
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.WithCurrentHostingControllerAction : Swift.Sendable {
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct DocumentGroupLaunchScene<Actions> : SwiftUI.Scene where Actions : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  @available(iOS 18.0, *)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(macOS, unavailable, introduced: 11.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI24DocumentGroupLaunchSceneV4bodyQrvp", 0) __<Actions>
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroupLaunchScene {
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  nonisolated public init(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  @_disfavoredOverload nonisolated public init(_ title: some StringProtocol, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View)
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View)
  #else
  nonisolated public init(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> some View)
  #endif
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroupLaunchScene {
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  nonisolated public init<B>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  @_disfavoredOverload nonisolated public init<B>(_ title: some StringProtocol, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }) where B : SwiftUICore.ShapeStyle
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder backgroundAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }, @SwiftUICore.ViewBuilder overlayAccessoryView: @escaping (SwiftUI.DocumentLaunchGeometryProxy) -> some View) where B : SwiftUICore.ShapeStyle
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }) where B : SwiftUICore.ShapeStyle
  #else
  nonisolated public init<B>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions = { DefaultDocumentGroupLaunchActions() }) where B : SwiftUICore.ShapeStyle
  #endif
}
@available(*, unavailable)
extension SwiftUI.DocumentGroupLaunchScene : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use DocumentGroupLaunchScene instead")
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _DocumentGroupsIntro<ScreenBackground> : SwiftUI.Scene where ScreenBackground : SwiftUICore.View {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    @_spi(Private) get
  }
  @_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use DocumentGroupLaunchScene instead")
  @available(tvOS, unavailable, introduced: 14.0, message: "Use DocumentGroupLaunchScene instead")
  @available(watchOS, unavailable, introduced: 7.0, message: "Use DocumentGroupLaunchScene instead")
  @available(macOS, unavailable, introduced: 11.0, message: "Use DocumentGroupLaunchScene instead")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_DocumentGroupsIntroV4bodyQrvp", 0) __<ScreenBackground>
}
@_spi(Private) @available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._DocumentGroupsIntro {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<Actions>(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where Actions : SwiftUICore.View
  #else
  @_spi(Private) nonisolated public init<Actions>(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where Actions : SwiftUICore.View
  #endif
  @_spi(Private) nonisolated public init<Actions>(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where Actions : SwiftUICore.View
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, Actions>(_ title: S, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where S : Swift.StringProtocol, Actions : SwiftUICore.View
  @_spi(Private) nonisolated public init<Actions>(_ title: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground) where Actions : SwiftUICore.View
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, Actions>(_ title: S, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground) where S : Swift.StringProtocol, Actions : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<Actions>(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground) where Actions : SwiftUICore.View
  #else
  @_spi(Private) nonisolated public init<Actions>(_ title: SwiftUICore.Text? = nil, @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUICore.ViewBuilder background: () -> ScreenBackground) where Actions : SwiftUICore.View
  #endif
}
@_spi(Private) @available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI._DocumentGroupsIntro where ScreenBackground == SwiftUICore.AnyView {
  @_spi(Private) nonisolated public init<B, Actions>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where B : SwiftUICore.ShapeStyle, Actions : SwiftUICore.View
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, B, A>(_ title: S, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> A, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where S : Swift.StringProtocol, B : SwiftUICore.ShapeStyle, A : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<B, Actions>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where B : SwiftUICore.ShapeStyle, Actions : SwiftUICore.View
  #else
  @_spi(Private) nonisolated public init<B, Actions>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions, @SwiftUI._DocumentIntroAccessoryBuilder accessories: () -> some _DocumentIntroAccessory) where B : SwiftUICore.ShapeStyle, Actions : SwiftUICore.View
  #endif
  @_spi(Private) nonisolated public init<B, Actions>(_ title: SwiftUICore.LocalizedStringKey, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions) where B : SwiftUICore.ShapeStyle, Actions : SwiftUICore.View
  @_spi(Private) @_disfavoredOverload nonisolated public init<S, B, Actions>(_ title: S, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions) where S : Swift.StringProtocol, B : SwiftUICore.ShapeStyle, Actions : SwiftUICore.View
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public init<B, Actions>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions) where B : SwiftUICore.ShapeStyle, Actions : SwiftUICore.View
  #else
  @_spi(Private) nonisolated public init<B, Actions>(_ title: SwiftUICore.Text? = nil, backgroundStyle: B = BackgroundStyle(), @SwiftUICore.ViewBuilder _ actions: () -> Actions) where B : SwiftUICore.ShapeStyle, Actions : SwiftUICore.View
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI._DocumentGroupsIntro : Swift.Sendable {
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func dragItemGroup() -> some SwiftUICore.View
  
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension CoreFoundation.CGRect : @retroactive SwiftUICore.AnchorProtocol {
  package static var defaultAnchor: CoreFoundation.CGRect {
    get
  }
  package func prepare(geometry: SwiftUICore.AnchorGeometry) -> CoreFoundation.CGRect
  package static func hashValue(_ value: CoreFoundation.CGRect, into hasher: inout Swift.Hasher)
  package typealias AnchorValue = CoreFoundation.CGRect
}
#else
extension CoreFoundation.CGRect : SwiftUICore.AnchorProtocol {
  package static var defaultAnchor: CoreFoundation.CGRect {
    get
  }
  package func prepare(geometry: SwiftUICore.AnchorGeometry) -> CoreFoundation.CGRect
  package static func hashValue(_ value: CoreFoundation.CGRect, into hasher: inout Swift.Hasher)
  package typealias AnchorValue = CoreFoundation.CGRect
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension SwiftUICore.UnitRect : @retroactive SwiftUICore.AnchorProtocol {
  package static var defaultAnchor: CoreFoundation.CGRect {
    get
  }
  package func prepare(geometry: SwiftUICore.AnchorGeometry) -> CoreFoundation.CGRect
  package static func hashValue(_ value: CoreFoundation.CGRect, into hasher: inout Swift.Hasher)
  package typealias AnchorValue = CoreFoundation.CGRect
}
#else
extension SwiftUICore.UnitRect : SwiftUICore.AnchorProtocol {
  package static var defaultAnchor: CoreFoundation.CGRect {
    get
  }
  package func prepare(geometry: SwiftUICore.AnchorGeometry) -> CoreFoundation.CGRect
  package static func hashValue(_ value: CoreFoundation.CGRect, into hasher: inout Swift.Hasher)
  package typealias AnchorValue = CoreFoundation.CGRect
}
#endif
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Anchor.Source where Value == CoreFoundation.CGRect {
  public static func rect(_ r: CoreFoundation.CGRect) -> SwiftUICore.Anchor<Value>.Source
  public static var bounds: SwiftUICore.Anchor<CoreFoundation.CGRect>.Source {
    get
  }
  package static func unitPoint(_ p: SwiftUICore.UnitPoint) -> SwiftUICore.Anchor<Value>.Source
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct AccessibilityActionKind : Swift.Equatable, Swift.Sendable {
  public static let `default`: SwiftUI.AccessibilityActionKind
  public static let escape: SwiftUI.AccessibilityActionKind
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @available(macOS, unavailable)
  public static let magicTap: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let delete: SwiftUI.AccessibilityActionKind
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public static let showMenu: SwiftUI.AccessibilityActionKind
  public init(named name: SwiftUICore.Text)
  public static func == (a: SwiftUI.AccessibilityActionKind, b: SwiftUI.AccessibilityActionKind) -> Swift.Bool
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  nonisolated public func accessibilityAction(named name: SwiftUICore.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAction(_ actionKind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
  public func accessibilityAction(named name: SwiftUICore.Text, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction<Label>(action: @escaping () -> Swift.Void, @SwiftUICore.ViewBuilder label: () -> Label) -> some SwiftUICore.View where Label : SwiftUICore.View
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityActions<Content>(@SwiftUICore.ViewBuilder _ content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func accessibilityActions<Content>(_ category: SwiftUICore.Text, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_spi(Private) nonisolated public func accessibilityActions<Content>(_ category: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_spi(Private) nonisolated public func accessibilityActions<Content, S>(_ category: S, @SwiftUICore.ViewBuilder content: () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View, S : Swift.StringProtocol
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func accessibilityAction(named nameKey: SwiftUICore.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
  @_disfavoredOverload nonisolated public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier> where S : Swift.StringProtocol
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  public func accessibilityAction(named nameKey: SwiftUICore.LocalizedStringKey, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier>
  @_disfavoredOverload public func accessibilityAction<S>(named name: S, _ handler: @escaping () -> Swift.Void) -> SwiftUICore.ModifiedContent<Content, Modifier> where S : Swift.StringProtocol
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_disfavoredOverload nonisolated public func accessibilityAction(kind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> SwiftUI.AccessibilityActionResult) -> SwiftUICore.ModifiedContent<Self, SwiftUI.AccessibilityAttachmentModifier>
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.ModifiedContent where Modifier == SwiftUI.AccessibilityAttachmentModifier {
  @_spi(Private) @_disfavoredOverload public func accessibilityAction(kind: SwiftUI.AccessibilityActionKind = .default, _ handler: @escaping () -> SwiftUI.AccessibilityActionResult) -> SwiftUICore.ModifiedContent<Content, Modifier>
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.Group {
  public init<Base, Result>(sectionsOf view: Base, @SwiftUICore.ViewBuilder transform: @escaping (SwiftUI.SectionCollection) -> Result) where Content == SwiftUI.GroupSectionsOfContent<Base, Result>, Base : SwiftUICore.View, Result : SwiftUICore.View
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
@_Concurrency.MainActor @preconcurrency public struct GroupSectionsOfContent<Sections, Content> : SwiftUICore.View where Sections : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI22GroupSectionsOfContentV4bodyQrvp", 0) __<Sections, Content>
}
@available(*, unavailable)
extension SwiftUI.GroupSectionsOfContent : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SectionCollection : Swift.RandomAccessCollection {
  public subscript(index: Swift.Int) -> SwiftUI.SectionConfiguration {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Element = SwiftUI.SectionConfiguration
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Index = Swift.Int
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI.SectionCollection>
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
  public typealias SubSequence = Swift.Slice<SwiftUI.SectionCollection>
}
@available(*, unavailable)
extension SwiftUI.SectionCollection : Swift.Sendable {
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
public struct SectionConfiguration : Swift.Identifiable {
  public struct ID : Swift.Hashable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SwiftUI.SectionConfiguration.ID, b: SwiftUI.SectionConfiguration.ID) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var id: SwiftUI.SectionConfiguration.ID {
    get
  }
  @_spi(DoNotImportVariadicView) public var hasSubsections: Swift.Bool {
    get
  }
  public var containerValues: SwiftUI.ContainerValues {
    get
  }
  public var header: SwiftUI.SubviewsCollection {
    get
  }
  public var footer: SwiftUI.SubviewsCollection {
    get
  }
  public var content: SwiftUI.SubviewsCollection {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.SectionConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.SectionConfiguration.ID : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _DisclosureIndicator : SwiftUICore.View {
  nonisolated public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI20_DisclosureIndicatorV4bodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI._DisclosureIndicator : Swift.Sendable {
}
@available(visionOS 1.0, iOS 18.0, macOS 15.0, watchOS 11.0, *)
@available(tvOS, unavailable)
public struct SpatialEventGesture : SwiftUICore.PubliclyPrimitiveGesture, SwiftUICore.Gesture {
  @_spi(_) @available(*, deprecated, message: "Use onChanged/updating and onEnded.")
  public init(coordinateSpace: any SwiftUICore.CoordinateSpaceProtocol = .local, action: @escaping (SwiftUI.SpatialEventCollection) -> Swift.Void)
  public init(coordinateSpace: any SwiftUICore.CoordinateSpaceProtocol = .local)
  public typealias Value = SwiftUI.SpatialEventCollection
  public let coordinateSpace: SwiftUICore.CoordinateSpace
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(_) @available(*, deprecated, message: "Use onChanged/updating and onEnded.")
  public var action: ((SwiftUI.SpatialEventCollection) -> Swift.Void)? {
    get
  }
  #else
  @_spi(_) @available(*, deprecated, message: "Use onChanged/updating and onEnded.")
  public var action: ((SwiftUI.SpatialEventCollection) -> Swift.Void)? {
    get
  }
  #endif
  package var internalBody: some SwiftUICore.Gesture<SwiftUI.SpatialEventCollection> {
    get
  }
  public static func _makeGesture(gesture: SwiftUICore._GraphValue<SwiftUI.SpatialEventGesture>, inputs: SwiftUICore._GestureInputs) -> SwiftUICore._GestureOutputs<SwiftUI.SpatialEventGesture.Value>
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = Swift.Never
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 1.0, *)
  @available(tvOS, unavailable)
  package typealias InternalBody = @_opaqueReturnTypeOf("$s7SwiftUI19SpatialEventGestureV12internalBodyQrvp", 0) __
}
@available(*, unavailable)
extension SwiftUI.SpatialEventGesture : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func help(_ textKey: SwiftUICore.LocalizedStringKey) -> some SwiftUICore.View
  
  nonisolated public func help(_ text: SwiftUICore.Text) -> some SwiftUICore.View
  
  @_disfavoredOverload nonisolated public func help<S>(_ text: S) -> some SwiftUICore.View where S : Swift.StringProtocol
  
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
final public class ImageRenderer<Content> : Combine.ObservableObject where Content : SwiftUICore.View {
  final public let objectWillChange: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @available(iOS 17.2, macOS 14.2, tvOS 17.2, watchOS 10.2, *)
  @usableFromInline
  final internal var observationEnabled: Swift.Bool
  @available(iOS 17.2, macOS 14.2, tvOS 17.2, watchOS 10.2, *)
  @_alwaysEmitIntoClient final public var isObservationEnabled: Swift.Bool {
    get { observationEnabled }
    set { observationEnabled = newValue }
  }
  @_Concurrency.MainActor final public var content: Content {
    get
    set
  }
  @_Concurrency.MainActor final public var proposedSize: SwiftUICore.ProposedViewSize {
    get
    set
  }
  @_Concurrency.MainActor final public var scale: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor final public var isOpaque: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor final public var colorMode: SwiftUICore.ColorRenderingMode {
    get
    set
  }
  @_Concurrency.MainActor public init(content view: Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor final public var cgImage: CoreGraphics.CGImage? {
    get
  }
  #else
  @_Concurrency.MainActor final public var cgImage: CoreGraphics.CGImage? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor final public var uiImage: UIKit.UIImage? {
    get
  }
  #else
  @_Concurrency.MainActor final public var uiImage: UIKit.UIImage? {
    get
  }
  #endif
  @_Concurrency.MainActor final public func render(rasterizationScale: CoreFoundation.CGFloat = 1, renderer: (CoreFoundation.CGSize, (CoreGraphics.CGContext) -> Swift.Void) -> Swift.Void)
  @available(iOS 16.0, tvOS 16.0, watchOS 9.0, macOS 13.0, *)
  public typealias ObjectWillChangePublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @objc deinit
}
@available(iOS 17.1, macOS 14.1, tvOS 17.1, watchOS 10.1, *)
extension SwiftUI.ImageRenderer : Observation.Observable {
}
@available(*, unavailable)
extension SwiftUI.ImageRenderer : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@usableFromInline
internal struct ListRowBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable internal static var defaultValue: SwiftUICore.AnyView? {
    get { nil }
  }
  #else
  @inlinable internal static var defaultValue: SwiftUICore.AnyView? {
    get { nil }
  }
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @usableFromInline
  internal typealias Value = SwiftUICore.AnyView?
}
@available(*, unavailable)
extension SwiftUI.ListRowBackgroundTraitKey : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @inlinable nonisolated public func listRowBackground<V>(_ view: V?) -> some SwiftUICore.View where V : SwiftUICore.View {
        return _trait(ListRowBackgroundTraitKey.self, view.map { AnyView($0) })
    }
  
  #else
  @inlinable nonisolated public func listRowBackground<V>(_ view: V?) -> some SwiftUICore.View where V : SwiftUICore.View {
        return _trait(ListRowBackgroundTraitKey.self, view.map { AnyView($0) })
    }
  
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@usableFromInline
internal struct ClipsListRowBackgroundTraitKey : SwiftUICore._ViewTraitKey {
  @inlinable internal static var defaultValue: Swift.Bool {
    get { false }
  }
  @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  @usableFromInline
  internal typealias Value = Swift.Bool
}
@available(*, unavailable)
extension SwiftUI.ClipsListRowBackgroundTraitKey : Swift.Sendable {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) @_alwaysEmitIntoClient nonisolated public func listRowBackground<V>(isEnabled: Swift.Bool = true, clips: Swift.Bool = false, @SwiftUICore.ViewBuilder background: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View {
        _trait(
            ListRowBackgroundTraitKey.self,
            isEnabled ? AnyView(background()) : nil)
        ._trait(ClipsListRowBackgroundTraitKey.self, clips)
    }
  
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ProgressViewStyle where Self == SwiftUI.CircularPlaybackProgressViewStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public static var circularPlayback: SwiftUI.CircularPlaybackProgressViewStyle {
    @_spi(Private) get
  }
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@_Concurrency.MainActor @preconcurrency public struct CircularPlaybackProgressViewStyle : SwiftUI.ProgressViewStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularPlaybackProgressViewStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI33CircularPlaybackProgressViewStyleV8makeBody13configurationQrAA0efG13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CircularPlaybackProgressViewStyle : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
@preconcurrency @_Concurrency.MainActor public protocol Widget {
  associatedtype Body : SwiftUI.WidgetConfiguration
  @_Concurrency.MainActor @preconcurrency init()
  @_Concurrency.MainActor @preconcurrency var body: Self.Body { get }
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUICore.AppearsActiveKey {
  @usableFromInline
  package static func read(from traitCollection: UIKit.UITraitCollection) -> Swift.Bool
  @usableFromInline
  package static func write(to mutableTraits: inout any UIKit.UIMutableTraits, value: Swift.Bool)
}
@available(iOS 17.0, tvOS 17.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol UITraitBridgedEnvironmentKey : SwiftUICore.EnvironmentKey {
  static func read(from traitCollection: UIKit.UITraitCollection) -> Self.Value
  static func write(to mutableTraits: inout any UIKit.UIMutableTraits, value: Self.Value)
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public protocol _ScrollableLayout : SwiftUICore.Animatable {
  associatedtype StateType = Swift.Void
  static func initialState() -> Self.StateType
  func update(state: inout Self.StateType, proxy: inout SwiftUI._ScrollableLayoutProxy)
  associatedtype ItemModifier : SwiftUICore.ViewModifier = SwiftUICore.EmptyModifier
  func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUICore._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
  #if compiler(>=5.3) && $NoncopyableGenerics
  func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #else
  func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #endif
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self.StateType == () {
  public static func initialState() -> Self.StateType
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self.ItemModifier == SwiftUICore.EmptyModifier {
  public func modifier(for item: SwiftUI._ScrollableLayoutItem, layout: SwiftUICore._ScrollLayout, state: Self.StateType) -> Self.ItemModifier
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #else
  public func decelerationTarget(contentOffset: CoreFoundation.CGPoint, originalContentOffset: CoreFoundation.CGPoint, velocity: SwiftUICore._Velocity<CoreFoundation.CGSize>, size: CoreFoundation.CGSize) -> CoreFoundation.CGPoint?
  #endif
  public subscript<T>(data: T) -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<T, Self>> where T : Swift.RandomAccessCollection, T.Element : SwiftUICore.View, T.Index : Swift.Hashable {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollableLayout where Self : Swift.RandomAccessCollection, Self.Element : SwiftUICore.View, Self.Index : Swift.Hashable {
  public subscript() -> SwiftUI._ScrollView<SwiftUI._ScrollableLayoutView<Self, Self>> {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutProxy : Swift.RandomAccessCollection {
  public let size: CoreFoundation.CGSize
  public let visibleRect: CoreFoundation.CGRect
  public let count: Swift.Int
  public var visibleItems: [SwiftUI._ScrollableLayoutItem]
  public var contentSize: CoreFoundation.CGSize
  public var validRect: CoreFoundation.CGRect
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> Swift.AnyHashable {
    get
  }
  public mutating func size(of identifier: Swift.AnyHashable, in size: CoreFoundation.CGSize, validatingContent: Swift.Bool = true) -> CoreFoundation.CGSize
  public mutating func size(at index: Swift.Int, in size: CoreFoundation.CGSize, validatingContent: Swift.Bool = true) -> CoreFoundation.CGSize
  public mutating func removeSize(of identifier: Swift.AnyHashable)
  public mutating func removeAllSizes()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Element = Swift.AnyHashable
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Index = Swift.Int
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Iterator = Swift.IndexingIterator<SwiftUI._ScrollableLayoutProxy>
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<SwiftUI._ScrollableLayoutProxy>
}
@available(*, unavailable)
extension SwiftUI._ScrollableLayoutProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollableLayoutItem : Swift.Equatable {
  public var id: Swift.AnyHashable
  public var proposedSize: CoreFoundation.CGSize {
    get
  }
  public var anchor: SwiftUICore.UnitPoint {
    get
  }
  public var anchorPosition: CoreFoundation.CGPoint {
    get
  }
  public init(id: Swift.AnyHashable, proposedSize: CoreFoundation.CGSize, anchoring anchor: SwiftUICore.UnitPoint = .topLeading, at position: CoreFoundation.CGPoint)
  public static func == (a: SwiftUI._ScrollableLayoutItem, b: SwiftUI._ScrollableLayoutItem) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI._ScrollableLayoutItem : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@preconcurrency @_Concurrency.MainActor public protocol LabelStyle {
  associatedtype Body : SwiftUICore.View
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = SwiftUI.LabelStyleConfiguration
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
public struct LabelStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Title {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  @_Concurrency.MainActor @preconcurrency public struct Icon {
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Body = Swift.Never
  }
  public var title: SwiftUI.LabelStyleConfiguration.Title {
    get
  }
  public var icon: SwiftUI.LabelStyleConfiguration.Icon {
    get
  }
}
@available(*, unavailable)
extension SwiftUI.LabelStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabelStyleConfiguration.Icon : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.LabelStyleConfiguration.Title : Swift.Sendable {
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.View {
  nonisolated public func labelStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.LabelStyle
  
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.AnyTransition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func animation(_ animation: SwiftUICore.Animation?) -> SwiftUICore.AnyTransition
  #else
  public func animation(_ animation: SwiftUICore.Animation?) -> SwiftUICore.AnyTransition
  #endif
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.Transition {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_Concurrency.MainActor @preconcurrency public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.Transition
  
  #else
  @_Concurrency.MainActor @preconcurrency public func animation(_ animation: SwiftUICore.Animation?) -> some SwiftUICore.Transition
  
  #endif
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.WindowToolbarStyle where Self == SwiftUI.UnifiedCompactWindowToolbarStyle {
  @_alwaysEmitIntoClient public static var unifiedCompact: SwiftUI.UnifiedCompactWindowToolbarStyle {
    get {
        .init()
    }
  }
  @_alwaysEmitIntoClient public static func unifiedCompact(showsTitle: Swift.Bool) -> SwiftUI.UnifiedCompactWindowToolbarStyle {
        .init(showsTitle: showsTitle)
    }
}
@available(macOS 11.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct UnifiedCompactWindowToolbarStyle : SwiftUI.WindowToolbarStyle {
  public typealias _Body = Swift.Never
  public init()
  public init(showsTitle: Swift.Bool)
  @_spi(Private) public func configureWindowToolbar(_ window: Swift.AnyObject)
  @_spi(Private) @available(macOS 14.0, *)
  public static func _makeInputs(style: SwiftUICore._GraphValue<SwiftUI.UnifiedCompactWindowToolbarStyle>, inputs: inout SwiftUICore._GraphInputs)
}
@available(*, unavailable)
extension SwiftUI.UnifiedCompactWindowToolbarStyle : Swift.Sendable {
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  nonisolated public func onDrag(_ data: @escaping () -> Foundation.NSItemProvider) -> some SwiftUICore.View
  
}
@available(iOS 15.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func onDrag<V>(_ data: @escaping () -> Foundation.NSItemProvider, @SwiftUICore.ViewBuilder preview: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onDrag(_ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onDrag(_ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum DragLiftEvent {
  @_spi(Private) case started
  @_spi(Private) case ended
  @_spi(Private) case cancelled
  @_spi(Private) public static func == (a: SwiftUI.DragLiftEvent, b: SwiftUI.DragLiftEvent) -> Swift.Bool
  @_spi(Private) public func hash(into hasher: inout Swift.Hasher)
  @_spi(Private) public var hashValue: Swift.Int {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DragLiftEvent : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onDrag(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onDrag(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onDrag(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onLiftEvent: ((SwiftUI.DragLiftEvent) -> Swift.Void)? = nil, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onDrag(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onLiftEvent: ((SwiftUI.DragLiftEvent) -> Swift.Void)? = nil, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onDrag<Preview>(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder preview: () -> Preview) -> some SwiftUICore.View where Preview : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onDrag<Preview>(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder preview: () -> Preview) -> some SwiftUICore.View where Preview : SwiftUICore.View
  
  #endif
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onDrag(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onLiftEvent: ((SwiftUI.DragLiftEvent) -> Swift.Void)? = nil, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil, onLocalSessionAnimationsCompleted: ((_ didCancel: Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onDrag(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onLiftEvent: ((SwiftUI.DragLiftEvent) -> Swift.Void)? = nil, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil, onLocalSessionAnimationsCompleted: ((_ didCancel: Swift.Bool) -> Swift.Void)? = nil) -> some SwiftUICore.View
  
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func onDrag<Preview>(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil, onLocalSessionAnimationsCompleted: ((_ didCancel: Swift.Bool) -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder preview: () -> Preview) -> some SwiftUICore.View where Preview : SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func onDrag<Preview>(isEnabled: Swift.Bool = true, localContext: Any? = nil, _ data: @escaping () -> Foundation.NSItemProvider, onSessionBegan: (() -> Swift.Void)? = nil, onSessionEnded: (() -> Swift.Void)? = nil, onLocalSessionAnimationsCompleted: ((_ didCancel: Swift.Bool) -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder preview: () -> Preview) -> some SwiftUICore.View where Preview : SwiftUICore.View
  
  #endif
}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  nonisolated public func draggable<T>(_ payload: @autoclosure @escaping () -> T) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
  nonisolated public func draggable<V, T>(_ payload: @autoclosure @escaping () -> T, @SwiftUICore.ViewBuilder preview: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View, T : CoreTransferable.Transferable
  
}
@available(iOS 18.0, macOS 15.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(DoNotImport) nonisolated public func draggable<V, T>(isEnabled: Swift.Bool, _ payload: @autoclosure @escaping () -> T, @SwiftUICore.ViewBuilder preview: () -> V) -> some SwiftUICore.View where V : SwiftUICore.View, T : CoreTransferable.Transferable
  
  @_spi(DoNotImport) nonisolated public func draggable<T>(isEnabled: Swift.Bool, _ payload: @autoclosure @escaping () -> T) -> some SwiftUICore.View where T : CoreTransferable.Transferable
  
}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _DraggingModifier : SwiftUICore.ViewModifier, SwiftUICore.MultiViewModifier, SwiftUICore.PrimitiveViewModifier {
  nonisolated public static func _makeView(modifier: SwiftUICore._GraphValue<SwiftUI._DraggingModifier>, inputs: SwiftUICore._ViewInputs, body: @escaping (SwiftUICore._Graph, SwiftUICore._ViewInputs) -> SwiftUICore._ViewOutputs) -> SwiftUICore._ViewOutputs
  @available(iOS 13.4, macOS 10.15, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DraggingModifier : Swift.Sendable {
}
@available(iOS 15.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func dragItemTimings(_ timings: SwiftUI.DragItemTimings) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 15.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct DragItemTimings {
  @_spi(Private) public static var `default`: SwiftUI.DragItemTimings {
    @_spi(Private) get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) public init(liftDelay: Foundation.TimeInterval? = nil, pointerLiftDelay: Foundation.TimeInterval? = nil, cancellationDelay: Foundation.TimeInterval? = nil, competingLongPressDelay: Foundation.TimeInterval? = nil, liftMoveHysteresis: CoreFoundation.CGFloat? = nil, pointerLiftMoveHysteresis: CoreFoundation.CGFloat? = nil)
  #else
  @_spi(Private) public init(liftDelay: Foundation.TimeInterval? = nil, pointerLiftDelay: Foundation.TimeInterval? = nil, cancellationDelay: Foundation.TimeInterval? = nil, competingLongPressDelay: Foundation.TimeInterval? = nil, liftMoveHysteresis: CoreFoundation.CGFloat? = nil, pointerLiftMoveHysteresis: CoreFoundation.CGFloat? = nil)
  #endif
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DragItemTimings : Swift.Sendable {
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func prefersFullSizeDragPreviews(_ prefers: Swift.Bool) -> some SwiftUICore.View
  
}
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_spi(Private) nonisolated public func supportsSystemDrag(_ isSupported: Swift.Bool?) -> some SwiftUICore.View
  
  #else
  @_spi(Private) nonisolated public func supportsSystemDrag(_ isSupported: Swift.Bool?) -> some SwiftUICore.View
  
  #endif
}
@available(iOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func dragPreviewMode(_ dragPreviewMode: SwiftUI.DragPreviewMode) -> some SwiftUICore.View
  
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct DragPreviewMode {
  @_spi(Private) public static let `default`: SwiftUI.DragPreviewMode
  @_spi(Private) public static let systemApp: SwiftUI.DragPreviewMode
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.DragPreviewMode : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ScrollViewProxy : Swift.Equatable {
  public var config: SwiftUI._ScrollViewConfig {
    get
  }
  public var contentOffset: CoreFoundation.CGPoint {
    get
    set
  }
  public var minContentOffset: CoreFoundation.CGPoint {
    get
  }
  public var maxContentOffset: CoreFoundation.CGPoint {
    get
  }
  public var contentSize: CoreFoundation.CGSize {
    get
  }
  public var pageSize: CoreFoundation.CGSize {
    get
  }
  public var visibleRect: CoreFoundation.CGRect {
    get
  }
  public var isDragging: Swift.Bool {
    get
  }
  public var isDecelerating: Swift.Bool {
    get
  }
  public var isScrolling: Swift.Bool {
    get
  }
  public var isScrollingHorizontally: Swift.Bool {
    get
  }
  public var isScrollingVertically: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func setContentOffset(_ newOffset: CoreFoundation.CGPoint, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  #else
  public func setContentOffset(_ newOffset: CoreFoundation.CGPoint, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public func scrollRectToVisible(_ rect: CoreFoundation.CGRect, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  #else
  public func scrollRectToVisible(_ rect: CoreFoundation.CGRect, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  #endif
  public func contentOffsetOfNextPage(_ directions: SwiftUI._EventDirections) -> CoreFoundation.CGPoint
  public static func == (lhs: SwiftUI._ScrollViewProxy, rhs: SwiftUI._ScrollViewProxy) -> Swift.Bool
}
@available(*, unavailable)
extension SwiftUI._ScrollViewProxy : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct _ContainedScrollViewKey {
  public typealias Value = SwiftUI._ScrollViewProxy?
  #if compiler(>=5.3) && $NoncopyableGenerics
  public static func reduce(value: inout SwiftUI._ContainedScrollViewKey.Value, nextValue: () -> SwiftUI._ContainedScrollViewKey.Value)
  #else
  public static func reduce(value: inout SwiftUI._ContainedScrollViewKey.Value, nextValue: () -> SwiftUI._ContainedScrollViewKey.Value)
  #endif
}
@available(*, unavailable)
extension SwiftUI._ContainedScrollViewKey : Swift.Sendable {
}
@_spi(Private) @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ContainedScrollViewKey : SwiftUICore.HostPreferenceKey {
}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUICore.View {
  @_spi(Private) nonisolated public func variableBlur(maxRadius: CoreFoundation.CGFloat, mask: SwiftUICore.Image, opaque: Swift.Bool = false) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._PreferenceWritingModifier : SwiftUI._SceneModifier {
  @_Concurrency.MainActor @preconcurrency public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceWritingModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  @inlinable @_Concurrency.MainActor @preconcurrency internal func preference<K>(key: K.Type = K.self, value: K.Value) -> some SwiftUI.Scene where K : SwiftUICore.PreferenceKey {
        modifier(_PreferenceWritingModifier<K>(value: value))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore._PreferenceTransformModifier : SwiftUI._SceneModifier {
  @_Concurrency.MainActor @preconcurrency public static func _makeScene(modifier: SwiftUICore._GraphValue<SwiftUICore._PreferenceTransformModifier<Key>>, inputs: SwiftUI._SceneInputs, body: @escaping (SwiftUICore._Graph, SwiftUI._SceneInputs) -> SwiftUI._SceneOutputs) -> SwiftUI._SceneOutputs
}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Scene {
  @inlinable @_Concurrency.MainActor @preconcurrency internal func transformPreference<K>(_ key: K.Type = K.self, _ callback: @escaping (inout K.Value) -> Swift.Void) -> some SwiftUI.Scene where K : SwiftUICore.PreferenceKey {
        modifier(_PreferenceTransformModifier<K>(transform: callback))
    }
  
}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@propertyWrapper public struct ScaledClarityUIMetric<Value> : SwiftUICore.DynamicProperty where Value : Swift.BinaryFloatingPoint {
  @_spi(Private) public init(wrappedValue: Value, relativeTo textStyle: SwiftUICore.Font.TextStyle)
  @_spi(Private) public init(wrappedValue: Value)
  @_spi(Private) public var wrappedValue: Value {
    @_spi(Private) get
  }
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.ScaledClarityUIMetric : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct AccessoryCircularGaugeStyle : SwiftUI.GaugeStyle {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.AccessoryCircularGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @available(iOS 16.0, watchOS 9.0, macOS 13.0, *)
  @available(tvOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27AccessoryCircularGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@available(*, unavailable)
extension SwiftUI.AccessoryCircularGaugeStyle : Swift.Sendable {
}
@available(iOS 16.0, macOS 13.0, watchOS 9.0, *)
@available(tvOS, unavailable)
extension SwiftUI.GaugeStyle where Self == SwiftUI.AccessoryCircularGaugeStyle {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var accessoryCircular: SwiftUI.AccessoryCircularGaugeStyle {
    get { .init() }
  }
}
@_spi(Private) @available(iOS, deprecated, renamed: "AccessoryCircularGaugeStyle")
@available(macOS, deprecated, renamed: "AccessoryCircularGaugeStyle")
@available(tvOS, unavailable)
@available(watchOS, deprecated, renamed: "AccessoryCircularGaugeStyle")
@_Concurrency.MainActor @preconcurrency public struct CircularDashboardGaugeStyle : SwiftUI.GaugeStyle {
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public init()
  @_spi(Private) @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: SwiftUI.CircularDashboardGaugeStyle.Configuration) -> some SwiftUICore.View
  
  @_spi(Private) @available(iOS, deprecated, introduced: 16.0, renamed: "AccessoryCircularGaugeStyle")
  @available(tvOS, unavailable, renamed: "AccessoryCircularGaugeStyle")
  @available(watchOS, deprecated, introduced: 7.0, renamed: "AccessoryCircularGaugeStyle")
  @available(macOS, deprecated, introduced: 13.0, renamed: "AccessoryCircularGaugeStyle")
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI27CircularDashboardGaugeStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
@_spi(Private) @available(*, unavailable)
extension SwiftUI.CircularDashboardGaugeStyle : Swift.Sendable {
}
@_spi(Private) @available(iOS, deprecated)
@available(macOS, deprecated)
@available(tvOS, unavailable)
@available(watchOS, deprecated)
extension SwiftUI.GaugeStyle where Self == SwiftUI.CircularDashboardGaugeStyle {
  @_spi(Private) @available(iOS, deprecated, renamed: "accessoryCircular")
  @available(macOS, deprecated, renamed: "accessoryCircular")
  @available(tvOS, unavailable)
  @available(watchOS, deprecated, renamed: "accessoryCircular")
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public static var circularDashboard: SwiftUI.CircularDashboardGaugeStyle {
    @_spi(Private) get { .init() }
  }
}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Window<Content> : SwiftUI.Scene where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUI.Scene {
    get
  }
  nonisolated public init(_ title: SwiftUICore.Text, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  nonisolated public init(_ titleKey: SwiftUICore.LocalizedStringKey, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content)
  @_disfavoredOverload nonisolated public init<S>(_ title: S, id: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
  @available(macOS 13.0, *)
  @available(iOS, unavailable, introduced: 14.0)
  @available(tvOS, unavailable, introduced: 14.0)
  @available(watchOS, unavailable, introduced: 7.0)
  @available(visionOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s7SwiftUI6WindowV4bodyQrvp", 0) __<Content>
}
@available(*, unavailable)
extension SwiftUI.Window : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
@preconcurrency @_Concurrency.MainActor public protocol DatePickerStyle {
  associatedtype Body : SwiftUICore.View
  @available(iOS 16.0, macOS 13.0, *)
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func makeBody(configuration: Self.Configuration) -> Self.Body
  @available(iOS 16.0, macOS 13.0, *)
  typealias Configuration = SwiftUI.DatePickerStyleConfiguration
  associatedtype _Body : SwiftUICore.View = SwiftUICore.EmptyView
  @SwiftUICore.ViewBuilder @_Concurrency.MainActor @preconcurrency func _body(configuration: SwiftUI.DatePicker<Self._Label>) -> Self._Body
  typealias _Label = SwiftUI._DatePickerStyleLabel
}
@available(iOS 16.0, macOS 13.0, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
public struct DatePickerStyleConfiguration {
  @_Concurrency.MainActor @preconcurrency public struct Label : SwiftUICore.View {
    @available(iOS 16.0, watchOS 10.0, macOS 13.0, *)
    @_spi_available(tvOS, introduced: 18.0)
    public typealias Body = Swift.Never
  }
  public let label: SwiftUI.DatePickerStyleConfiguration.Label
  @SwiftUICore.Binding @_projectedValueProperty($selection) public var selection: Foundation.Date {
    get
    @available(iOS 16.0, watchOS 10.0, macOS 13.0, *)
    @_spi_available(tvOS, introduced: 18.0)
    nonmutating set
    @available(iOS 16.0, watchOS 10.0, macOS 13.0, *)
    @_spi_available(tvOS, introduced: 18.0)
    nonmutating _modify
  }
  public var $selection: SwiftUICore.Binding<Foundation.Date> {
    get
  }
  public var minimumDate: Foundation.Date?
  public var maximumDate: Foundation.Date?
  public var displayedComponents: SwiftUI.DatePickerComponents
}
@available(*, unavailable)
extension SwiftUI.DatePickerStyleConfiguration : Swift.Sendable {
}
@available(*, unavailable)
extension SwiftUI.DatePickerStyleConfiguration.Label : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUICore.View {
  nonisolated public func datePickerStyle<S>(_ style: S) -> some SwiftUICore.View where S : SwiftUI.DatePickerStyle
  
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct _DatePickerStyleLabel : SwiftUICore.View {
  @available(iOS 13.0, watchOS 10.0, macOS 10.15, *)
  @available(tvOS, unavailable, introduced: 13.0)
  public typealias Body = Swift.Never
}
@available(*, unavailable)
extension SwiftUI._DatePickerStyleLabel : Swift.Sendable {
}
@available(iOS 13.0, macOS 10.15, watchOS 10.0, *)
@available(tvOS, unavailable)
extension SwiftUI.DatePickerStyle where Self._Body == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public func _body(configuration: SwiftUI.DatePicker<Self._Label>) -> SwiftUICore.EmptyView
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@frozen @_Concurrency.MainActor @preconcurrency public struct _TrimmedShape<S> : SwiftUICore.Shape where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public var shape: S
  @_Concurrency.MainActor @preconcurrency public var startFraction: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var endFraction: CoreFoundation.CGFloat
  @inlinable nonisolated public init(shape: S, startFraction: CoreFoundation.CGFloat = 0, endFraction: CoreFoundation.CGFloat = 1) {
        self.shape = shape
        self.startFraction = startFraction
        self.endFraction = endFraction
    }
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
  nonisolated public static var role: SwiftUICore.ShapeRole {
    get
  }
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  nonisolated public var layoutDirectionBehavior: SwiftUICore.LayoutDirectionBehavior {
    get
  }
  public typealias AnimatableData = SwiftUICore.AnimatablePair<S.AnimatableData, SwiftUICore.AnimatablePair<CoreFoundation.CGFloat, CoreFoundation.CGFloat>>
  @_Concurrency.MainActor @preconcurrency public var animatableData: SwiftUI._TrimmedShape<S>.AnimatableData {
    get
    set
  }
  @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
  nonisolated public func sizeThatFits(_ proposal: SwiftUICore.ProposedViewSize) -> CoreFoundation.CGSize
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = SwiftUICore._ShapeView<SwiftUI._TrimmedShape<S>, SwiftUICore.ForegroundStyle>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUICore.Shape {
  @inlinable public func trim(from startFraction: CoreFoundation.CGFloat = 0, to endFraction: CoreFoundation.CGFloat = 1) -> some SwiftUICore.Shape {
        return _TrimmedShape(shape: self, startFraction: startFraction,
            endFraction: endFraction)
    }
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue {
        TupleTableColumnContent((c0, c1), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue {
        TupleTableColumnContent((c0, c1, c2), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never, C7.TableRowValue == C8.TableRowValue, C8.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumnBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableColumnContent<RowValue, Sort, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C9 : SwiftUI.TableColumnContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue, C8.TableRowValue == C9.TableRowValue {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), valueType: RowValue.self, sortType: Sort.self)
    }
  @_alwaysEmitIntoClient @_disfavoredOverload public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableColumnContent<RowValue, Swift.Never, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where RowValue == C0.TableRowValue, C0 : SwiftUI.TableColumnContent, C1 : SwiftUI.TableColumnContent, C2 : SwiftUI.TableColumnContent, C3 : SwiftUI.TableColumnContent, C4 : SwiftUI.TableColumnContent, C5 : SwiftUI.TableColumnContent, C6 : SwiftUI.TableColumnContent, C7 : SwiftUI.TableColumnContent, C8 : SwiftUI.TableColumnContent, C9 : SwiftUI.TableColumnContent, C0.TableColumnSortComparator == Swift.Never, C0.TableRowValue == C1.TableRowValue, C1.TableColumnSortComparator == Swift.Never, C1.TableRowValue == C2.TableRowValue, C2.TableColumnSortComparator == Swift.Never, C2.TableRowValue == C3.TableRowValue, C3.TableColumnSortComparator == Swift.Never, C3.TableRowValue == C4.TableRowValue, C4.TableColumnSortComparator == Swift.Never, C4.TableRowValue == C5.TableRowValue, C5.TableColumnSortComparator == Swift.Never, C5.TableRowValue == C6.TableRowValue, C6.TableColumnSortComparator == Swift.Never, C6.TableRowValue == C7.TableRowValue, C7.TableColumnSortComparator == Swift.Never, C7.TableRowValue == C8.TableRowValue, C8.TableColumnSortComparator == Swift.Never, C8.TableRowValue == C9.TableRowValue, C9.TableColumnSortComparator == Swift.Never {
        TupleTableColumnContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), valueType: RowValue.self, sortType: Never.self)
    }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.ToolbarContent where C0 : SwiftUI.ToolbarContent, C1 : SwiftUI.ToolbarContent, C2 : SwiftUI.ToolbarContent, C3 : SwiftUI.ToolbarContent, C4 : SwiftUI.ToolbarContent, C5 : SwiftUI.ToolbarContent, C6 : SwiftUI.ToolbarContent, C7 : SwiftUI.ToolbarContent, C8 : SwiftUI.ToolbarContent, C9 : SwiftUI.ToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ToolbarContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.CustomizableToolbarContent where C0 : SwiftUI.CustomizableToolbarContent, C1 : SwiftUI.CustomizableToolbarContent, C2 : SwiftUI.CustomizableToolbarContent, C3 : SwiftUI.CustomizableToolbarContent, C4 : SwiftUI.CustomizableToolbarContent, C5 : SwiftUI.CustomizableToolbarContent, C6 : SwiftUI.CustomizableToolbarContent, C7 : SwiftUI.CustomizableToolbarContent, C8 : SwiftUI.CustomizableToolbarContent, C9 : SwiftUI.CustomizableToolbarContent {
        TupleToolbarContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands {
        TupleCommandContent((c0, c1))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.CommandsBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.Commands where C0 : SwiftUI.Commands, C1 : SwiftUI.Commands, C2 : SwiftUI.Commands, C3 : SwiftUI.Commands, C4 : SwiftUI.Commands, C5 : SwiftUI.Commands, C6 : SwiftUI.Commands, C7 : SwiftUI.Commands, C8 : SwiftUI.Commands, C9 : SwiftUI.Commands {
        TupleCommandContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1)>((c0, c1))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent, C8 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityRotorContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.AccessibilityRotorContent where C0 : SwiftUI.AccessibilityRotorContent, C1 : SwiftUI.AccessibilityRotorContent, C2 : SwiftUI.AccessibilityRotorContent, C3 : SwiftUI.AccessibilityRotorContent, C4 : SwiftUI.AccessibilityRotorContent, C5 : SwiftUI.AccessibilityRotorContent, C6 : SwiftUI.AccessibilityRotorContent, C7 : SwiftUI.AccessibilityRotorContent, C8 : SwiftUI.AccessibilityRotorContent, C9 : SwiftUI.AccessibilityRotorContent {
        AccessibilityTupleRotorContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI.TupleTableRowContent<Value, (C0, C1)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue {
        TupleTableRowContent((c0, c1), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue {
        TupleTableRowContent((c0, c1, c2), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C8 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7, c8), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableRowBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI.TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where Value == C0.TableRowValue, C0 : SwiftUI.TableRowContent, C1 : SwiftUI.TableRowContent, C2 : SwiftUI.TableRowContent, C3 : SwiftUI.TableRowContent, C4 : SwiftUI.TableRowContent, C5 : SwiftUI.TableRowContent, C6 : SwiftUI.TableRowContent, C7 : SwiftUI.TableRowContent, C8 : SwiftUI.TableRowContent, C9 : SwiftUI.TableRowContent, C0.TableRowValue == C1.TableRowValue, C1.TableRowValue == C2.TableRowValue, C2.TableRowValue == C3.TableRowValue, C3.TableRowValue == C4.TableRowValue, C4.TableRowValue == C5.TableRowValue, C5.TableRowValue == C6.TableRowValue, C6.TableRowValue == C7.TableRowValue, C7.TableRowValue == C8.TableRowValue, C8.TableRowValue == C9.TableRowValue {
        TupleTableRowContent((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9), ofType: Value.self)
    }
}
@available(iOS 16.0, macOS 12.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.TableColumn where RowValue : ObjectiveC.NSObject, Sort == Foundation.SortDescriptor<RowValue>, Label == SwiftUICore.Text {
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Bool?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Double>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Double?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Float>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Float?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.Int?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt8>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt8?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt16>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt16?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt32>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt32?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt64>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt64?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.UInt?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.Date>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.Date?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.UUID>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Foundation.UUID?>, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #else
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content) where S : Swift.StringProtocol
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #else
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String?>, comparator: Swift.String.StandardComparator = .localizedStandard, @SwiftUICore.ViewBuilder content: @escaping (RowValue) -> Content)
  #endif
  public init(_ titleKey: SwiftUICore.LocalizedStringKey, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
  @_disfavoredOverload public init<S>(_ title: S, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text, S : Swift.StringProtocol
  @available(iOS 16.6, macOS 13.5, *)
  public init(_ text: SwiftUICore.Text, value: Swift.KeyPath<RowValue, Swift.String>, comparator: Swift.String.StandardComparator = .localizedStandard) where Content == SwiftUICore.Text
}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.PickerBuilder {
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C3 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue, C2.SelectionValue == C3.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C3 : SwiftUI.PickerContent, C4 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue, C2.SelectionValue == C3.SelectionValue, C3.SelectionValue == C4.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C3 : SwiftUI.PickerContent, C4 : SwiftUI.PickerContent, C5 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue, C2.SelectionValue == C3.SelectionValue, C3.SelectionValue == C4.SelectionValue, C4.SelectionValue == C5.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C3 : SwiftUI.PickerContent, C4 : SwiftUI.PickerContent, C5 : SwiftUI.PickerContent, C6 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue, C2.SelectionValue == C3.SelectionValue, C3.SelectionValue == C4.SelectionValue, C4.SelectionValue == C5.SelectionValue, C5.SelectionValue == C6.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C3 : SwiftUI.PickerContent, C4 : SwiftUI.PickerContent, C5 : SwiftUI.PickerContent, C6 : SwiftUI.PickerContent, C7 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue, C2.SelectionValue == C3.SelectionValue, C3.SelectionValue == C4.SelectionValue, C4.SelectionValue == C5.SelectionValue, C5.SelectionValue == C6.SelectionValue, C6.SelectionValue == C7.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView, C8._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C3 : SwiftUI.PickerContent, C4 : SwiftUI.PickerContent, C5 : SwiftUI.PickerContent, C6 : SwiftUI.PickerContent, C7 : SwiftUI.PickerContent, C8 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue, C2.SelectionValue == C3.SelectionValue, C3.SelectionValue == C4.SelectionValue, C4.SelectionValue == C5.SelectionValue, C5.SelectionValue == C6.SelectionValue, C6.SelectionValue == C7.SelectionValue, C7.SelectionValue == C8.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView, c8._identifiedView))
    }
  @_spi(_) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> SwiftUI._TuplePickerContent<SelectionValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView, C8._IdentifiedView, C9._IdentifiedView)> where SelectionValue == C0.SelectionValue, C0 : SwiftUI.PickerContent, C1 : SwiftUI.PickerContent, C2 : SwiftUI.PickerContent, C3 : SwiftUI.PickerContent, C4 : SwiftUI.PickerContent, C5 : SwiftUI.PickerContent, C6 : SwiftUI.PickerContent, C7 : SwiftUI.PickerContent, C8 : SwiftUI.PickerContent, C9 : SwiftUI.PickerContent, C0.SelectionValue == C1.SelectionValue, C1.SelectionValue == C2.SelectionValue, C2.SelectionValue == C3.SelectionValue, C3.SelectionValue == C4.SelectionValue, C4.SelectionValue == C5.SelectionValue, C5.SelectionValue == C6.SelectionValue, C6.SelectionValue == C7.SelectionValue, C7.SelectionValue == C8.SelectionValue, C8.SelectionValue == C9.SelectionValue {
        return .init((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView, c8._identifiedView, c9._identifiedView))
    }
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1)>((c0, c1))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2)>((c0, c1, c2))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination, C3 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2, C3)>((c0, c1, c2, c3))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination, C3 : SwiftUI.NavigationDestination, C4 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2, C3, C4)>((c0, c1, c2, c3, c4))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination, C3 : SwiftUI.NavigationDestination, C4 : SwiftUI.NavigationDestination, C5 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2, C3, C4, C5)>((c0, c1, c2, c3, c4, c5))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination, C3 : SwiftUI.NavigationDestination, C4 : SwiftUI.NavigationDestination, C5 : SwiftUI.NavigationDestination, C6 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2, C3, C4, C5, C6)>((c0, c1, c2, c3, c4, c5, c6))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination, C3 : SwiftUI.NavigationDestination, C4 : SwiftUI.NavigationDestination, C5 : SwiftUI.NavigationDestination, C6 : SwiftUI.NavigationDestination, C7 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2, C3, C4, C5, C6, C7)>((c0, c1, c2, c3, c4, c5, c6, c7))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination, C3 : SwiftUI.NavigationDestination, C4 : SwiftUI.NavigationDestination, C5 : SwiftUI.NavigationDestination, C6 : SwiftUI.NavigationDestination, C7 : SwiftUI.NavigationDestination, C8 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2, C3, C4, C5, C6, C7, C8)>((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
  
}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.NavigationDestinationBuilder {
  @_spi(Private) @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.NavigationDestination where C0 : SwiftUI.NavigationDestination, C1 : SwiftUI.NavigationDestination, C2 : SwiftUI.NavigationDestination, C3 : SwiftUI.NavigationDestination, C4 : SwiftUI.NavigationDestination, C5 : SwiftUI.NavigationDestination, C6 : SwiftUI.NavigationDestination, C7 : SwiftUI.NavigationDestination, C8 : SwiftUI.NavigationDestination, C9 : SwiftUI.NavigationDestination {
        TupleNavigationDestination<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
  
}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.TabContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C0.TabValue == C1.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView)>((c0._identifiedView, c1._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C7 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue, C6.TabValue == C7.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C7 : SwiftUI.TabContent, C8 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue, C6.TabValue == C7.TabValue, C7.TabValue == C8.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView, C8._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView, c8._identifiedView))
    }
  
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> some SwiftUI.TabContent<TabValue> where TabValue == C0.TabValue, C0 : SwiftUI.TabContent, C1 : SwiftUI.TabContent, C2 : SwiftUI.TabContent, C3 : SwiftUI.TabContent, C4 : SwiftUI.TabContent, C5 : SwiftUI.TabContent, C6 : SwiftUI.TabContent, C7 : SwiftUI.TabContent, C8 : SwiftUI.TabContent, C9 : SwiftUI.TabContent, C0.TabValue == C1.TabValue, C1.TabValue == C2.TabValue, C2.TabValue == C3.TabValue, C3.TabValue == C4.TabValue, C4.TabValue == C5.TabValue, C5.TabValue == C6.TabValue, C6.TabValue == C7.TabValue, C7.TabValue == C8.TabValue, C8.TabValue == C9.TabValue {
        return _TupleTabContent<TabValue, (C0._IdentifiedView, C1._IdentifiedView, C2._IdentifiedView, C3._IdentifiedView, C4._IdentifiedView, C5._IdentifiedView, C6._IdentifiedView, C7._IdentifiedView, C8._IdentifiedView, C9._IdentifiedView)>((c0._identifiedView, c1._identifiedView, c2._identifiedView, c3._identifiedView, c4._identifiedView, c5._identifiedView, c6._identifiedView, c7._identifiedView, c8._identifiedView, c9._identifiedView))
    }
  
}
@_spi(ForSwiftUIOnly) extension SwiftUI._UIHostingView : SwiftUICore.GraphDelegate {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
extension SwiftUI._UIHostingView : SwiftUICore._BenchmarkHost {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.AccessibilityLabeledPairRole : Swift.Sendable {}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._DigitalCrownDecelerationRate : Swift.Equatable {}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._DigitalCrownDecelerationRate : Swift.Hashable {}
@_spi(ForAVKitOnly) @available(iOS 17.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.AVKitPressableCaptureButton.Phase : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.DismissAction : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.AccessibilityAdjustmentDirection : Swift.Hashable {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate_V1 : SwiftUI.ControlWidgetTemplateModifier_V1 {}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate_V1 : SwiftUI.ControlWidgetTemplate_V1 {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Equatable {}
@available(iOS 13.4, macOS 10.15, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DropOperation : Swift.Hashable {}
@_spi(Previews) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.PreviewModifierTrait : Swift.Sendable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI._SymbolEffectsRemovedModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OpenWindowAction : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._FlipForRTLEffect : Swift.Sendable {}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.OpenDocumentAction : Swift.Sendable {}
@available(macOS 13.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.NewDocumentAction : Swift.Sendable {}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.Strength : Swift.Equatable {}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.Strength : Swift.Hashable {}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.RestingPosition : Swift.Equatable {}
@_spi(Private) @available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._CrownHapticsConfiguration.Notch.RestingPosition : Swift.Hashable {}
@_spi(DoNotImport) @available(iOS 17.0, visionOS 1.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(*, deprecated, message: "_Stage and its APIs will be removed soon. Use ImmersiveSpace APIs instead as soon as possible – see rdar://100803900")
extension SwiftUI.DismissStageAction : Swift.Sendable {}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._TuplePickerContent : SwiftUI.PickerContent {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier : SwiftUI.ControlWidgetConfigurationModifier_V1 {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier : SwiftUI.ControlWidgetTemplateModifier_V1 {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier : SwiftUI.ControlWidgetConfigurationModifier {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceWritingModifier : SwiftUI.ControlWidgetTemplateModifier {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier : SwiftUI.ControlWidgetConfigurationModifier_V1 {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier : SwiftUI.ControlWidgetTemplateModifier_V1 {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier : SwiftUI.ControlWidgetConfigurationModifier {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore._PreferenceTransformModifier : SwiftUI.ControlWidgetTemplateModifier {}
@available(iOS 14.0, macOS 11.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.EmptyWidgetConfiguration : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyTableRowContent : SwiftUI.TableRowContent {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, *)
@available(watchOS, unavailable)
extension SwiftUI.HoverPhase : Swift.Sendable {}
@_spi(ForSwiftUIOnly) @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._ArchivedViewHost : SwiftUICore.GraphDelegate {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI._LayoutDirectionBehaviorEffect : Swift.Sendable {}
@_spi(Private) @available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated: 8.0, message: "Use View.controlSize(_:) instead.")
extension SwiftUI.CircularProgressViewStyle.Size : Swift.Equatable {}
@_spi(Private) @available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, deprecated: 8.0, message: "Use View.controlSize(_:) instead.")
extension SwiftUI.CircularProgressViewStyle.Size : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._TaskModifier : Swift.Sendable {}
@_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.SpringLoadingBehavior.HighlightState : Swift.Equatable {}
@_spi(UIFrameworks) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.SpringLoadingBehavior.HighlightState : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.ScenePhase : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.Visibility : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GeometryActionModifier : SwiftUICore.ViewModifier {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 10.0, *)
extension SwiftUI._GeometryActionModifier2 : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS, deprecated, introduced: 18.0, message: "Use `overlayAccessoryView` and `backgroundAccessoryView` parameters of DocumentLaunchView or DocumentGroupLaunchScene initializers instead")
extension SwiftUI._DocumentIntroAccessoryPosition : Swift.Hashable {}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.ControlSize : Swift.Equatable {}
@available(iOS 15.0, macOS 10.15, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 18.0)
extension SwiftUI.ControlSize : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AllowsHitTestingModifier : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AllowsHitTestingModifier : Swift.Sendable {}
@_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.NavigationPath.CollectionProxyError : Swift.Equatable {}
@_spi(Private) @available(iOS 16.4, macOS 13.3, tvOS 16.4, watchOS 9.4, *)
extension SwiftUI.NavigationPath.CollectionProxyError : Swift.Hashable {}
@_spi(ForSwiftUIOnly) extension SwiftUI.ArchivedTemplateHost : SwiftUICore.GraphDelegate {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ScrollTransitionPhase : Swift.Equatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.ScrollTransitionPhase : Swift.Hashable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Equatable {}
@available(watchOS 6.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.DigitalCrownRotationalSensitivity : Swift.Hashable {}
@_spi(SSC) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EmptyControlWidgetConfiguration_V1 : SwiftUI.ControlWidgetConfiguration_V1 {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.UserDefaultLocation : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
extension SwiftUI.NavigationBarItem.TitleDisplayMode : Swift.Hashable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OpenImmersiveSpaceAction.Result : Swift.Equatable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.OpenImmersiveSpaceAction.Result : Swift.Hashable {}
@available(iOS 14.0, tvOS 14.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIApplicationDelegateAdaptor : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.StateObject : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.StateObject.Storage : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension Swift.Never : SwiftUI.Commands {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AccessibilityOptionalRotorContent : SwiftUI.AccessibilityRotorContent {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.Equatable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.Hashable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.RawRepresentable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizePosition : Swift.Sendable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.Equatable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.Hashable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.RawRepresentable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection : Swift.Sendable {}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.FrameResizeDirection.Set : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PositionLayout : Swift.Sendable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.PushWindowAction : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ProjectionEffect : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._TransformEffect : Swift.Sendable {}
@_spi(UnifiedAnimation) @available(iOS 18.0, tvOS 18.0, visionOS 2.0, watchOS 11.0, *)
@available(macOS, unavailable)
extension UIKit.UIView.AnimationResult : Swift.Hashable {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._LayoutScaleModifier : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._LayoutScaleModifier : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI._TupleTabContent : SwiftUI.TabContent {}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.MultimodalListStyle.Layout : Swift.Equatable {}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.MultimodalListStyle.Layout : Swift.Hashable {}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.MultimodalListStyle.Layout : Swift.RawRepresentable {}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.MultimodalListStyle.IconStyle : Swift.Equatable {}
@_spi(Private) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.MultimodalListStyle.IconStyle : Swift.Hashable {}
@available(visionOS 1.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DismissImmersiveSpaceAction : Swift.Sendable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIViewControllerRepresentableContext : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._SizeFittingRoot : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUICore.Animatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._AligningContentProvider.AligningContentProviderLayout : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._PagingViewConfig.Direction : Swift.Hashable {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.AsyncBody : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.PreviewPlatform : Swift.Hashable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.HandGestureShortcutPaginationDirection : Swift.Equatable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.HandGestureShortcutPaginationDirection : Swift.Hashable {}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.PickerOption : SwiftUI.PickerContent {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Equatable {}
@available(macOS 10.15, tvOS 13.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.MoveCommandDirection : Swift.Hashable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ExpansionState : Swift.Equatable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ExpansionState : Swift.Hashable {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI._ReclaimForEachElementsViewModifier : Swift.Sendable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ListItemKind : Swift.Equatable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ListItemKind : Swift.Hashable {}
@_spi(Private) @available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI.ListItemKind : Swift.RawRepresentable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.DismissSearchAction : Swift.Sendable {}
@available(macOS 10.15, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI._PullDownButton : SwiftUICore.View {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._BackdropGroupEffect : SwiftUICore.Animatable {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._BackdropGroupEffect : SwiftUICore.ViewModifier {}
@_spi(Private) @available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI._BackdropGroupEffect : Swift.Sendable {}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.ClarityUIApplicationSceneClientSetting : Swift.Equatable {}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.ClarityUIApplicationSceneClientSetting : Swift.Hashable {}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.ClarityUIApplicationSceneClientSetting : Swift.RawRepresentable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth : Swift.Equatable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth : Swift.Hashable {}
@available(visionOS 2.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUI.SquareAzimuth.Set : Swift.Sendable {}
@_spi(_) @available(iOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, introduced: 2.0, deprecated: 2.0, message: "Use ``SwiftUI/SquareAzimuth`` instead.")
extension SwiftUI.Viewpoint3D.FourFacetAzimuth.Set : Swift.Sendable {}
@_spi(Private) @available(iOS 16.0, macOS 15.0, watchOS 9.0, *)
@_spi_available(tvOS, introduced: 17.0)
extension SwiftUI.WidgetAuxiliaryViewMetadataModifier : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentObject : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.EnvironmentObject.Wrapper : Swift.Sendable {}
@_spi(Private) @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@available(visionOS, introduced: 1.0, deprecated: 100000.0, renamed: "AccessibilityAttachmentModifier")
extension SwiftUI.AccessibilityArchivableAttachmentModifier : SwiftUICore.ViewModifier {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ObservedObject : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.ObservedObject.Wrapper : Swift.Sendable {}
@_spi(Private) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._DefaultForegroundStyleModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : SwiftUICore.ViewModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._AccessibilityIgnoresInvertColorsViewModifier : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Equatable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension Foundation.NSUserActivity.TypedPayloadError : Swift.Hashable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Equatable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.EditMode : Swift.Hashable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.TimelineView.Context.Cadence : Swift.Hashable {}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.OpenSettingsAction : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.Grid : SwiftUICore.View {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridRow : SwiftUICore.View {}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridCellRangeModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridCellSizeModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridAnchorModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridAlignmentModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI._GridUnsizedAxesModifier : Swift.Sendable {}
@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.GridLayout : Swift.Sendable {}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated)
extension SwiftUI._GridLayout : Swift.Sendable {}
@_spi(_) @available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)
@available(*, deprecated)
extension SwiftUI._GridLayout : SwiftUICore.Layout {}
@_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(*, deprecated, message: "Use HorizontalSizing")
extension SwiftUI.JindoTripleVStack.HorizontalMode : Swift.Equatable {}
@_spi(Jindo) @available(iOS 16.1, tvOS 18.0, watchOS 11.0, *)
@available(macOS, unavailable)
@available(*, deprecated, message: "Use HorizontalSizing")
extension SwiftUI.JindoTripleVStack.HorizontalMode : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyPress.Result : Swift.Equatable {}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension SwiftUI.KeyPress.Result : Swift.Hashable {}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.SnapshotData.SnapshotReason : Swift.Equatable {}
@available(watchOS 9.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.SnapshotData.SnapshotReason : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HiddenModifier : Swift.Sendable {}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.NavigationBarHost : Swift.Equatable {}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.NavigationBarHost : Swift.Hashable {}
@_spi(ClarityBoard) @available(iOS 16.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension SwiftUI.NavigationBarHost : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchedResults : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.FetchRequest : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.FetchRequest.Configuration : Swift.Sendable {}
@available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate : SwiftUI.ControlWidgetTemplate {}
@_spi(Widget) @available(iOS 18.0, *)
@_spi_available(macOS, introduced: 15.0)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUI.EmptyControlWidgetTemplate : SwiftUI.ControlWidgetTemplateModifier {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._EmptyScene : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._ScrollViewAnimationMode : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Spacer : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI.Spacer : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._TextBaselineRelativeSpacer : SwiftUICore.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI._TextBaselineRelativeSpacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HSpacer : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._HSpacer : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VSpacer : SwiftUICore.View {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUI._VSpacer : Swift.Sendable {}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.UIViewRepresentableContext : Swift.Sendable {}
@available(iOS 18.0, macOS 15.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension SwiftUI._ContainerValueWritingModifier : SwiftUICore.ViewModifier {}
@available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DismissWindowAction : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchResults : Swift.Sendable {}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension SwiftUI.SectionedFetchResults.Section : Swift.Sendable {}
@_spi(DoNotImportVariadicView) @available(*, deprecated, renamed: "_ContainerValueWritingModifier")
extension SwiftUI._TraitKeyWritingModifier : SwiftUICore.ViewModifier {}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.AccessibilityZoomGestureAction.Direction : Swift.Equatable {}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.AccessibilityZoomGestureAction.Direction : Swift.Hashable {}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension SwiftUI.AccessibilityZoomGestureAction.Direction : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Title : SwiftUICore.View {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUI.LabelStyleConfiguration.Icon : SwiftUICore.View {}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DragLiftEvent : Swift.Equatable {}
@_spi(Private) @available(iOS 16.0, macOS 13.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DragLiftEvent : Swift.Hashable {}
