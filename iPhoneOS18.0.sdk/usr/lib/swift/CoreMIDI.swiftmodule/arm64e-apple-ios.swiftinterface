// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.3.38 clang-1600.0.20.6)
// swift-module-flags: -target arm64e-apple-ios18.0 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreMIDI -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-bare-slash-regex -user-module-version 6 -module-name CoreMIDI
@_exported import CoreMIDI
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 11.0, iOS 14.0, *)
public struct UnsafeMutableMIDIEventPacketPointer {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventPacket>)
  #else
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventPacket>)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventPacket>?)
  #else
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventPacket>?)
  #endif
  public var count: Swift.Int {
    get
    nonmutating set(newValue)
  }
  public var timeStamp: Swift.Int {
    get
    nonmutating set(newValue)
  }
}
@available(macOS 11.0, iOS 14.0, *)
extension CoreMIDI.UnsafeMutableMIDIEventPacketPointer : Swift.MutableCollection, Swift.RandomAccessCollection {
  @available(macOS 11.0, iOS 14.0, *)
  public typealias Element = Swift.UInt32
  @available(macOS 11.0, iOS 14.0, *)
  public typealias Index = Swift.Int
  @available(macOS 11.0, iOS 14.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(macOS 11.0, iOS 14.0, *)
  public var startIndex: Swift.Int {
    get
  }
  @available(macOS 11.0, iOS 14.0, *)
  public var endIndex: Swift.Int {
    get
  }
  @available(macOS 11.0, iOS 14.0, *)
  public subscript(index: CoreMIDI.UnsafeMutableMIDIEventPacketPointer.Index) -> CoreMIDI.UnsafeMutableMIDIEventPacketPointer.Element {
    get
    nonmutating set(newValue)
  }
  @available(iOS 14.0, macOS 11.0, *)
  public typealias Iterator = CoreMIDI.MIDIEventPacket.WordSequence.Iterator
  @available(iOS 14.0, macOS 11.0, *)
  public typealias SubSequence = Swift.Slice<CoreMIDI.UnsafeMutableMIDIEventPacketPointer>
}
extension CoreMIDI.MIDIEventPacket {
  @available(macOS 11.0, iOS 14.0, *)
  public struct WordSequence : Swift.Sequence {
    public func makeIterator() -> CoreMIDI.MIDIEventPacket.WordSequence.Iterator
    public var count: Swift.Int {
      get
    }
    public struct Iterator : Swift.IteratorProtocol {
      public init(_ s: CoreMIDI.MIDIEventPacket.WordSequence)
      #if compiler(>=5.3) && $NoncopyableGenerics
      public mutating func next() -> Swift.UInt32?
      #else
      public mutating func next() -> Swift.UInt32?
      #endif
      @available(iOS 14.0, macOS 11.0, *)
      public typealias Element = Swift.UInt32
    }
    @available(iOS 14.0, macOS 11.0, *)
    public typealias Element = Swift.UInt32
  }
  @available(macOS 11.0, iOS 14.0, *)
  public struct WordCollection : Swift.RandomAccessCollection {
    public typealias Element = Swift.UInt32
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(_ p: Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>)
    #else
    public init(_ p: Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(_ p: Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?)
    #else
    public init?(_ p: Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?)
    #endif
    public var count: Swift.Int {
      get
    }
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: CoreMIDI.MIDIEventPacket.WordCollection.Index) -> CoreMIDI.MIDIEventPacket.WordCollection.Element {
      get
    }
    @available(iOS 14.0, macOS 11.0, *)
    public typealias Iterator = Swift.IndexingIterator<CoreMIDI.MIDIEventPacket.WordCollection>
    @available(iOS 14.0, macOS 11.0, *)
    public typealias SubSequence = Swift.Slice<CoreMIDI.MIDIEventPacket.WordCollection>
  }
}
@available(macOS 11.0, iOS 14.0, *)
extension CoreMIDI.UnsafeMutableMIDIEventPacketPointer : Swift.Sequence {
  @available(macOS 11.0, iOS 14.0, *)
  public func makeIterator() -> CoreMIDI.MIDIEventPacket.WordSequence.Iterator
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIEventPacket {
  @available(macOS 11.0, iOS 14.0, *)
  public func sequence() -> CoreMIDI.MIDIEventPacket.WordSequence
  @available(macOS 11.0, iOS 14.0, *)
  public func words() -> CoreMIDI.MIDIEventPacket.WordCollection
}
#else
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIEventPacket {
  @available(macOS 11.0, iOS 14.0, *)
  public func sequence() -> CoreMIDI.MIDIEventPacket.WordSequence
  @available(macOS 11.0, iOS 14.0, *)
  public func words() -> CoreMIDI.MIDIEventPacket.WordCollection
}
#endif
extension CoreMIDI.MIDIEventPacket {
  @available(macOS 11.0, iOS 14.0, *)
  public class Builder {
    public var capacity: Swift.Int {
      get
    }
    public init(maximumNumberMIDIWords: Swift.Int)
    @objc deinit
    public var count: Swift.Int {
      get
    }
    public var timeStamp: Swift.Int {
      get
      set(newValue)
    }
    public func append(_ midiWords: Swift.UInt32...)
    #if compiler(>=5.3) && $NoncopyableGenerics
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>) -> Result) -> Result
    #else
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>) -> Result) -> Result
    #endif
    public func withUnsafeMutableMIDIEventPacketPointer<Result>(_ body: (inout CoreMIDI.UnsafeMutableMIDIEventPacketPointer) -> Result) -> Result
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIEventList {
  @available(macOS 11.0, iOS 14.0, *)
  public func unsafeSequence() -> CoreMIDI.MIDIEventList.UnsafeSequence
}
#else
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIEventList {
  @available(macOS 11.0, iOS 14.0, *)
  public func unsafeSequence() -> CoreMIDI.MIDIEventList.UnsafeSequence
}
#endif
extension CoreMIDI.MIDIEventList {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 11.0, iOS 14.0, *)
  public static func sizeInBytes(pktList: Swift.UnsafePointer<CoreMIDI.MIDIEventList>) -> Swift.Int
  #else
  @available(macOS 11.0, iOS 14.0, *)
  public static func sizeInBytes(pktList: Swift.UnsafePointer<CoreMIDI.MIDIEventList>) -> Swift.Int
  #endif
  @available(macOS 11.0, iOS 14.0, *)
  public struct UnsafeSequence : Swift.Sequence {
    public func makeIterator() -> CoreMIDI.MIDIEventList.UnsafeSequence.Iterator
    public var count: Swift.Int {
      get
    }
    public struct Iterator : Swift.IteratorProtocol {
      public init(_ s: CoreMIDI.MIDIEventList.UnsafeSequence)
      #if compiler(>=5.3) && $NoncopyableGenerics
      public mutating func next() -> Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?
      #else
      public mutating func next() -> Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?
      #endif
      @available(iOS 14.0, macOS 11.0, *)
      public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>
    }
    @available(iOS 14.0, macOS 11.0, *)
    public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>
  }
}
@available(macOS 11.0, iOS 14.0, *)
public struct UnsafeMutableMIDIEventListPointer : Swift.Sequence {
  public var listSizeInBytes: Swift.Int {
    get
  }
  public var lastPacket: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventPacket>? {
    get
  }
  public var midiProtocol: CoreMIDI.MIDIProtocolID {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventList>, wordSize: Swift.Int, inProtocol: CoreMIDI.MIDIProtocolID)
  #else
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventList>, wordSize: Swift.Int, inProtocol: CoreMIDI.MIDIProtocolID)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventList>?, wordSize: Swift.Int)
  #else
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIEventList>?, wordSize: Swift.Int)
  #endif
  public var count: Swift.Int {
    get
  }
  public mutating func clear()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  public mutating func append(timestamp: CoreMIDI.MIDITimeStamp, words: [Swift.UInt32]) -> Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?
  #else
  @discardableResult
  public mutating func append(timestamp: CoreMIDI.MIDITimeStamp, words: [Swift.UInt32]) -> Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?
  #endif
  public func makeIterator() -> CoreMIDI.MIDIEventList.UnsafeSequence.Iterator
  @available(iOS 14.0, macOS 11.0, *)
  public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>
  @available(iOS 14.0, macOS 11.0, *)
  public typealias Iterator = CoreMIDI.MIDIEventList.UnsafeSequence.Iterator
}
extension CoreMIDI.MIDIEventList {
  @available(macOS 11.0, iOS 14.0, *)
  public class Builder {
    public init(inProtocol: CoreMIDI.MIDIProtocolID, wordSize: Swift.Int)
    @objc deinit
    #if compiler(>=5.3) && $NoncopyableGenerics
    @discardableResult
    public func append(timestamp: CoreMIDI.MIDITimeStamp, words: [Swift.UInt32]) -> Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?
    #else
    @discardableResult
    public func append(timestamp: CoreMIDI.MIDITimeStamp, words: [Swift.UInt32]) -> Swift.UnsafePointer<CoreMIDI.MIDIEventPacket>?
    #endif
    public func clear()
    public var count: Swift.Int {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIEventList>) -> Result) -> Result
    #else
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIEventList>) -> Result) -> Result
    #endif
    public func withUnsafeMutableMIDIEventListPointer<Result>(_ body: (inout CoreMIDI.UnsafeMutableMIDIEventListPointer) -> Result) -> Result
  }
}
@available(macOS 10.15, iOS 13.0, *)
public struct UnsafeMutableMIDIPacketPointer {
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>)
  #else
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>?)
  #else
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>?)
  #endif
  public var count: Swift.Int {
    get
    nonmutating set(newValue)
  }
  public var timeStamp: Swift.Int {
    get
    nonmutating set(newValue)
  }
}
@available(macOS 10.15, iOS 13.0, *)
extension CoreMIDI.UnsafeMutableMIDIPacketPointer : Swift.MutableCollection, Swift.RandomAccessCollection {
  @available(macOS 10.15, iOS 13.0, *)
  public typealias Element = Swift.UInt8
  @available(macOS 10.15, iOS 13.0, *)
  public typealias Index = Swift.Int
  @available(macOS 10.15, iOS 13.0, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(macOS 10.15, iOS 13.0, *)
  public var startIndex: Swift.Int {
    get
  }
  @available(macOS 10.15, iOS 13.0, *)
  public var endIndex: Swift.Int {
    get
  }
  @available(macOS 10.15, iOS 13.0, *)
  public subscript(index: CoreMIDI.UnsafeMutableMIDIPacketPointer.Index) -> CoreMIDI.UnsafeMutableMIDIPacketPointer.Element {
    get
    nonmutating set(newValue)
  }
  @available(iOS 13.0, macOS 10.15, *)
  public typealias Iterator = CoreMIDI.MIDIPacket.ByteSequence.Iterator
  @available(iOS 13.0, macOS 10.15, *)
  public typealias SubSequence = Swift.Slice<CoreMIDI.UnsafeMutableMIDIPacketPointer>
}
extension CoreMIDI.MIDIPacket {
  @available(macOS 10.15, iOS 13.0, *)
  public struct ByteSequence : Swift.Sequence {
    public func makeIterator() -> CoreMIDI.MIDIPacket.ByteSequence.Iterator
    public var count: Swift.Int {
      get
    }
    public struct Iterator : Swift.IteratorProtocol {
      public init(_ s: CoreMIDI.MIDIPacket.ByteSequence)
      #if compiler(>=5.3) && $NoncopyableGenerics
      public mutating func next() -> Swift.UInt8?
      #else
      public mutating func next() -> Swift.UInt8?
      #endif
      @available(iOS 13.0, macOS 10.15, *)
      public typealias Element = Swift.UInt8
    }
    @available(iOS 13.0, macOS 10.15, *)
    public typealias Element = Swift.UInt8
  }
  @available(macOS 10.15, iOS 13.0, *)
  public struct ByteCollection : Swift.RandomAccessCollection {
    public typealias Element = Swift.UInt8
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init(_ p: Swift.UnsafePointer<CoreMIDI.MIDIPacket>)
    #else
    public init(_ p: Swift.UnsafePointer<CoreMIDI.MIDIPacket>)
    #endif
    #if compiler(>=5.3) && $NoncopyableGenerics
    public init?(_ p: Swift.UnsafePointer<CoreMIDI.MIDIPacket>?)
    #else
    public init?(_ p: Swift.UnsafePointer<CoreMIDI.MIDIPacket>?)
    #endif
    public var count: Swift.Int {
      get
    }
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: CoreMIDI.MIDIPacket.ByteCollection.Index) -> CoreMIDI.MIDIPacket.ByteCollection.Element {
      get
    }
    @available(iOS 13.0, macOS 10.15, *)
    public typealias Iterator = Swift.IndexingIterator<CoreMIDI.MIDIPacket.ByteCollection>
    @available(iOS 13.0, macOS 10.15, *)
    public typealias SubSequence = Swift.Slice<CoreMIDI.MIDIPacket.ByteCollection>
  }
}
@available(macOS 10.15, iOS 13.0, *)
extension CoreMIDI.UnsafeMutableMIDIPacketPointer : Swift.Sequence {
  @available(macOS 10.15, iOS 13.0, *)
  public func makeIterator() -> CoreMIDI.MIDIPacket.ByteSequence.Iterator
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIPacket {
  @available(macOS 10.15, iOS 13.0, *)
  public func sequence() -> CoreMIDI.MIDIPacket.ByteSequence
  @available(macOS 10.15, iOS 13.0, *)
  public func bytes() -> CoreMIDI.MIDIPacket.ByteCollection
}
#else
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIPacket {
  @available(macOS 10.15, iOS 13.0, *)
  public func sequence() -> CoreMIDI.MIDIPacket.ByteSequence
  @available(macOS 10.15, iOS 13.0, *)
  public func bytes() -> CoreMIDI.MIDIPacket.ByteCollection
}
#endif
extension CoreMIDI.MIDIPacket {
  @available(macOS 10.15, iOS 13.0, *)
  public class Builder {
    public var capacity: Swift.Int {
      get
    }
    public init(maximumNumberMIDIBytes: Swift.Int)
    @objc deinit
    public var count: Swift.Int {
      get
    }
    public var timeStamp: Swift.Int {
      get
      set(newValue)
    }
    public func append(_ midiBytes: Swift.UInt8...)
    #if compiler(>=5.3) && $NoncopyableGenerics
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIPacket>) -> Result) -> Result
    #else
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIPacket>) -> Result) -> Result
    #endif
    public func withUnsafeMutableMIDIPacketPointer<Result>(_ body: (inout CoreMIDI.UnsafeMutableMIDIPacketPointer) -> Result) -> Result
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIPacketList {
  @available(macOS 10.15, iOS 13.0, *)
  public func unsafeSequence() -> CoreMIDI.MIDIPacketList.UnsafeSequence
}
#else
extension Swift.UnsafePointer where Pointee == CoreMIDI.MIDIPacketList {
  @available(macOS 10.15, iOS 13.0, *)
  public func unsafeSequence() -> CoreMIDI.MIDIPacketList.UnsafeSequence
}
#endif
extension CoreMIDI.MIDIPacketList {
  #if compiler(>=5.3) && $NoncopyableGenerics
  @available(macOS 10.15, iOS 13.0, *)
  public static func sizeInBytes(pktList: Swift.UnsafePointer<CoreMIDI.MIDIPacketList>) -> Swift.Int
  #else
  @available(macOS 10.15, iOS 13.0, *)
  public static func sizeInBytes(pktList: Swift.UnsafePointer<CoreMIDI.MIDIPacketList>) -> Swift.Int
  #endif
  @available(macOS 10.15, iOS 13.0, *)
  public struct UnsafeSequence : Swift.Sequence {
    public func makeIterator() -> CoreMIDI.MIDIPacketList.UnsafeSequence.Iterator
    public var count: Swift.Int {
      get
    }
    public struct Iterator : Swift.IteratorProtocol {
      public init(_ s: CoreMIDI.MIDIPacketList.UnsafeSequence)
      #if compiler(>=5.3) && $NoncopyableGenerics
      public mutating func next() -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
      #else
      public mutating func next() -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
      #endif
      @available(iOS 13.0, macOS 10.15, *)
      public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
    }
    @available(iOS 13.0, macOS 10.15, *)
    public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
  }
}
@available(macOS 10.15, iOS 13.0, *)
public struct UnsafeMutableMIDIPacketListPointer : Swift.Sequence {
  public var listSizeInBytes: Swift.Int {
    get
  }
  public var lastPacket: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacket>? {
    get
  }
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacketList>, byteSize: Swift.Int)
  #else
  public init(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacketList>, byteSize: Swift.Int)
  #endif
  #if compiler(>=5.3) && $NoncopyableGenerics
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacketList>?, byteSize: Swift.Int)
  #else
  public init?(_ p: Swift.UnsafeMutablePointer<CoreMIDI.MIDIPacketList>?, byteSize: Swift.Int)
  #endif
  public var count: Swift.Int {
    get
  }
  public mutating func clear()
  #if compiler(>=5.3) && $NoncopyableGenerics
  @discardableResult
  public mutating func append(timestamp: CoreMIDI.MIDITimeStamp, data: [Swift.UInt8]) -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
  #else
  @discardableResult
  public mutating func append(timestamp: CoreMIDI.MIDITimeStamp, data: [Swift.UInt8]) -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
  #endif
  public func makeIterator() -> CoreMIDI.MIDIPacketList.UnsafeSequence.Iterator
  @available(iOS 13.0, macOS 10.15, *)
  public typealias Element = Swift.UnsafePointer<CoreMIDI.MIDIPacket>
  @available(iOS 13.0, macOS 10.15, *)
  public typealias Iterator = CoreMIDI.MIDIPacketList.UnsafeSequence.Iterator
}
extension CoreMIDI.MIDIPacketList {
  @available(macOS 10.15, iOS 13.0, *)
  public class Builder {
    public init(byteSize: Swift.Int)
    @objc deinit
    #if compiler(>=5.3) && $NoncopyableGenerics
    @discardableResult
    public func append(timestamp: CoreMIDI.MIDITimeStamp, data: [Swift.UInt8]) -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
    #else
    @discardableResult
    public func append(timestamp: CoreMIDI.MIDITimeStamp, data: [Swift.UInt8]) -> Swift.UnsafePointer<CoreMIDI.MIDIPacket>?
    #endif
    public func clear()
    public var count: Swift.Int {
      get
    }
    #if compiler(>=5.3) && $NoncopyableGenerics
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIPacketList>) -> Result) -> Result
    #else
    public func withUnsafePointer<Result>(_ body: (Swift.UnsafePointer<CoreMIDI.MIDIPacketList>) -> Result) -> Result
    #endif
    public func withUnsafeMutableMIDIPacketListPointer<Result>(_ body: (inout CoreMIDI.UnsafeMutableMIDIPacketListPointer) -> Result) -> Result
  }
}
@available(*, deprecated, renamed: "MIDINoteAttribute.none")
@_alwaysEmitIntoClient public var kMIDINoteAttributeNone: Swift.Int {
  get { 0x0 }
}
@available(*, deprecated, renamed: "MIDINoteAttribute.manufacturerSpecific")
@_alwaysEmitIntoClient public var kMIDINoteAttributeManufacturerSpecific: Swift.Int {
  get { 0x1 }
}
@available(*, deprecated, renamed: "MIDINoteAttribute.profileSpecific")
@_alwaysEmitIntoClient public var kMIDINoteAttributeProfileSpecific: Swift.Int {
  get { 0x2 }
}
@available(*, deprecated, renamed: "MIDINoteAttribute.pitch")
@_alwaysEmitIntoClient public var kMIDINoteAttributePitch: Swift.Int {
  get { 0x3 }
}
